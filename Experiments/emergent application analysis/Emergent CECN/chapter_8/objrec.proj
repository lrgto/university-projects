// ta_Dump File v3.0 -- code v5.1.0.0
LeabraProject .projects[0] { 
  taBase_Group @.templates = [0] {
  };

  Doc_Group @.docs = [2] {
    taDoc @[0] { };
    taDoc @[1] { };
  };

  Wizard_Group @.wizards = [1] {
    LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };

      LayerWizElList @.layer_cfg = [3] {
	LayerWizEl @[0] { };
	LayerWizEl @[1] { };
	LayerWizEl @[2] { };
      };
    };
  };

  SelectEdit_Group @.edits = [1] {
    SelectEdit @[0] { 
      EditMbrItem_Group @.mbrs = [4] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
	EditMbrItem @[3] { };
	EditMbrItem_Group @.gp[0] = [7] { 
	  EditMbrItem @[0] { };
	  EditMbrItem @[1] { };
	  EditMbrItem @[2] { };
	  EditMbrItem @[3] { };
	  EditMbrItem @[4] { };
	  EditMbrItem @[5] { };
	  EditMbrItem @[6] { };
	};
      };

      EditMthItem_Group @.mths = [12] {
	EditMthItem @[0] { };
	EditMthItem @[1] { };
	EditMthItem @[2] { };
	EditMthItem @[3] { };
	EditMthItem @[4] { };
	EditMthItem @[5] { };
	EditMthItem @[6] { };
	EditMthItem @[7] { };
	EditMthItem @[8] { };
	EditMthItem @[9] { };
	EditMthItem @[10] { };
	EditMthItem @[11] { };
      };
    };
  };

  DataTable_Group @.data = [0] {
    DataTable_Group @.gp[0] = [1] { 
      DataTable @[0] { 
	DataTableCols @.data = [6] {
	  String_Data @[0] { };
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  double_Data @[2] { };
	  double_Data @[3] { };
	  double_Data @[4] { };
	  double_Data @[5] { };
	};
      };
    };
    DataTable_Group @.gp[1] = [4] { 
      DataTable @[0] { 
	DataTableCols @.data = [9] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  int_Data @[4] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[5] { };
	  float_Data @[6] { };
	  float_Data @[7] { };
	  String_Data @[8] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [8] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	  float_Data @[7] { };
	};
      };
      DataTable @[2] { 
	DataTableCols @.data = [9] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  String_Data @[4] { };
	  int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	};
      };
      DataTable @[3] { 
	DataTableCols @.data = [8] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	  float_Data @[7] { };
	};
      };
    };
    DataTable_Group @.gp[2] = [1] { 
      DataTable @[0] { 
	DataTableCols @.data = [4] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	  float_Data @[3] { };
	};
      };
    };
  };

  taBase_Group @.data_proc = [4] {
    taDataProc @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataAnal @[1] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataGen @[2] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taImageProc @[3] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
  };

  Program_Group @.programs = [8] {
    Program @[0] { 
      ProgObjList @.objs = [0] {
      };

      ProgType_List @.types = [3] {
	DynEnumType @[0] { 
	  DynEnumItem_List @.enums = [3] {
	    DynEnumItem @[0] { };
	    DynEnumItem @[1] { };
	    DynEnumItem @[2] { };
	  };
	};
	DynEnumType @[1] { 
	  DynEnumItem_List @.enums = [3] {
	    DynEnumItem @[0] { };
	    DynEnumItem @[1] { };
	    DynEnumItem @[2] { };
	  };
	};
	DynEnumType @[2] { 
	  DynEnumItem_List @.enums = [20] {
	    DynEnumItem @[0] { };
	    DynEnumItem @[1] { };
	    DynEnumItem @[2] { };
	    DynEnumItem @[3] { };
	    DynEnumItem @[4] { };
	    DynEnumItem @[5] { };
	    DynEnumItem @[6] { };
	    DynEnumItem @[7] { };
	    DynEnumItem @[8] { };
	    DynEnumItem @[9] { };
	    DynEnumItem @[10] { };
	    DynEnumItem @[11] { };
	    DynEnumItem @[12] { };
	    DynEnumItem @[13] { };
	    DynEnumItem @[14] { };
	    DynEnumItem @[15] { };
	    DynEnumItem @[16] { };
	    DynEnumItem @[17] { };
	    DynEnumItem @[18] { };
	    DynEnumItem @[19] { };
	  };
	};
      };

      ProgVar_List @.args = [3] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
      };

      ProgVar_List @.vars = [16] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
	ProgVar @[11] { };
	ProgVar @[12] { };
	ProgVar @[13] { };
	ProgVar @[14] { };
	ProgVar @[15] { };
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [5] {
	AssignExpr @[0] { };
	AssignExpr @[1] { };
	ResetDataRows @[2] { };
	Switch @[3] { 
	  ProgEl_List @.cases = [3] {
	    CaseBlock @[0] { 
	      ProgEl_List @.prog_code = [2] {
		ForLoop @[0] { 
		  ProgEl_List @.loop_code = [10] {
		    RandomCall @[0] { 
		      ProgArg_List @.meth_args = [2] {
			ProgArg @[0] { };
			ProgArg @[1] { };
		      };
		    };
		    RandomCall @[1] { 
		      ProgArg_List @.meth_args = [2] {
			ProgArg @[0] { };
			ProgArg @[1] { };
		      };
		    };
		    RandomCall @[2] { 
		      ProgArg_List @.meth_args = [2] {
			ProgArg @[0] { };
			ProgArg @[1] { };
		      };
		    };
		    RandomCall @[3] { 
		      ProgArg_List @.meth_args = [2] {
			ProgArg @[0] { };
			ProgArg @[1] { };
		      };
		    };
		    RandomCall @[4] { 
		      ProgArg_List @.meth_args = [1] {
			ProgArg @[0] { };
		      };
		    };
		    AssignExpr @[5] { };
		    AssignExpr @[6] { };
		    AddNewDataRow @[7] { };
		    DataVarProg @[8] { };
		    DataVarProg @[9] { };
		  };
		};
		DoneWritingDataRow @[1] { };
	      };
	    };
	    CaseBlock @[1] { 
	      ProgEl_List @.prog_code = [2] {
		ForLoop @[0] { 
		  ProgEl_List @.loop_code = [6] {
		    IfElse @[0] { 
		      ProgEl_List @.true_code = [5] {
			RandomCall @[0] { 
			  ProgArg_List @.meth_args = [2] {
			    ProgArg @[0] { };
			    ProgArg @[1] { };
			  };
			};
			RandomCall @[1] { 
			  ProgArg_List @.meth_args = [2] {
			    ProgArg @[0] { };
			    ProgArg @[1] { };
			  };
			};
			RandomCall @[2] { 
			  ProgArg_List @.meth_args = [2] {
			    ProgArg @[0] { };
			    ProgArg @[1] { };
			  };
			};
			RandomCall @[3] { 
			  ProgArg_List @.meth_args = [2] {
			    ProgArg @[0] { };
			    ProgArg @[1] { };
			  };
			};
			RandomCall @[4] { 
			  ProgArg_List @.meth_args = [2] {
			    ProgArg @[0] { };
			    ProgArg @[1] { };
			  };
			};
		      };

		      ProgEl_List @.false_code = [5] {
			RandomCall @[0] { 
			  ProgArg_List @.meth_args = [2] {
			    ProgArg @[0] { };
			    ProgArg @[1] { };
			  };
			};
			RandomCall @[1] { 
			  ProgArg_List @.meth_args = [2] {
			    ProgArg @[0] { };
			    ProgArg @[1] { };
			  };
			};
			RandomCall @[2] { 
			  ProgArg_List @.meth_args = [2] {
			    ProgArg @[0] { };
			    ProgArg @[1] { };
			  };
			};
			RandomCall @[3] { 
			  ProgArg_List @.meth_args = [2] {
			    ProgArg @[0] { };
			    ProgArg @[1] { };
			  };
			};
			RandomCall @[4] { 
			  ProgArg_List @.meth_args = [1] {
			    ProgArg @[0] { };
			  };
			};
		      };
		    };
		    AssignExpr @[1] { };
		    AssignExpr @[2] { };
		    AddNewDataRow @[3] { };
		    DataVarProg @[4] { };
		    DataVarProg @[5] { };
		  };
		};
		DoneWritingDataRow @[1] { };
	      };
	    };
	    CaseBlock @[2] { 
	      ProgEl_List @.prog_code = [2] {
		ForLoop @[0] { 
		  ProgEl_List @.loop_code = [10] {
		    RandomCall @[0] { 
		      ProgArg_List @.meth_args = [2] {
			ProgArg @[0] { };
			ProgArg @[1] { };
		      };
		    };
		    RandomCall @[1] { 
		      ProgArg_List @.meth_args = [2] {
			ProgArg @[0] { };
			ProgArg @[1] { };
		      };
		    };
		    RandomCall @[2] { 
		      ProgArg_List @.meth_args = [2] {
			ProgArg @[0] { };
			ProgArg @[1] { };
		      };
		    };
		    RandomCall @[3] { 
		      ProgArg_List @.meth_args = [2] {
			ProgArg @[0] { };
			ProgArg @[1] { };
		      };
		    };
		    RandomCall @[4] { 
		      ProgArg_List @.meth_args = [1] {
			ProgArg @[0] { };
		      };
		    };
		    AssignExpr @[5] { };
		    AssignExpr @[6] { };
		    AddNewDataRow @[7] { };
		    DataVarProg @[8] { };
		    DataVarProg @[9] { };
		  };
		};
		DoneWritingDataRow @[1] { };
	      };
	    };
	  };
	};
	ForLoop @[4] { 
	  ProgEl_List @.loop_code = [4] {
	    RandomCall @[0] { 
	      ProgArg_List @.meth_args = [2] {
		ProgArg @[0] { };
		ProgArg @[1] { };
	      };
	    };
	    RandomCall @[1] { 
	      ProgArg_List @.meth_args = [2] {
		ProgArg @[0] { };
		ProgArg @[1] { };
	      };
	    };
	    RandomCall @[2] { 
	      ProgArg_List @.meth_args = [2] {
		ProgArg @[0] { };
		ProgArg @[1] { };
	      };
	    };
	    RandomCall @[3] { 
	      ProgArg_List @.meth_args = [2] {
		ProgArg @[0] { };
		ProgArg @[1] { };
	      };
	    };
	  };
	};
      };
    };
    Program @[1] { 
      ProgObjList @.objs = [2] {
	taCanvas @[0] { };
	DataTable @[1] { 
	  DataTableCols @.data = [1] {
	    float_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	  };
	};
      };

      ProgType_List @.types = [1] {
	DynEnumType @[0] { 
	  DynEnumItem_List @.enums = [20] {
	    DynEnumItem @[0] { };
	    DynEnumItem @[1] { };
	    DynEnumItem @[2] { };
	    DynEnumItem @[3] { };
	    DynEnumItem @[4] { };
	    DynEnumItem @[5] { };
	    DynEnumItem @[6] { };
	    DynEnumItem @[7] { };
	    DynEnumItem @[8] { };
	    DynEnumItem @[9] { };
	    DynEnumItem @[10] { };
	    DynEnumItem @[11] { };
	    DynEnumItem @[12] { };
	    DynEnumItem @[13] { };
	    DynEnumItem @[14] { };
	    DynEnumItem @[15] { };
	    DynEnumItem @[16] { };
	    DynEnumItem @[17] { };
	    DynEnumItem @[18] { };
	    DynEnumItem @[19] { };
	  };
	};
      };

      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [18] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
	ProgVar @[11] { };
	ProgVar @[12] { };
	ProgVar @[13] { };
	ProgVar @[14] { };
	ProgVar @[15] { };
	ProgVar @[16] { };
	ProgVar @[17] { };
      };

      Function_List @.functions = [1] {
	Function @[0] { 
	  ProgVar_List @.args = [1] {
	    ProgVar @[0] { };
	  };

	  ProgEl_List @.fun_code = [2] {
	    ProgVars @[0] { 
	      ProgVar_List @.local_vars = [4] {
		ProgVar @[0] { };
		ProgVar @[1] { };
		ProgVar @[2] { };
		ProgVar @[3] { };
	      };
	    };
	    Switch @[1] { 
	      ProgEl_List @.cases = [6] {
		CaseBlock @[0] { 
		  ProgEl_List @.prog_code = [1] {
		    MethodCall @[0] { 
		      ProgArg_List @.meth_args = [4] {
			ProgArg @[0] { };
			ProgArg @[1] { };
			ProgArg @[2] { };
			ProgArg @[3] { };
		      };
		    };
		  };
		};
		CaseBlock @[1] { 
		  ProgEl_List @.prog_code = [1] {
		    MethodCall @[0] { 
		      ProgArg_List @.meth_args = [4] {
			ProgArg @[0] { };
			ProgArg @[1] { };
			ProgArg @[2] { };
			ProgArg @[3] { };
		      };
		    };
		  };
		};
		CaseBlock @[2] { 
		  ProgEl_List @.prog_code = [1] {
		    MethodCall @[0] { 
		      ProgArg_List @.meth_args = [4] {
			ProgArg @[0] { };
			ProgArg @[1] { };
			ProgArg @[2] { };
			ProgArg @[3] { };
		      };
		    };
		  };
		};
		CaseBlock @[3] { 
		  ProgEl_List @.prog_code = [1] {
		    MethodCall @[0] { 
		      ProgArg_List @.meth_args = [4] {
			ProgArg @[0] { };
			ProgArg @[1] { };
			ProgArg @[2] { };
			ProgArg @[3] { };
		      };
		    };
		  };
		};
		CaseBlock @[4] { 
		  ProgEl_List @.prog_code = [1] {
		    MethodCall @[0] { 
		      ProgArg_List @.meth_args = [4] {
			ProgArg @[0] { };
			ProgArg @[1] { };
			ProgArg @[2] { };
			ProgArg @[3] { };
		      };
		    };
		  };
		};
		CaseBlock @[5] { 
		  ProgEl_List @.prog_code = [1] {
		    MethodCall @[0] { 
		      ProgArg_List @.meth_args = [4] {
			ProgArg @[0] { };
			ProgArg @[1] { };
			ProgArg @[2] { };
			ProgArg @[3] { };
		      };
		    };
		  };
		};
	      };
	    };
	  };
	};
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [16] {
	ResetDataRows @[0] { };
	MethodCall @[1] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MethodCall @[2] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	AddNewDataRow @[3] { };
	MethodCall @[4] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	};
	MethodCall @[5] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[6] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[7] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	AssignExpr @[8] { };
	AssignExpr @[9] { };
	AssignExpr @[10] { };
	AssignExpr @[11] { };
	ForLoop @[12] { 
	  ProgEl_List @.loop_code = [2] {
	    AssignExpr @[0] { };
	    FunctionCall @[1] { 
	      ProgArg_List @.fun_args = [1] {
		ProgArg @[0] { };
	      };
	    };
	  };
	};
	Comment @[13] { };
	MethodCall @[14] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	DoneWritingDataRow @[15] { };
      };
    };
    Program @[2] { 
      ProgObjList @.objs = [3] {
	V1RetinaProc @[0] { 
	  VisRegionSpecBaseList @.regions = [1] {
	    V1RegionSpec @[0] { };
	  };
	};
	DataTable @[1] { 
	  DataTableCols @.data = [5] {
	    float_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    float_Data @[1] { };
	    float_Data @[2] { };
	    float_Data @[3] { };
	    String_Data @[4] { };
	  };
	};
	LayerWriter @[2] { 
	  LayerDataEl_List @.layer_data = [4] {
	    LayerWriterEl @[0] { };
	    LayerWriterEl @[1] { };
	    LayerWriterEl @[2] { };
	    LayerWriterEl @[3] { };
	  };
	};
      };

      ProgType_List @.types = [0] {
      };

      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [12] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
	ProgVar @[11] { };
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [2] {
	MethodCall @[0] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MethodCall @[1] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
      };

      ProgEl_List @.prog_code = [4] {
	IfElse @[0] { 
	  ProgEl_List @.true_code = [10] {
	    DataVarProg @[0] { };
	    DataVarProg @[1] { };
	    ProgramCall @[2] { 
	      ProgArg_List @.prog_args = [1] {
		ProgArg @[0] { };
	      };
	    };
	    MethodCall @[3] { 
	      ProgArg_List @.meth_args = [11] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
		ProgArg @[3] { };
		ProgArg @[4] { };
		ProgArg @[5] { };
		ProgArg @[6] { };
		ProgArg @[7] { };
		ProgArg @[8] { };
		ProgArg @[9] { };
		ProgArg @[10] { };
	      };
	    };
	    MethodCall @[4] { 
	      ProgArg_List @.meth_args = [0] {
	      };
	    };
	    Comment @[5] { };
	    MethodCall @[6] { 
	      ProgArg_List @.meth_args = [2] {
		ProgArg @[0] { };
		ProgArg @[1] { };
	      };
	    };
	    MethodCall @[7] { 
	      ProgArg_List @.meth_args = [5] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
		ProgArg @[3] { };
		ProgArg @[4] { };
	      };
	    };
	    AssignExpr @[8] { };
	    DataVarProg @[9] { };
	  };

	  ProgEl_List @.false_code = [0] {
	  };
	};
	MethodCall @[1] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[2] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	};
	DoneWritingDataRow @[3] { };
      };
    };
    Program @[3] { 
      ProgObjList @.objs = [0] {
      };

      ProgType_List @.types = [0] {
      };

      ProgVar_List @.args = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
      };

      ProgVar_List @.vars = [6] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [26] {
	IfReturn @[0] { };
	Comment @[1] { };
	MiscCall @[2] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MiscCall @[3] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	RegisterArgs @[4] { };
	Comment @[5] { };
	PrintExpr @[6] { };
	MethodCall @[7] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	};
	MiscCall @[8] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MiscCall @[9] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	ProgVarFmArg @[10] { };
	ProgVarFmArg @[11] { };
	Comment @[12] { };
	ProgVarFmArg @[13] { };
	ProgVarFmArg @[14] { };
	ProgVarFmArg @[15] { };
	ProgVarFmArg @[16] { };
	ProgVarFmArg @[17] { };
	Comment @[18] { };
	MethodCall @[19] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MethodCall @[20] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	MethodCall @[21] { 
	  ProgArg_List @.meth_args = [4] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	  };
	};
	MethodCall @[22] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	OtherProgramVar @[23] { };
	PrintExpr @[24] { };
	ProgramCall @[25] { 
	  ProgArg_List @.prog_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
      };
    };
    Program @[4] { 
      ProgObjList @.objs = [0] {
      };

      ProgType_List @.types = [0] {
      };

      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [0] {
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [1] {
	MethodCall @[0] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
      };
    };
    Program @[5] { 
      ProgObjList @.objs = [0] {
      };

      ProgType_List @.types = [0] {
      };

      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [0] {
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [2] {
	MethodCall @[0] { 
	  ProgArg_List @.meth_args = [5] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	    ProgArg @[4] { };
	  };
	};
	MethodCall @[1] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
      };
    };
    Program @[6] { 
      ProgObjList @.objs = [0] {
      };

      ProgType_List @.types = [0] {
      };

      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [0] {
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [1] {
	MethodCall @[0] { 
	  ProgArg_List @.meth_args = [5] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	    ProgArg @[4] { };
	  };
	};
      };
    };
    Program @[7] { 
      ProgObjList @.objs = [0] {
      };

      ProgType_List @.types = [0] {
      };

      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [4] {
	MethodCall @[0] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MemberAssign @[1] { };
	MethodCall @[2] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	MemberAssign @[3] { };
      };
    };
    Program_Group @.gp[0] = [9] { 
      Program @[0] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  NetCounterInit @[0] { };
	  WhileLoop @[1] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      NetCounterIncr @[1] { };
	    };
	  };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [1] {
	  RndSeed @[0] { };
	};

	ProgType_List @.types = [1] {
	  DynEnumType @[0] { 
	    DynEnumItem_List @.enums = [2] {
	      DynEnumItem @[0] { };
	      DynEnumItem @[1] { };
	    };
	  };
	};

	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [7] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [5] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  IfGuiPrompt @[4] { 
	    ProgEl_List @.yes_code = [2] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	      PrintExpr @[1] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [8] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[2] { };
	  If @[3] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	      PrintExpr @[1] { };
	    };
	  };
	  AssignExpr @[4] { };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfBreak @[2] { };
	      If @[3] { 
		ProgEl_List @.true_code = [1] {
		  ProgramCall @[0] { 
		    ProgArg_List @.prog_args = [1] {
		      ProgArg @[0] { };
		    };
		  };
		};
	      };
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[7] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @[2] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [1] {
	  DynEnumType @[0] { 
	    DynEnumItem_List @.enums = [2] {
	      DynEnumItem @[0] { };
	      DynEnumItem @[1] { };
	    };
	  };
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [10] {
	  ProgramCall @[0] { 
	    ProgArg_List @.prog_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  NetCounterInit @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetDataLoop @[5] { 
	    ProgEl_List @.loop_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  IfElse @[6] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  MethodCall @[7] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[8] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[9] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @[3] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [7] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  WhileLoop @[2] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  If @[4] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  ProgramCall @[5] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[6] { };
	};
      };
      Program @[4] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[4] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  If @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  If @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  NetUpdateView @[9] { };
	};
      };
      Program @[5] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetUpdateView @[1] { };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [9] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[7] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [8] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @[8] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [6] {
	  IfReturn @[0] { };
	  MiscCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MiscCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
    };
    Program_Group @.gp[1] = [8] { 
      Program @[0] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [1] {
	  DynEnumType @[0] { 
	    DynEnumItem_List @.enums = [1] {
	      DynEnumItem @[0] { };
	    };
	  };
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [8] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [14] {
	  ProgramCall @[0] { 
	    ProgArg_List @.prog_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	  NetCounterInit @[1] { };
	  MemberAssign @[2] { };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetDataLoop @[6] { 
	    ProgEl_List @.loop_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  MethodCall @[8] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[9] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[10] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[11] { };
	  ProgramCall @[12] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  ProgramCall @[13] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [8] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  WhileLoop @[2] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  If @[4] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  ProgramCall @[5] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  ProgramCall @[6] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[7] { };
	};
      };
      Program @[2] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[4] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  If @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  If @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  NetUpdateView @[9] { };
	};
      };
      Program @[3] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetUpdateView @[1] { };
	};
      };
      Program @[4] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [9] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[5] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [8] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  DataGroupProg @[1] { 
	    DataOpList @.ops = [3] {
	      DataGroupEl @[0] { };
	      DataGroupEl @[1] { };
	      DataGroupEl @[2] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  UserScript @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @[7] { 
	ProgObjList @.objs = [2] {
	  ActBasedRF @[0] { };
	  DataTable @[1] { 
	    DataTableCols @.data = [5] {
	      float_Data @[0] { };
	      float_Data @[1] { };
	      float_Data @[2] { };
	      float_Data @[3] { };
	      float_Data @[4] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [4] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [1] {
	  IfElse @[0] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	};
      };
    };
  };

  DataViewer_List @.viewers = [1] {
    MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
   };

      ToolBar_List @.toolbars = [1] {
	ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @[0] { };
     };
};
      };

      FrameViewer_List @.frames = [3] {
	tabBrowseViewer @[0] { };
	PanelViewer @[1] { };
	T3DataViewer @[2] { 
	  T3DataViewFrame_List @.frames = [5] {
	    T3DataViewFrame @[0] { 
	      T3DataView_List @.children = [2] {
		NetView @[0] { 
		  ScaleRange_List @.scale_ranges = [16] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		    ScaleRange @[2] { };
		    ScaleRange @[3] { };
		    ScaleRange @[4] { };
		    ScaleRange @[5] { };
		    ScaleRange @[6] { };
		    ScaleRange @[7] { };
		    ScaleRange @[8] { };
		    ScaleRange @[9] { };
		    ScaleRange @[10] { };
		    ScaleRange @[11] { };
		    ScaleRange @[12] { };
		    ScaleRange @[13] { };
		    ScaleRange @[14] { };
		    ScaleRange @[15] { };
		  };
		};
		GridTableView @[1] { 
		  T3DataView_List @.children = [5] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		    GridColView @[3] { };
		    GridColView @[4] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[1] { 
	      T3DataView_List @.children = [1] {
		GridTableView @[0] { 
		  T3DataView_List @.children = [1] {
		    GridColView @[0] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[2] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [8] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[3] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [4] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[4] { 
	      T3DataView_List @.children = [1] {
		GridTableView @[0] { 
		  T3DataView_List @.children = [5] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		    GridColView @[3] { };
		    GridColView @[4] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	  };
	};
      };

      DockViewer_List @.docks = [1] {
	ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @[0] { };
	    UserDataItem @[1] { };
	    UserDataItem @[2] { };
	    UserDataItem @[3] { };
	    UserDataItem @[4] { };
	    UserDataItem @[5] { };
     };
};
      };
    };
  };

  Network_Group @.networks = [1] {
    LeabraNetwork @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
	UserDataItem @[6] { };
	UserDataItem @[7] { };
	UserDataItem @[8] { };
	UserDataItem @[9] { };
	UserDataItem @[10] { };
	UserDataItem @[11] { };
	UserDataItem @[12] { };
	UserDataItem @[13] { };
	UserDataItem @[14] { };
	UserDataItem @[15] { };
	UserDataItem @[16] { };
	UserDataItem @[17] { };
	UserDataItem @[18] { };
   };

      BaseSpec_Group @.specs = [3] {
	DaModUnitSpec @[0] { 
	  BaseSpec_Group @.children = [2] {
	    DaModUnitSpec @[0] { 
	      BaseSpec_Group @.children = [0] {
	      };

	      Schedule @.noise_sched = [0] {
	      };
	    };
	    DaModUnitSpec @[1] { 
	      BaseSpec_Group @.children = [1] {
		DaModUnitSpec @[0] { 
		  BaseSpec_Group @.children = [0] {
		  };

		  Schedule @.noise_sched = [0] {
		  };
		};
	      };

	      Schedule @.noise_sched = [0] {
	      };
	    };
	  };

	  Schedule @.noise_sched = [0] {
	  };
	};
	LeabraLayerSpec @[1] { 
	  BaseSpec_Group @.children = [5] {
	    LeabraLayerSpec @[0] { 
	      BaseSpec_Group @.children = [0] {
	      };
	    };
	    LeabraLayerSpec @[1] { 
	      BaseSpec_Group @.children = [0] {
	      };
	    };
	    LeabraLayerSpec @[2] { 
	      BaseSpec_Group @.children = [0] {
	      };
	    };
	    LeabraLayerSpec @[3] { 
	      BaseSpec_Group @.children = [0] {
	      };
	    };
	    LeabraLayerSpec @[4] { 
	      BaseSpec_Group @.children = [0] {
	      };
	    };
	  };
	};
	LeabraConSpec @[2] { 
	  BaseSpec_Group @.children = [3] {
	    LeabraBiasSpec @[0] { 
	      BaseSpec_Group @.children = [2] {
		LeabraBiasSpec @[0] { 
		  BaseSpec_Group @.children = [0] {
		  };

		  Schedule @.lrate_sched = [3] {
		    SchedItem @[0] { };
		    SchedItem @[1] { };
		    SchedItem @[2] { };
		  };
		};
		LeabraBiasSpec @[1] { 
		  BaseSpec_Group @.children = [0] {
		  };

		  Schedule @.lrate_sched = [3] {
		    SchedItem @[0] { };
		    SchedItem @[1] { };
		    SchedItem @[2] { };
		  };
		};
	      };

	      Schedule @.lrate_sched = [3] {
		SchedItem @[0] { };
		SchedItem @[1] { };
		SchedItem @[2] { };
	      };
	    };
	    LeabraConSpec @[1] { 
	      BaseSpec_Group @.children = [1] {
		LeabraBiasSpec @[0] { 
		  BaseSpec_Group @.children = [0] {
		  };

		  Schedule @.lrate_sched = [3] {
		    SchedItem @[0] { };
		    SchedItem @[1] { };
		    SchedItem @[2] { };
		  };
		};
	      };

	      Schedule @.lrate_sched = [3] {
		SchedItem @[0] { };
		SchedItem @[1] { };
		SchedItem @[2] { };
	      };
	    };
	    LeabraConSpec @[2] { 
	      BaseSpec_Group @.children = [5] {
		LeabraConSpec @[0] { 
		  BaseSpec_Group @.children = [0] {
		  };

		  Schedule @.lrate_sched = [3] {
		    SchedItem @[0] { };
		    SchedItem @[1] { };
		    SchedItem @[2] { };
		  };
		};
		LeabraConSpec @[1] { 
		  BaseSpec_Group @.children = [0] {
		  };

		  Schedule @.lrate_sched = [3] {
		    SchedItem @[0] { };
		    SchedItem @[1] { };
		    SchedItem @[2] { };
		  };
		};
		LeabraConSpec @[2] { 
		  BaseSpec_Group @.children = [0] {
		  };

		  Schedule @.lrate_sched = [3] {
		    SchedItem @[0] { };
		    SchedItem @[1] { };
		    SchedItem @[2] { };
		  };
		};
		LeabraConSpec @[3] { 
		  BaseSpec_Group @.children = [0] {
		  };

		  Schedule @.lrate_sched = [3] {
		    SchedItem @[0] { };
		    SchedItem @[1] { };
		    SchedItem @[2] { };
		  };
		};
		LeabraConSpec @[4] { 
		  BaseSpec_Group @.children = [0] {
		  };

		  Schedule @.lrate_sched = [3] {
		    SchedItem @[0] { };
		    SchedItem @[1] { };
		    SchedItem @[2] { };
		  };
		};
	      };

	      Schedule @.lrate_sched = [3] {
		SchedItem @[0] { };
		SchedItem @[1] { };
		SchedItem @[2] { };
	      };
	    };
	  };

	  Schedule @.lrate_sched = [3] {
	    SchedItem @[0] { };
	    SchedItem @[1] { };
	    SchedItem @[2] { };
	  };
	};
	BaseSpec_Group @.gp[0] = [5] { 
	  FullPrjnSpec @[0] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  TiledGpRFPrjnSpec @[1] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  TiledGpRFPrjnSpec @[2] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  GpOneToOnePrjnSpec @[3] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  OneToOnePrjnSpec @[4] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	};
      };

      Layer_Group @.layers = [5] {
	LeabraV1Layer @[0] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [0] {
	    LeabraUnit_Group @.gp[0] = [8] { 
	    };
	    LeabraUnit_Group @.gp[1] = [8] { 
	    };
	    LeabraUnit_Group @.gp[2] = [8] { 
	    };
	    LeabraUnit_Group @.gp[3] = [8] { 
	    };
	    LeabraUnit_Group @.gp[4] = [8] { 
	    };
	    LeabraUnit_Group @.gp[5] = [8] { 
	    };
	    LeabraUnit_Group @.gp[6] = [8] { 
	    };
	    LeabraUnit_Group @.gp[7] = [8] { 
	    };
	    LeabraUnit_Group @.gp[8] = [8] { 
	    };
	    LeabraUnit_Group @.gp[9] = [8] { 
	    };
	    LeabraUnit_Group @.gp[10] = [8] { 
	    };
	    LeabraUnit_Group @.gp[11] = [8] { 
	    };
	    LeabraUnit_Group @.gp[12] = [8] { 
	    };
	    LeabraUnit_Group @.gp[13] = [8] { 
	    };
	    LeabraUnit_Group @.gp[14] = [8] { 
	    };
	    LeabraUnit_Group @.gp[15] = [8] { 
	    };
	    LeabraUnit_Group @.gp[16] = [8] { 
	    };
	    LeabraUnit_Group @.gp[17] = [8] { 
	    };
	    LeabraUnit_Group @.gp[18] = [8] { 
	    };
	    LeabraUnit_Group @.gp[19] = [8] { 
	    };
	    LeabraUnit_Group @.gp[20] = [8] { 
	    };
	    LeabraUnit_Group @.gp[21] = [8] { 
	    };
	    LeabraUnit_Group @.gp[22] = [8] { 
	    };
	    LeabraUnit_Group @.gp[23] = [8] { 
	    };
	    LeabraUnit_Group @.gp[24] = [8] { 
	    };
	    LeabraUnit_Group @.gp[25] = [8] { 
	    };
	    LeabraUnit_Group @.gp[26] = [8] { 
	    };
	    LeabraUnit_Group @.gp[27] = [8] { 
	    };
	    LeabraUnit_Group @.gp[28] = [8] { 
	    };
	    LeabraUnit_Group @.gp[29] = [8] { 
	    };
	    LeabraUnit_Group @.gp[30] = [8] { 
	    };
	    LeabraUnit_Group @.gp[31] = [8] { 
	    };
	    LeabraUnit_Group @.gp[32] = [8] { 
	    };
	    LeabraUnit_Group @.gp[33] = [8] { 
	    };
	    LeabraUnit_Group @.gp[34] = [8] { 
	    };
	    LeabraUnit_Group @.gp[35] = [8] { 
	    };
	    LeabraUnit_Group @.gp[36] = [8] { 
	    };
	    LeabraUnit_Group @.gp[37] = [8] { 
	    };
	    LeabraUnit_Group @.gp[38] = [8] { 
	    };
	    LeabraUnit_Group @.gp[39] = [8] { 
	    };
	    LeabraUnit_Group @.gp[40] = [8] { 
	    };
	    LeabraUnit_Group @.gp[41] = [8] { 
	    };
	    LeabraUnit_Group @.gp[42] = [8] { 
	    };
	    LeabraUnit_Group @.gp[43] = [8] { 
	    };
	    LeabraUnit_Group @.gp[44] = [8] { 
	    };
	    LeabraUnit_Group @.gp[45] = [8] { 
	    };
	    LeabraUnit_Group @.gp[46] = [8] { 
	    };
	    LeabraUnit_Group @.gp[47] = [8] { 
	    };
	    LeabraUnit_Group @.gp[48] = [8] { 
	    };
	    LeabraUnit_Group @.gp[49] = [8] { 
	    };
	    LeabraUnit_Group @.gp[50] = [8] { 
	    };
	    LeabraUnit_Group @.gp[51] = [8] { 
	    };
	    LeabraUnit_Group @.gp[52] = [8] { 
	    };
	    LeabraUnit_Group @.gp[53] = [8] { 
	    };
	    LeabraUnit_Group @.gp[54] = [8] { 
	    };
	    LeabraUnit_Group @.gp[55] = [8] { 
	    };
	    LeabraUnit_Group @.gp[56] = [8] { 
	    };
	    LeabraUnit_Group @.gp[57] = [8] { 
	    };
	    LeabraUnit_Group @.gp[58] = [8] { 
	    };
	    LeabraUnit_Group @.gp[59] = [8] { 
	    };
	    LeabraUnit_Group @.gp[60] = [8] { 
	    };
	    LeabraUnit_Group @.gp[61] = [8] { 
	    };
	    LeabraUnit_Group @.gp[62] = [8] { 
	    };
	    LeabraUnit_Group @.gp[63] = [8] { 
	    };
	    LeabraUnit_Group @.gp[64] = [8] { 
	    };
	    LeabraUnit_Group @.gp[65] = [8] { 
	    };
	    LeabraUnit_Group @.gp[66] = [8] { 
	    };
	    LeabraUnit_Group @.gp[67] = [8] { 
	    };
	    LeabraUnit_Group @.gp[68] = [8] { 
	    };
	    LeabraUnit_Group @.gp[69] = [8] { 
	    };
	    LeabraUnit_Group @.gp[70] = [8] { 
	    };
	    LeabraUnit_Group @.gp[71] = [8] { 
	    };
	    LeabraUnit_Group @.gp[72] = [8] { 
	    };
	    LeabraUnit_Group @.gp[73] = [8] { 
	    };
	    LeabraUnit_Group @.gp[74] = [8] { 
	    };
	    LeabraUnit_Group @.gp[75] = [8] { 
	    };
	    LeabraUnit_Group @.gp[76] = [8] { 
	    };
	    LeabraUnit_Group @.gp[77] = [8] { 
	    };
	    LeabraUnit_Group @.gp[78] = [8] { 
	    };
	    LeabraUnit_Group @.gp[79] = [8] { 
	    };
	    LeabraUnit_Group @.gp[80] = [8] { 
	    };
	    LeabraUnit_Group @.gp[81] = [8] { 
	    };
	    LeabraUnit_Group @.gp[82] = [8] { 
	    };
	    LeabraUnit_Group @.gp[83] = [8] { 
	    };
	    LeabraUnit_Group @.gp[84] = [8] { 
	    };
	    LeabraUnit_Group @.gp[85] = [8] { 
	    };
	    LeabraUnit_Group @.gp[86] = [8] { 
	    };
	    LeabraUnit_Group @.gp[87] = [8] { 
	    };
	    LeabraUnit_Group @.gp[88] = [8] { 
	    };
	    LeabraUnit_Group @.gp[89] = [8] { 
	    };
	    LeabraUnit_Group @.gp[90] = [8] { 
	    };
	    LeabraUnit_Group @.gp[91] = [8] { 
	    };
	    LeabraUnit_Group @.gp[92] = [8] { 
	    };
	    LeabraUnit_Group @.gp[93] = [8] { 
	    };
	    LeabraUnit_Group @.gp[94] = [8] { 
	    };
	    LeabraUnit_Group @.gp[95] = [8] { 
	    };
	    LeabraUnit_Group @.gp[96] = [8] { 
	    };
	    LeabraUnit_Group @.gp[97] = [8] { 
	    };
	    LeabraUnit_Group @.gp[98] = [8] { 
	    };
	    LeabraUnit_Group @.gp[99] = [8] { 
	    };
	  };
	};
	LeabraLayer @[1] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [0] {
	    LeabraUnit_Group @.gp[0] = [36] { 
	    };
	    LeabraUnit_Group @.gp[1] = [36] { 
	    };
	    LeabraUnit_Group @.gp[2] = [36] { 
	    };
	    LeabraUnit_Group @.gp[3] = [36] { 
	    };
	    LeabraUnit_Group @.gp[4] = [36] { 
	    };
	    LeabraUnit_Group @.gp[5] = [36] { 
	    };
	    LeabraUnit_Group @.gp[6] = [36] { 
	    };
	    LeabraUnit_Group @.gp[7] = [36] { 
	    };
	    LeabraUnit_Group @.gp[8] = [36] { 
	    };
	    LeabraUnit_Group @.gp[9] = [36] { 
	    };
	    LeabraUnit_Group @.gp[10] = [36] { 
	    };
	    LeabraUnit_Group @.gp[11] = [36] { 
	    };
	    LeabraUnit_Group @.gp[12] = [36] { 
	    };
	    LeabraUnit_Group @.gp[13] = [36] { 
	    };
	    LeabraUnit_Group @.gp[14] = [36] { 
	    };
	    LeabraUnit_Group @.gp[15] = [36] { 
	    };
	  };
	};
	LeabraLayer @[2] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [100] {
	  };
	};
	LeabraLayer @[3] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [20] {
	  };
	};
	LeabraLayer @[4] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [1600] {
	  };
	};
      };

      NetViewObj_Group @.view_objs = [0] {
      };
    };
  };
};
LeabraProject .projects[0] {
 name="LeabraProject_0";
 desc=;
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 wiki_url {
  sync=0;
  wiki=;
  url=;
 };
 templates {
  name=;
  el_typ=taBase;
  el_def=0;
 };
 docs {
  name=;
  el_typ=taDoc;
  el_def=0;
  taDoc @[0] {
   name="ProjectDocs";
   desc=;
   auto_open=1;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head></head>
<body>
= Object Recognition =

* To start, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open this documentation in a separate window that you can more easily come back to.  Alternatively, you can always return by clicking on the <code>ProjectDocs</code> tab at the top of this middle panel.

== Network Structure ==

We begin by looking at the network structure.  This model uses an updated visual processing front end, which results in significantly better performance in this model and other larger-scale models.  It goes straight from the visual input image through oriented edge detectors in the V1 layer, so there is no separate LGN structure in the model (in contrast to model described in the textbook).  The V1 layer has a 10x10 large-scale grid structure, where each of these grid elements represents one hypercolumn of units. Each hypercolumn contains a group of 8 (4x2) units, which process a localized patch of the input image.  Neighboring groups process half-overlapping regions of the image.  In addition to connectivity, these groups organize the inhibition within the layer.  The kWTA level is set to 1 unit within a V1 column, and there is a special more flexible inhibition scheme that spreads this inhibition across different columns: each column gets the maximum of its own inhibition or .6 times the inhibition of the column in the layer that has the highest inhibition level.  This ensures that columns not receiving a significantly strong input will not be active (because they would require less than the .6 * max inhibition), while those that do receive a strong input compute their own standard kwta value.  This dynamic could be achieved through diffuse lateral excitatory connections between columns synapsing onto inhibitory interneurons, and a nonlinear integration of this excitation. 

The V2 layer is also organized into a grid of hypercolumns, this time 4x4 in size, with each hypercolumn having 36 units (6x6).  As with V1, inhibition operates at both the hypercolumn and entire layer scales here, with 10%  activity per hypercolumn.  Each hypercolumn of V2 units receives from 4x4 V1 hypercolumns, with neighboring columns again having half-overlapping receptive fields.  Next, the V4_IT layer represents just a single hypercolumn of units (10x10 or 100 units) within a single inhibitory group, and receives from the entire V2 layer.  Finally, the Output layer has 20 units, one for each of the different objects.

* You can view the patterns of connectivity described above by clicking on r.wt, and then on units in the various layers.

== Training ==

Now, let's see how the network is trained.  

* First, go back to viewing act in the networks display.  Then, do <code>Train: Init</code> and <code>Step Settle</code> in the control panel.

You will see the minus phase of settling for the input image, which is one of the shapes shown in Figure 8.12 in the textbook, at a random location, size and slight rotation in the plane.  The full bitmap image is shown in the display on the upper right of the network, and the patterns on the V1 input layer are the result of processing with oriented edge detctor filters, like those that developed in the v1rf model.  ''Note that this differs from the original model described in the text.''

* Press Step Settle again to see the plus phase.  You can then continue to Step Trial through a series of inputs to get a feel for what some of the different input patterns look like.

Because it takes a while for this network to be trained, we will just load the weights from a trained network.  The network was trained for 100 epochs of 100 object inputs per epoch, or 10,000 object presentations. However, it took only roughly 50 epochs (5,000 object presentations) for performance to approach asymptote. With all of the variation in the way a given input can be presented, this does not represent all that much sampling of the space of variability.

* Load the weights using <code>LoadWeights</code> on the control panel, and select <code>objrec_train1.wts.gz</code>.  Then, Step Settle a couple of times to see the minus and plus phases of the trained network as it performs the object recognition task.

You should see that the plus and minus phase output states are usually the same, meaning that the network is correctly recognizing most of the objects being presented. 

To provide a more comprehensive test of its performance, you can run the testing program, which runs through 1000 presentations of the objects and records the overall level of error.  Because this may take a while, you can also just load the resulting log file.

* To run the test, do Test: Init and Run.  To load the log file, do <code>LoadTestData</code> and select <code>objrec_test1.tst.dat</code>, and then click on the [[.T3Tab.TestErrorData]] to see the resulting graph.

You will see that error rates are generally below 5% (and often zero) except for the two final objects which the network was never trained on (which it always gets wrong).  Thus, the network shows quite good performance at this challenging task of recognizing objects in a location-invariant and size-invariant manner.

== Receptive Field Analysis ==

Having seen that the network is solving this difficult problem, the obvious next question is, \"how?\".  To answer this, we need to examine how input patterns are transformed over the successive layers of the network.  We do this by computing the ''receptive fields'' of units in the V2 and V4_IT layers.  The receptive field essentially means the range of different stimuli that a given unit in the network responds to -- what it is tuned to detect.  During the Test process, the system computes an activation-based receptive field for the layer listed in the control panel (ActBasedRField trg_lay_name), which should be V2 to start with.

The activation-based receptive field computes the patterns of activity across all the layers in the network, weighted by the activity of the units in the target layer.  If a target unit (e.g., a unit in V2) is not active, then the current activity pattern across all the other layers doesn't count toward that unit's overall receptive field.  When the unit is active, the activity patterns do count, and do so in proportion to the unit's activity.  This weighted-average computation ends up producing a useful aggregate picture of what tends to activate that unit.  Of particular interest is activity in the Image layer, which is just a copy of the input image, not directly connected to anything, and used only for this statistic.

* Click on the [[.T3Tab.ActRFData]] tab -- if you ran the test above, then the results for V2 should be there.  Otherwise, in the ActRFData middle panel tab, at the bottom, click on <code>Load Any Data</code> and select <code>objrec_actrf_v2.dat</code>, which should then populate the display with lots of colorful data.  You can also use the Load ActRFData button in the control panel to do the same thing.

The columns show the different layers of the network, with the right-most one being the input Image column, which we will focus on first.  Change to the red arrow (interactive) mode (can also just press the ESC key after clicking in the right panel), and scroll the right scroll bar down, while noting the kinds of patterns you observe in the Image column.  Each row of the table corresponds to a different V2 unit -- you can see which one by noting the brightest yellow unit in the V2 layer -- it starts in the lower left and goes within hypercolumn first, to the upper right.

As shown schematically in Figure 8.10 in the textbook, you should see that these V2 units are encoding simple conjunctions of line elements, in a small range of locations within the retinal input.  The fact that the respond across multiple locations makes the weight patterns seem somewhat smeared out, but that is a good indication that they are performing a critical invariance role.

<hr>

'''Question 8.4''' <em> Explain the significance of the level of conjunctive representations and spatial invariance observed in the V2 receptive fields, in terms of the overall computation performed by the network.</em>

<hr>

* Continue to scroll through the V2 units, but now notice the activation based receptive field for the Output units.

You should see that there are typically a handfull of output units (i.e., objects) that each V2 unit is strongly co-activated with. This indicates a distributed representation, where each V2 unit participates in encoding multiple different objects.

<hr>

'''Question 8.5''' <em> Using the images of the objects shown in Figure 8.12 in the textbook, (which are in the same configuration as the output units), explain one V2 unit's participation in a particular output representation based on the features shown in its input receptive fields.  (Hint: Pick a unit that is particularly selective for specific input patterns and specific output units, because this makes things easier to see.)</em>

<hr>

* Next, do LoadActRFData to load the <code>objrec_actrf_v4it.dat</code> data for the V4_IT layer.  Scroll through to observe the activation based receptive fields for the Image inputs and the Output layer.

You should observe much more complex patterns of line orientations, distributed over more of the input, and fewer, more strongly-defined Output receptive fields.  

<hr>

'''Question 8.6''' <em> Based on your probing of the V4 units, do they appear to code for entire objects, or just parts of different objects?  Explain.</em>

<hr>

One can also compare the relative selectivity of these V4 units for particular output units (objects) as compared to the V2 units.  By focusing specifically on the number of objects a given unit clearly ''doesn't'' participate in, it should be clear that the V4 units are more selective than the V2 units, which substantiates the idea that the V4 units are encoding more complex combinations of features that are shared by fewer objects (thus making them more selective to particular subsets of objects.  Thus, we see evidence here of the hierarchical increase in featural complexity required to encode featural relationships while also producing spatial invariance.

<hr>

'''Question 8.7''' <em> This question is no longer applicable, as the associated form of analysis is not used for this model anymore.  </em>

<hr>

== Summary and Discussion of Receptive Field Analyses ==

Using the activation-based receptive field technique, we have obtained some insight into the way this network performs spatially invariant object recognition, gradually over multiple levels of processing.  Similarly, the complexity of the featural representations increases with increasing levels in the hierarchy.  By doing both of these simultaneously and in stages over multiple levels, the network is able to recognize objects in an environment that depends critically on the detailed spatial arrangement of the constituent features, thereby apparently avoiding the binding problem described previously.

You may be wondering why the V2 and V4 representations have their respective properties -- why did the network develop in this way?  In terms of the degree of spatial invariance, it should be clear that the patterns of connectivity restrict the degree of invariance possible in V2, whereas the V4 neurons receive from the entire visual field (in this small-scale model), and so are in a position to have fully invariant representations.  Also, the V4 representations can be more invariant, and more complex because they build off of limited invariance and featural complexity in the V2 layer.  This ability for subsequent layers to build off of the transformations performed in earlier layers is a central general principle of cognition (see Chapter 7 in the textbook).

The representational properties you observed here can have important functional implications.  For example, in the next section, we will see that the nature of the V4 representations can play an important role in enabling the network to generalize effectively.  To the extent that V4 representations encode complex object features, and not objects themselves, these representations can be reused for novel objects.  Because the network can already form relatively invariant versions of these V4 representations, their reuse for novel objects will mean that the invariance transformation itself will generalize to novel objects.

== Generalization Test ==

In addition to all of the above receptive field measures of the network's performance, we can perform a behavioral test of its ability to generalize in a spatially invariant manner, using the two objects (numbers 18 and 19 in Figure 8.12) that were not presented to the network during training.  We can now train on these two objects in a restricted set of spatial locations and sizes, and assess the network's ability to respond to these items in novel locations and sizes.  Presumably, the bulk of what the network needs to do is learn an association between the V4_IT representations and the appropriate output units, and good generalization should result to all other spatial locations.

In addition to presenting the novel objects during training, we also need to present familiar objects; otherwise the network will suffer from ''catastrophic interference'' (see textbook Chapters 7 and 9 for more discussion of this issue).  The following procedure was used.  On each trial, there was a 1 in 4 chance that a novel object would be presented, and 3 in 4 chance that a familiar one was presented.  If a novel object was presented, its location, scaling and rotation parameters were chosen using .5 of the maximum range of these values in the original training.  Given that these 4 factors (translation in x, translation in y, size, and rotation) are combinatorial, that means that roughly .5^4  or .0625 of the total combinatorial space was explored.  If a familiar object was presented, then its size and position was chosen completely at random from all the possibilities.  This procedure was repeated for 60 epochs of 100 objects per epoch, with a learning rate of .01 for 10 epochs followed by .001 for 50.  Importantly, the learning rate in everything but the V4_IT to Output connections was set to zero, to restrict learning to that pathway and minimize interference to these deeper pathways.  In the brain, it is very likely that these earlier areas of the visual system experience less plasticity than higher areas as the system matures.

* To setup the system for this form of generalization training, click the GenTrain button in the Control Panel.  This loads the objrec_train1.wts.gz weights, sets the epoch counter to 90 to get a learning rate of .01 for 10 epochs, and sets the environment generation to be of the form described above.  Once you do this, you can just do Train: Init and '''NOT''' initialize the weights, followed by Run.  This could take 10s of minutes to several hours, depending on your computer.  Thus, you can bypass this step by doing LoadWeights and selecting the objrec_train2.wts.gz file

* After the network is trained, you can then run the testing (Test: Init, Run) as before, or just load the test data from objrec_test2.tst.dat.

The results show that the network got around 80% correct (roughly 20% error) on the new 18 and 19 patterns.  This is given training on only 6% of the space, suggesting that the network has learned generalized invariance transforms that can be applied to novel objects.  Given the restriction of learning to the V4_IT to Output pathway, we can be certain that no additional learning in lower pathways had to be done to encode these novel objects.

To summarize, these generalization results demonstrate that the hierarchical series of representations can operate effectively on novel stimuli, as long as these stimuli possess structural features in common with other familiar objects.  The network has learned to represent combinations of these features in terms of increasingly complex combinations that are also increasingly spatially invariant.  In the present case, we have facilitated generalization by ensuring that the novel objects are built out of the same line features as the other objects.  Although we expect that natural objects also share a vocabulary of complex features, and that learning would discover and exploit them to achieve a similarly generalizable invariance mapping, this remains to be demonstrated for more realistic kinds of objects. One prediction that this model makes is that the generalization of the invariance mapping will likely be a function of featural similarity with known objects, so one might expect a continuum of generalization performance in people (and in a more elaborate model).

</body>
</html>
";
   html_text="<html><head></head><body>
<h1> Object Recognition </h1>
<p>
</p><ul><li> To start, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open this documentation in a separate window that you can more easily come back to.  Alternatively, you can always return by clicking on the <code>ProjectDocs</code> tab at the top of this middle panel.
</li></ul>
<h2> Network Structure </h2>
<p>
We begin by looking at the network structure.  This model uses an updated visual processing front end, which results in significantly better performance in this model and other larger-scale models.  It goes straight from the visual input image through oriented edge detectors in the V1 layer, so there is no separate LGN structure in the model (in contrast to model described in the textbook).  The V1 layer has a 10x10 large-scale grid structure, where each of these grid elements represents one hypercolumn of units. Each hypercolumn contains a group of 8 (4x2) units, which process a localized patch of the input image.  Neighboring groups process half-overlapping regions of the image.  In addition to connectivity, these groups organize the inhibition within the layer.  The kWTA level is set to 1 unit within a V1 column, and there is a special more flexible inhibition scheme that spreads this inhibition across different columns: each column gets the maximum of its own inhibition or .6 times the inhibition of the column in the layer that has the highest inhibition level.  This ensures that columns not receiving a significantly strong input will not be active (because they would require less than the .6 * max inhibition), while those that do receive a strong input compute their own standard kwta value.  This dynamic could be achieved through diffuse lateral excitatory connections between columns synapsing onto inhibitory interneurons, and a nonlinear integration of this excitation. 
</p><p>
The V2 layer is also organized into a grid of hypercolumns, this time 4x4 in size, with each hypercolumn having 36 units (6x6).  As with V1, inhibition operates at both the hypercolumn and entire layer scales here, with 10%  activity per hypercolumn.  Each hypercolumn of V2 units receives from 4x4 V1 hypercolumns, with neighboring columns again having half-overlapping receptive fields.  Next, the V4_IT layer represents just a single hypercolumn of units (10x10 or 100 units) within a single inhibitory group, and receives from the entire V2 layer.  Finally, the Output layer has 20 units, one for each of the different objects.
</p><p>
</p><ul><li> You can view the patterns of connectivity described above by clicking on r.wt, and then on units in the various layers.
</li></ul>
<h2> Training </h2>
<p>
Now, let's see how the network is trained.  
</p><p>
</p><ul><li> First, go back to viewing act in the networks display.  Then, do <code>Train: Init</code> and <code>Step Settle</code> in the control panel.
</li></ul>
You will see the minus phase of settling for the input image, which is one of the shapes shown in Figure 8.12 in the textbook, at a random location, size and slight rotation in the plane.  The full bitmap image is shown in the display on the upper right of the network, and the patterns on the V1 input layer are the result of processing with oriented edge detctor filters, like those that developed in the v1rf model.   <i>Note that this differs from the original model described in the text.</i> 
<p>
</p><ul><li> Press Step Settle again to see the plus phase.  You can then continue to Step Trial through a series of inputs to get a feel for what some of the different input patterns look like.
</li></ul>
Because it takes a while for this network to be trained, we will just load the weights from a trained network.  The network was trained for 100 epochs of 100 object inputs per epoch, or 10,000 object presentations. However, it took only roughly 50 epochs (5,000 object presentations) for performance to approach asymptote. With all of the variation in the way a given input can be presented, this does not represent all that much sampling of the space of variability.
<p>
</p><ul><li> Load the weights using <code>LoadWeights</code> on the control panel, and select <code>objrec_train1.wts.gz</code>.  Then, Step Settle a couple of times to see the minus and plus phases of the trained network as it performs the object recognition task.
</li></ul>
You should see that the plus and minus phase output states are usually the same, meaning that the network is correctly recognizing most of the objects being presented. 
<p>
To provide a more comprehensive test of its performance, you can run the testing program, which runs through 1000 presentations of the objects and records the overall level of error.  Because this may take a while, you can also just load the resulting log file.
</p><p>
</p><ul><li> To run the test, do Test: Init and Run.  To load the log file, do <code>LoadTestData</code> and select <code>objrec_test1.tst.dat</code>, and then click on the <a href=\"ta:.T3Tab.TestErrorData\">TestErrorData</a> to see the resulting graph.
</li></ul>
You will see that error rates are generally below 5% (and often zero) except for the two final objects which the network was never trained on (which it always gets wrong).  Thus, the network shows quite good performance at this challenging task of recognizing objects in a location-invariant and size-invariant manner.
<p>
</p><h2> Receptive Field Analysis </h2>
<p>
Having seen that the network is solving this difficult problem, the obvious next question is, \"how?\".  To answer this, we need to examine how input patterns are transformed over the successive layers of the network.  We do this by computing the  <i>receptive fields</i>  of units in the V2 and V4_IT layers.  The receptive field essentially means the range of different stimuli that a given unit in the network responds to -- what it is tuned to detect.  During the Test process, the system computes an activation-based receptive field for the layer listed in the control panel (ActBasedRField trg_lay_name), which should be V2 to start with.
</p><p>
The activation-based receptive field computes the patterns of activity across all the layers in the network, weighted by the activity of the units in the target layer.  If a target unit (e.g., a unit in V2) is not active, then the current activity pattern across all the other layers doesn't count toward that unit's overall receptive field.  When the unit is active, the activity patterns do count, and do so in proportion to the unit's activity.  This weighted-average computation ends up producing a useful aggregate picture of what tends to activate that unit.  Of particular interest is activity in the Image layer, which is just a copy of the input image, not directly connected to anything, and used only for this statistic.
</p><p>
</p><ul><li> Click on the <a href=\"ta:.T3Tab.ActRFData\">ActRFData</a> tab -- if you ran the test above, then the results for V2 should be there.  Otherwise, in the ActRFData middle panel tab, at the bottom, click on <code>Load Any Data</code> and select <code>objrec_actrf_v2.dat</code>, which should then populate the display with lots of colorful data.  You can also use the Load ActRFData button in the control panel to do the same thing.
</li></ul>
The columns show the different layers of the network, with the right-most one being the input Image column, which we will focus on first.  Change to the red arrow (interactive) mode (can also just press the ESC key after clicking in the right panel), and scroll the right scroll bar down, while noting the kinds of patterns you observe in the Image column.  Each row of the table corresponds to a different V2 unit -- you can see which one by noting the brightest yellow unit in the V2 layer -- it starts in the lower left and goes within hypercolumn first, to the upper right.
<p>
As shown schematically in Figure 8.10 in the textbook, you should see that these V2 units are encoding simple conjunctions of line elements, in a small range of locations within the retinal input.  The fact that the respond across multiple locations makes the weight patterns seem somewhat smeared out, but that is a good indication that they are performing a critical invariance role.
</p><p>
</p><hr>
<p>
 <b>Question 8.4</b>  <em> Explain the significance of the level of conjunctive representations and spatial invariance observed in the V2 receptive fields, in terms of the overall computation performed by the network.</em>
</p><p>
</p><hr>
<p>
</p><ul><li> Continue to scroll through the V2 units, but now notice the activation based receptive field for the Output units.
</li></ul>
You should see that there are typically a handfull of output units (i.e., objects) that each V2 unit is strongly co-activated with. This indicates a distributed representation, where each V2 unit participates in encoding multiple different objects.
<p>
</p><hr>
<p>
 <b>Question 8.5</b>  <em> Using the images of the objects shown in Figure 8.12 in the textbook, (which are in the same configuration as the output units), explain one V2 unit's participation in a particular output representation based on the features shown in its input receptive fields.  (Hint: Pick a unit that is particularly selective for specific input patterns and specific output units, because this makes things easier to see.)</em>
</p><p>
</p><hr>
<p>
</p><ul><li> Next, do LoadActRFData to load the <code>objrec_actrf_v4it.dat</code> data for the V4_IT layer.  Scroll through to observe the activation based receptive fields for the Image inputs and the Output layer.
</li></ul>
You should observe much more complex patterns of line orientations, distributed over more of the input, and fewer, more strongly-defined Output receptive fields.  
<p>
</p><hr>
<p>
 <b>Question 8.6</b>  <em> Based on your probing of the V4 units, do they appear to code for entire objects, or just parts of different objects?  Explain.</em>
</p><p>
</p><hr>
<p>
One can also compare the relative selectivity of these V4 units for particular output units (objects) as compared to the V2 units.  By focusing specifically on the number of objects a given unit clearly  <i>doesn't</i>  participate in, it should be clear that the V4 units are more selective than the V2 units, which substantiates the idea that the V4 units are encoding more complex combinations of features that are shared by fewer objects (thus making them more selective to particular subsets of objects.  Thus, we see evidence here of the hierarchical increase in featural complexity required to encode featural relationships while also producing spatial invariance.
</p><p>
</p><hr>
<p>
 <b>Question 8.7</b>  <em> This question is no longer applicable, as the associated form of analysis is not used for this model anymore.  </em>
</p><p>
</p><hr>
<p>
</p><h2> Summary and Discussion of Receptive Field Analyses </h2>
<p>
Using the activation-based receptive field technique, we have obtained some insight into the way this network performs spatially invariant object recognition, gradually over multiple levels of processing.  Similarly, the complexity of the featural representations increases with increasing levels in the hierarchy.  By doing both of these simultaneously and in stages over multiple levels, the network is able to recognize objects in an environment that depends critically on the detailed spatial arrangement of the constituent features, thereby apparently avoiding the binding problem described previously.
</p><p>
You may be wondering why the V2 and V4 representations have their respective properties -- why did the network develop in this way?  In terms of the degree of spatial invariance, it should be clear that the patterns of connectivity restrict the degree of invariance possible in V2, whereas the V4 neurons receive from the entire visual field (in this small-scale model), and so are in a position to have fully invariant representations.  Also, the V4 representations can be more invariant, and more complex because they build off of limited invariance and featural complexity in the V2 layer.  This ability for subsequent layers to build off of the transformations performed in earlier layers is a central general principle of cognition (see Chapter 7 in the textbook).
</p><p>
The representational properties you observed here can have important functional implications.  For example, in the next section, we will see that the nature of the V4 representations can play an important role in enabling the network to generalize effectively.  To the extent that V4 representations encode complex object features, and not objects themselves, these representations can be reused for novel objects.  Because the network can already form relatively invariant versions of these V4 representations, their reuse for novel objects will mean that the invariance transformation itself will generalize to novel objects.
</p><p>
</p><h2> Generalization Test </h2>
<p>
In addition to all of the above receptive field measures of the network's performance, we can perform a behavioral test of its ability to generalize in a spatially invariant manner, using the two objects (numbers 18 and 19 in Figure 8.12) that were not presented to the network during training.  We can now train on these two objects in a restricted set of spatial locations and sizes, and assess the network's ability to respond to these items in novel locations and sizes.  Presumably, the bulk of what the network needs to do is learn an association between the V4_IT representations and the appropriate output units, and good generalization should result to all other spatial locations.
</p><p>
In addition to presenting the novel objects during training, we also need to present familiar objects; otherwise the network will suffer from  <i>catastrophic interference</i>  (see textbook Chapters 7 and 9 for more discussion of this issue).  The following procedure was used.  On each trial, there was a 1 in 4 chance that a novel object would be presented, and 3 in 4 chance that a familiar one was presented.  If a novel object was presented, its location, scaling and rotation parameters were chosen using .5 of the maximum range of these values in the original training.  Given that these 4 factors (translation in x, translation in y, size, and rotation) are combinatorial, that means that roughly .5^4  or .0625 of the total combinatorial space was explored.  If a familiar object was presented, then its size and position was chosen completely at random from all the possibilities.  This procedure was repeated for 60 epochs of 100 objects per epoch, with a learning rate of .01 for 10 epochs followed by .001 for 50.  Importantly, the learning rate in everything but the V4_IT to Output connections was set to zero, to restrict learning to that pathway and minimize interference to these deeper pathways.  In the brain, it is very likely that these earlier areas of the visual system experience less plasticity than higher areas as the system matures.
</p><p>
</p><ul><li> To setup the system for this form of generalization training, click the GenTrain button in the Control Panel.  This loads the objrec_train1.wts.gz weights, sets the epoch counter to 90 to get a learning rate of .01 for 10 epochs, and sets the environment generation to be of the form described above.  Once you do this, you can just do Train: Init and  <b>NOT</b>  initialize the weights, followed by Run.  This could take 10s of minutes to several hours, depending on your computer.  Thus, you can bypass this step by doing LoadWeights and selecting the objrec_train2.wts.gz file
</li></ul>
<ul><li> After the network is trained, you can then run the testing (Test: Init, Run) as before, or just load the test data from objrec_test2.tst.dat.
</li></ul>
The results show that the network got around 80% correct (roughly 20% error) on the new 18 and 19 patterns.  This is given training on only 6% of the space, suggesting that the network has learned generalized invariance transforms that can be applied to novel objects.  Given the restriction of learning to the V4_IT to Output pathway, we can be certain that no additional learning in lower pathways had to be done to encode these novel objects.
<p>
To summarize, these generalization results demonstrate that the hierarchical series of representations can operate effectively on novel stimuli, as long as these stimuli possess structural features in common with other familiar objects.  The network has learned to represent combinations of these features in terms of increasingly complex combinations that are also increasingly spatially invariant.  In the present case, we have facilitated generalization by ensuring that the novel objects are built out of the same line features as the other objects.  Although we expect that natural objects also share a vocabulary of complex features, and that learning would discover and exploit them to achieve a similarly generalizable invariance mapping, this remains to be demonstrated for more realistic kinds of objects. One prediction that this model makes is that the generalization of the invariance mapping will likely be a function of featural similarity with known objects, so one might expect a continuum of generalization performance in people (and in a more elaborate model).
</p><p>


</p></body></html>";
  };
  taDoc @[1] {
   name="WikiDoc";
   desc=;
   auto_open=0;
   web_doc=1;
   wiki="CCN";
   url="CECN1_Objrec";
   full_url="http://grey.colorado.edu/CompCogNeuro/index.php/CECN1_Objrec";
   text_size=1;
   text="<html>
<head></head>
<body>
== Enter Title Here ==
</body>
</html>
";
   html_text="<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\" dir=\"ltr\"><head>
		<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">
		<meta http-equiv=\"Content-Style-Type\" content=\"text/css\">
		<meta name=\"generator\" content=\"MediaWiki 1.16alpha-wmf\">
		<meta name=\"keywords\" content=\"CECN1 Objrec,CECN1 Projects,Emergent,.T3Tab.TestErrorData,.T3Tab.ObjrecNet\">
		<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
		<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/CompCogNeuro/opensearch_desc.php\" title=\"Computational Cognitive Neuroscience Wiki (en)\">
		<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Computational Cognitive Neuroscience Wiki RSS Feed\" href=\"/CompCogNeuro/index.php?title=Special:RecentChanges&amp;feed=rss\">
		<link rel=\"alternate\" type=\"application/atom+xml\" title=\"Computational Cognitive Neuroscience Wiki Atom Feed\" href=\"/CompCogNeuro/index.php?title=Special:RecentChanges&amp;feed=atom\">
		<title>CECN1 Objrec - Computational Cognitive Neuroscience Wiki</title>
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/common/shared.css?233z\" type=\"text/css\" media=\"screen\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/common/commonPrint.css?233z\" type=\"text/css\" media=\"print\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/main.css?233z\" type=\"text/css\" media=\"screen\">
		<!--[if lt IE 5.5000]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE50Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<!--[if IE 5.5000]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE55Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<!--[if IE 6]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE60Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<!--[if IE 7]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE70Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000\" type=\"text/css\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000\" type=\"text/css\" media=\"print\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=MediaWiki:monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000\" type=\"text/css\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=-&amp;action=raw&amp;maxage=18000&amp;gen=css\" type=\"text/css\">
		<!--[if lt IE 7]><script type=\"text/javascript\" src=\"/CompCogNeuro/skins/common/IEFixes.js?233z\"></script>
		<meta http-equiv=\"imagetoolbar\" content=\"no\" /><![endif]-->

		<script type=\"text/javascript\">/*<![CDATA[*/
		var skin = \"monobook\";
		var stylepath = \"/CompCogNeuro/skins\";
		var wgArticlePath = \"/CompCogNeuro/index.php/$1\";
		var wgScriptPath = \"/CompCogNeuro\";
		var wgScript = \"/CompCogNeuro/index.php\";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = \"http://grey.colorado.edu\";
		var wgCanonicalNamespace = \"\";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = \"CECN1_Objrec\";
		var wgTitle = \"CECN1 Objrec\";
		var wgAction = \"view\";
		var wgArticleId = \"99\";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = \"en\";
		var wgContentLanguage = \"en\";
		var wgBreakFrames = false;
		var wgCurRevisionId = 403;
		var wgVersion = \"1.16alpha-wmf\";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = [\"\", \"\"];
		var wgDigitTransformTable = [\"\", \"\"];
		var wgMainPageTitle = \"Main Page\";
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		var wgFCKEditorDir = \"extensions/FCKeditor/fckeditor/\";
		var wgFCKEditorExtDir = \"extensions/FCKeditor\";
		var wgFCKEditorToolbarSet = \"Wiki\";
		var wgFCKEditorHeight = \"0\";
		/*]]>*/</script>

		<script type=\"text/javascript\" src=\"/CompCogNeuro/skins/common/wikibits.js?233z\"><!-- wikibits js --></script><style type=\"text/css\">@import \"/CompCogNeuro/skins/monobook/KHTMLFixes.css\";</style>
		<!-- Head Scripts -->
		<script type=\"text/javascript\" src=\"/CompCogNeuro/skins/common/ajax.js?233z\"></script>
		<script type=\"text/javascript\" src=\"/CompCogNeuro/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook\"><!-- site js --></script>
	<style type=\"text/css\">@import \"/CompCogNeuro/extensions/Collection/collection/Gadget-navpop.css?2\";</style></head><body class=\"mediawiki ltr ns-0 ns-subject page-CECN1_Objrec skin-monobook\">
	<div id=\"globalWrapper\">
		<div id=\"column-content\">
	<div id=\"content\">
		<a name=\"top\" id=\"top\"></a>
				<h1 id=\"firstHeading\" class=\"firstHeading\">CECN1 Objrec</h1>
		<div id=\"bodyContent\">
			<h3 id=\"siteSub\">From Computational Cognitive Neuroscience Wiki</h3>
			<div id=\"contentSub\"></div>
									<div id=\"jump-to-nav\">Jump to: <a href=\"#column-one\">navigation</a>, <a href=\"#searchInput\">search</a></div>			<!-- start content -->
			<table id=\"toc\" class=\"toc\" summary=\"Contents\"><tbody><tr><td><div id=\"toctitle\"><h2>Contents</h2> <span class=\"toctoggle\">[<a id=\"togglelink\" class=\"internal\" href=\"javascript:toggleToc()\">hide</a>]</span></div>
<ul>
<li class=\"toclevel-1\"><a href=\"#Object_Recognition_.28Spatially_Invariant.29\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Object Recognition (Spatially Invariant)</span></a></li>
<li class=\"toclevel-1\"><a href=\"#Project_Documentation\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Project Documentation</span></a>
<ul>
<li class=\"toclevel-2\"><a href=\"#Network_Structure\"><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">Network Structure</span></a></li>
<li class=\"toclevel-2\"><a href=\"#Training\"><span class=\"tocnumber\">2.2</span> <span class=\"toctext\">Training</span></a></li>
<li class=\"toclevel-2\"><a href=\"#Receptive_Field_Analysis\"><span class=\"tocnumber\">2.3</span> <span class=\"toctext\">Receptive Field Analysis</span></a></li>
<li class=\"toclevel-2\"><a href=\"#Summary_and_Discussion_of_Receptive_Field_Analyses\"><span class=\"tocnumber\">2.4</span> <span class=\"toctext\">Summary and Discussion of Receptive Field Analyses</span></a></li>
<li class=\"toclevel-2\"><a href=\"#Generalization_Test\"><span class=\"tocnumber\">2.5</span> <span class=\"toctext\">Generalization Test</span></a></li>
</ul>
</li>
</ul>
</td></tr></tbody></table><script type=\"text/javascript\"> if (window.showTocToggle) { var tocShowText = \"show\"; var tocHideText = \"hide\"; showTocToggle(); } </script>
<a name=\"Object_Recognition_.28Spatially_Invariant.29\" id=\"Object_Recognition_.28Spatially_Invariant.29\"></a><h1> <span class=\"mw-headline\"> Object Recognition (Spatially Invariant) </span></h1>
<ul><li> The project file: <a href=\"/mediawiki/sites/CompCogNeuro/images/a/a0/objrec.proj\" class=\"internal\" title=\"objrec.proj\">objrec.proj</a> (click and Save As to download, then open in <a href=\"/CompCogNeuro/index.php/Emergent\" title=\"Emergent\">Emergent</a>
</li><li> Additional files for training log files and pretrained weights (recommended):
<ul><li> <a href=\"/mediawiki/sites/CompCogNeuro/images/8/85/objrec_train1.wts.gz\" class=\"internal\" title=\"objrec train1.wts.gz\">objrec_train1.wts.gz</a>
</li><li> <a href=\"/mediawiki/sites/CompCogNeuro/images/8/8d/objrec_train1.epc.dat\" class=\"internal\" title=\"objrec train1.epc.dat\">objrec_train1.epc.dat</a>
</li><li> <a href=\"/mediawiki/sites/CompCogNeuro/images/5/51/objrec_test1.tst.dat\" class=\"internal\" title=\"objrec test1.tst.dat\">objrec_test1.tst.dat</a>
</li><li> <a href=\"/mediawiki/sites/CompCogNeuro/images/7/74/objrec_train2.wts.gz\" class=\"internal\" title=\"objrec train2.wts.gz\">objrec_train2.wts.gz</a>
</li><li> <a href=\"/mediawiki/sites/CompCogNeuro/images/4/46/objrec_train2.epc.dat\" class=\"internal\" title=\"objrec train2.epc.dat\">objrec_train2.epc.dat</a>
</li><li> <a href=\"/mediawiki/sites/CompCogNeuro/images/b/b3/objrec_test2.tst.dat\" class=\"internal\" title=\"objrec test2.tst.dat\">objrec_test2.tst.dat</a>
</li></ul>
</li></ul>
<p>Back to <a href=\"/CompCogNeuro/index.php/CECN1_Projects\" title=\"CECN1 Projects\">CECN1 Projects</a>
</p>
<a name=\"Project_Documentation\" id=\"Project_Documentation\"></a><h1> <span class=\"mw-headline\"> Project Documentation </span></h1>
<p>(note: this is a literal copy from the simulation documentation -- it contains links that will not work within the wiki)
</p>
<ul><li> To start, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open this documentation in a separate window that you can more easily come back to.  Alternatively, you can always return by clicking on the <code>ProjectDocs</code> tab at the top of this middle panel.
</li></ul>
<a name=\"Network_Structure\" id=\"Network_Structure\"></a><h2> <span class=\"mw-headline\"> Network Structure </span></h2>
<p>We begin by looking at the network structure.  You should see the LGN input layers, which are 22x22 units in size.  Above that, you can see the V1 layer, which has a 10x10  large-scale grid structure, where each of these grid elements represents one hypercolumn of units. Each hypercolumn contains a group of 8 (4x2) units, and these units are all be connected to the same small (4x4) region of both LGN inputs.  Neighboring groups are connected to half-overlapping regions of LGN, as we will see when we explore the network connections in a moment.  In addition to connectivity, these groups organize the inhibition within the layer.  The kWTA level is set to 1 unit within a column, and there is a special more flexible inhibition scheme that spreads this inhibition across different columns: each column gets the maximum of its own inhibition or .5 times the inhibition of the column in the layer that has the highest inhibition level.  This ensures that columns not receiving a significantly strong input will not be active (because they would require less than the .5 * max inhibition), while those that do receive a strong input compute their own standard kwta value.  This dynamic could be achieved through diffuse lateral excitatory connections between columns synapsing onto inhibitory interneurons, and a nonlinear integration of this excitation. 
</p><p>The V2 layer is also organized into a grid of hypercolumns, this time 4x4 in size, with each hypercolumn having 36 units (6x6).  As with V1, inhibition operates at both the hypercolumn and entire layer scales here, with 10%  activity per hypercolumn.  Each hypercolumn of V2 units receives from 4x4 V1 hypercolumns, with neighboring columns again having half-overlapping receptive fields.  Next, the V4_IT layer represents just a single hypercolumn of units (10x10 or 100 units) within a single inhibitory group, and receives from the entire V2 layer.  Finally, the Output layer has 20 units, one for each of the different objects.
</p>
<ul><li> You can view the patterns of connectivity described above by clicking on r.wt, and then on units in the various layers.
</li></ul>
<p>You should see that each V1 unit has an oriented edge-detector pattern much like that which was learned in the v1rf model.   
</p>
<a name=\"Training\" id=\"Training\"></a><h2> <span class=\"mw-headline\"> Training </span></h2>
<p>Now, let's see how the network is trained.  
</p>
<ul><li> First, go back to viewing act in the networks display.  Then, do <code>Train: Init</code> and <code>Step</code> in the control panel.
</li></ul>
<p>You will see the minus phase of settling for the input image, which is one of the shapes shown in Figure 8.12 in the textbook, at a random location, size and slight rotation in the plane.  The full bitmap image is shown in the display on the upper right of the network, and the patterns on the LGN input layers are the difference-of-gaussian contrast-enhanced versions of that image, as in the v1rf model.  <i>Note that this differs from the original model described in the text.</i>
</p>
<ul><li> Press Step again to see the plus phase.  You can then continue to Step through a series of inputs to get a feel for what some of the different input patterns look like.
</li></ul>
<p>Because it takes at least an hour or more for this network to be trained, we will just load the weights from a trained network.  The network was trained for 300 epochs of 100 object inputs per epoch, or 30,000 object presentations. However, it took only roughly 200 epochs (20,000 object presentations) for performance to approach asymptote. With all of the variation in the way a given input can be presented, this does not represent all that much sampling of the space of variability.
</p>
<ul><li> Load the weights using <code>LoadWeights</code> on the control panel, and select <code>objrec_train1.wts.gz</code>.  Then, Step a couple of times to see the minus and plus phases of the trained network as it performs the object recognition task.
</li></ul>
<p>You should see that the plus and minus phase output states are usually the same, meaning that the network is correctly recognizing most of the objects being presented. 
</p><p>To provide a more comprehensive test of its performance, you can run the testing program, which runs through 1000 presentations of the objects and records the overall level of error.  Because this may take a while, you can also just load the resulting log file.
</p>
<ul><li> To run the test, do Test: Init and Run.  To load the log file, do <code>LoadTestData</code> and select <code>objrec_test1.tst.dat</code>, and then click on the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.TestErrorData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.TestErrorData (page does not exist)\">.T3Tab.TestErrorData</a> to see the resulting graph.
</li></ul>
<p>You will see that error rates are generally below 10%, except for the two final objects which the network was never trained on.  Thus, the network shows quite good performance at this challenging task of recognizing objects in a
location-invariant and size-invariant manner.
</p>
<a name=\"Receptive_Field_Analysis\" id=\"Receptive_Field_Analysis\"></a><h2> <span class=\"mw-headline\"> Receptive Field Analysis </span></h2>
<p>Having seen that the network is solving this difficult problem, the obvious next question is, \"how?\".  To answer this, we need to examine the weights of the network, and determine what the <i>receptive fields</i> of the different units are.  The receptive field essentially means the range of different stimuli that a given unit in the network responds to -- what it is tuned to detect.  Because most of the units are not directly connected to the input, we can't just view their weights to easily see what they are representing.  However, emergent has a powerful weight projection function that gets around this problem, by projecting weight values across multiple synaptic connections.  <i>Note: the original model described in the textbook used a different technique called an activation based receptive field, which is actually more accurate but less direct and easy to interpret.</i>
</p>
<ul><li> Click on the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.ObjrecNet&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.ObjrecNet (page does not exist)\">.T3Tab.ObjrecNet</a> view tab and its associated tab in the middle panel.  On the 3rd line from the top of the netview control panel, in the middle, is a <code>wt lines</code> button -- select that, and make sure that the <code>Thr</code> value to the right of it says 0.9, and that the <code>wt prjn</code> has LGN_on selected (these should be the default settings when the project was loaded).  Then select the <code>wt_prjn</code> variable to view in the network display, instead of act or whatever it is currently showing. Then, click on the red arrow and click around on various units in the V2 layer.
</li></ul>
<p>You will see the network light up with colored boxes for each of the units that the unit is directly or indirectly connected to, with the projected weight value shown.  You will also see yellow lines from the selected unit to the few strongest weight values in the LGN_on linput layer.  Focus on the patterns of weights projected from the LGN_on and LGN_off layers.  These reflect the strongest weights (above the 0.9 threshold value) from V1 to the selected V2 unit, multiplied through by the weights from the LGN layers into these V1 units.  Thus, you effectively get to see from V2 \"through\" the V1 receptive fields down into the LGN.  The threshold is critical for avoiding projecting through weights that are not actually important for making a given V2 unit fire.
</p><p>You should see clumps of line-like representations, either at the same orientation or different orientations.  It may not be particularly obvious, but as shown schematically in Figure 8.10 in the textbook, these V2 units are encoding simple conjunctions of line elements, in a small range of locations within the retinal input.  The fact that the respond across multiple locations makes the weight patterns seem somewhat smeared out, but that is a very good indication that they are performing a critical invariance role.
</p>
<hr>
<p><b>Question 8.4</b> <em> Explain the significance of the level of conjunctive representations and spatial invariance observed in the V2 receptive fields, in terms of the overall computation performed by the network.</em>
</p>
<hr>
<ul><li> Continue to click around on the V2 units, but now notice the projected weights to the Output units (these are projected through the weights to the V4_IT layer units).
</li></ul>
<p>You should see that there are typically a handfull of output units (i.e., objects) that each V2 unit has relatively strong weights to. This indicates a distributed representation, where each V2 unit participates in encoding multiple different objects.
</p>
<hr>
<p><b>Question 8.5</b> <em> Using the images of the objects shown in Figure 8.12 in the textbook, (which are in the same configuration as the output units), explain one V2 unit's participation in a particular output representation based on the features shown in its input receptive fields.  (Hint: Pick a unit that is particularly selective for specific input patterns and specific output units, because this makes things easier to see.)</em>
</p>
<hr>
<ul><li> Next, click on V4 units and observe their weight projections onto the LGN inputs and the Output layer.
</li></ul>
<p>You should observe much more complex patterns of line orientations, distributed over much of the input, and fewer, more strongly-defined output weights.  You should also try manipulating the Thr threshold parameter in the netview control panel -- try .8 instead of .9 -- to see how this affects the results.  With the very high .9 threshold, you are only seeing a small part of what the unit represents overall, but this can be much easier to interpret than the more complex patterns that are more reflective of what it is actually activated by in the input.  
</p>
<hr>
<p><b>Question 8.6</b> <em> Based on your probing of the V4 units, do they appear to code for entire objects, or just parts of different objects?  Explain.</em>
</p>
<hr>
<p>One can also compare the relative selectivity of these V4 units for particular output units (objects) as compared to the V2 units.  By focusing specifically on the number of objects a given unit clearly <i>doesn't</i> participate in, it should be clear that the V4 units are more selective than the V2 units, which substantiates the idea that the V4 units are encoding more complex combinations of features that are shared by fewer objects (thus making them more selective to particular subsets of objects.  Thus, we see evidence here of the hierarchical increase in featural complexity required to encode featural relationships while also producing spatial invariance.
</p>
<hr>
<p><b>Question 8.7</b> <em> This question is no longer applicable, as the associated form of analysis is not used for this model anymore.  </em>
</p>
<hr>
<a name=\"Summary_and_Discussion_of_Receptive_Field_Analyses\" id=\"Summary_and_Discussion_of_Receptive_Field_Analyses\"></a><h2> <span class=\"mw-headline\"> Summary and Discussion of Receptive Field Analyses </span></h2>
<p>Using the weight projection technique, we have obtained some insight into the way this network performs spatially invariant object recognition, gradually over multiple levels of processing.  Similarly, the complexity of the featural representations increases with increasing levels in the hierarchy.  By doing both of these simultaneously and in stages over multiple levels, the network is able to recognize objects in an environment that depends critically on the detailed spatial arrangement of the constituent features, thereby apparently avoiding the binding problem described previously.
</p><p>You may be wondering why the V2 and V4 representations have their respective properties -- why did the network develop in this way?  In terms of the degree of spatial invariance, it should be clear that the patterns of connectivity restrict the degree of invariance possible in V2, whereas the V4 neurons receive from the entire visual field (in this small-scale model), and so are in a position to have fully invariant representations.  Also, the V4 representations can be more invariant, and more complex because they build off of limited invariance and featural complexity in the V2 layer.  This ability for subsequent layers to build off of the transformations performed in earlier layers is a central general principle of cognition (see Chapter 7 in the textbook).
</p><p>The representational properties you observed here can have important functional implications.  For example, in the next section, we will see that the nature of the V4 representations can play an important role in enabling the network to generalize effectively.  To the extent that V4 representations encode complex object features, and not objects themselves, these representations can be reused for novel objects.  Because the network can already form relatively invariant versions of these V4 representations, their reuse for novel objects will mean that the invariance transformation itself will generalize to novel objects.
</p>
<a name=\"Generalization_Test\" id=\"Generalization_Test\"></a><h2> <span class=\"mw-headline\"> Generalization Test </span></h2>
<p>In addition to all of the above receptive field measures of the network's performance, we can perform a behavioral test of its ability to generalize in a spatially invariant manner, using the two objects (numbers 18 and 19 in Figure 8.12) that were not presented to the network during training.  We can now train on these two objects in a restricted set of spatial locations and sizes, and assess the network's ability to respond to these items in novel locations and sizes.  Presumably, the bulk of what the network needs to do is learn an association between the V4_IT representations and the appropriate output units, and good generalization should result to all other spatial locations.
</p><p>In addition to presenting the novel objects during training, we also need to present familiar objects; otherwise the network will suffer from <i>catastrophic interference</i> (see textbook Chapters 7 and 9 for more discussion of this issue).  The following procedure was used.  On each trial, there was a 1 in 4 chance that a novel object would be presented, and 3 in 4 chance that a familiar one was presented.  If a novel object was presented, its location, scaling and rotation parameters were chosen using .5 of the maximum range of these values in the original training.  Given that these 4 factors (translation in x, translation in y, size, and rotation) are combinatorial, that means that roughly .5^4  or .0625 of the total combinatorial space was explored.  If a familiar object was presented, then its size and position was chosen completely at random from all the possibilities.  This procedure was repeated for 60 epochs of 100 objects per epoch, with a learning rate of .01 for 10 epochs followed by .001 for 50.  Importantly, the learning rate in everything but the V4_IT to Output connections was set to zero, to restrict learning to that pathway and minimize interference to these deeper pathways.  In the brain, it is very likely that these earlier areas of the visual system experience less plasticity than higher areas as the system matures.
</p>
<ul><li> To setup the system for this form of generalization training, click the GenTrain button in the Control Panel.  This loads the objrec_train1.wts.gz weights, sets the epoch counter to 90 to get a learning rate of .01 for 10 epochs, and sets the environment generation to be of the form described above.  Once you do this, you can just do Train: Init and <b>NOT</b> initialize the weights, followed by Run.  This could take 10s of minutes to several hours, depending on your computer.  Thus, you can bypass this step by doing LoadWeights and selecting the objrec_train2.wts.gz file
</li></ul>
<ul><li> After the network is trained, you can then run the testing (Test: Init, Run) as before, or just load the test data from objrec_test2.tst.dat.
</li></ul>
<p>The results show that the network got a bit better than 50% correct on the new 18 and 19 patterns.  This is given training on only 6% of the space, suggesting that the network has learned generalized invariance transforms that can be applied to some extent to novel objects.  Given the restriction of learning to the V4_IT to Output pathway, we can be certain that no additional learning in lower pathways had to be done to encode these novel objects.
</p><p>To summarize, these generalization results demonstrate that the hierarchical series of representations can operate effectively on novel stimuli, as long as these stimuli possess structural features in common with other familiar objects.  The network has learned to represent combinations of these features in terms of increasingly complex combinations that are also increasingly spatially invariant.  In the present case, we have facilitated generalization by ensuring that the novel objects are built out of the same line features as the other objects.  Although we expect that natural objects also share a vocabulary of complex features, and that learning would discover and exploit them to achieve a similarly generalizable invariance mapping, this remains to be demonstrated for more realistic kinds of objects. One prediction that this model makes is that the generalization of the invariance mapping will likely be a function of featural similarity with known objects, so one might expect a continuum of generalization performance in people (and in a more elaborate model).
</p>
<!-- 
NewPP limit report
Preprocessor node count: 8/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key compcogneuro:pcache:idhash:99-0!1!0!!en!2!edit=0 and timestamp 20090904065647 -->
<div class=\"printfooter\">
Retrieved from \"<a href=\"http://grey.colorado.edu/CompCogNeuro/index.php/CECN1_Objrec\">http://grey.colorado.edu/CompCogNeuro/index.php/CECN1_Objrec</a>\"</div>
						<!-- end content -->
						<div class=\"visualClear\"></div>
		</div>
	</div>
		</div>
		<div id=\"column-one\">
	<div id=\"p-cactions\" class=\"portlet\">
		<h5>Views</h5>
		<div class=\"pBody\">
			<ul lang=\"en\" xml:lang=\"en\">
	
				 <li id=\"ca-nstab-main\" class=\"selected\"><a href=\"/CompCogNeuro/index.php/CECN1_Objrec\" title=\"View the content page [ctrl-alt-c]\" accesskey=\"c\">Page</a></li>
				 <li id=\"ca-talk\" class=\"new\"><a href=\"/CompCogNeuro/index.php?title=Talk:CECN1_Objrec&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [ctrl-alt-t]\" accesskey=\"t\">Discussion</a></li>
				 <li id=\"ca-viewsource\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Objrec&amp;action=edit\" title=\"This page is protected.
You can view its source [ctrl-alt-e]\" accesskey=\"e\">View source</a></li>
				 <li id=\"ca-history\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Objrec&amp;action=history\" title=\"Past revisions of this page [ctrl-alt-h]\" accesskey=\"h\">History</a></li>			</ul>
		</div>
	</div>
	<div class=\"portlet\" id=\"p-personal\">
		<h5>Personal tools</h5>
		<div class=\"pBody\">
			<ul lang=\"en\" xml:lang=\"en\">
				<li id=\"pt-login\"><a href=\"/CompCogNeuro/index.php?title=Special:UserLogin&amp;returnto=CECN1_Objrec\" title=\"You are encouraged to log in; however, it is not mandatory [ctrl-alt-o]\" accesskey=\"o\">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class=\"portlet\" id=\"p-logo\">
		<a style=\"background-image: url(/mediawiki/sites//CompCogNeuro/logo.png);\" href=\"/CompCogNeuro/index.php/Main_Page\" title=\"Visit the main page [ctrl-alt-z]\" accesskey=\"z\"></a>
	</div>
	<script type=\"text/javascript\"> if (window.isMSIE55) fixalpha(); </script>
	<div class=\"generated-sidebar portlet\" id=\"p-navigation\">
		<h5 lang=\"en\" xml:lang=\"en\">Navigation</h5>
		<div class=\"pBody\">
			<ul>
				<li id=\"n-mainpage-description\"><a href=\"/CompCogNeuro/index.php/Main_Page\">Main Page</a></li>
				<li id=\"n-portal\"><a href=\"/CompCogNeuro/index.php/Project:Community_Portal\" title=\"About the project, what you can do, where to find things\">Community portal</a></li>
				<li id=\"n-currentevents\"><a href=\"/CompCogNeuro/index.php/Project:Current_events\" title=\"Find background information on current events\">Current events</a></li>
				<li id=\"n-recentchanges\"><a href=\"/CompCogNeuro/index.php/Special:RecentChanges\" title=\"The list of recent changes in the wiki [ctrl-alt-r]\" accesskey=\"r\">Recent changes</a></li>
				<li id=\"n-randompage\"><a href=\"/CompCogNeuro/index.php/Special:Random\" title=\"Load a random page [ctrl-alt-x]\" accesskey=\"x\">Random page</a></li>
				<li id=\"n-help\"><a href=\"/CompCogNeuro/index.php/Help:Contents\" title=\"The place to find out\">Help</a></li>
			</ul>
		</div>
	</div>
	<div id=\"p-search\" class=\"portlet\">
		<h5 lang=\"en\" xml:lang=\"en\"><label for=\"searchInput\">Search</label></h5>
		<div id=\"searchBody\" class=\"pBody\">
			<form action=\"/CompCogNeuro/index.php\" id=\"searchform\"><div>
				<input type=\"hidden\" name=\"title\" value=\"Special:Search\">
				<input id=\"searchInput\" name=\"search\" type=\"text\" title=\"Search Computational Cognitive Neuroscience Wiki [ctrl-alt-f]\" accesskey=\"f\" value=\"\">
				<input type=\"submit\" name=\"go\" class=\"searchButton\" id=\"searchGoButton\" value=\"Go\" title=\"Go to a page with this exact name if exists\">&nbsp;
				<input type=\"submit\" name=\"fulltext\" class=\"searchButton\" id=\"mw-searchButton\" value=\"Search\" title=\"Search the pages for this text\">
			</div></form>
		</div>
	</div>
	<div class=\"portlet\" id=\"p-tb\">
		<h5 lang=\"en\" xml:lang=\"en\">Toolbox</h5>
		<div class=\"pBody\">
			<ul>
				<li id=\"t-whatlinkshere\"><a href=\"/CompCogNeuro/index.php/Special:WhatLinksHere/CECN1_Objrec\" title=\"List of all wiki pages that link here [ctrl-alt-j]\" accesskey=\"j\">What links here</a></li>
				<li id=\"t-recentchangeslinked\"><a href=\"/CompCogNeuro/index.php/Special:RecentChangesLinked/CECN1_Objrec\" title=\"Recent changes in pages linked from this page [ctrl-alt-k]\" accesskey=\"k\">Related changes</a></li>
<li id=\"t-upload\"><a href=\"/CompCogNeuro/index.php/Special:Upload\" title=\"Upload files [ctrl-alt-u]\" accesskey=\"u\">Upload file</a></li>
<li id=\"t-specialpages\"><a href=\"/CompCogNeuro/index.php/Special:SpecialPages\" title=\"List of all special pages [ctrl-alt-q]\" accesskey=\"q\">Special pages</a></li>
				<li id=\"t-print\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Objrec&amp;printable=yes\" rel=\"alternate\" title=\"Printable version of this page [ctrl-alt-p]\" accesskey=\"p\">Printable version</a></li>				<li id=\"t-permalink\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Objrec&amp;oldid=403\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-download-as-pdf\"><a href=\"/CompCogNeuro/index.php?title=Special:Book/render_article/&amp;arttitle=CECN1+Objrec&amp;oldid=403&amp;writer=rl\" rel=\"nofollow\">PDF version</a></li>			</ul>
		</div>
	</div>
	<div class=\"generated-sidebar portlet\" id=\"p-coll-create_a_book\">
		<h5 lang=\"en\" xml:lang=\"en\">Create a book</h5>
		<div class=\"pBody\">
<ul id=\"collectionPortletList\"><li id=\"coll-add_page\"><a href=\"/CompCogNeuro/index.php?title=Special:Book/add_article/&amp;arttitle=CECN1+Objrec&amp;oldid=0\" title=\"Add the current wiki page to your book\" onclick=\"collectionCall('AddArticle', ['removepage', wgNamespaceNumber, wgTitle, 0]); return false;\" rel=\"nofollow\">Add page to book</a></li><li id=\"coll-help_collections\"><a href=\"/CompCogNeuro/index.php/Help:Books\" title=\"Show help about the book tool\">Books help</a></li></ul><script type=\"text/javascript\">/*<![CDATA[*/
		var wgCollectionAddRemoveSate = \"addpage\";
		/*]]>*/</script>
<script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/portlet.js?2\"></script><script type=\"text/javascript\">/*<![CDATA[*/
		var wgCollectionNavPopupJSURL = \"/CompCogNeuro/extensions/Collection/collection/Gadget-popups.js?2\";
		var wgCollectionNavPopupCSSURL = \"/CompCogNeuro/extensions/Collection/collection/Gadget-navpop.css?2\";
		var wgCollectionAddPageText = \"Add linked wiki page to your book\";
		var wgCollectionAddCategoryText = \"Add wiki pages in linked category to your book\";
		var wgCollectionRemovePageText = \"Remove linked wiki page from your book\";
		var wgCollectionPopupHelpText = \"To deactivate this feature click \\\"Clear book\\\" in the \\\"Create a book\\\" box\";
		var wgCollectionArticleNamespaces = [0, 1, 2, 3, 4, 5, 8, 9, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111];
		/*]]>*/</script>
<script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/json2.js?2\"></script><script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/popupcheck.js?2\"></script><script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/popup.js\"></script><script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/Gadget-popups.js?2\"></script>		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class=\"visualClear\"></div>
			<div id=\"footer\">
				<div id=\"f-poweredbyico\"><a href=\"http://www.mediawiki.org/\"><img src=\"/CompCogNeuro/skins/common/images/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\"></a></div>
			<ul id=\"f-list\">
					<li id=\"lastmod\"> This page was last modified on 7 January 2009, at 09:12.</li>
					<li id=\"viewcount\">This page has been accessed 1,026 times.</li>
					<li id=\"privacy\"><a href=\"/CompCogNeuro/index.php/Project:Privacy_policy\" title=\"Project:Privacy policy\">Privacy policy</a></li>
					<li id=\"about\"><a href=\"/CompCogNeuro/index.php/Project:About\" title=\"Project:About\">About Computational Cognitive Neuroscience Wiki</a></li>
					<li id=\"disclaimer\"><a href=\"/CompCogNeuro/index.php/Project:General_disclaimer\" title=\"Project:General disclaimer\">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type=\"text/javascript\">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served in 0.242 secs. -->
</body></html>";
  };
 };
 wizards {
  name=;
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_1";
   auto_open=0;
   n_layers=3;
   layer_cfg {
    name=;
    el_typ=LayerWizEl;
    el_def=0;
    LayerWizEl @[0] {
     name="Input";
     n_units=25;
     io_type=INPUT;
    };
    LayerWizEl @[1] {
     name="Hidden";
     n_units=25;
     io_type=HIDDEN;
    };
    LayerWizEl @[2] {
     name="Output";
     n_units=25;
     io_type=OUTPUT;
    };
   };
   connectivity=BIDIRECTIONAL;
   default_net_type=LeabraNetwork;
  };
 };
 edits {
  name=;
  el_typ=SelectEdit;
  el_def=0;
  SelectEdit @[0] {
   name="ControlPanel";
   auto_edit=1;
   desc="overall control panel for object recognition model";
   mbrs {
    name="Net Data";
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     cust_desc=0;
     base=.projects[0].networks[0].specs[2]$$;
     mbr=LeabraConSpec::lrate;
     is_numeric=1;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[1] {
     label="cycle update_net_view";
     desc=" boolean value";
     cust_desc=0;
     base=.projects[0].programs.gp[0][5].vars[0]$$;
     mbr=ProgVar::bool_val;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[2] {
     label="input_type";
     desc=" current value, which for normal mutually-exclusive options is index into list of enums (-1 = not set), and for bits is the bit values";
     cust_desc=0;
     base=.projects[0].programs[0].args[1].dyn_enum_val$$;
     mbr=DynEnum::value;
     is_numeric=1;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[3] {
     label="ActBasedRField trg_layer_name";
     desc=" string value";
     cust_desc=0;
     base=.projects[0].programs.gp[1][7].vars[2]$$;
     mbr=ProgVar::string_val;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem_Group @.gp[0] {
     name="Net Data";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      label="ObjrecNet phase";
      desc=" type of settling phase<br>  MINUS PHASE:  minus phase<br>  PLUS PHASE:  plus phase";
      cust_desc=0;
      base=.projects[0].networks[0]$$;
      mbr=LeabraNetwork::phase;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[1] {
      label="ObjrecNet trial";
      desc=" trial counter: number of external input patterns that have been presented in the current epoch (updated by program)";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=Network::trial;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[2] {
      label="ObjrecNet trial name";
      desc=" name associated with the current trial (e.g., name of input pattern, typically set by a LayerWriter)";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=Network::trial_name;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[3] {
      label="ObjrecNet minus output name";
      desc=" output_name in the minus phase -- for recording in logs as network's response (output_name in plus phase is clamped target value)";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=LeabraNetwork::minus_output_name;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[4] {
      label="ObjrecNet minus cycles";
      desc=" cycles to settle in the minus phase -- this is the typical settling time statistic to record";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=LeabraNetwork::minus_cycles;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[5] {
      label="ObjrecNet sse";
      desc=" sum squared error over the network, for the current external input pattern";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=Network::sse;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[6] {
      label="ObjrecNet epoch";
      desc=" epoch counter: number of times a complete set of training patterns has been presented (updated by program)";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=Network::epoch;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Train: Init";
     desc=" set the program state back to the beginning";
     cust_desc=0;
     base=.projects[0].programs.gp[0][1]$$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects[0].programs.gp[0][1]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[2] {
     label="Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects[0].programs.gp[0][1]$;
     mth=Program::Step_Gui;
    };
    EditMthItem @[3] {
     label="Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects[0].programs.gp[0][1]$;
     mth=Program::Stop;
    };
    EditMthItem @[4] {
     label="LoadWeights";
     desc="Load pre-trained weights";
     cust_desc=1;
     base=.projects[0].programs[4]$$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[5] {
     label="Test: Init";
     desc=" set the program state back to the beginning";
     cust_desc=0;
     base=.projects[0].programs.gp[1][0]$$;
     mth=Program::Init;
    };
    EditMthItem @[6] {
     label="Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects[0].programs.gp[1][0]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[7] {
     label="Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects[0].programs.gp[1][0]$;
     mth=Program::Step_Gui;
    };
    EditMthItem @[8] {
     label="Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects[0].programs.gp[1][0]$;
     mth=Program::Stop;
    };
    EditMthItem @[9] {
     label="LoadTestData";
     desc="Load summary data from Testing the network -- test1 is after initial training, and test2 is after generalization training";
     cust_desc=1;
     base=.projects[0].programs[5]$$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[10] {
     label="LoadActRFData";
     desc="Load activation-based receptive field data that was generated by running Test";
     cust_desc=1;
     base=.projects[0].programs[6]$$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[11] {
     label="GenTrain";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=.projects[0].programs[7]$$;
     mth=Program::Run_Gui;
    };
   };
  };
 };
 data {
  name=;
  el_typ=DataTable;
  el_def=0;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="InputItemList";
    desc="list of items to present to the network -- actual images are rendered by LEDStimGen";
    data {
     name="data";
     el_typ=double_Data;
     el_def=0;
     String_Data @[0] {
      name="ObjectName";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [1000] "LED3_0_012";"LED3_10_123";"LED3_1_013";"LED3_0_012";"LED3_18_245";"LED3_8_035";"LED3_15_145";"LED3_17_235";"LED3_8_035";"LED3_9_045";
"LED3_8_035";"LED3_9_045";"LED3_17_235";"LED3_17_235";"LED3_4_023";"LED3_1_013";"LED3_13_134";"LED3_0_012";"LED3_1_013";"LED3_3_015";
"LED3_9_045";"LED3_12_125";"LED3_18_245";"LED3_4_023";"LED3_13_134";"LED3_18_245";"LED3_15_145";"LED3_15_145";"LED3_16_234";"LED3_0_012";
"LED3_6_025";"LED3_15_145";"LED3_12_125";"LED3_6_025";"LED3_2_014";"LED3_10_123";"LED3_9_045";"LED3_0_012";"LED3_5_024";"LED3_18_245";
"LED3_10_123";"LED3_8_035";"LED3_13_134";"LED3_17_235";"LED3_12_125";"LED3_2_014";"LED3_2_014";"LED3_10_123";"LED3_9_045";"LED3_5_024";
"LED3_1_013";"LED3_18_245";"LED3_19_345";"LED3_10_123";"LED3_0_012";"LED3_10_123";"LED3_1_013";"LED3_8_035";"LED3_18_245";"LED3_11_124";
"LED3_3_015";"LED3_17_235";"LED3_15_145";"LED3_6_025";"LED3_12_125";"LED3_6_025";"LED3_4_023";"LED3_0_012";"LED3_6_025";"LED3_12_125";
"LED3_6_025";"LED3_15_145";"LED3_1_013";"LED3_12_125";"LED3_4_023";"LED3_1_013";"LED3_1_013";"LED3_10_123";"LED3_6_025";"LED3_7_034";
"LED3_11_124";"LED3_6_025";"LED3_7_034";"LED3_18_245";"LED3_2_014";"LED3_10_123";"LED3_19_345";"LED3_0_012";"LED3_4_023";"LED3_0_012";
"LED3_12_125";"LED3_0_012";"LED3_2_014";"LED3_19_345";"LED3_7_034";"LED3_13_134";"LED3_1_013";"LED3_15_145";"LED3_17_235";"LED3_19_345";
"LED3_0_012";"LED3_12_125";"LED3_8_035";"LED3_15_145";"LED3_4_023";"LED3_11_124";"LED3_7_034";"LED3_15_145";"LED3_5_024";"LED3_1_013";
"LED3_17_235";"LED3_2_014";"LED3_0_012";"LED3_14_135";"LED3_13_134";"LED3_3_015";"LED3_6_025";"LED3_3_015";"LED3_2_014";"LED3_11_124";
"LED3_13_134";"LED3_19_345";"LED3_15_145";"LED3_1_013";"LED3_15_145";"LED3_9_045";"LED3_0_012";"LED3_12_125";"LED3_18_245";"LED3_1_013";
"LED3_16_234";"LED3_15_145";"LED3_8_035";"LED3_14_135";"LED3_14_135";"LED3_0_012";"LED3_9_045";"LED3_2_014";"LED3_15_145";"LED3_11_124";
"LED3_19_345";"LED3_10_123";"LED3_1_013";"LED3_8_035";"LED3_17_235";"LED3_19_345";"LED3_5_024";"LED3_9_045";"LED3_11_124";"LED3_16_234";
"LED3_17_235";"LED3_3_015";"LED3_15_145";"LED3_2_014";"LED3_12_125";"LED3_18_245";"LED3_1_013";"LED3_16_234";"LED3_10_123";"LED3_7_034";
"LED3_11_124";"LED3_5_024";"LED3_0_012";"LED3_13_134";"LED3_13_134";"LED3_9_045";"LED3_3_015";"LED3_16_234";"LED3_2_014";"LED3_7_034";
"LED3_7_034";"LED3_15_145";"LED3_0_012";"LED3_15_145";"LED3_8_035";"LED3_9_045";"LED3_15_145";"LED3_2_014";"LED3_4_023";"LED3_4_023";
"LED3_4_023";"LED3_7_034";"LED3_18_245";"LED3_5_024";"LED3_11_124";"LED3_10_123";"LED3_1_013";"LED3_0_012";"LED3_3_015";"LED3_4_023";
"LED3_12_125";"LED3_15_145";"LED3_16_234";"LED3_11_124";"LED3_9_045";"LED3_15_145";"LED3_11_124";"LED3_6_025";"LED3_0_012";"LED3_1_013";
"LED3_17_235";"LED3_13_134";"LED3_12_125";"LED3_4_023";"LED3_9_045";"LED3_5_024";"LED3_5_024";"LED3_0_012";"LED3_5_024";"LED3_1_013";
"LED3_12_125";"LED3_12_125";"LED3_14_135";"LED3_19_345";"LED3_14_135";"LED3_12_125";"LED3_17_235";"LED3_15_145";"LED3_13_134";"LED3_17_235";
"LED3_16_234";"LED3_12_125";"LED3_18_245";"LED3_14_135";"LED3_16_234";"LED3_12_125";"LED3_18_245";"LED3_3_015";"LED3_2_014";"LED3_5_024";
"LED3_4_023";"LED3_4_023";"LED3_19_345";"LED3_4_023";"LED3_12_125";"LED3_16_234";"LED3_4_023";"LED3_5_024";"LED3_1_013";"LED3_5_024";
"LED3_14_135";"LED3_11_124";"LED3_10_123";"LED3_10_123";"LED3_8_035";"LED3_8_035";"LED3_11_124";"LED3_14_135";"LED3_1_013";"LED3_7_034";
"LED3_12_125";"LED3_3_015";"LED3_19_345";"LED3_5_024";"LED3_14_135";"LED3_0_012";"LED3_1_013";"LED3_13_134";"LED3_1_013";"LED3_18_245";
"LED3_15_145";"LED3_9_045";"LED3_18_245";"LED3_2_014";"LED3_9_045";"LED3_15_145";"LED3_2_014";"LED3_0_012";"LED3_2_014";"LED3_15_145";
"LED3_8_035";"LED3_13_134";"LED3_6_025";"LED3_18_245";"LED3_4_023";"LED3_19_345";"LED3_11_124";"LED3_3_015";"LED3_12_125";"LED3_0_012";
"LED3_12_125";"LED3_9_045";"LED3_3_015";"LED3_12_125";"LED3_18_245";"LED3_3_015";"LED3_6_025";"LED3_3_015";"LED3_14_135";"LED3_4_023";
"LED3_1_013";"LED3_10_123";"LED3_6_025";"LED3_9_045";"LED3_1_013";"LED3_14_135";"LED3_17_235";"LED3_18_245";"LED3_0_012";"LED3_9_045";
"LED3_0_012";"LED3_8_035";"LED3_2_014";"LED3_18_245";"LED3_7_034";"LED3_2_014";"LED3_3_015";"LED3_0_012";"LED3_10_123";"LED3_7_034";
"LED3_6_025";"LED3_5_024";"LED3_8_035";"LED3_0_012";"LED3_13_134";"LED3_8_035";"LED3_16_234";"LED3_1_013";"LED3_15_145";"LED3_4_023";
"LED3_14_135";"LED3_16_234";"LED3_7_034";"LED3_14_135";"LED3_5_024";"LED3_19_345";"LED3_1_013";"LED3_0_012";"LED3_3_015";"LED3_2_014";
"LED3_4_023";"LED3_6_025";"LED3_6_025";"LED3_9_045";"LED3_15_145";"LED3_14_135";"LED3_9_045";"LED3_2_014";"LED3_4_023";"LED3_2_014";
"LED3_6_025";"LED3_3_015";"LED3_6_025";"LED3_7_034";"LED3_8_035";"LED3_7_034";"LED3_17_235";"LED3_12_125";"LED3_7_034";"LED3_9_045";
"LED3_10_123";"LED3_3_015";"LED3_4_023";"LED3_3_015";"LED3_9_045";"LED3_9_045";"LED3_3_015";"LED3_15_145";"LED3_0_012";"LED3_2_014";
"LED3_12_125";"LED3_7_034";"LED3_1_013";"LED3_3_015";"LED3_3_015";"LED3_11_124";"LED3_6_025";"LED3_17_235";"LED3_12_125";"LED3_17_235";
"LED3_15_145";"LED3_4_023";"LED3_0_012";"LED3_13_134";"LED3_1_013";"LED3_11_124";"LED3_15_145";"LED3_14_135";"LED3_14_135";"LED3_14_135";
"LED3_12_125";"LED3_3_015";"LED3_4_023";"LED3_3_015";"LED3_9_045";"LED3_15_145";"LED3_9_045";"LED3_11_124";"LED3_13_134";"LED3_13_134";
"LED3_3_015";"LED3_9_045";"LED3_14_135";"LED3_5_024";"LED3_16_234";"LED3_3_015";"LED3_1_013";"LED3_12_125";"LED3_9_045";"LED3_5_024";
"LED3_9_045";"LED3_1_013";"LED3_3_015";"LED3_18_245";"LED3_15_145";"LED3_1_013";"LED3_3_015";"LED3_0_012";"LED3_4_023";"LED3_17_235";
"LED3_12_125";"LED3_19_345";"LED3_14_135";"LED3_17_235";"LED3_16_234";"LED3_8_035";"LED3_1_013";"LED3_3_015";"LED3_14_135";"LED3_13_134";
"LED3_17_235";"LED3_18_245";"LED3_10_123";"LED3_8_035";"LED3_18_245";"LED3_0_012";"LED3_0_012";"LED3_15_145";"LED3_9_045";"LED3_16_234";
"LED3_18_245";"LED3_7_034";"LED3_15_145";"LED3_0_012";"LED3_6_025";"LED3_6_025";"LED3_14_135";"LED3_12_125";"LED3_5_024";"LED3_12_125";
"LED3_2_014";"LED3_19_345";"LED3_3_015";"LED3_3_015";"LED3_6_025";"LED3_17_235";"LED3_17_235";"LED3_12_125";"LED3_12_125";"LED3_17_235";
"LED3_14_135";"LED3_7_034";"LED3_10_123";"LED3_2_014";"LED3_19_345";"LED3_19_345";"LED3_8_035";"LED3_17_235";"LED3_3_015";"LED3_19_345";
"LED3_3_015";"LED3_4_023";"LED3_11_124";"LED3_7_034";"LED3_1_013";"LED3_5_024";"LED3_11_124";"LED3_2_014";"LED3_4_023";"LED3_15_145";
"LED3_6_025";"LED3_14_135";"LED3_4_023";"LED3_16_234";"LED3_4_023";"LED3_16_234";"LED3_0_012";"LED3_1_013";"LED3_18_245";"LED3_15_145";
"LED3_5_024";"LED3_6_025";"LED3_18_245";"LED3_5_024";"LED3_17_235";"LED3_1_013";"LED3_9_045";"LED3_15_145";"LED3_11_124";"LED3_13_134";
"LED3_2_014";"LED3_11_124";"LED3_18_245";"LED3_14_135";"LED3_10_123";"LED3_8_035";"LED3_7_034";"LED3_8_035";"LED3_2_014";"LED3_13_134";
"LED3_17_235";"LED3_16_234";"LED3_11_124";"LED3_12_125";"LED3_12_125";"LED3_12_125";"LED3_10_123";"LED3_10_123";"LED3_7_034";"LED3_0_012";
"LED3_2_014";"LED3_5_024";"LED3_18_245";"LED3_4_023";"LED3_17_235";"LED3_10_123";"LED3_15_145";"LED3_7_034";"LED3_11_124";"LED3_8_035";
"LED3_13_134";"LED3_8_035";"LED3_17_235";"LED3_18_245";"LED3_7_034";"LED3_8_035";"LED3_19_345";"LED3_17_235";"LED3_3_015";"LED3_0_012";
"LED3_0_012";"LED3_0_012";"LED3_12_125";"LED3_6_025";"LED3_15_145";"LED3_18_245";"LED3_12_125";"LED3_1_013";"LED3_10_123";"LED3_4_023";
"LED3_10_123";"LED3_16_234";"LED3_4_023";"LED3_13_134";"LED3_7_034";"LED3_4_023";"LED3_5_024";"LED3_10_123";"LED3_18_245";"LED3_16_234";
"LED3_2_014";"LED3_13_134";"LED3_8_035";"LED3_0_012";"LED3_19_345";"LED3_8_035";"LED3_17_235";"LED3_4_023";"LED3_8_035";"LED3_12_125";
"LED3_11_124";"LED3_19_345";"LED3_8_035";"LED3_7_034";"LED3_1_013";"LED3_0_012";"LED3_18_245";"LED3_5_024";"LED3_2_014";"LED3_7_034";
"LED3_17_235";"LED3_0_012";"LED3_18_245";"LED3_16_234";"LED3_4_023";"LED3_18_245";"LED3_1_013";"LED3_19_345";"LED3_9_045";"LED3_16_234";
"LED3_0_012";"LED3_15_145";"LED3_19_345";"LED3_3_015";"LED3_4_023";"LED3_6_025";"LED3_1_013";"LED3_14_135";"LED3_7_034";"LED3_1_013";
"LED3_4_023";"LED3_15_145";"LED3_11_124";"LED3_3_015";"LED3_14_135";"LED3_14_135";"LED3_16_234";"LED3_17_235";"LED3_1_013";"LED3_8_035";
"LED3_10_123";"LED3_12_125";"LED3_9_045";"LED3_4_023";"LED3_18_245";"LED3_13_134";"LED3_3_015";"LED3_17_235";"LED3_19_345";"LED3_12_125";
"LED3_17_235";"LED3_2_014";"LED3_3_015";"LED3_13_134";"LED3_2_014";"LED3_10_123";"LED3_11_124";"LED3_2_014";"LED3_18_245";"LED3_6_025";
"LED3_0_012";"LED3_2_014";"LED3_5_024";"LED3_15_145";"LED3_6_025";"LED3_9_045";"LED3_4_023";"LED3_8_035";"LED3_12_125";"LED3_8_035";
"LED3_14_135";"LED3_1_013";"LED3_18_245";"LED3_10_123";"LED3_11_124";"LED3_4_023";"LED3_18_245";"LED3_10_123";"LED3_9_045";"LED3_3_015";
"LED3_2_014";"LED3_3_015";"LED3_4_023";"LED3_16_234";"LED3_8_035";"LED3_11_124";"LED3_12_125";"LED3_7_034";"LED3_4_023";"LED3_14_135";
"LED3_10_123";"LED3_15_145";"LED3_8_035";"LED3_3_015";"LED3_12_125";"LED3_0_012";"LED3_10_123";"LED3_11_124";"LED3_16_234";"LED3_12_125";
"LED3_1_013";"LED3_19_345";"LED3_11_124";"LED3_18_245";"LED3_5_024";"LED3_17_235";"LED3_0_012";"LED3_14_135";"LED3_5_024";"LED3_18_245";
"LED3_10_123";"LED3_10_123";"LED3_8_035";"LED3_6_025";"LED3_2_014";"LED3_1_013";"LED3_3_015";"LED3_15_145";"LED3_14_135";"LED3_12_125";
"LED3_8_035";"LED3_7_034";"LED3_0_012";"LED3_13_134";"LED3_10_123";"LED3_3_015";"LED3_18_245";"LED3_15_145";"LED3_9_045";"LED3_17_235";
"LED3_7_034";"LED3_11_124";"LED3_0_012";"LED3_16_234";"LED3_9_045";"LED3_7_034";"LED3_7_034";"LED3_14_135";"LED3_6_025";"LED3_10_123";
"LED3_5_024";"LED3_10_123";"LED3_12_125";"LED3_2_014";"LED3_14_135";"LED3_10_123";"LED3_19_345";"LED3_15_145";"LED3_16_234";"LED3_16_234";
"LED3_1_013";"LED3_18_245";"LED3_7_034";"LED3_0_012";"LED3_8_035";"LED3_10_123";"LED3_13_134";"LED3_16_234";"LED3_9_045";"LED3_17_235";
"LED3_12_125";"LED3_6_025";"LED3_7_034";"LED3_18_245";"LED3_6_025";"LED3_3_015";"LED3_9_045";"LED3_9_045";"LED3_0_012";"LED3_7_034";
"LED3_19_345";"LED3_19_345";"LED3_3_015";"LED3_19_345";"LED3_11_124";"LED3_14_135";"LED3_14_135";"LED3_0_012";"LED3_17_235";"LED3_0_012";
"LED3_16_234";"LED3_15_145";"LED3_2_014";"LED3_19_345";"LED3_19_345";"LED3_13_134";"LED3_0_012";"LED3_6_025";"LED3_19_345";"LED3_3_015";
"LED3_17_235";"LED3_16_234";"LED3_16_234";"LED3_4_023";"LED3_13_134";"LED3_1_013";"LED3_14_135";"LED3_11_124";"LED3_12_125";"LED3_18_245";
"LED3_14_135";"LED3_13_134";"LED3_7_034";"LED3_12_125";"LED3_3_015";"LED3_6_025";"LED3_14_135";"LED3_6_025";"LED3_8_035";"LED3_17_235";
"LED3_0_012";"LED3_13_134";"LED3_2_014";"LED3_0_012";"LED3_15_145";"LED3_2_014";"LED3_0_012";"LED3_4_023";"LED3_15_145";"LED3_19_345";
"LED3_14_135";"LED3_2_014";"LED3_4_023";"LED3_1_013";"LED3_18_245";"LED3_16_234";"LED3_6_025";"LED3_9_045";"LED3_4_023";"LED3_3_015";
"LED3_16_234";"LED3_15_145";"LED3_13_134";"LED3_13_134";"LED3_18_245";"LED3_1_013";"LED3_8_035";"LED3_18_245";"LED3_2_014";"LED3_14_135";
"LED3_1_013";"LED3_0_012";"LED3_14_135";"LED3_19_345";"LED3_11_124";"LED3_0_012";"LED3_12_125";"LED3_6_025";"LED3_9_045";"LED3_19_345";
"LED3_10_123";"LED3_19_345";"LED3_14_135";"LED3_7_034";"LED3_2_014";"LED3_14_135";"LED3_12_125";"LED3_17_235";"LED3_10_123";"LED3_10_123";
"LED3_1_013";"LED3_6_025";"LED3_15_145";"LED3_18_245";"LED3_13_134";"LED3_13_134";"LED3_9_045";"LED3_18_245";"LED3_5_024";"LED3_16_234";
"LED3_2_014";"LED3_18_245";"LED3_14_135";"LED3_4_023";"LED3_11_124";"LED3_10_123";"LED3_19_345";"LED3_4_023";"LED3_0_012";"LED3_19_345";
"LED3_1_013";"LED3_6_025";"LED3_3_015";"LED3_17_235";"LED3_12_125";"LED3_10_123";"LED3_12_125";"LED3_4_023";"LED3_9_045";"LED3_13_134";
"LED3_19_345";"LED3_2_014";"LED3_15_145";"LED3_19_345";"LED3_12_125";"LED3_7_034";"LED3_1_013";"LED3_17_235";"LED3_2_014";"LED3_4_023";
"LED3_18_245";"LED3_18_245";"LED3_18_245";"LED3_6_025";"LED3_12_125";"LED3_4_023";"LED3_1_013";"LED3_17_235";"LED3_2_014";"LED3_15_145";
"LED3_17_235";"LED3_11_124";"LED3_7_034";"LED3_7_034";"LED3_7_034";"LED3_19_345";"LED3_17_235";"LED3_2_014";"LED3_14_135";"LED3_1_013";
"LED3_16_234";"LED3_3_015";"LED3_18_245";"LED3_0_012";"LED3_4_023";"LED3_13_134";"LED3_15_145";"LED3_0_012";"LED3_12_125";"LED3_9_045";
"LED3_4_023";"LED3_0_012";"LED3_17_235";"LED3_8_035";"LED3_3_015";"LED3_8_035";"LED3_16_234";"LED3_13_134";"LED3_19_345";"LED3_1_013";
"LED3_8_035";"LED3_14_135";"LED3_8_035";"LED3_4_023";"LED3_7_034";"LED3_12_125";"LED3_8_035";"LED3_13_134";"LED3_10_123";"LED3_0_012";
"LED3_7_034";"LED3_8_035";"LED3_2_014";"LED3_16_234";"LED3_17_235";"LED3_4_023";"LED3_2_014";"LED3_1_013";"LED3_17_235";"LED3_6_025";
"LED3_17_235";"LED3_17_235";"LED3_5_024";"LED3_9_045";"LED3_6_025";"LED3_10_123";"LED3_15_145";"LED3_13_134";"LED3_19_345";"LED3_4_023";
"LED3_3_015";"LED3_7_034";"LED3_1_013";"LED3_2_014";"LED3_1_013";"LED3_7_034";"LED3_1_013";"LED3_18_245";"LED3_9_045";"LED3_0_012";
"LED3_9_045";"LED3_8_035";"LED3_8_035";"LED3_0_012";"LED3_0_012";"LED3_14_135";"LED3_7_034";"LED3_9_045";"LED3_3_015";"LED3_13_134";
"LED3_7_034";"LED3_19_345";"LED3_17_235";"LED3_3_015";"LED3_2_014";"LED3_3_015";"LED3_16_234";"LED3_1_013";"LED3_0_012";"LED3_11_124";
"LED3_4_023";"LED3_18_245";"LED3_16_234";"LED3_13_134";"LED3_10_123";"LED3_0_012";"LED3_4_023";"LED3_1_013";"LED3_4_023";"LED3_3_015";
"LED3_12_125";"LED3_0_012";"LED3_13_134";"LED3_13_134";"LED3_6_025";"LED3_14_135";"LED3_7_034";"LED3_16_234";"LED3_2_014";"LED3_10_123";
"LED3_8_035";"LED3_16_234";"LED3_11_124";"LED3_8_035";"LED3_19_345";"LED3_12_125";"LED3_9_045";"LED3_12_125";"LED3_2_014";"LED3_16_234";
"LED3_15_145";"LED3_7_034";"LED3_10_123";"LED3_14_135";"LED3_1_013";"LED3_4_023";"LED3_0_012";"LED3_11_124";"LED3_3_015";"LED3_7_034";
      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="ObjectNo";
      desc="object number";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [1000] 18;14;17;18;0;1;5;10;1;11;
1;11;10;10;2;17;8;18;17;7;
11;6;0;2;8;0;5;5;15;18;
3;5;6;3;9;14;11;18;12;0;
14;1;8;10;6;9;9;14;11;12;
17;0;19;14;18;14;17;1;0;4;
7;10;5;3;6;3;2;18;3;6;
3;5;17;6;2;17;17;14;3;13;
4;3;13;0;9;14;19;18;2;18;
6;18;9;19;13;8;17;5;10;19;
18;6;1;5;2;4;13;5;12;17;
10;9;18;16;8;7;3;7;9;4;
8;19;5;17;5;11;18;6;0;17;
15;5;1;16;16;18;11;9;5;4;
19;14;17;1;10;19;12;11;4;15;
10;7;5;9;6;0;17;15;14;13;
4;12;18;8;8;11;7;15;9;13;
13;5;18;5;1;11;5;9;2;2;
2;13;0;12;4;14;17;18;7;2;
6;5;15;4;11;5;4;3;18;17;
10;8;6;2;11;12;12;18;12;17;
6;6;16;19;16;6;10;5;8;10;
15;6;0;16;15;6;0;7;9;12;
2;2;19;2;6;15;2;12;17;12;
16;4;14;14;1;1;4;16;17;13;
6;7;19;12;16;18;17;8;17;0;
5;11;0;9;11;5;9;18;9;5;
1;8;3;0;2;19;4;7;6;18;
6;11;7;6;0;7;3;7;16;2;
17;14;3;11;17;16;10;0;18;11;
18;1;9;0;13;9;7;18;14;13;
3;12;1;18;8;1;15;17;5;2;
16;15;13;16;12;19;17;18;7;9;
2;3;3;11;5;16;11;9;2;9;
3;7;3;13;1;13;10;6;13;11;
14;7;2;7;11;11;7;5;18;9;
6;13;17;7;7;4;3;10;6;10;
5;2;18;8;17;4;5;16;16;16;
6;7;2;7;11;5;11;4;8;8;
7;11;16;12;15;7;17;6;11;12;
11;17;7;0;5;17;7;18;2;10;
6;19;16;10;15;1;17;7;16;8;
10;0;14;1;0;18;18;5;11;15;
0;13;5;18;3;3;16;6;12;6;
9;19;7;7;3;10;10;6;6;10;
16;13;14;9;19;19;1;10;7;19;
7;2;4;13;17;12;4;9;2;5;
3;16;2;15;2;15;18;17;0;5;
12;3;0;12;10;17;11;5;4;8;
9;4;0;16;14;1;13;1;9;8;
10;15;4;6;6;6;14;14;13;18;
9;12;0;2;10;14;5;13;4;1;
8;1;10;0;13;1;19;10;7;18;
18;18;6;3;5;0;6;17;14;2;
14;15;2;8;13;2;12;14;0;15;
9;8;1;18;19;1;10;2;1;6;
4;19;1;13;17;18;0;12;9;13;
10;18;0;15;2;0;17;19;11;15;
18;5;19;7;2;3;17;16;13;17;
2;5;4;7;16;16;15;10;17;1;
14;6;11;2;0;8;7;10;19;6;
10;9;7;8;9;14;4;9;0;3;
18;9;12;5;3;11;2;1;6;1;
16;17;0;14;4;2;0;14;11;7;
9;7;2;15;1;4;6;13;2;16;
14;5;1;7;6;18;14;4;15;6;
17;19;4;0;12;10;18;16;12;0;
14;14;1;3;9;17;7;5;16;6;
1;13;18;8;14;7;0;5;11;10;
13;4;18;15;11;13;13;16;3;14;
12;14;6;9;16;14;19;5;15;15;
17;0;13;18;1;14;8;15;11;10;
6;3;13;0;3;7;11;11;18;13;
19;19;7;19;4;16;16;18;10;18;
15;5;9;19;19;8;18;3;19;7;
10;15;15;2;8;17;16;4;6;0;
16;8;13;6;7;3;16;3;1;10;
18;8;9;18;5;9;18;2;5;19;
16;9;2;17;0;15;3;11;2;7;
15;5;8;8;0;17;1;0;9;16;
17;18;16;19;4;18;6;3;11;19;
14;19;16;13;9;16;6;10;14;14;
17;3;5;0;8;8;11;0;12;15;
9;0;16;2;4;14;19;2;18;19;
17;3;7;10;6;14;6;2;11;8;
19;9;5;19;6;13;17;10;9;2;
0;0;0;3;6;2;17;10;9;5;
10;4;13;13;13;19;10;9;16;17;
15;7;0;18;2;8;5;18;6;11;
2;18;10;1;7;1;15;8;19;17;
1;16;1;2;13;6;1;8;14;18;
13;1;9;15;10;2;9;17;10;3;
10;10;12;11;3;14;5;8;19;2;
7;13;17;9;17;13;17;0;11;18;
11;1;1;18;18;16;13;11;7;8;
13;19;10;7;9;7;15;17;18;4;
2;0;15;8;14;18;2;17;2;7;
6;18;8;8;3;16;13;15;9;14;
1;15;4;1;19;6;11;6;9;15;
5;13;14;16;17;2;18;4;7;13;
      };
     };
     double_Data @[2] {
      name="translate_x";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [1000] 0.2185812224176579;0.2210698072581053;0.158600867717157;-0.1688048717592646;-0.1359991340869504;-0.0806881087573546;0.09734727974884183;0.1764363439592287;0.03450927526720521;-0.09740576261057532;
-0.1798260886820263;0.007827685683468699;-0.05311036622078652;0.1959873686443184;0.08251067872771639;0.1761049411217287;-0.1927643918556651;-0.03672850282632567;-0.1015564492420348;-0.01830822504455037;
0.1421039931022193;0.01617486682738811;-0.03660246150065166;0.08451047454047733;-0.1766677923018551;0.05381446130216722;0.01156098564473129;-0.09152747115244181;0.07681646760840266;0.02283321883470601;
0.07399525819537983;0.1566887103178041;0.03778473431840912;-0.02971678490605639;-0.1164935905661859;-0.1307473050016175;0.07206057271519933;0.1777720571895517;-0.1679695507140754;0.1869170408226095;
-0.05792844206909048;-0.005075279794571008;-0.2380019125596614;-0.09931580755584024;0.1510652828149404;0.08822569230397376;0.1852746042296239;0.04033203269631347;-0.1230624760584983;-0.1272894003308006;
-0.1809805554247973;-0.1233616534727181;-0.05616699835394523;0.243907280257797;-0.01098990604093203;0.08405299880629136;-0.1840453764319813;0.005664748928244034;0.1472926677215048;0.1497411626985737;
0.07196706568288086;-0.04046961795001097;0.1876580736948752;0.1780670754631206;0.06502548550364201;-0.03887859393613591;-0.02229597784239606;-0.197747214324927;-0.03441272017656927;-0.0995050473159621;
-0.1876861959128279;-0.1888512007633419;-0.0225652639054702;-0.0765242375898082;-0.01296247875297873;-0.06467748632711862;0.1694271966196906;0.1522249334597662;0.1865437411688139;0.2320452705644365;
0.1446179259766513;0.09232047243545238;0.0189315691873459;0.1997588842746659;-0.2362671770891085;-0.2416750923747681;0.009680271735967971;-0.2146976478093889;-0.118245285262629;-0.2034423561702127;
0.1239235567674146;-0.01459634746515132;-0.1427277498759381;-0.1178881967005651;0.2329417548772326;-0.04126857033626252;0.0919194626011966;0.1920338545869669;0.2171729253169812;0.2027601989139116;
-0.20414946426135;-0.2464173254672958;-0.09858017165021671;0.02059141541251841;0.008532509498936081;-0.1618294780841518;-0.08188847959534074;-0.1351105945728738;-0.1251025639493815;-0.1664704433068852;
0.0359426570256659;-0.09551386274085344;-0.01878181561276998;0.1079097847884152;0.1869639322800252;-0.1243784430564009;0.194074634119679;-0.09678789612661653;-0.005282920541117564;0.1685152809631898;
-0.2205706090405268;0.2073879362584026;0.007521063787512439;0.2153417759302221;-0.1016699526346571;-0.1926239463733444;-0.1713498103347497;-0.2173027142691114;0.1768466960490655;0.1196949832315932;
-0.0906251128937981;-0.01170196143611335;-0.07658681047617316;0.02389683163099449;-0.1999817153735868;-0.09639533094097663;-0.05769870593464277;-0.1073396511158747;0.03545261665484489;0.1796097184427944;
-0.1443366299590167;-0.137273469168349;0.02776407746386139;-0.2146689147159819;-0.02001314213190608;-0.01455241944328312;0.1132123493939391;-0.1814356622089476;-0.1517615176501082;0.05996907767720749;
0.05787382435557165;0.02639134661436437;0.1418548952349961;0.03172298842289611;-0.1089252463695425;0.2231000092233993;-0.2239593446620197;-0.08039785040557768;-0.08354826117592251;-0.1297401722168508;
-0.03103945559285154;-0.2367536730753454;0.1838763272323899;-0.2439960233802849;-0.0393882689695898;0.09738133595398718;-0.020146608250177;-0.01267444324762435;-0.07725537106971947;0.1597124340130435;
-0.2148447180247211;0.07756067634107339;-0.1173801807550608;0.05141037119337855;-0.1305132304233276;0.1708128057310883;0.1517377842006594;-0.2370530537820516;0.2242335485527878;0.1970672029305212;
-0.06453100740375134;0.213640311839456;-0.1635309884276294;0.0963237339198541;0.08627942602622513;0.1310340498242435;0.01391497273622394;0.1947115765341604;-0.2249236402570302;-0.2404546023605925;
0.1219859556565107;0.1478064192827976;0.2019435291142514;0.1348017303643095;-0.2105810495345967;0.1268817987348634;-0.1119199532388073;0.07621178049656957;0.07822335091041765;-0.1456599025742865;
0.2275638687944015;-0.00517807032133466;0.2125733240650242;-0.1567418186038331;-0.2428432419086606;0.01962393657964839;-0.0666403409693393;-0.04709911881433509;0.2447818201090669;-0.176187049464578;
-0.130878181623299;-0.204368054390139;-0.1927128395081789;-0.2056014502438516;0.08819729384847852;-0.1174787487352856;-0.07708134667295641;0.2040316270112038;0.004806339075122901;-0.08322649598596621;
0.08614431993195121;-0.1769215491463601;0.203679832258527;-0.2372877037199165;0.1273757608718686;0.1376102788257805;0.2203748402595498;0.2126767463053677;0.2020354104099906;-0.1360234967072929;
-0.1009228883631944;0.2247464807373442;-0.2058244890843439;-0.06629778387675384;0.2061695392412672;-0.005629960337158069;-0.2045248235401274;0.1823474619055753;-0.08799370370964299;-0.08020318055045655;
0.1058912105937114;0.1823948964143208;-0.2093588581682364;-0.1190493396071853;-0.1821677496305252;-0.1504663625765034;-0.0558053251686158;-0.2324750391393895;0.02168014421710956;0.03256410421187761;
0.1792822838852698;-0.1945298047306248;-0.09438823945072289;-0.0867642020385298;-0.1712778575582143;0.1793511365203825;0.166338879604358;-0.2199253119186763;0.06047584580427301;-0.2223936991702676;
-0.1394567800611655;0.05301416668148701;-0.1652305822155816;-0.06430120690987362;-0.1280184421138105;-0.2112871524911752;-0.008442881007699743;-0.1842965994135015;0.1910518572449594;0.002848802215165869;
-0.2117983826765139;-0.02500018278443755;-0.2164128914312113;-0.08493973341762884;-0.1915526373465616;0.1017377471387673;0.09443549741502999;0.02263302946056883;0.006312660913290968;0.1210118689598436;
-0.02662477386685214;0.2128716659138407;0.1528611423814531;-0.2397668979880692;0.03062736249363412;-0.1816555549906281;-0.2327652646820388;-0.03718011129357313;0.05685801607613622;-0.1387168661867544;
0.1818944507354499;0.1350177083682127;-0.2178795155552894;-0.1248327596784108;-0.0978484637802895;0.1100600202130561;-0.2469029672984071;-0.04637951220984221;-0.1143490933076252;-0.2157906924834005;
-0.09398687618070567;0.07661419563483041;-0.006121044738343739;-0.0919238331887906;0.179333007324301;0.07740340130456047;-0.01116789972402665;-0.0126010080627319;0.1205557818237009;0.07699858148531319;
-0.02001963678315216;-0.189806966785195;-0.2334148209132144;0.1951730777609919;-0.2044956061867022;-0.1965117048799522;-0.09141653877630979;0.003623759702043594;0.08645218444461927;-0.02889403501569526;
-0.01510078211565341;-0.05623082692535736;0.1603124468027701;0.2396076319650799;-0.07010223605286775;-0.07908822169302221;-0.17428905155151;0.0305410611070116;-0.067777554318313;0.1540119282393705;
0.1437448470985761;0.1459231789434929;0.2425037103620751;0.2317880591892486;-0.09514792410463319;0.02242543854964646;-0.1698713923629034;0.2289195104490404;0.02734897581804518;0.1364796814244997;
-0.19271661478773;-0.04453824457443789;-0.07261658948108007;-0.1704170990166309;0.1722158795337103;0.07951489747092438;0.1646732779833914;0.2471968664839257;0.1573659104634135;-0.235493992955883;
0.00364820680408301;0.2099471848609736;0.1216313183529187;0.2480077175648413;0.09982585126381488;0.01312602765528742;-0.0758127056502988;-0.2259703281792606;-0.07867942281326806;-0.2335185632814197;
-0.2254082645482832;-0.2348110154311135;-0.1386077537689003;-0.134012690194691;-0.1148332931319089;-0.171664954062492;-0.1625699723742606;-0.08214302585764416;-0.01738314561856258;0.1221386636533451;
-0.1451173407048177;0.1452751199328555;0.03461465937488423;-0.04691287790261922;0.1097581568142404;-0.1207651318674344;0.1550206488398359;-0.1185058242373311;-0.04537886953184955;0.1588922702870853;
0.2415509241741897;-0.136309092413938;-0.04544016662870987;0.08516980469274693;-0.03656534088808827;-0.1654141279406369;-0.1142555379249277;0.04136388839423977;0.1313290487540768;0.1959527450629187;
-0.2103548219604506;0.1415903437709919;0.1824684143018333;-0.1308869903071171;0.1670885050084522;0.04593888352431885;0.01497976374535914;-0.1708164781378153;-0.05290228496114141;0.1950164992784303;
0.1469231021531666;0.06814861300020336;-0.1855686870542103;0.135060146086043;0.02662353604065126;-0.07206771819013819;-0.1745549734389626;0.08518399284357181;0.03543390593626061;-0.2090515518560934;
0.08149554254087149;0.188921571566757;-0.09495646842623895;0.140629323405678;0.1757435892392883;-0.2405051228981052;0.003132560231361547;0.1073676431576711;0.1882664323868959;0.01667732755848478;
0.1760353937083738;0.2136578604106888;-0.1606766084160108;0.2416633007011159;0.1834382675362485;0.1358142076390726;0.1158945539520855;-0.2040866665198498;0.2128777773805715;-0.2262822068835003;
-0.1066102886706611;-0.1805082487961402;-0.1474873690275061;0.2159222176569957;-0.1370757529536714;0.1012085164779584;-0.2307306398983113;-0.2210592126021065;-0.02803371584874143;0.2167703977099051;
-0.2210628554972874;-0.126507059904021;0.02674564555901454;0.09191402013301997;-0.2474915124946322;-0.18557487742417;0.07861120875252109;-0.02691878274114823;-0.1090727859294889;0.09944142524334998;
0.1696392389003895;0.1430486345653982;-0.1523135941288674;-0.218549263846409;-0.1756190833698412;0.1171315544382594;0.2071187009757403;0.195340072705387;0.1819823137211107;-0.05139778556953506;
-0.106205734495479;0.1377961910133504;-0.06335828064748783;-0.04591743925877489;-0.1804487281042506;-0.02266483086632454;0.1120946537175416;0.07409470169107929;-0.1715628619622667;0.002943967325394259;
-0.2250733022735188;0.2206639443902551;0.2464608192124228;0.006065033661127595;-0.1854302568114924;-0.1706051480797036;-0.1768485145391387;-0.2245374193421379;-0.2218831056856475;-0.146336594638477;
0.09045958111341168;0.01120449936132278;0.111976052044666;-0.2208303289685922;0.1563375619097501;-0.1983976948651137;-0.04467468103606703;-0.1432520336429712;-0.06172516412098605;0.0454052177657509;
0.164563120630866;0.1661586055904543;-0.1283303749848593;0.1549254158161337;0.1931353620105905;0.05966430073022133;0.194963819938511;-0.1214886921925449;-0.2042506844221318;0.02239423878891023;
0.1179144509843481;0.1481185117597527;0.2234294333869058;-0.117903852834662;0.1338401687749278;0.1474192216917317;0.130619020827848;0.2320428015326238;-0.08406015550526169;-0.1159931676641201;
0.1254356798984271;-0.04377428305601305;0.08274659878932578;-0.1429593166865225;-0.1362341776425258;0.1152444948668038;-0.1658497538956532;0.02871068067511573;-0.2023697807543964;0.05735801475745045;
-0.0142577777063535;0.0947192539284944;0.2115085123902539;-0.2191328139678849;0.09768612699231133;0.1152713256259993;-0.1723382012028428;0.2409093272827517;-0.0923197987141845;-0.2235773880461414;
-0.1502091995418794;0.1192114241442832;-0.1043315448990473;-0.06211597239620115;0.01257010752811316;-0.1671019815951977;0.1588946028395898;0.1012936398198022;0.04137868441789228;0.03507400747155837;
-0.1529935513114197;-0.2422109726687893;-0.2398879376582581;0.02285841700675023;-0.1645224747874774;0.0264216666338889;-0.1881151450789548;0.2380777496478705;-0.1505419261878237;0.1969444232761172;
-0.1392676060338941;-0.110576219630861;-0.2254484213084834;-0.178598206268515;0.02256876408462943;0.1900411628418903;-0.09952190465853222;-0.11262126321941;-0.06381326655126363;0.08001069196481408;
0.08073143967290841;0.1140507451547891;0.1553011130721013;0.2365016587560958;0.12620734551593;0.03850549921603469;-0.0109296741380327;-0.03402635547758232;-0.2376787591640056;-0.1842278303409539;
-0.1052094717438651;0.1204236046560289;0.2188415036561419;-0.05933441259970301;0.06606191750678814;-0.1534491115149076;-0.1405413774003859;-0.02308292155231551;0.2380278832389213;0.006773492314053609;
0.2207075669076171;-0.1386019257677946;-0.1878053338237339;0.2363024517062599;-0.2469343755461685;0.143605870940753;-0.02974012517972219;-0.04978040294582065;0.09402067448906892;-0.2249438958888988;
-0.1967851673855178;-0.05656492769519356;-0.1263416844799677;0.2385260155595615;0.01545550745756563;-0.06130211071365455;-0.2113673343801545;-0.05134396372011651;-0.1068617216032482;-0.006027689515154144;
0.2230205170902537;0.1926408948334873;-0.02387751809909777;-0.1498334888705806;0.1253650295584284;0.03868819209630947;-0.2072617807545257;-0.08668706298964846;-0.2119372069858597;0.2059914573746817;
0.05215917930931757;0.07524377584649289;-0.08873184849636506;0.1525192122344445;-0.05254156981801023;0.02515844503515929;-0.1750027644343792;0.1163239475182995;0.0627146922059737;0.1713009794681602;
0.1648006750876275;0.03712755880921992;-0.2488161726540961;0.2205022762142844;-0.1600886885200971;-0.04246722154400639;-0.04219805508269386;0.1772633029851877;0.2161521211235534;0.05006909261654002;
-0.1032450020917666;0.139600387522785;0.008012115897620464;-0.24714355974618;0.1373944916688372;-0.06672582320109932;0.2164239421508011;0.09909358066267909;0.05878815603409582;0.2302079929654091;
-0.1971466841755828;0.02376967691448123;0.01686522991616402;-0.2320969209012135;0.1877413742664887;-0.2329450201158199;0.2279077909810481;-0.1538464770791783;-0.1401945526053817;-0.1430950307778809;
-0.2275682121994315;0.08053045556383315;0.06131839489663543;-0.1971478032870074;-0.08884667028983012;-0.1927549282465438;-0.1678124498055018;-0.1361672151791302;-0.1974716749370916;0.2085527388259895;
-0.161210173719968;0.03499092428519235;0.1485405917282285;-0.007255987935468278;-0.1519878260886491;-0.01366883057211193;0.08545590927766444;0.1587470629147908;0.1219806786517104;-0.03370539822329205;
0.0945346852351448;0.2119241898229898;-0.01885654692874084;-0.1606168629200452;0.01348696186334486;0.02950004667339373;0.1533915548454455;-0.1714549143747175;0.08614568334617728;-0.1453877073846676;
-0.2457324943896548;0.06154352624180159;0.05041391787338051;0.1505847482758552;-0.2477010585397145;-0.1765528523290827;0.08085018915511777;0.1445023295251386;-0.1291020540360379;-0.04342620555125254;
-0.1901408986177807;0.1458667522083125;0.2397560476685441;0.08094157986673345;0.1046214618420713;-0.2127964468542555;0.1450166033537944;-0.1603110790497435;-0.06817775216095134;0.1680656520253744;
-0.1164880943878091;0.1533480530662883;0.2120617482207797;0.07994728867879375;0.09282742349796869;0.1384609541495787;-0.1665922873442865;0.2327347818953479;0.04899669697535075;-0.2290988920978418;
0.1042949540728906;-0.1975748290088016;-0.0475988017869397;0.1656587030175146;-0.01048985543758396;0.05463421859954681;0.1813094930178853;-0.2254143238949257;-0.2097474915087744;0.1627322681588652;
-0.09165965785784064;0.1934417710108717;0.08171194734295906;0.2240932997927685;0.2176390308182572;0.1192307033375492;-0.1862285388977136;-0.02456552488740354;0.1531646584185469;-0.1544493401670294;
0.06254757840487751;-0.1407055482334414;-0.003743517776804928;0.01154783505254742;-0.06255984024207539;0.07033986536333942;0.2219298124749733;-0.162516458748736;-0.1141390241114559;-0.03403252685856278;
-0.2160680122952001;-0.1183339448337449;0.02397036681120673;-0.06444867927632536;-0.1077745134215566;0.1061068833427217;-0.2428500448788141;0.2479660149081106;-0.1039738139223942;-0.005235008777514483;
-0.2405727803448477;0.2421165126521358;-0.008488691293742912;-0.1428153757650499;-0.1907626944429165;0.24857343776744;0.04637127897882165;-0.242800457338421;-0.09804309476857659;0.2418749911673959;
0.01463247847241206;0.09666472635848455;-0.04242541977370951;-0.1582005705367512;0.03482365649769387;0.06546499883056561;0.05119328685605018;-0.1987591557583999;-0.2177857192413157;0.1127683271076795;
0.0009986179564416275;-0.02333083845281425;-0.2001880764621095;-0.211331972415096;0.2362139569501409;-0.004225551085587476;-0.07837189661259741;0.1988246857984949;-0.01193687716287117;0.1526193283454338;
-0.2241906011964145;-0.1494667774937079;-0.2338752953541549;0.09730272897171605;-0.1058645375117011;0.1300244164992541;0.1472098443518342;-0.07811974330509081;-0.1271846981234651;0.08428218637214624;
-0.03225795538045462;0.2369491210781586;0.07279511783700821;-0.2336036201539174;-0.01463159841302197;0.06423248778469232;-0.06176330344932973;-0.03550530995477336;-0.1052566924262378;-0.1163556931981801;
-0.06488943259542124;0.1550967234510057;-0.01555251139863506;-0.248529465141018;0.2281211078797316;-0.07405686228848096;0.2044901779094657;-0.2027437118105566;2.963022389951275e-05;-0.1976652136407163;
-0.1831106032877404;0.2440540934525474;0.1139642290761759;-0.08716128229037551;0.002060058642119389;0.01607195192226363;0.01927571975539683;-0.08284809516861197;-0.1937016875636143;0.005984935163837968;
-0.01932472391332057;-0.006511102530938284;0.2076014267952555;0.2057312314990675;-0.240894627595065;-0.1516810168404839;-0.2466509210220879;0.200912340094353;0.2128398957001425;0.1861312257366656;
0.0815690757268015;0.1546729733884413;0.03814970212605817;0.140897366836601;0.1572534990224265;-0.03710011311416894;0.211609902806591;-0.1359174129155516;-0.1021953435434633;-0.09349560611414459;
0.220790566342379;-0.07747099659036405;0.158255859083896;-0.200857198292813;0.07483145052519302;0.1904076260481379;0.01929632382671531;-0.1851676017682695;0.05643339919978058;0.1037239165312766;
-0.09186560809695982;-0.186144950928815;-0.0133219238874796;-0.06598215863352758;0.06442506459818048;-0.03519789950388946;0.1172256443797191;-0.2315136753849749;-0.0329623457938174;-0.1672764899094702;
0.148076082451086;-0.06509834368622275;-0.06167108813280636;-0.1609728424101151;-0.1202764208060708;-0.2322426004532439;0.05747617074552658;-0.07963269276446994;-0.07556731351450685;0.2051648691872054;
-0.174285746139501;-0.1060118579089302;0.0720325239564088;-0.1962116866356743;-0.1606504011074804;0.1974399424109027;0.1645683906305941;0.02870729663538785;0.2260463181930517;0.1737743176910969;
0.1880928886936669;-0.09713171795168557;-0.2462817787552415;-0.1141754846077866;-0.1052547705335261;0.06561785744606174;0.1322554113248052;0.05852843066545382;0.1194276672429613;0.1410470141530364;
-0.03243237361181689;-0.06357864278151754;-0.01479512796574611;-0.1089927883811077;0.1056626231045318;-0.2431563446453744;0.1831162776741679;0.04467028628216185;0.04628265163330536;-0.241163571249699;
0.1083477581104828;0.2179017465974125;-0.1083939687941524;-0.004707459941700354;-0.0533733725638682;0.008865541141365896;0.1015027942618996;-0.2322352578215321;0.2080658137691177;0.01951255462102847;
-0.05829414372948089;-0.2065763476502779;0.1201384768151799;0.216977766004416;0.1854896967369384;-0.240070093865878;-0.2053836254336888;0.08068860822412899;0.1315412987738777;0.1575336381885396;
-0.2440862118892554;-0.03509863791228263;0.1796809987150677;-0.1123655770166574;0.2184865963361686;-0.120869309812285;-0.1847250306935839;-0.2383735022985968;-0.1813744089611644;0.05644593098831929;
-0.06083836024401218;-0.2151116847573393;-0.1823885035668068;0.03275595227277384;-0.1722767871699266;-0.1872565946367054;0.2276238618262846;0.06121914788428784;-0.1893448890173876;-0.1572211057151052;
0.1455021951025927;-0.05675569034680072;-0.09371345300340023;-0.2470709441733344;-0.1743667539971186;0.120533401223105;0.1967495547629833;0.1816533586421336;-0.1524280754742559;0.1124067505997899;
0.2177803635913372;-0.1746989664928116;-0.1651186913551771;0.202032201231811;0.0301254179708369;-0.01755176472266784;0.2388213634251654;-0.08779106220029698;0.08299661136557096;0.2177333494898421;
0.2308984713168312;-0.2409646035924622;0.1002742662574903;0.1850020791969257;0.1521598189706325;0.2447434017583155;0.02576112316747309;0.0248559084992091;-0.1890574468902242;0.2233219645519943;
0.1523980237365043;0.01119860729503774;0.1766576095505365;-0.0975947280911611;0.05718129087127205;-0.04459826950723489;-0.2117958283151935;0.2144757798972098;-0.1024651591006928;0.06562697456510846;
0.2038669284996981;0.03798380191053519;-0.08403215447272189;0.1804271637361728;-0.2465146949359425;-0.1783789610343525;0.1002131300606843;0.1335571383599766;0.1802443396850952;-0.1843839545914711;
0.0851847064064109;0.05419668703881153;-0.1618880312662109;0.1625582886603891;-0.1490126519440008;-0.03699548920027801;0.2445895195701744;-0.0402113468629044;0.1294591885695854;-0.2435270204338613;
      };
     };
     double_Data @[3] {
      name="translate_y";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [1000] -0.1092743647146283;0.1139747045309913;-0.009663400518191367;0.1029374687857087;-0.05172462110159382;-0.246301494150157;0.0556820941670334;0.07740647127641637;-0.03619178315911059;-0.2495580156067881;
0.1474889078538311;-0.2242181219753515;0.08964808211525582;-0.2029448597499278;-0.1098617234103227;-0.2271670346824358;-0.2232082062418635;-0.177754201555572;0.08114186248715372;-0.006376058270219476;
-0.21581496955003;-0.1361492144578076;-0.02101646299180238;-0.04872377319882165;-0.08241957205036432;-0.1789356440125913;0.1769444080916711;-0.1523776171867369;0.02855668238559295;-0.2258962692522301;
-0.1284209158499047;0.1026199864367639;-0.2138739677690562;-0.214671978332146;0.1602949349869371;0.1924288441908861;-0.1703672054897314;0.2399747029806735;-0.1744759313176234;0.002182268385721831;
0.07084964886641237;-0.04711875657205605;-0.2276543294885824;0.01175603090051741;-0.06211996854805585;0.1119650548068467;0.00186173197667211;-0.02734788575495428;-0.06901541637998648;0.2234448579703293;
-0.08034470968763979;0.2239896925906354;0.1058422671273118;-0.08159186135677998;-0.2184906969444403;0.1764203410356754;0.1169764191616921;-0.1252981931040499;-0.2326499509248959;0.1199984772420964;
-0.1391700538079368;0.1893703756161023;0.07792707505594176;0.04470272807629899;0.2394060136885867;0.1722952962745387;0.02277804251798787;-0.1057033399573518;0.2075599031378669;-0.04870537310320872;
-0.1608994508685907;-0.1136732728227245;-0.05427849668020385;0.2434851285925355;-0.08305013408246992;0.2470585322233924;0.0764833990541488;0.1331092043426502;-0.05370741744850266;-0.01301726553615606;
0.1611471030216448;-0.2062258825699947;0.1541832024643004;-0.106227173330728;-0.1067151238809874;0.2393685747509787;0.2109732828944499;0.08737252466869633;-0.01282074411133832;0.08202456676975139;
-0.01287664540651373;-0.2467675702114466;-0.1492119643575097;0.09169804186793201;0.04914008289708222;0.1446575210883013;0.05701508674262584;-0.2371822118817931;0.04477749067315356;0.0203151893382994;
-0.08165210287764246;-0.1038987031683246;0.004737714505029966;-0.06856440628556415;-0.1114294079287013;0.1602548513650619;0.00365262465911087;-0.01176474349224127;0.1950225284319103;0.2476069294393329;
0.08870264438072933;0.2119013203037075;-0.1048932895784793;-0.1051291715452268;0.1778948442480012;0.2099047552132417;0.01563724305531677;-0.1555992049580356;0.03615119133601152;-0.1808674548117417;
-0.04013196230287358;0.2260347963408736;0.1267506218696339;-0.2100290728523072;0.2117032865518884;0.2336083148594102;-0.1262367339518631;0.1549856561187193;-0.05211932712452416;-0.1379822619203274;
0.02368401300123629;0.1738214714886878;-0.2295334495490728;-0.1942039604645099;-0.1984038872521268;0.2071058868479179;-0.1072343342261913;0.04058101495242911;-0.1759685193372251;-0.2298661917557526;
-0.05672627012537568;0.09079064116998542;0.2306002454170359;-0.1689109525919555;0.08351783436802163;0.008745156333783921;0.2388232446455701;0.00443552995021157;0.1955863918837418;-0.08818345334684469;
-0.01355083923261408;-0.09704958597470392;0.07708644264716125;-0.07127164854573592;0.0219784290877027;0.1250940836966836;0.18880169950728;-0.2189423765031157;0.1786745791511569;-0.03753697768507291;
0.0530503817776154;0.08828929870116053;0.1646134203111859;0.1482506699720249;-0.03814938084593172;-0.1392919516023888;-0.09716442516175039;-0.07690612204436598;-0.1889629815369752;0.025630456528766;
-0.0283249059478447;0.1723873146116188;-0.1181111539654718;-0.04127892058732885;-0.1701294370802298;0.05908735714936886;-0.08396627560821818;-0.08758640379764476;0.1289427244365153;-0.04745393304815204;
0.03725316031446507;0.2469986773362968;0.03250103242676111;-0.1619224566111168;-0.09303596025842864;0.1614635062490495;-0.1025457455589218;-0.01987900688089184;0.2011992580784106;-0.02742394028042239;
-0.1313370371861178;-0.2396094027423386;0.2050589097733765;0.04948244060760021;0.07630601303886941;0.01696441979138508;-0.1164397096487809;-0.1042359843344821;-0.188398977271041;-0.1725019203537862;
-0.1981233438765337;0.08484610965020145;-0.09746289956831894;-0.1418156540145913;0.1500191613195707;0.03579430403706096;0.2205949484210474;-0.1780552927449056;0.03073664459862452;-0.2222343892864333;
0.03357908729368653;0.1324255326285178;-0.205087814153426;-0.09368152452086936;-0.008896203723566254;-0.2052881199187562;0.0008814798072447338;0.1903158368600069;0.2039783174325303;-0.06227400943434708;
0.127461661683593;-0.03189118312478584;0.1852038085243703;-0.2321547009965066;0.1896047058883102;-0.08848450767018862;-0.1495622771952355;0.2050109901706367;0.08010445659928467;0.03836118970783003;
-0.2365360974223868;0.1350571463748137;0.0658856910263288;0.1408397067944279;0.1789043439018164;0.004285245997114218;-0.06836198383871328;-0.1163100078090757;0.1366149708239107;-0.04974919941703715;
-0.09350230883548044;0.08512652771283974;-0.09449276954384384;0.0158538612981024;-0.07092028906221848;0.2214792032339751;-0.1773546480700088;0.01404899899820244;0.08854999610535647;-0.148498464185833;
-0.2405309055806703;0.2249505578548353;-0.1005731337701155;-0.2132666601779239;-0.225067889069585;-0.1009283473736761;-0.1651710984939249;-0.03999573051804811;-0.08364757313044086;0.1667595315616969;
-0.08661262451962959;0.2468227290051451;-0.1129523639874976;0.2443424994943411;-0.09465018390919683;-0.1500655143963381;-0.03702853448937166;-0.169148705157545;-0.02030440963905922;-0.04399691048641396;
0.01160453733350952;0.08057175188719401;0.219063106928227;0.2340804504238728;-0.2352668986440625;0.005840885001075269;0.134561389838705;-0.1948299680744874;-0.06299625242880391;-0.1857679909408169;
0.2383508251004093;0.1701711022825311;0.08760087836897873;-0.06211893521206996;0.05235878485776468;0.1800983431564603;-0.02067357410761911;-0.1393308501834645;-0.1925113965569317;0.2223966724565342;
-0.009394273387269392;-0.134846360555275;0.1981352579592325;-0.2337214504154571;0.01996133319841942;-0.2453416986555944;-0.09383535213362915;-0.1929626452507183;-0.06070921519790518;0.07675304447000675;
0.213660619781426;-0.1285745164713976;-0.08234893141685223;0.01627136962761067;0.2076000643645916;-0.1845449854030398;-0.2220858608446057;-0.09080807803151814;0.09702072839717485;-0.1566610507705754;
0.1058937191721139;0.1827096415184565;-0.2067797487935583;0.08685273613119732;0.1001221873166808;-0.2413328499326908;0.1607934934789404;0.2149219167833644;0.09925852140959118;-0.1923007485610619;
-0.1851488548131177;0.1468318996637135;-0.1805740852924628;0.1517036416961282;0.2096451801735124;0.1178092620141212;-0.2284399663498455;0.004536722476598032;-0.01572622716045602;-0.05381168690548166;
0.244965472622735;0.01957048010800627;-0.2482410403572614;0.1646462187467514;0.07575136257995674;-0.2447285436491037;0.0369750497797236;0.1391906558255783;-0.08551506718458796;-0.1121649276733493;
0.04515264795744967;0.09562864997028431;-0.02267652934865805;0.1515235720334638;-0.167960480696967;0.1167218625486433;0.2386238007917044;0.05967220510295579;0.09362652960480206;-0.02608762624809868;
0.2010829081505539;0.06162881629212968;-0.222155657826522;0.2236991033702398;0.1218095919044712;0.2386456564015058;0.1073816886676194;0.2390423890488032;-0.1556935792717973;-0.2248524394664994;
0.06273875944583418;-0.2010237012264493;-0.1260274972445922;-0.01804879415113225;-0.1329948229231978;0.1684150191661495;-0.2118032126038825;0.05009576507320868;0.02914074124102689;-0.02199655981634974;
0.03870565908069357;0.03899479089246072;0.08079112212380851;-0.2026521079150507;-0.1942376484505069;0.05041805458184839;-0.113485644088003;-0.2364827402717662;0.1709529384454674;-0.1518874193522569;
0.0192542883539164;-0.1603316612287557;0.2227019880142773;0.1868666419354669;0.2304798949140083;-0.127821120214597;-0.2122034530834658;0.2282020550029343;0.01378877412359281;-0.1760368633201129;
-0.1748230577717499;0.1838698105768569;0.1920482709500716;0.2092943521986692;-0.09086477885940558;-0.2403029949398084;-0.2471528217366705;0.1205800716110744;-0.2487652558329841;-0.1631569001140873;
-0.2216763345792312;0.02347655295710449;-0.1543049349612497;0.184428756222736;0.1859887217833056;-0.0499552072716446;-0.1190318922947428;-0.02558608464910689;-0.1498385982542927;0.2453802646002179;
0.03597848184338742;0.00316445023841172;0.1970547281141625;0.1676565057720528;0.08601601455503799;0.1028274145269131;0.1395082839229178;-0.06719871359663432;0.1738860398316788;0.2437270609354771;
-0.1347849430026442;-0.2185101305345248;-0.2070818671645774;0.1532571004274964;-0.2188074608109482;-0.05907044899838454;-0.2147642510677043;0.01999709377193948;-0.07500453135343577;0.1470416879078117;
0.09090615494969984;0.1943453468098678;0.2362019490873388;0.1915330066989532;-0.2409478569160921;-0.05154006027805574;-0.143415716329978;-0.009470918078386792;0.2022492292946462;0.1746304120724958;
0.1703696850232961;-0.04041724574789168;-0.1538505313182081;0.2061879887789669;0.04662013140590671;0.153807059987702;-0.1202010619610772;0.2258340218683836;0.07997135311480635;0.1541214552259996;
0.1277402297954117;0.09047651193006973;-0.1266438921124706;0.03362625298726318;0.06141660451822906;0.1794434411302117;0.1377059369363782;-0.2337124963619189;0.1889907146314436;0.1375335219154379;
-0.236347293747729;-0.1043443618437052;-0.07864082568368025;0.1259215093047865;-0.05453392056966194;0.0208701553863162;-0.1819217787433955;-0.08343795735630771;-0.03978232878055193;0.2175178809146458;
0.1972069107183482;-0.06198816159745252;0.2428791898860385;0.07060800173769971;0.1086418154045303;0.1787692027245149;0.0978225137063205;-0.03701206745272517;-0.1814642636352099;-0.146777006100486;
0.08579445187930901;-0.01362345621968736;-0.03830959759575397;0.1578026134522917;0.1414989024692729;-0.194423075791376;-0.04749177188768949;0.1038600455995708;0.2271994231657068;-0.1508185736140562;
0.03017044238464156;-0.05980113624995043;-0.242415229498111;0.165174443432106;0.2304367583307614;-0.170790667854577;-0.05802120554332807;0.1210359499682658;0.2280074175256879;-0.1025443286859827;
0.01479760895536358;-0.03812081922507593;-0.2427657726178905;0.06671206438738109;0.06374004494779195;0.01974191768062739;-0.1321502115771166;0.05579468041666807;0.1825314991653305;0.02194274702897103;
0.2282353933945821;-0.2169588556493374;-0.04007970841966019;0.02407944880956836;-0.1052602631314433;-0.09425043144429507;-0.2485714253209788;0.0996193497180432;0.2158307854334724;-0.2328152457127639;
0.2471774010060378;0.02243700430540985;-0.2077284260189531;0.1504581618587696;0.00533419446385669;0.2465457647855406;0.09463454763247681;-0.03058039331219536;-0.0603021744180347;-0.204660126644906;
0.01201959227676186;0.02107915508944619;-0.1834314789558488;0.1339921276251927;-0.04404826479771201;0.1953802624203345;0.1546805079179948;-0.03593293019016652;0.2361318360894323;-0.1805477968236037;
-0.05889577274851648;0.2208083433472187;0.06163995729667943;-0.1001974049974149;-0.2265507559394971;-0.1226176659776708;-0.01865322743314801;0.08953003484247607;-0.004415562161999176;0.2442446775938301;
-0.02875361914619368;-0.1632915081228905;-0.1354767496977126;0.08680559355124901;0.1337412673023485;-0.05659327085416005;-0.02372195770674096;0.1002608363159461;0.2475995182868134;0.2127678972047923;
-0.04906446631294586;0.2110962479862328;-0.06568717379860567;0.2311587082998141;-0.1114943253625901;0.0442197145533017;-0.09719328521602549;-0.2315309386359671;-0.06396483464370745;-0.1666676130611756;
-0.1064769837407026;-0.01952893109032883;0.1758488024363737;-0.1612992021822128;-0.001148564632182159;-0.1568336382794812;0.01748550143210759;0.1083377591272436;0.2431442995556561;0.120456903997352;
-0.04937008973827556;0.1751790847261565;0.0903889401275802;0.2010675288922545;0.01069572069206387;0.07316449990066259;0.05260656996098695;-0.0817192812393292;0.09970501548672595;0.01143237886569498;
-0.1006437795930937;0.0524692501364144;-0.1531260494695529;0.01699245097033208;0.2432421552154566;0.08303577145705332;-0.1580622888372068;0.2317734639497327;0.0793565967926439;-0.1172906619407623;
-0.03166562405864398;0.1258810918230668;-0.2180803170294572;0.02753061039421589;0.2079962210138055;-0.006208878747516744;-0.1912557638451101;0.1243615044813593;0.05764582109536287;-0.2266877112008544;
-0.1666790775244902;-0.03912494070293265;-0.0890633131322125;-0.1950624488186289;-0.1966472396623776;0.1841912642978404;-0.1567373460957377;0.2296568445090251;0.1830090047983567;-0.1676030836032669;
0.2149094298248215;-0.1268999372712049;0.08341216994708034;-0.08515583575808472;0.2329408579837893;0.2415842597112168;0.2301051288904334;-0.04936295392970463;0.1979997933454355;-0.1191360897291253;
0.2101205628263378;0.1977814628571168;0.004060883546352312;0.2266713477240661;0.2078774985871801;-0.1977173305780151;-0.1112458889216765;-0.1617998384919557;-0.1507884148726868;0.02912151737719226;
-0.1550341412792026;-0.003203525315006506;0.1434793420656109;-0.01885747613972988;0.04072866431916561;0.2087920406169447;-0.1764186446378315;-0.2244376226058749;-0.1509143748643391;-0.1407243943538489;
0.2109961272993018;0.0004316595231310671;0.0536032484743062;-0.07794984882181194;0.05811802996962034;-0.05060117095101507;0.1659657196181646;0.001644832971490262;0.08891747825305513;-0.1957147545590243;
-0.08514660317569173;0.2419637308116891;-0.2305419465447743;-0.2259134293888657;0.02442507063270988;0.1438660751940944;-0.03330182626871853;0.17230593331305;-0.04556399710800113;-0.03433513549722778;
-0.02925085639292158;-0.2472839795487505;-0.03518237376464528;-0.1083930078113498;0.08950314062662412;-0.1369660358402265;-0.2060201818070365;0.1661447649260716;-0.1359958723942953;0.1448163124836898;
0.1860009972888739;0.1284792041490584;0.02860372029668495;0.2469044163802706;0.002482643488131764;-0.08141998349733348;0.09934557411583039;-0.05425388177840629;0.04397326646760635;-0.2183537156313025;
0.1117966496706631;0.2249929324732487;-0.2135133105552053;-0.2065402604937986;0.1282040796622345;-0.2457010825022436;0.1054768271234431;-0.1677996427628922;0.1578569152144945;0.1073325316442224;
0.2336064315173248;0.03750206295813568;-0.2098770173505486;-0.0544183635455262;0.1206883671582673;0.07902830098476754;-0.1917525859742123;0.2131629461879688;-0.05414496575478828;0.09720832465025864;
-0.2197845373752;0.248053713293818;0.01836976411352198;-0.08679121070147727;0.02463007862556571;-0.2167998169438971;0.1320078463012476;0.2090974647705344;0.2405561261707981;0.2303337651454657;
-0.05633030220701873;-0.1849535823850633;0.1017653236017799;0.1886492851492765;-0.03806341201204644;0.2281364816853367;0.02306871026489865;-0.1240695504020214;-0.06828749245552523;0.1681565035105864;
0.1772182214867303;0.1179002019527868;-0.1030633666099564;0.005336636148044471;0.2000785474892234;0.02606008675731913;0.246653416098448;0.2307938321108117;0.02736251121136429;0.1744932369470306;
-0.08721697450999821;0.2335327606884065;0.1930985572573066;-0.2418806593727812;0.1241917149201961;0.03152606680016945;0.1200247199352575;-0.08443237816416255;-0.01689876006516822;0.0522441611872469;
0.02596930105508899;0.04974765373877976;-0.06034538359322644;-0.04931427353116641;-0.1468398707952951;0.08534761428605997;0.1117490939946505;-0.1477551773855396;-0.06040568950690223;0.2283137314570678;
-0.173546278850723;0.2065811805041514;-0.09852641349689589;-0.208947356487337;-0.1592462292069527;0.1693887144043083;-0.2386414683226822;-0.08321849920560603;-0.08444033798119494;0.09296887119847497;
-0.1347727137232248;-0.01344646361933544;0.05279145668237556;-0.1216560849159385;0.1004758133716687;-0.0860245990992034;0.06807622316607831;-0.2354084809363207;0.001539387760552846;0.01230955674123119;
-0.1026115950123456;0.1559806630675565;0.08738814442591208;0.1347666676876361;-0.1463347897724487;0.09656332627431347;-0.004970382956131614;-0.06171921035706734;0.08027972227484081;0.1600361016791929;
-0.1035316997152151;0.03266668573118864;-0.1311595623599026;0.1966922251827491;-0.1140033425593456;-0.01087258907688093;0.148891225385422;0.1039890644770678;-0.1865329785096334;0.06687954644649086;
0.1417642965896902;-0.1264908967985035;0.2252701652974671;-0.2290361009389245;0.2335482656417452;-0.1167186979640148;0.0270931280211581;0.1260718521057356;0.1782536163739406;0.0173720409733864;
-0.1625762630893121;-0.177714668715223;0.2085323766675521;-0.1467267176943557;-0.04041081754589371;0.1684235516182574;-0.1694516671159614;0.1587379737182486;-0.1612452592278213;0.1954568007153576;
-0.03835638921009704;-0.1071231010161138;-0.1680498428222114;0.2266427102192897;0.1519615954231593;-0.2471764442896786;0.2334576903075541;-0.007173258745318212;0.2431454231121554;-0.06588124495621533;
-0.04227977211568779;0.01895797436655483;0.1576450371015641;0.2406631521101351;-0.04964329896368169;-0.01095641768057026;0.00120422276644705;-0.247040617173783;-0.1149794796268753;0.1635091953460574;
0.08181582134977738;0.2261436219998769;0.1556038716361552;0.07508099276876234;-0.02539080835487384;-0.105362051592523;-0.125408910556355;-0.1526113787587784;0.2032621108519881;-0.008926636748209316;
0.132356180139982;0.1860871892869788;0.077413227730183;0.05657133454482749;-0.02132120969300477;0.1942987973530502;-0.1770536013616334;0.1633270702565296;-0.08165703344732173;-0.1097945204796034;
0.1171184589245845;0.01859931542562543;0.1466746666751206;-0.05717804010283917;-0.103555659205078;0.24470732897182;-0.155452118329278;-0.188474201452634;-0.158842269869244;-0.1269310196611868;
0.0001215233880524358;-0.004211685086331851;0.04850110619552972;0.1558501784843148;0.2479027563607067;0.01610541815420119;-0.1002653209331695;0.09298714395162255;-0.1830328873419459;-0.1144663148526322;
0.03413767183689276;-0.0306853845934198;-0.1196502661575229;0.161799192041934;-0.2389553607091686;0.1971022874864584;0.1875460534200319;0.03218696388403469;0.004193541872374529;0.1450063582125389;
-0.1951070754870108;-0.04004323038818108;-0.1781875418650986;-0.164761361712816;-0.04046978301062493;0.2421372925185742;-0.184394040873786;0.2445915178116968;0.188175150087437;0.2301908546720474;
0.04984555999595347;0.0430825257600399;0.2300172686391364;0.07904641464393103;-0.207014338111059;0.1873246874579599;-0.1947904910320176;0.1606638562091989;0.1291397162104403;0.08852886711541896;
0.123989130001337;-0.1731246330234383;-0.2322318324043295;0.02589288175802368;-0.1953389351480773;0.2076046488325266;0.1383382075999556;0.1549374275054292;-0.004117839580482008;0.1801124458618664;
0.2120409322387491;0.1517140316341322;-0.0204218689045399;0.1306029676511719;-0.005272182882924081;0.06914646297498472;0.09506487025505361;-0.07808914788696564;0.0428263613589015;-0.2119653379320635;
0.2377261272468085;-0.1625662492985638;-0.0525831834262091;-0.1738028357355857;0.02635703255352229;-0.03293587066002063;0.1984268640721759;0.1484750067070718;-0.1759807850630499;-0.1506813378175884;
0.2319095177357063;0.1630156145421024;0.1180808751310559;0.08893630196367924;-0.01791790488724149;-0.1960655662552885;0.1256042412818424;0.07739704913397044;0.1402482466313481;0.02460217409000781;
0.07029521372120462;-0.2291421172821667;-0.2078713075275228;0.07860334217752446;-0.1403248445948998;-0.04146693337889978;0.2278290433331816;0.07869024081115022;-0.05658751593037425;0.003603709565527968;
-0.009178472803058058;0.2199949564196234;-0.06938266665836168;-0.1445587942241141;-0.2073989626213153;0.1789910880056649;-0.004532663883472565;0.1137596874426493;0.2485286718576704;-0.1974560533983981;
-0.2456589949460645;-0.2353933797929091;0.0466020095770977;-0.09764600294242171;-0.04336577194706331;-0.04018446183959018;0.2240249513308628;-0.1338141984211462;-0.1860030421373171;0.0690510754136458;
0.2322206502382252;-0.1856674374678954;-0.2095711432705432;-0.1105967286535112;0.02442939397528809;-0.1785681697186607;-0.1068172336357208;-0.1182769864525617;-0.02474068923577172;0.1971148999232445;
0.1787551326785736;-0.1629585039715358;0.03287972713588205;-0.0716043205432127;0.000204855620567157;-0.05874508495056036;-0.1545995755930447;0.05524073034675414;-0.1193142702826503;-0.2401474901590197;
      };
     };
     double_Data @[4] {
      name="rotate";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [1000] 5.836938940831198e-05;-0.000574041907988725;-0.009578278742429471;0.006033314270946647;0.004299871985200909;0.003263037086945536;-0.00782755805554005;0.004227091967446597;-0.008285254080609847;-0.003294767370711085;
-0.003365785014216756;-0.002678581111048617;0.007554580198312065;0.009949783420216648;-0.006307777465510193;-0.003386207330993589;-0.008371803819309629;-0.004580222113948624;-0.009159696869338063;-0.004094003162004582;
0.002110211027174831;-0.007282320851123507;0.008551072274381203;-0.001331713190978077;-0.004499245666655492;0.007370243656804722;-0.001224587469964939;0.009696267062953493;-0.007596050948591509;-0.009269985108524344;
0.003351547504393593;-0.001298358741148399;-0.00274119996124357;-0.008332931171111104;-0.006796673526276895;-0.009066238769342714;0.004780686928972941;0.00182200308212249;-0.009277056106527622;-0.003532896695726764;
0.003921183707854584;-0.007310194607217211;-0.002569363411876413;0.009265419194673304;0.003885685752443626;0.005559913918949229;-0.006992717024880955;-0.0003453624936118737;0.001315455296264706;0.004273892642283209;
0.000518609806752262;0.007062787814692594;-0.00890447638679275;-0.004499765704440569;-0.003879370489340324;0.006764434130231473;-0.007993040968387906;0.002127702707258951;0.004458355448799941;-0.00164584608580084;
0.001551772732168189;0.005591326986157956;-0.002367796065083873;-0.003046255308462418;-0.009367858080874845;-0.004037211606550207;0.009948033341496491;0.0008387620749462973;-0.005979819007257033;0.003501138960817676;
0.005424473250367925;-0.009564713327971335;0.0003812007543046933;-0.006945747580812216;-0.008207576050094147;0.009909902966531629;0.0005655955516674655;0.004381457196983391;0.007863040708183758;0.009715331410412401;
0.008459793438415414;-0.005130047232629526;0.007094662532320139;-0.0004710232670418098;-0.001289520244523961;0.001035987752778871;-0.009065572390770419;-0.005764121452289146;0.009479352436213123;0.002635684111288308;
-0.005383425767776311;0.008093165984272474;-0.008072063097668156;-0.004989224044918226;0.00947841896582381;-0.001882352430673816;-0.009342414252813456;-0.008186597836655865;-0.005340876525899514;0.002901138602277144;
-0.002631552145011134;-0.007621275187447141;0.006348296313831292;-0.005666786959232338;-0.0003637206393520189;-0.005584577252061298;0.007007966625827812;0.005712802945246205;-0.001528817196618643;-0.006245303896951744;
0.009875163383163308;0.004275189954900123;-0.008551629429571668;0.003682591494021212;-0.004864527064617701;-0.001051747285377561;0.003047051142292184;-0.001939937656028597;-0.007255275582831606;-0.004374982154240716;
-0.002544529634193153;0.005343708121013351;-0.006206712518695468;0.007831176588773985;0.009123256750183146;-0.004200991297063317;-0.001316569224308737;0.009126787169689126;-4.44435508252343e-05;-0.006781148175122558;
0.001891212678443782;0.001912328875739014;-0.008026058907380035;0.009496685883070488;-0.0001797466044447041;-0.00434068431927694;0.001055528318963678;0.009329169088920489;-0.002836029659532313;0.006635390901296402;
-0.009250230270037005;-0.002924635092484815;-0.009640059004437516;0.006901113754288089;0.009805008127265093;0.005109337734663242;-0.001330747708627964;0.00622380747042831;-0.009923847769805386;-0.0004642011906955349;
-0.003747684068220007;-0.005888484967102179;-0.001299279278937124;0.004857552850054484;-0.008774686525508396;0.0009522655705922374;-0.006153029632976268;0.00898069103174118;0.008505739599738557;0.007169958287226731;
-0.002839375992765023;-0.005516972150956097;0.007200525485253241;-2.910377544552978e-05;-0.006857737293092596;0.003577834924366067;0.006301528928693475;0.009619022478292457;-0.002608274869646206;0.009497793560751736;
-0.005757152007567628;-0.004988062386006924;0.002044295453254861;0.007479458055632741;0.006501163116833306;0.0007168259708502482;-0.007717090988703892;0.004225460162865841;0.002418414645624851;-0.006537876524254294;
0.008137137040711629;-0.009687612019992646;0.009294641728287879;0.008633888649190834;-0.003979280089240822;-0.0008617241376066148;0.001649951478474729;-0.001168848523172575;0.003451983857423308;-0.007796526309128082;
0.007144304095449765;-0.006095788175141786;0.007858780270067969;0.000688774426813683;-0.009294136593302464;0.002230218200835674;0.0002861874011813349;0.005288173238072959;-0.0003671508637846585;-0.002199765695027096;
-0.0007207843025232759;0.00960183003623445;-0.006940589432819224;-0.008619835144945298;-0.00686184174162302;-0.006984039818592829;-0.003616199456358032;0.008165919360177193;-0.0001852274165431832;0.006149347525795672;
0.003116805645708678;0.005966776230502019;-0.001249371742880994;-0.005517165985536476;-0.007056651855764554;-0.004815730316138511;-0.008287380753986041;0.007892731639052306;-0.005511714780244262;0.008704570448405257;
-0.004896237305784359;0.001892680414260833;-0.007124160394619083;0.0004519518037143233;0.005299005119459185;-0.001887065938750194;-0.009047548444099617;-0.008707230910710049;-0.003266401849829188;-0.006915056024491704;
-0.003082723736329631;0.003527533669887915;-0.007543729245117878;-0.007892889712320984;-0.008268234344230135;0.003662098265972717;-0.00805863987204152;0.005778247925601542;-0.004429489701554008;-0.000275558606049886;
-0.00774589735029837;-0.005805583992058969;-0.002524410951762137;0.001754721982696432;0.002794949124665999;-0.004956219101157768;-0.004350431255537511;0.001240615162483886;-0.004408793035084026;-0.0003720916875346609;
0.008892460109871469;0.008005634205334471;-0.006072020668911624;0.005693114649039375;0.008935118699457624;-0.003683949049811643;0.0002154103685800025;4.74732065349967e-06;0.007822269288057055;-0.002781866800441302;
0.009104944419299111;-0.00116711636119541;0.003182895849000672;0.004865967642826324;-0.009598699458353031;0.005734716314150666;-0.0005912273960311226;0.002084249697647828;0.001016722178832712;0.008994128434135671;
0.002738153256048101;0.002784007923972315;0.002681837609790554;-0.008163150072892596;0.008958550044574047;0.004365231100553308;0.005686503286673141;-0.006916601841177566;-0.007872575690163116;-0.003768940347741352;
0.001089144546332717;0.001484247189526944;-0.003261626063914418;-0.002214407259617142;0.00150563513363592;0.0001449084339665146;0.007443735280397554;-0.006359303095673062;0.006354261015555631;-0.0002936436671694669;
-0.006175920530856374;0.009523141615198428;0.004849228966676946;0.003703771953318615;0.003845459081871134;-0.0002628763950355533;0.007304238646896858;0.0007824055788706284;-0.00644257482815366;0.002234622937796452;
0.006019424191097597;-0.002309201417300321;-0.003910291372694346;-0.0004129615860929258;-0.008357235140722714;-0.002376186491069108;-0.004965893570643034;-0.001462137427783996;0.001012071641294108;0.008984472977973964;
0.002592717538972085;0.009454790904596862;-0.004724076633591446;-0.004949242379179732;0.006109030492287367;-0.007957278056582882;0.006427781743192659;-0.009902492327890837;-0.001795270246729739;0.004004112044107033;
-0.006976088009897788;0.008898325395625116;-0.003376628129000301;-0.008729497743196703;-0.00273188440083382;0.000720816269247344;-0.003043506166701044;-0.004802650194306648;0.009656176228700844;-0.009024238539667169;
0.004565986782921291;0.001740323617645288;0.00866537635374952;-0.004030077950293731;0.009060799334812355;0.009785068002690593;0.003525974270098287;-0.001382547860229646;-0.00215038378475773;-0.009117032562179606;
-0.00300875359083151;0.007480739552289317;-0.009904168694385245;0.008617859170995114;-0.002711308659013043;0.003578935138047851;0.008920836422544631;-0.004575792348393455;0.001893165574510074;-0.00302181194086782;
0.0001738622516828433;0.008457395365988362;0.002337219387809562;-0.004369590951170423;-0.004420444973701123;-0.001510642005220868;0.003411940067531379;0.003380107025196935;-0.007714657785039447;-0.00960064346026804;
-0.007342974612303175;-0.003790658342802722;-0.006168729223914083;0.0005892340419356001;-0.003587887422481098;0.00431148423207073;-0.003642479380543395;6.314296608690186e-05;-0.001764157919433754;0.002147786925674371;
-0.001842206556412856;-0.00116527457771365;0.002824679958088563;0.008404931838145785;0.005430690085544389;-0.009326524090204815;0.003618843441412329;0.001048401136746742;0.007447019113517963;-0.007539400190141012;
0.005796312126059392;0.006004492807706352;0.009330008442702762;-9.586760256706343e-05;-0.008534830836000758;0.003936870208365422;-0.009776847104281117;-0.009845252684934669;0.003972779901025163;0.009823474718162075;
0.004811577726828243;0.003250152066643489;0.003692024001242432;-0.002561585116185923;-0.003380111408582907;0.004998793696391038;-0.004021664228684032;0.001911943750405192;0.007649097730954254;0.005228597315264625;
0.00440919684627461;-0.008901227214055601;0.007087902457006601;0.006215924075230162;0.00856064026824452;-0.005808271459707227;0.001941757689225781;0.002859253859277497;-0.008438084033651139;0.006697593140388874;
-0.008347066207559387;-0.001816746318688736;0.005476052454597933;0.008690719144882503;0.008047673859460652;0.007865943788795312;-0.002505125377264659;0.001930896341584491;-0.007046486171936699;-0.005170688749209702;
0.006646691961477271;0.0003194435272050565;-0.002742942697059325;0.003532404147876202;-0.005946594559884206;0.004415219837240768;-0.007106782519524355;-0.006720353769290992;0.006993099558378494;-0.005494921241619504;
-0.0005623101145719404;0.0001121186281648617;-0.006928961990520803;0.008633206882815986;-0.004951495144053028;-0.001229895137008892;-0.007097438705329478;0.008151704995108916;0.008036321003226253;-0.007048984774130447;
-0.00397194387725188;-0.007768210823565274;-0.005250956572651675;-0.008441334376031737;0.00743578682704824;-0.002287532515283986;-0.0006206285854619305;0.008530666837923416;-0.003645670998142361;-0.0006218249878650519;
-0.008967500726971774;0.0002924572196560879;0.006163338180526239;-0.0001871991636260943;0.001019790674710022;0.002498544836783112;-0.005772628823424992;0.001296574047865319;-0.006074624214154408;0.009938196460762721;
0.007262125110663037;0.003316009797198151;0.0008698479382207788;-0.002197488452347889;-0.0005235997076558554;0.008477595445150954;-0.001983296620613457;0.005028709183823483;-0.002291661924652906;0.003653529064046715;
0.001595703736936046;-0.002646860864431544;0.00341380666255974;0.001718994646007393;-0.002060517570531883;0.002508571205879382;0.002059471377533399;-0.002147028903519022;-0.00511978506707349;0.0002473783679999911;
0.002876934387648449;0.001129611913920765;0.006036413784827185;0.006911348915799408;-0.005737647858585795;-0.001865670015272587;-0.006849843720431355;-0.006848114479086032;0.0007617111175432043;-0.00205102917914046;
-0.006025667503604364;-0.005987063843593812;-0.008921752580188855;0.007916448618803048;0.00829945867650214;-0.003166743736617763;0.002961469659347951;0.001362786548328632;0.005911936262557651;0.009976426399506645;
0.005098401328627097;0.004335816687900517;-0.002167704932563722;-0.008405775750836834;0.009401407136113997;0.008286859048842897;-0.004752745222784514;-0.007200236736849046;0.008475342018527751;0.00302016116926046;
0.005934238033449649;-0.006804087736942042;-0.0001274704757694076;-0.008108436906806429;-0.003672615686984851;-0.008096846254944145;-0.0093997690670209;0.001942059113848472;-0.00785405607831563;0.008449001850721163;
-0.005913547347232435;-5.069308156987334e-05;0.001686567744408033;-0.001634620944619143;0.0008058559152571629;0.00622173964223322;-0.00854602185663687;-0.00585827439078821;-0.007772737904281646;0.009924484232145163;
-0.007214648567462203;-0.003838837733298559;-0.007620625536563381;-0.006472829397613971;-0.0007021073795800969;0.008677320591996588;0.006605044559272468;-0.007161048534402508;0.004420104089575367;0.001605719197820652;
-0.002316293068803102;0.007474826131636183;-0.008322517135401688;0.001367418749829985;0.00691889539248869;-0.008790536388356607;0.007701606052897205;-0.00850563921935654;-0.009243890984277848;0.005408497588066283;
0.003969387414390409;0.007011295353122194;-0.007439453319952763;-0.009339311548709286;0.008530840840818696;0.001366176537886616;0.006943635077629443;0.0008477497206742565;0.008961992051950118;-0.009365315080215618;
0.002589095529277987;-0.007373765860577633;0.00427784080153544;-0.004212306744781942;-0.004877355796908194;0.00484761997197731;-0.008156534049493425;-0.005247818830134358;-0.006935751940337624;0.001590063981085032;
0.008429243255476468;-0.008513218452337708;0.005935247057574736;-0.004587042344243495;-2.245819719534463e-05;0.001927498079977498;0.001745230939987588;-0.008311104147790065;-0.003883034087951363;-0.005672420608048694;
0.004137989828651203;0.004706143406584625;-0.009908713431500784;0.008131318763903954;-0.002140007948771599;-0.008893150958349267;-0.007554116532732944;0.001457867862716929;0.008444963570935356;-0.00156242888257877;
0.007199576903720887;-0.004805182885329027;-0.006945742136447369;0.005880174790558084;-0.0001678708787927891;0.002496680964710245;0.0006144822529803237;0.0054040671895298;-0.005068836790157552;-0.001153791837123622;
-0.007629846358748081;0.000525895839703347;-0.003833539155321169;0.009854555487621234;0.003995424629556288;0.0009510670861028921;-0.008608908170170586;-0.006521557869199624;-0.005129586888342244;-0.001156482618979495;
-0.002583311843351248;-0.0007643786751536878;-0.006839285382222907;0.001756019755875733;-0.005336374706979219;0.007050852405412087;-0.004312611842207916;0.007011835478760138;-0.004312407072481193;0.005434183127073354;
0.004016941811482466;-0.006897554274895417;-0.005373447685685062;0.00935147510004619;-0.009889939306588089;0.001103912790998094;0.001418904077130544;-0.008782156114496712;-0.002426873174598783;0.005627738892000187;
-0.002967536248066749;-0.00977844700387496;0.00848867196857137;0.003830558295936759;-0.0008079478210192281;-0.002790572929632198;6.206072153838033e-05;0.00718719928761523;-0.009621100057012229;-0.007569679553217317;
-0.004933859377848717;0.00782273090641585;0.009007937032978161;0.005338355792440777;0.004367549460861589;-0.007284432729252031;0.0004996015818747555;-0.006412957520457685;-0.004030544717757041;-0.005508070017297202;
0.009964480578285676;-0.00289576750392949;0.005046781982891616;-0.006870922068065697;0.00846058636986524;0.001732544128224833;-0.001901804642794172;-0.003488297628367497;0.005334176537555246;-0.0004861276748626304;
-0.006354641997311219;-0.004410292415102992;-0.003642013026832916;0.002168077379359933;-0.0008645524002544331;0.0007087713292377035;-0.00770748479245867;0.005124821006392014;-0.008878331711793457;-0.003838068013454122;
-0.006977941010826732;-0.00876698143464128;-0.008194400148553419;-0.003854081494670947;0.002616128041774404;-0.008976283052948831;-0.006214475446010621;-0.0003584664917325384;-0.005246911863894963;0.002596091450289759;
0.001509799021766072;0.009138154879100651;-0.009045274907378163;0.002296542397413517;0.00691482739498501;0.0006233801828194885;0.009390296491663333;0.004209226511677665;0.007632621956218522;-0.0004745332837140619;
0.007565608068353659;-0.005304014423825578;-0.00656068523083071;-0.006002645931790693;-0.008943236165172985;-0.004111782152575792;0.007870675574713411;0.005937264101254546;0.004147626328300364;0.006254037943884518;
0.006731551760912355;-0.0006981424494876803;-0.007162045114024651;0.006186036530454549;-0.004951571706487805;-0.009538530167395023;-0.006219764802308778;-0.006189223040092962;0.003460674319096612;-0.002726945747462426;
0.004565132744827989;-0.0004281505155277129;-0.003602201071069926;0.003018901597702595;0.0007835035803265538;-0.001091335229018437;0.004949952055580591;0.003763342724595678;0.007664028466419391;0.0008431521627758481;
-0.005721186346141496;-0.009115596159275026;0.004991834459371354;-0.009117649773220181;0.005151741929309808;0.003135128126961888;-0.001880517360258342;-0.004084602666333128;-0.007417355736097468;-0.008233455081088947;
0.006462627195892764;0.002932404432194889;0.005048807528831594;0.005594621461369298;0.004113710344239456;0.007841921398353041;-0.005919612192861288;-0.003304015575327095;0.009210319140557267;-0.005111565618991902;
0.009383465991047444;0.002972056455242796;0.004679381382940828;0.001544269840412433;-0.005102629132757954;0.007895147266684709;0.006769613710736614;0.006859661425674136;0.006438155681519826;0.004234902246220281;
0.006666083942021022;0.004090529813130994;-0.008478638800740105;0.006974303230474073;-0.009105565929426157;0.007690810619329915;0.009433856015057565;-0.001091524417553835;-0.008760653131681782;0.009784458753744165;
-0.0009077342561199259;-0.005571792151701813;-0.003273375811185062;0.001496522349852002;0.007449086275897814;0.003279443231851274;0.009334292053688771;-0.009016100882783137;-0.002328342119301774;-0.009691879657512378;
-0.007063764976106677;0.00564308699786936;0.004996733170019167;0.005211972848879445;-0.003770431433629881;0.00798241784325957;0.005760672779409072;-0.001668218464246694;-0.005223432662075729;0.001749273327678829;
-0.006720509611706853;-0.002779364286434842;-0.0001422893326716752;0.006586242373078323;-0.004652035755055692;0.007792441689518958;0.0007740287014263228;-0.001504841714619573;0.006979871741096795;-0.007595504365681493;
0.009846999116796229;0.00549180229786864;0.001307819085611651;0.001937775119058502;0.005134623502053275;0.007254542980929006;0.005403288442234467;-0.0004938295543490123;0.001271941263330006;-0.006040555451070562;
0.007700933657097899;-0.002187736242198895;-0.009733378501984039;-0.003204358392296469;-0.006659116706086448;0.00783197654967086;-0.006220161558595828;0.009951813139991135;0.007881506116129007;0.009426511257094537;
-0.008069663239851078;0.00803061459957107;-0.001162304738616766;-0.000726629963724747;-0.00619596925763451;0.006405988160384244;-0.003246781836614005;0.00696447013808194;-0.002367348794942064;0.009412956621630155;
0.001282143193126931;0.004008586606011671;-0.0004272740072171939;-0.003052086335913824;0.004923817951640565;0.009260124499946608;0.003572856869569051;-0.007664958216492703;0.0005566049403741523;0.007406035374193607;
0.002563708275573459;-0.007118418246167026;-0.0008275563909286299;0.006994826677073454;-0.007732351593557354;0.00223493204887368;0.009596230562311859;0.0008698769846555102;-0.002595790123045365;-0.0006580188844857743;
0.001716331593563779;0.0001819670566742919;-0.0009504326541230085;-0.001568740246903627;-0.006408391818106532;-0.009089434921927637;-0.007862909341274983;-0.008927960368021414;-0.005190885333571704;-0.009529412625340119;
-0.007391410228823461;0.0006765820867624898;0.003593360878969354;0.00328744018572757;0.00641944804324302;0.007904592963208402;0.007421577492514405;0.006479481147716524;-0.001929023230599592;-0.000679621106304408;
-0.004093989372485026;0.003777293057930276;0.003796248281139645;0.0008467148049761362;-0.005312496807888378;0.009254465649061837;0.005818476334684122;0.0003523286385302346;0.0009003727480230046;-0.009478675170440841;
0.001556896704417483;0.008785054185760028;-0.004981593825133113;0.009650238209296854;0.008607862775937071;-0.006420001341532772;0.004729441317357846;0.006253571514038955;-0.005071929428299304;-0.004828261331864077;
0.009768162567889644;-0.007076393561543716;-0.0003140772100441516;-0.009762578805178801;-0.004576812660982095;0.006970918878190976;0.002698002535863608;-0.006358902745742954;0.002044913020552758;-0.001747533389993221;
-0.005153933989756463;0.00911809329871194;0.002420951863273331;0.009917919541691857;-0.00538824563512772;0.002444575542621626;0.009185166013034022;-0.004161778875062536;-0.001860867005819878;-0.003345899367007965;
-0.007401002521103719;0.005797792530483225;-0.00693381876405736;-0.004572375679753877;-0.003282399004205632;0.006292468086765838;0.00169440655703192;-0.009138186034061706;-0.005790102649804976;0.004892647643745151;
0.009907492444264884;-0.003274643170485552;0.003623073485634992;0.008064505849608961;0.007010624817947545;-0.001733658722544997;-0.009014755349443205;-0.003627802279992309;0.004620650602163281;-0.009311306141353771;
0.007265392346046803;0.006459975505125738;-0.009309359031544872;-0.006097228673534173;-0.0008674637139730098;-0.001946849799335933;-0.00573436857989517;-0.005409534234670959;-0.009693500318368678;-0.000515729034045509;
-0.002753207688868855;-0.003705672345466899;0.007877472637270703;-0.002711178826765406;-0.002624307845665265;-0.00455624119761276;0.002946168860613767;0.008007858457896788;-0.005573342521596634;0.004565486102647705;
-0.002862862620371209;0.0003434086061788275;-0.009279398551375159;-0.003661709023626765;0.008909012148677996;-0.00361137654738958;0.008999029101046609;-0.004147696221513985;-0.003540672107394211;-6.507543041944265e-05;
0.003108050641466319;-0.00294057764791994;0.008546351558290212;-0.00269863225981263;0.004211159321725061;0.003142515276111067;-0.005486821863060849;0.00903644344081681;-0.001109267446946359;0.007870093995286679;
0.001183644137272313;-0.009862321049726473;-0.002384268439856132;-0.001046627581250072;0.00560636445608877;0.009907920373377276;-0.002154999227522597;-0.005498087145554014;-0.001245995794578124;-0.0003453463316407807;
0.00983972082616087;0.0002911669259775679;-0.005761583569930295;-0.002369299676622802;-0.00337314996037956;-0.0006501192472631884;0.007600891789374743;-0.001333562263049134;-0.004562155108125568;0.008026737843792075;
0.006134979777660516;0.004953695537339533;-0.008384191692957293;0.005415470012228649;-0.005778549504455213;-0.00235319163718672;-0.004780637524422027;0.008755578617120991;-0.003073388766145704;-0.008011665970583478;
0.009895537117289707;0.009867467493637603;-0.004474620271912777;7.872273638635102e-05;0.009073301810561039;0.008770026857971366;-4.216435382905712e-05;-0.009931285050093708;0.00897390569273686;0.0004977141546280081;
      };
     };
     double_Data @[5] {
      name="scale";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [1000] 0.8117302197350691;0.7372235660004295;0.772926513900988;0.8878002627567927;0.8309434380814246;0.9873320086226649;0.8317733491041193;0.9903991293383765;0.981413288508149;0.9613606908015473;
0.7706704215895712;0.98814246956444;0.945359874573926;0.8890948508839673;0.9843380737291291;0.9322721135644872;0.7589065472206562;0.994982122349223;0.9724598299602067;0.9890746377665243;
0.9739771276508777;0.7256266764218351;0.9002046315551407;0.7233671791831418;0.9767438585679014;0.8548263416139884;0.7005923740783521;0.9812416998550441;0.9124861848987402;0.7647848747050541;
0.9323409767221565;0.7648901600982195;0.8372923136219138;0.7857687027333327;0.9706480105794065;0.7106629694206613;0.8824984405224633;0.7999111736755461;0.8247227221455007;0.8989030571519833;
0.7262941773850377;0.9600151446047107;0.8322313023339007;0.7403091221300442;0.9931890007785116;0.7795898538486906;0.75672961640602;0.7031267443310528;0.7028747263609521;0.8235013662198788;
0.9278453748631795;0.8521260826428569;0.8004286229332942;0.8725854640415597;0.7468318627673767;0.8405490063596397;0.9202201682960625;0.7961220843798604;0.9063943065250812;0.8277557529803502;
0.9443244611485737;0.7192938437783751;0.9461556686677455;0.8047026904758359;0.805068099437134;0.727929912839456;0.7234226577958222;0.7548707947003556;0.9714399879421656;0.7560561533354122;
0.7130830526283005;0.9037998102845555;0.9292213749639265;0.9723004024742999;0.9568275112102802;0.9215474788743663;0.8803810486926013;0.9309589202512802;0.9974378169276026;0.9756374031239095;
0.8771921695997511;0.7235488869156471;0.7599647957925002;0.8781662202307882;0.8602483906361659;0.7663463340470676;0.8570895096406297;0.9851105565000911;0.7551551840726742;0.8685284616082609;
0.9648280109932661;0.7347237533738266;0.7957789864621025;0.8412926424753681;0.8601828682401838;0.8365045042944734;0.9472312039125337;0.7498732468752862;0.7367392577254883;0.8945817270503558;
0.8252390850479193;0.8389918193626676;0.7989054696397138;0.8007844796145867;0.7870509345892267;0.8947421175119746;0.954835702016512;0.9894707989078237;0.7289931905831369;0.9668413531929627;
0.7643137266678053;0.9526556533678948;0.7114619401398723;0.9863820040196835;0.7007086947004587;0.8968178639114915;0.8345664378935054;0.7532836989188568;0.8393150162094604;0.7154751681683756;
0.7551707162361191;0.8306685318950123;0.9156443209636904;0.8564301829554795;0.9490513331567159;0.9014054027118215;0.8661980800030192;0.914150758978908;0.736123962353836;0.907933935674476;
0.9201491647563431;0.7692375815655651;0.7547312084005298;0.944905916310297;0.732300139745904;0.762113756602801;0.970404698782422;0.7512755157090686;0.7775912772479993;0.83783956140727;
0.9456852474327034;0.9451932497784782;0.7221713015160659;0.7271686967430394;0.946023396270026;0.7740217862064492;0.7093795733172157;0.7821441641434562;0.8438286872815748;0.8186408616013516;
0.9004849784278205;0.7276723898898217;0.865895777971051;0.7387603649853567;0.9649759915118279;0.8197969682554382;0.8636175254732654;0.9887127225871664;0.9518937129862776;0.9688051724591078;
0.9421271666312676;0.7159912736913038;0.910452419074626;0.9451154314618155;0.8838075478990892;0.8308628950701736;0.7360512998737109;0.856728781968231;0.8828285226438318;0.7193083920335374;
0.9396239715638992;0.9065051989330861;0.8261040691455832;0.9667946750661207;0.8893010406034164;0.8408784181429325;0.824556169750678;0.8923445080670318;0.7265588481018531;0.7218020007353672;
0.7298052857597453;0.8410391734590199;0.8094636946602286;0.8491512537901725;0.9866167846594713;0.7662955940363969;0.9851054620957687;0.9915361378360636;0.7695135457018903;0.89788383023483;
0.866652823257444;0.736996546002284;0.9866232571373577;0.9478187814329614;0.8129860308191804;0.8947136477192991;0.867919284195712;0.8898212528132705;0.7555527282827342;0.8179900905655362;
0.8476038635787934;0.9913936020078026;0.8671071105395538;0.7824014305320276;0.8437669549948907;0.8685729149503101;0.9092841947648979;0.9567477781766247;0.9176943309266288;0.8197876510154177;
0.7784386832089536;0.9531868506206027;0.8423200600707588;0.9487545450779294;0.729658894654684;0.9441353401783503;0.8975983377398988;0.8983571753615485;0.776706426562936;0.7568644645855405;
0.8583180731957936;0.9046459328466643;0.9287192501748532;0.8291135056710577;0.8826043148003377;0.7291003707572172;0.7401183585714723;0.9687446701595763;0.8136622767031717;0.8158516708102287;
0.9109892512008531;0.7570863056752539;0.8179552642399306;0.9883221958666653;0.9519117258144489;0.9556923144462713;0.8435048913833867;0.7505822757847537;0.8460247865475923;0.9671242495916818;
0.9665921779459976;0.8823868485497757;0.8641820606326809;0.7467987397553449;0.974287013895526;0.8318591315968122;0.7691931087203442;0.972694325876627;0.7374847720293689;0.7725167533107014;
0.820664786742435;0.7702536968022253;0.7099545849663328;0.9525170205642381;0.7474716145617362;0.7730593442905505;0.8924074754541762;0.9279849910192134;0.800317324905692;0.7636827169650668;
0.9150222245084322;0.7384253202841681;0.7606864291747585;0.8606966014284878;0.9469160932362268;0.9421262309012826;0.7563188647797734;0.9964561425157591;0.7459511842482978;0.917978933483797;
0.7019601388562513;0.9455907530655487;0.86503952264547;0.9507046278729782;0.9352846399355021;0.9145772162658099;0.978675884603584;0.8075132839135147;0.7156481072162282;0.8670578526651949;
0.7702170809912829;0.8093169190436325;0.7364451139131979;0.7308512113518791;0.7746050493497082;0.8435996905558237;0.9568233581964076;0.9348594966720759;0.8432169711754697;0.7168373405002566;
0.8589355363877684;0.7737975476264751;0.8936557644204884;0.9115871022676529;0.7747653315220165;0.9750864439577865;0.9386456705180057;0.7754748935993382;0.8339269776456852;0.8879550716171171;
0.8382235943663734;0.7616847702429912;0.972021256948545;0.8056736924408999;0.8533074675850281;0.8247803641515212;0.9585808975730455;0.8993666595286097;0.8486962767918877;0.8739003193118496;
0.8559224123087781;0.8911304965153817;0.9867478539273733;0.7900704619806092;0.7693447520935033;0.9332090576323646;0.859050197033151;0.9298887840357424;0.8149218889443541;0.9372300161325664;
0.7409725408758262;0.8653288833891744;0.8998843066820937;0.70037801485248;0.8327323386170723;0.7732190046398605;0.7328776779322407;0.9132527026859815;0.8844891346002903;0.9551063354244378;
0.9449896049658426;0.9301956420366747;0.766822552005602;0.7518823332116713;0.7546774244065113;0.7243234106303921;0.9833521668498841;0.8288815477722083;0.9385267292689321;0.9974884433052547;
0.9875834533126416;0.8279201290639191;0.857589647917212;0.8086722489346125;0.9966834201511958;0.9086751554664496;0.7798483598165937;0.9804499505105546;0.7141504698654931;0.9635584091884513;
0.8778234440006956;0.9332026730462342;0.8265372555905902;0.7925518119926593;0.7653085274200513;0.8680869655490338;0.9694328722786791;0.7227848053569875;0.8554290777200325;0.7670496951864827;
0.7923034739701296;0.897903048626901;0.9325449267866454;0.7916767835816986;0.7028880272013057;0.7556206158991463;0.8553353177860861;0.786905339808586;0.961543115442384;0.967417064433753;
0.772439308746643;0.7812926668139146;0.8714537996787144;0.9680618009706443;0.8159232198164759;0.8365338595433924;0.7894102498772486;0.9443849848658686;0.9894283798074806;0.9608717908806583;
0.7292226671475573;0.8685237167507485;0.7566988960753046;0.9343243753833768;0.7126249490994618;0.8420039707391229;0.8289075562554663;0.8037601617124202;0.8547777089928732;0.9277068434099792;
0.9771578638554814;0.9379505832977255;0.7035217994283742;0.9410453305009928;0.9515277043514121;0.7885791756126882;0.9048247434693879;0.8010045338079388;0.843409418414148;0.8249548443148245;
0.8610481639926666;0.7246822010617248;0.8168272910825964;0.9809836404744647;0.9838831104568857;0.9780059572676723;0.7601313111822383;0.8203126991766011;0.9908463413320399;0.9456713658714163;
0.8591003689852386;0.8263358141245507;0.8809992751050756;0.8394951453738033;0.8646689049334064;0.9885016144298807;0.8765595693792874;0.885724795348147;0.9446327609859471;0.9242814086679133;
0.7554684421600275;0.9923340470775966;0.7428305486050594;0.9458017001961865;0.8560518264518053;0.7523460688194167;0.9044641354822409;0.7985280188536137;0.7899721934869726;0.9584905800132479;
0.7019007134914232;0.994305563045969;0.8252000488916242;0.8171564337667823;0.7160421575636564;0.8693109006912777;0.870678551638755;0.7766527120143236;0.8586181185068784;0.7037292312944868;
0.77906395467808;0.749855837115052;0.7492010596222564;0.7990626308576091;0.7795319436948041;0.955353586066706;0.7076390732431971;0.8422926961845359;0.8499002851427389;0.7744959706832684;
0.8704814898709474;0.859922956355598;0.9787419352937793;0.7623544529554284;0.8586465797239418;0.7102544344109656;0.8658270377573952;0.8195839391751405;0.7595658683210842;0.9241223164017113;
0.8459687239510508;0.9752925854413816;0.7325653723912471;0.9353512158078574;0.7351677814843895;0.9468750026646172;0.8096054347438264;0.9646248221608179;0.8303272081013686;0.8978240566284533;
0.9642999456503469;0.7588261287731358;0.8359865646508604;0.9136383369294176;0.8611307379344033;0.8481730313524858;0.9109469936792438;0.759934958057648;0.9358372077818757;0.9517040741200056;
0.744706513129018;0.8455601615635496;0.7948008288466821;0.8640144097871865;0.7299183686022224;0.929483342405512;0.9909128543079913;0.8577678585659878;0.8671431602008886;0.8549647409643008;
0.7753682360709323;0.9943908289757227;0.923803264704958;0.8143342188092928;0.7886128213814098;0.9669939179995729;0.7146106498955379;0.992750542427401;0.9100430798007787;0.9018614541762937;
0.976325477147967;0.9947457037443537;0.7352641482165597;0.8859263838677613;0.8297617306043668;0.9242771463885521;0.8814257395797682;0.9559257165469931;0.9153673170876282;0.9880403025011575;
0.7709794313276395;0.9335281216516629;0.8178881566040106;0.7487959120466833;0.8174436271501363;0.8533578482935652;0.8354496752477073;0.8136326185858762;0.9441717643462523;0.7101668302611884;
0.9361198994223241;0.7618503090302331;0.7693002690712462;0.8254575231324222;0.7895185463120743;0.9669107958600298;0.8306749573804114;0.7362858046520878;0.9441098836404987;0.900718017690741;
0.7715655565046381;0.7255324997820073;0.7510072123248844;0.7564695767300779;0.7971255630926292;0.7706214745739701;0.9397669172018286;0.9910907753811853;0.8594399285909274;0.8121976214381017;
0.9789275739013286;0.7842966810658917;0.954996981449338;0.9470401666934914;0.9138150492911878;0.9809101143669039;0.8905094913679532;0.8271798654708371;0.8592195260862465;0.9911415729355115;
0.9337918917825886;0.8817326368432361;0.8665234452780671;0.8992345779372577;0.9561320241994256;0.724210578528527;0.9450835628736745;0.9436398321927443;0.7705194957491721;0.9673398753226274;
0.8964173467148804;0.8610676492940772;0.7964393321681327;0.7133446246273084;0.8510365255731196;0.8719889401962617;0.9972699817190473;0.8862942947028448;0.7490341517019982;0.8756694587004151;
0.9551130057355846;0.8949119394131868;0.7892859226888633;0.723463194053956;0.8246126239412952;0.9876223817105743;0.8892942895193656;0.7943033136639396;0.8891642132547246;0.9725579378696927;
0.9374651150504126;0.9442062200088654;0.7950086791635368;0.8125849840578901;0.9542568056104139;0.7177835824264562;0.7203211362456513;0.9534024949320858;0.7272356199067788;0.8717912912539098;
0.9965971105964897;0.9862947319316331;0.9876449442827084;0.7090061044911798;0.9826914021566977;0.7010192262326269;0.9152127613847342;0.9781363091480486;0.7980172220379453;0.8664712750166089;
0.9152146326367028;0.9367671080460289;0.8897345028898546;0.8014288454165799;0.8072074482570286;0.7147919274159477;0.9093554771586952;0.9160095918458913;0.8749206927993882;0.8049664460278282;
0.8591976447263195;0.87518353993597;0.8388359938142004;0.7292222353711117;0.9293596530294245;0.7332731325603218;0.8375259356659119;0.7963461561376654;0.7308400528513217;0.9332073905728231;
0.9451760095565764;0.8147130384193677;0.8542158669879926;0.7065671420914298;0.8210406858453865;0.8116509352505495;0.9019027448391537;0.8134225486101558;0.8463178999090588;0.7553334610203984;
0.9316723575056252;0.8345314959600058;0.9183956848644155;0.8955693277171474;0.7539040705031111;0.7145816956542137;0.7625580340827395;0.9787246799156328;0.9960423824226921;0.7292513147390327;
0.9358342990465806;0.8745814490461836;0.7633306137215327;0.7841345164314693;0.9009321560340509;0.8428624050481249;0.8936598599700584;0.8875645041694388;0.8241915352041312;0.9649439067627728;
0.7420691165674715;0.7074196816726935;0.8260491994155118;0.8725924491153927;0.9737745602216572;0.8617489360965656;0.8838807175519287;0.8594396212211906;0.9644272760896677;0.9481118806154829;
0.7976783712546047;0.9164971775303972;0.7878437545588468;0.9724306381014505;0.9354143629479588;0.7676557130163236;0.8132953922019884;0.8591597125450463;0.7592380452872163;0.9278779496089775;
0.8173885477398554;0.817469118976742;0.8491528395115802;0.9001020073879623;0.9737223801887276;0.7165817828315731;0.7621342177505821;0.9158747934798811;0.7800823426664778;0.7713398412862082;
0.8961478714743701;0.9779826155863718;0.7001053626285014;0.7369961768796907;0.8217893051672505;0.8077583118852176;0.7363327553709081;0.7830736524124946;0.8379565593506378;0.9965749033672557;
0.8935693609427927;0.9691892345859923;0.7488540398672685;0.8250714378338451;0.8565952881770025;0.9063076297470851;0.8292628592282222;0.8720736744010988;0.8384737605958201;0.9908846877604609;
0.753505897730979;0.8884465525803731;0.8058480228206811;0.9747767142387798;0.9768820706139758;0.978201403072684;0.8727045312249399;0.7623190214366219;0.9113535071990524;0.708693190219436;
0.9731564688392268;0.8115662147846098;0.9378015914162834;0.7346351951087322;0.8810861419316095;0.7574626529771382;0.9219691111939674;0.8685262132022491;0.9917310240974018;0.7706498164346748;
0.8023733542896272;0.7262011278345132;0.7946547261891987;0.8448014715686679;0.8414512507978317;0.771774788445023;0.8712268667912149;0.8658659770422317;0.7658535732469928;0.7337611210615449;
0.8821366940523689;0.8706625368240186;0.9371237813461785;0.7835316010400181;0.8727837929044002;0.7202825789088116;0.9824446139591998;0.8202319141301673;0.9691789581891075;0.7822815603688061;
0.7541919173270423;0.9480855145420135;0.9951961060858446;0.8672872341698115;0.9717645599867621;0.8095205426318219;0.9361118035311956;0.8891592393248817;0.8208789542930557;0.9286628207815124;
0.714652524914241;0.7133810353878762;0.7844993475004866;0.9141919212750732;0.8100920185039773;0.7510094333918054;0.8418729049139038;0.7303995344408349;0.982855684806607;0.7699066326055815;
0.9851968559809887;0.8773890878047572;0.7355441572512812;0.9116928218423017;0.8657036987145642;0.9410942813067881;0.9415130207198834;0.7712512577721926;0.82465131720453;0.9736796454837633;
0.7006132336185276;0.7856160428458208;0.7949234140567123;0.8229186713129559;0.8127855074549829;0.7736889537110854;0.8042701070734548;0.9556534479631777;0.9101174942915439;0.7044651921058211;
0.7314581555675673;0.7905904611887428;0.7873005949351647;0.7083984096638614;0.7773843698451536;0.8957672787707346;0.7922186093801998;0.9948865243284208;0.7396006295423094;0.8747621356142838;
0.9757272970897459;0.7796522900771091;0.8655647200071327;0.8268646873511066;0.7506376380525872;0.8746807170885276;0.8233841388147731;0.8696767559803876;0.9805226157036342;0.8169788336105865;
0.8986672958814185;0.9009273791044566;0.9888065408602018;0.9455457390184427;0.935932611548383;0.8576616149021035;0.8811248802482492;0.7509095998533539;0.8087682249176633;0.9943762920485398;
0.7970633375061585;0.8441799518919196;0.7345274129709934;0.8319419078837491;0.7191059109966577;0.9802804541057917;0.889469768211497;0.705044049211127;0.9074410499637019;0.9456719600605268;
0.8597521688254388;0.9216636818519349;0.8996867632183756;0.7563404411820116;0.8401065170072386;0.8993141049300816;0.9213483539651436;0.8925572239232393;0.8909449865930124;0.7884882149222949;
0.9778550278680516;0.8713097954260255;0.8606731925154484;0.8765236857545888;0.7868103184605372;0.8631237313556581;0.9350378405428269;0.9454572810913996;0.761056550455894;0.7444678568945873;
0.8839677849557095;0.9074480413544597;0.8029514940734894;0.728951887519388;0.8631794659153262;0.8830958937059867;0.7145502159777389;0.8513268220573208;0.8092932397772971;0.9264934461631809;
0.7451565188730199;0.9864078249908821;0.7633782731910816;0.9804846729367853;0.8779251908479799;0.8694968904000734;0.8432794195949097;0.8905461179835273;0.8710992318945068;0.7319118073351057;
0.8108314065098485;0.7420201906449272;0.8846767291677458;0.8556641011760724;0.8168393372715068;0.8248418785574655;0.9528583888503901;0.9404825806438136;0.8730689181949239;0.8324292739182148;
0.7055859021919544;0.8293636712841149;0.7102716659226663;0.9089518516883875;0.7864190294583699;0.7634879564587153;0.9496270256380829;0.7875612948615549;0.7490126573749422;0.763619797337394;
0.7127928123041717;0.8516265034922049;0.874956584311787;0.8685379536537774;0.9154985529630123;0.8066883787089245;0.7113932666477194;0.8582279842152303;0.9985151371877922;0.7580954855541352;
0.7769200529992784;0.9772171742528521;0.8693547323379425;0.937403074007005;0.9791334018079351;0.9009379569438607;0.700904463670694;0.803001706959133;0.8032826485440203;0.8411444731155262;
0.9628426075675511;0.774604555597296;0.8682175455516652;0.8412066365314277;0.8928885950742618;0.8845964339409668;0.9671717575432843;0.7310174437890027;0.75414465444419;0.8269171913089507;
0.7327751891670474;0.9269846934904205;0.8587174027544231;0.7011614090565184;0.7505736655180522;0.9558107264714628;0.9092522319089061;0.9744361864861811;0.7422615639207201;0.7487956025084935;
0.8700314888489106;0.9765052856902869;0.9969709391812416;0.9300463600668654;0.859787730270829;0.7548014381763535;0.744132134805253;0.8064331501724382;0.807780375182574;0.9695518101026737;
0.9488820443495521;0.9331359688642014;0.850142019630187;0.7288281278131099;0.9632452820674792;0.7821258995111896;0.7250091747583295;0.7662920742265047;0.7286493667829645;0.8722483064167224;
0.7972006566998449;0.9236791026099136;0.8385636864910172;0.8728345340098873;0.9046923593084113;0.7199221265676375;0.9268961778528785;0.8191593934336936;0.8618506196264692;0.7970128850368664;
0.7220311008824846;0.7589968458387759;0.7474764780069961;0.7752140532608779;0.721515402390685;0.9746891127587261;0.7812069834246601;0.7563416761561188;0.9165815393807266;0.9048591650335422;
0.7078734020743114;0.9753468758051362;0.8343781066877654;0.8697696934487953;0.8146411763975837;0.979913442578645;0.9643273714291747;0.8097087134851949;0.8127143710345563;0.7708603270519878;
0.9169117509799432;0.95138272413263;0.7633881908515173;0.9371241469671014;0.8360818207220658;0.895718208711749;0.9554462115178399;0.877676689674724;0.8409603178223235;0.7217315786630522;
0.9943735248619484;0.7912533928098651;0.8090824159181182;0.7094675930759857;0.9097171217069921;0.8250400119935365;0.8876697712962291;0.8895982379557776;0.8180986602038562;0.8524268379697502;
0.7172314097772642;0.704621341351766;0.9252279887171579;0.7889031730160715;0.9089249928450018;0.7885794201254706;0.8198579438518895;0.9917571093932152;0.7351968317688841;0.7422332710716359;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[4] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[5] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[8] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
     };
    };
    data_flags=AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[2] {
    name="TrialTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[3] {
    name="EpochTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="TestErrorData";
    desc=;
    data {
     name="data";
     el_typ=DataColTp;
     el_def=0;
     String_Data @[0] {
      name="trial_name_group";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [20] "00";"01";"02";"03";"04";"05";"06";"07";"08";"09";
"10";"11";"12";"13";"14";"15";"16";"17";"18";"19";
      };
     };
     float_Data @[1] {
      name="N";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [20] 54;48;59;43;38;54;60;56;43;53;
51;48;30;50;48;42;49;61;69;44;
      };
     };
     float_Data @[2] {
      name="sse_count";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [20] 0;1;0;2;0;0;0;1;1;0;
0;0;0;0;0;0;0;1;69;44;
      };
     };
     float_Data @[3] {
      name="pct_err";
      col_flags=SAVE_ROWS|SAVE_DATA|CALC;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr="(float)sse_count / (float)N";
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [20] 0;0.020833334;0;0.046511628;0;0;0;0.017857144;0.023255814;0;
0;0;0;0;0;0;0;0.016393442;1;1;
      };
     };
    };
    data_flags=SAVE_ROWS|HAS_CALCS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
 };
 data_proc {
  name=;
  el_typ=taDataProc;
  el_def=0;
  taDataProc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_base";
  };
  taDataAnal @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_anal";
  };
  taDataGen @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_gen";
  };
  taImageProc @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="image_proc";
  };
 };
 programs {
  name=;
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  Program @[0] {
   name="GenerateItemList";
   short_nm="GnrLst";
   tags=;
   desc="generate a list of items to train/test on";
   flags=NO_STOP_STEP;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=DynEnumType;
    el_def=0;
    DynEnumType @[0] {
     name="LED_Type";
     desc=;
     enums {
      name=;
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="LED1";
       value=0;
       desc=;
      };
      DynEnumItem @[1] {
       name="LED2";
       value=1;
       desc=;
      };
      DynEnumItem @[2] {
       name="LED3";
       value=2;
       desc=;
      };
     };
     bits=0;
    };
    DynEnumType @[1] {
     name="InputType";
     desc="type of input patterns to generate";
     enums {
      name=;
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="TRAIN";
       value=0;
       desc="just training objects with full transforms";
      };
      DynEnumItem @[1] {
       name="TRAIN_NOVEL";
       value=1;
       desc="training the novel testing objects: novel shown in restricted locations";
      };
      DynEnumItem @[2] {
       name="TEST_RANDOM";
       value=2;
       desc="test all objects in random transforms";
      };
     };
     bits=0;
    };
    DynEnumType @[2] {
     name="LED3Objects";
     desc="objects containing 3 LED lines -- last part of name is ID of line elements contained";
     enums {
      name=;
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="LED3_18_245";
       value=0;
       desc=;
      };
      DynEnumItem @[1] {
       name="LED3_8_035";
       value=1;
       desc=;
      };
      DynEnumItem @[2] {
       name="LED3_4_023";
       value=2;
       desc=;
      };
      DynEnumItem @[3] {
       name="LED3_6_025";
       value=3;
       desc=;
      };
      DynEnumItem @[4] {
       name="LED3_11_124";
       value=4;
       desc=;
      };
      DynEnumItem @[5] {
       name="LED3_15_145";
       value=5;
       desc=;
      };
      DynEnumItem @[6] {
       name="LED3_12_125";
       value=6;
       desc=;
      };
      DynEnumItem @[7] {
       name="LED3_3_015";
       value=7;
       desc=;
      };
      DynEnumItem @[8] {
       name="LED3_13_134";
       value=8;
       desc=;
      };
      DynEnumItem @[9] {
       name="LED3_2_014";
       value=9;
       desc=;
      };
      DynEnumItem @[10] {
       name="LED3_17_235";
       value=10;
       desc=;
      };
      DynEnumItem @[11] {
       name="LED3_9_045";
       value=11;
       desc=;
      };
      DynEnumItem @[12] {
       name="LED3_5_024";
       value=12;
       desc=;
      };
      DynEnumItem @[13] {
       name="LED3_7_034";
       value=13;
       desc=;
      };
      DynEnumItem @[14] {
       name="LED3_10_123";
       value=14;
       desc=;
      };
      DynEnumItem @[15] {
       name="LED3_16_234";
       value=15;
       desc=;
      };
      DynEnumItem @[16] {
       name="LED3_14_135";
       value=16;
       desc=;
      };
      DynEnumItem @[17] {
       name="LED3_1_013";
       value=17;
       desc=;
      };
      DynEnumItem @[18] {
       name="LED3_0_012";
       value=18;
       desc=;
      };
      DynEnumItem @[19] {
       name="LED3_19_345";
       value=19;
       desc=;
      };
     };
     bits=0;
    };
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="InputItemList";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[0][0]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="input_type";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=.projects[0].programs[0].types[1]$$;
      value=0;
     };
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="n_items";
     var_type=T_Int;
     int_val=1000;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="number of items to generate";
     init_from=NULL;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="translate_max";
     var_type=T_Real;
     real_val=0.25;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="max translation value for training (random translation < this val)";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="scale_min";
     var_type=T_Real;
     real_val=0.7;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="min scale for training";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="scale_max";
     var_type=T_Real;
     real_val=1;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="max scale for training";
     init_from=NULL;
    };
    ProgVar @[3] {
     name="rotate_max";
     var_type=T_Real;
     real_val=0.01;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="max rotation for training";
     init_from=NULL;
    };
    ProgVar @[4] {
     name="novel_train_restrict";
     var_type=T_Real;
     real_val=0.5;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="proportion of full training range to use during training of novel items";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="novel_train_pct";
     var_type=T_Real;
     real_val=0.25;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="proportion of items to be novel items during train_novel";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="translate_x";
     var_type=T_Real;
     real_val=-0.1200831661459224;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[7] {
     name="translate_y";
     var_type=T_Real;
     real_val=0.2426647860559605;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[8] {
     name="scale";
     var_type=T_Real;
     real_val=0.8417449747668929;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[9] {
     name="scale_half_range";
     var_type=T_Real;
     real_val=0.15;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[10] {
     name="scale_mid";
     var_type=T_Real;
     real_val=0.85;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[11] {
     name="rotate";
     var_type=T_Real;
     real_val=0.0007037994876844741;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[12] {
     name="ObjectNo";
     var_type=T_Int;
     int_val=13;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[13] {
     name="ObjectEnum";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=.projects[0].programs[0].types[2]$$;
      value=13;
     };
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[14] {
     name="ObjectName";
     var_type=T_String;
     string_val="LED3_7_034";
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[15] {
     name="i";
     var_type=T_Int;
     int_val=1000;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    AssignExpr @[0] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[9]$$;
     expr {
      expr="(scale_max- scale_min) * .5";
     };
    };
    AssignExpr @[1] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[10]$$;
     expr {
      expr="(scale_max + scale_min) * .5";
     };
    };
    ResetDataRows @[2] {
     desc=;
     flags=;
     data_var=.projects[0].programs[0].args[0]$$;
    };
    Switch @[3] {
     desc=;
     flags=;
     switch_var=.projects[0].programs[0].args[1]$$;
     cases {
      name=;
      el_typ=CaseBlock;
      el_def=0;
      CaseBlock @[0] {
       desc=;
       flags=;
       prog_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	ForLoop @[0] {
	 desc=;
	 flags=;
	 loop_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  RandomCall @[0] {
	   desc=;
	   flags=;
	   result_var=.projects[0].programs[0].vars[6]$$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     expr {
	      expr="-translate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     expr {
	      expr="translate_max";
	     };
	    };
	   };
	  };
	  RandomCall @[1] {
	   desc=;
	   flags=;
	   result_var=.projects[0].programs[0].vars[7]$$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     expr {
	      expr="-translate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     expr {
	      expr="translate_max";
	     };
	    };
	   };
	  };
	  RandomCall @[2] {
	   desc=;
	   flags=;
	   result_var=.projects[0].programs[0].vars[11]$$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     expr {
	      expr="-rotate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     expr {
	      expr="rotate_max";
	     };
	    };
	   };
	  };
	  RandomCall @[3] {
	   desc=;
	   flags=;
	   result_var=.projects[0].programs[0].vars[8]$$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     expr {
	      expr="scale_min";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     expr {
	      expr="scale_max";
	     };
	    };
	   };
	  };
	  RandomCall @[4] {
	   desc=;
	   flags=;
	   result_var=.projects[0].programs[0].vars[12]$$;
	   object_type=Random;
	   method=Random::IntZeroN;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=int;
	     type="int";
	     name="n";
	     required=1;
	     def_val=;
	     expr {
	      expr="18";
	     };
	    };
	   };
	  };
	  AssignExpr @[5] {
	   desc=;
	   flags=;
	   result_var=.projects[0].programs[0].vars[13]$$;
	   expr {
	    expr="ObjectNo";
	   };
	  };
	  AssignExpr @[6] {
	   desc=;
	   flags=;
	   result_var=.projects[0].programs[0].vars[14]$$;
	   expr {
	    expr="ObjectEnum";
	   };
	  };
	  AddNewDataRow @[7] {
	   desc=;
	   flags=;
	   data_var=$.projects[0].programs[0].args[0]$;
	  };
	  DataVarProg @[8] {
	   desc=;
	   flags=;
	   data_var=$.projects[0].programs[0].args[0]$;
	   set_data=1;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   quiet=0;
	   var_1=$.projects[0].programs[0].vars[14]$;
	   var_2=$.projects[0].programs[0].vars[12]$;
	   var_3=NULL;
	   var_4=NULL;
	  };
	  DataVarProg @[9] {
	   desc=;
	   flags=;
	   data_var=$.projects[0].programs[0].args[0]$;
	   set_data=1;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   quiet=0;
	   var_1=$.projects[0].programs[0].vars[11]$;
	   var_2=$.projects[0].programs[0].vars[8]$;
	   var_3=$.projects[0].programs[0].vars[6]$;
	   var_4=$.projects[0].programs[0].vars[7]$;
	  };
	 };
	 init {
	  expr="i = 0";
	 };
	 test {
	  expr="i < n_items";
	 };
	 iter {
	  expr="i++";
	 };
	};
	DoneWritingDataRow @[1] {
	 desc=;
	 flags=;
	 data_var=$.projects[0].programs[0].args[0]$;
	};
       };
       case_val {
	expr="TRAIN";
       };
      };
      CaseBlock @[1] {
       desc=;
       flags=;
       prog_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	ForLoop @[0] {
	 desc=;
	 flags=;
	 loop_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  IfElse @[0] {
	   desc=;
	   flags=;
	   cond {
	    expr="Random::ZeroOne() <  novel_train_pct";
	   };
	   true_code {
	    name=;
	    el_typ=ProgEl;
	    el_def=0;
	    RandomCall @[0] {
	     desc=;
	     flags=;
	     result_var=$.projects[0].programs[0].vars[6]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name=;
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       expr {
		expr="-translate_max* novel_train_restrict";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       expr {
		expr="translate_max* novel_train_restrict";
	       };
	      };
	     };
	    };
	    RandomCall @[1] {
	     desc=;
	     flags=;
	     result_var=$.projects[0].programs[0].vars[7]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name=;
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       expr {
		expr="-translate_max* novel_train_restrict";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       expr {
		expr="translate_max* novel_train_restrict";
	       };
	      };
	     };
	    };
	    RandomCall @[2] {
	     desc=;
	     flags=;
	     result_var=$.projects[0].programs[0].vars[11]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name=;
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       expr {
		expr="-rotate_max* novel_train_restrict";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       expr {
		expr="rotate_max* novel_train_restrict";
	       };
	      };
	     };
	    };
	    RandomCall @[3] {
	     desc=;
	     flags=;
	     result_var=$.projects[0].programs[0].vars[8]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name=;
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       expr {
		expr="scale_mid - scale_half_range *  novel_train_restrict";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       expr {
		expr="scale_mid +  scale_half_range* novel_train_restrict";
	       };
	      };
	     };
	    };
	    RandomCall @[4] {
	     desc=;
	     flags=;
	     result_var=$.projects[0].programs[0].vars[12]$;
	     object_type=Random;
	     method=Random::IntMinMax;
	     meth_args {
	      name=;
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=int;
	       type="int";
	       name="min";
	       required=1;
	       def_val=;
	       expr {
		expr="18";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=int;
	       type="int";
	       name="max";
	       required=1;
	       def_val=;
	       expr {
		expr="20";
	       };
	      };
	     };
	    };
	   };
	   false_code {
	    name=;
	    el_typ=ProgEl;
	    el_def=0;
	    RandomCall @[0] {
	     desc=;
	     flags=;
	     result_var=$.projects[0].programs[0].vars[6]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name=;
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       expr {
		expr="-translate_max";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       expr {
		expr="translate_max";
	       };
	      };
	     };
	    };
	    RandomCall @[1] {
	     desc=;
	     flags=;
	     result_var=$.projects[0].programs[0].vars[7]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name=;
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       expr {
		expr="-translate_max";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       expr {
		expr="translate_max";
	       };
	      };
	     };
	    };
	    RandomCall @[2] {
	     desc=;
	     flags=;
	     result_var=$.projects[0].programs[0].vars[11]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name=;
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       expr {
		expr="-rotate_max";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       expr {
		expr="rotate_max";
	       };
	      };
	     };
	    };
	    RandomCall @[3] {
	     desc=;
	     flags=;
	     result_var=$.projects[0].programs[0].vars[8]$;
	     object_type=Random;
	     method=Random::UniformMinMax;
	     meth_args {
	      name=;
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=double;
	       type="double";
	       name="min";
	       required=1;
	       def_val=;
	       expr {
		expr="scale_min";
	       };
	      };
	      ProgArg @[1] {
	       arg_type=double;
	       type="double";
	       name="max";
	       required=1;
	       def_val=;
	       expr {
		expr="scale_max";
	       };
	      };
	     };
	    };
	    RandomCall @[4] {
	     desc=;
	     flags=;
	     result_var=$.projects[0].programs[0].vars[12]$;
	     object_type=Random;
	     method=Random::IntZeroN;
	     meth_args {
	      name=;
	      el_typ=ProgArg;
	      el_def=0;
	      ProgArg @[0] {
	       arg_type=int;
	       type="int";
	       name="n";
	       required=1;
	       def_val=;
	       expr {
		expr="18";
	       };
	      };
	     };
	    };
	   };
	  };
	  AssignExpr @[1] {
	   desc=;
	   flags=;
	   result_var=$.projects[0].programs[0].vars[13]$;
	   expr {
	    expr="ObjectNo";
	   };
	  };
	  AssignExpr @[2] {
	   desc=;
	   flags=;
	   result_var=$.projects[0].programs[0].vars[14]$;
	   expr {
	    expr="ObjectEnum";
	   };
	  };
	  AddNewDataRow @[3] {
	   desc=;
	   flags=;
	   data_var=$.projects[0].programs[0].args[0]$;
	  };
	  DataVarProg @[4] {
	   desc=;
	   flags=;
	   data_var=$.projects[0].programs[0].args[0]$;
	   set_data=1;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   quiet=0;
	   var_1=$.projects[0].programs[0].vars[14]$;
	   var_2=$.projects[0].programs[0].vars[12]$;
	   var_3=NULL;
	   var_4=NULL;
	  };
	  DataVarProg @[5] {
	   desc=;
	   flags=;
	   data_var=$.projects[0].programs[0].args[0]$;
	   set_data=1;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   quiet=0;
	   var_1=$.projects[0].programs[0].vars[11]$;
	   var_2=$.projects[0].programs[0].vars[8]$;
	   var_3=$.projects[0].programs[0].vars[6]$;
	   var_4=$.projects[0].programs[0].vars[7]$;
	  };
	 };
	 init {
	  expr="i = 0";
	 };
	 test {
	  expr="i < n_items";
	 };
	 iter {
	  expr="i++";
	 };
	};
	DoneWritingDataRow @[1] {
	 desc=;
	 flags=;
	 data_var=$.projects[0].programs[0].args[0]$;
	};
       };
       case_val {
	expr="TRAIN_NOVEL";
       };
      };
      CaseBlock @[2] {
       desc=;
       flags=;
       prog_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	ForLoop @[0] {
	 desc=;
	 flags=;
	 loop_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  RandomCall @[0] {
	   desc=;
	   flags=;
	   result_var=$.projects[0].programs[0].vars[6]$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     expr {
	      expr="-translate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     expr {
	      expr="translate_max";
	     };
	    };
	   };
	  };
	  RandomCall @[1] {
	   desc=;
	   flags=;
	   result_var=$.projects[0].programs[0].vars[7]$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     expr {
	      expr="-translate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     expr {
	      expr="translate_max";
	     };
	    };
	   };
	  };
	  RandomCall @[2] {
	   desc=;
	   flags=;
	   result_var=$.projects[0].programs[0].vars[11]$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     expr {
	      expr="-rotate_max";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     expr {
	      expr="rotate_max";
	     };
	    };
	   };
	  };
	  RandomCall @[3] {
	   desc=;
	   flags=;
	   result_var=$.projects[0].programs[0].vars[8]$;
	   object_type=Random;
	   method=Random::UniformMinMax;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=double;
	     type="double";
	     name="min";
	     required=1;
	     def_val=;
	     expr {
	      expr="scale_min";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=double;
	     type="double";
	     name="max";
	     required=1;
	     def_val=;
	     expr {
	      expr="scale_max";
	     };
	    };
	   };
	  };
	  RandomCall @[4] {
	   desc=;
	   flags=;
	   result_var=$.projects[0].programs[0].vars[12]$;
	   object_type=Random;
	   method=Random::IntZeroN;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=int;
	     type="int";
	     name="n";
	     required=1;
	     def_val=;
	     expr {
	      expr="20";
	     };
	    };
	   };
	  };
	  AssignExpr @[5] {
	   desc=;
	   flags=;
	   result_var=$.projects[0].programs[0].vars[13]$;
	   expr {
	    expr="ObjectNo";
	   };
	  };
	  AssignExpr @[6] {
	   desc=;
	   flags=;
	   result_var=$.projects[0].programs[0].vars[14]$;
	   expr {
	    expr="ObjectEnum";
	   };
	  };
	  AddNewDataRow @[7] {
	   desc=;
	   flags=;
	   data_var=$.projects[0].programs[0].args[0]$;
	  };
	  DataVarProg @[8] {
	   desc=;
	   flags=;
	   data_var=$.projects[0].programs[0].args[0]$;
	   set_data=1;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   quiet=0;
	   var_1=$.projects[0].programs[0].vars[14]$;
	   var_2=$.projects[0].programs[0].vars[12]$;
	   var_3=NULL;
	   var_4=NULL;
	  };
	  DataVarProg @[9] {
	   desc=;
	   flags=;
	   data_var=$.projects[0].programs[0].args[0]$;
	   set_data=1;
	   row_spec=CUR_ROW;
	   row_var=NULL;
	   quiet=0;
	   var_1=$.projects[0].programs[0].vars[11]$;
	   var_2=$.projects[0].programs[0].vars[8]$;
	   var_3=$.projects[0].programs[0].vars[6]$;
	   var_4=$.projects[0].programs[0].vars[7]$;
	  };
	 };
	 init {
	  expr="i = 0";
	 };
	 test {
	  expr="i < n_items";
	 };
	 iter {
	  expr="i++";
	 };
	};
	DoneWritingDataRow @[1] {
	 desc=;
	 flags=;
	 data_var=$.projects[0].programs[0].args[0]$;
	};
       };
       case_val {
	expr="TEST_RANDOM";
       };
      };
     };
    };
    ForLoop @[4] {
     desc=;
     flags=;
     loop_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      RandomCall @[0] {
       desc=;
       flags=;
       result_var=$.projects[0].programs[0].vars[6]$;
       object_type=Random;
       method=Random::UniformMinMax;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=double;
	 type="double";
	 name="min";
	 required=1;
	 def_val=;
	 expr {
	  expr="-translate_max";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="max";
	 required=1;
	 def_val=;
	 expr {
	  expr="translate_max";
	 };
	};
       };
      };
      RandomCall @[1] {
       desc=;
       flags=;
       result_var=$.projects[0].programs[0].vars[7]$;
       object_type=Random;
       method=Random::UniformMinMax;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=double;
	 type="double";
	 name="min";
	 required=1;
	 def_val=;
	 expr {
	  expr="-translate_max";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="max";
	 required=1;
	 def_val=;
	 expr {
	  expr="translate_max";
	 };
	};
       };
      };
      RandomCall @[2] {
       desc=;
       flags=;
       result_var=$.projects[0].programs[0].vars[11]$;
       object_type=Random;
       method=Random::UniformMinMax;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=double;
	 type="double";
	 name="min";
	 required=1;
	 def_val=;
	 expr {
	  expr="-rotate_max";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="max";
	 required=1;
	 def_val=;
	 expr {
	  expr="rotate_max";
	 };
	};
       };
      };
      RandomCall @[3] {
       desc=;
       flags=;
       result_var=$.projects[0].programs[0].vars[8]$;
       object_type=Random;
       method=Random::UniformMinMax;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=double;
	 type="double";
	 name="min";
	 required=1;
	 def_val=;
	 expr {
	  expr="scale_min";
	 };
	};
	ProgArg @[1] {
	 arg_type=double;
	 type="double";
	 name="max";
	 required=1;
	 def_val=;
	 expr {
	  expr="scale_max";
	 };
	};
       };
      };
     };
     init {
      expr="i = 0";
     };
     test {
      expr="i < n_items";
     };
     iter {
      expr="i++";
     };
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program @[1] {
   name="LEDStimGen";
   short_nm="LDSGn";
   tags="Canvas, Drawing, DataGen, Image";
   desc="generate LED-like stimulus displays";
   flags=NO_STOP_STEP;
   objs {
    name=;
    el_typ=taCanvas;
    el_def=0;
    taCanvas @[0] {
     name="Canvas";
     coord_type=NORMALIZED;
    };
    DataTable @[1] {
     name="StimGenData";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="IMAGE";
	 value 1 0=1;
	 val_type_fixed=0;
	};
       };
       name="Canvas";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 40;40;3;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [3] ;;;       };
       ar {
	name=;
	      [40 40 3 1] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.627451;0.78431374;0.78431374;
0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;
0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;
0.78431374;0.78431374;0.627451;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.65098041;0.81176472;0.81176472;
0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;
0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;
0.81176472;0.81176472;0.65098041;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.63921571;0.79607844;0.79607844;
0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;
0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;
0.79607844;0.79607844;0.63921571;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.63921571;0.80000001;0.80000001;
0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;
0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;
0.80000001;0.80000001;0.63921571;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.627451;0.78431374;0.78431374;
0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;
0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;
0.78431374;0.78431374;0.627451;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.65098041;0.81176472;0.81176472;
0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;
0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;
0.81176472;0.81176472;0.65098041;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.627451;0.78431374;0.78431374;
0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;
0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;
0.78431374;0.78431374;0.627451;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.65098041;0.81176472;0.81176472;
0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;
0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;
0.81176472;0.81176472;0.65098041;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.63921571;0.79607844;0.79607844;
0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;
0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;
0.79607844;0.79607844;0.63921571;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.63921571;0.80000001;0.80000001;
0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;
0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;
0.80000001;0.80000001;0.63921571;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.627451;0.78431374;0.78431374;
0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;
0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;
0.78431374;0.78431374;0.627451;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.65098041;0.81176472;0.81176472;
0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;
0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;
0.81176472;0.81176472;0.65098041;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.627451;0.78431374;0.78431374;
0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;
0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;
0.78431374;0.78431374;0.627451;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.65098041;0.81176472;0.81176472;
0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;
0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;
0.81176472;0.81176472;0.65098041;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.63921571;0.79607844;0.79607844;
0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;
0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;0.79607844;
0.79607844;0.79607844;0.63921571;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.63921571;0.80000001;0.80000001;
0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;
0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;0.80000001;
0.80000001;0.80000001;0.63921571;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.627451;0.78431374;0.78431374;
0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;
0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;0.78431374;
0.78431374;0.78431374;0.627451;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0.65098041;0.81176472;0.81176472;
0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;
0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;0.81176472;
0.81176472;0.81176472;0.65098041;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
   };
   types {
    name=;
    el_typ=DynEnumType;
    el_def=0;
    DynEnumType @[0] {
     name="LED3Objects";
     desc="objects containing 3 LED lines -- last part of name is ID of line elements contained";
     enums {
      name=;
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="LED3_18_245";
       value=0;
       desc=;
      };
      DynEnumItem @[1] {
       name="LED3_8_035";
       value=1;
       desc=;
      };
      DynEnumItem @[2] {
       name="LED3_4_023";
       value=2;
       desc=;
      };
      DynEnumItem @[3] {
       name="LED3_6_025";
       value=3;
       desc=;
      };
      DynEnumItem @[4] {
       name="LED3_11_124";
       value=4;
       desc=;
      };
      DynEnumItem @[5] {
       name="LED3_15_145";
       value=5;
       desc=;
      };
      DynEnumItem @[6] {
       name="LED3_12_125";
       value=6;
       desc=;
      };
      DynEnumItem @[7] {
       name="LED3_3_015";
       value=7;
       desc=;
      };
      DynEnumItem @[8] {
       name="LED3_13_134";
       value=8;
       desc=;
      };
      DynEnumItem @[9] {
       name="LED3_2_014";
       value=9;
       desc=;
      };
      DynEnumItem @[10] {
       name="LED3_17_235";
       value=10;
       desc=;
      };
      DynEnumItem @[11] {
       name="LED3_9_045";
       value=11;
       desc=;
      };
      DynEnumItem @[12] {
       name="LED3_5_024";
       value=12;
       desc=;
      };
      DynEnumItem @[13] {
       name="LED3_7_034";
       value=13;
       desc=;
      };
      DynEnumItem @[14] {
       name="LED3_10_123";
       value=14;
       desc=;
      };
      DynEnumItem @[15] {
       name="LED3_16_234";
       value=15;
       desc=;
      };
      DynEnumItem @[16] {
       name="LED3_14_135";
       value=16;
       desc=;
      };
      DynEnumItem @[17] {
       name="LED3_1_013";
       value=17;
       desc=;
      };
      DynEnumItem @[18] {
       name="LED3_0_012";
       value=18;
       desc=;
      };
      DynEnumItem @[19] {
       name="LED3_19_345";
       value=19;
       desc=;
      };
     };
     bits=0;
    };
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="ObjectNo";
     var_type=T_Int;
     int_val=13;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="object number to render";
     init_from=NULL;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="canvas_width";
     var_type=T_Int;
     int_val=40;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="canvas_height";
     var_type=T_Int;
     int_val=40;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="Canvas";
     var_type=T_Object;
     object_type=taCanvas;
     object_val=.projects[0].programs[1].objs[0]$$;
     objs_ptr=1;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="StimGenData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[1].objs[1]$$;
     objs_ptr=1;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="disp_type";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=NULL;
      value=-1;
     };
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="disp_size";
     var_type=T_Int;
     int_val=3;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
     reference=0;
     desc="display size, as number in each dimension of a square grid of oriented lines";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="bg_color";
     var_type=T_String;
     string_val="black";
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="color of background";
     init_from=NULL;
    };
    ProgVar @[7] {
     name="line_color";
     var_type=T_String;
     string_val="white";
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="color to draw lines in";
     init_from=NULL;
    };
    ProgVar @[8] {
     name="ObjectName";
     var_type=T_String;
     string_val="LED3_7_034";
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="name of object";
     init_from=NULL;
    };
    ProgVar @[9] {
     name="ObjectEnum";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=.projects[0].programs[1].types[0]$$;
      value=13;
     };
     objs_ptr=0;
     flags=CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="name of object";
     init_from=NULL;
    };
    ProgVar @[10] {
     name="size";
     var_type=T_Real;
     real_val=0.3;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="size of the line segments";
     init_from=NULL;
    };
    ProgVar @[11] {
     name="line_width";
     var_type=T_Real;
     real_val=0.04;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="width of the line segments";
     init_from=NULL;
    };
    ProgVar @[12] {
     name="ctr_x";
     var_type=T_Real;
     real_val=0.5;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="center point to draw from";
     init_from=NULL;
    };
    ProgVar @[13] {
     name="ctr_y";
     var_type=T_Real;
     real_val=0.5;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="where to start drawing";
     init_from=NULL;
    };
    ProgVar @[14] {
     name="LED_n";
     var_type=T_Int;
     int_val=3;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="number of led elements in object";
     init_from=NULL;
    };
    ProgVar @[15] {
     name="LED_segs";
     var_type=T_String;
     string_val="034";
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="string of LED segments to render (from ENUM)";
     init_from=NULL;
    };
    ProgVar @[16] {
     name="cur_led";
     var_type=T_Int;
     int_val=4;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="current led segment to draw";
     init_from=NULL;
    };
    ProgVar @[17] {
     name="i";
     var_type=T_Int;
     int_val=3;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
    Function @[0] {
     desc=;
     flags=;
     name="DrawLED";
     return_type=T_Int;
     object_type=taOBase;
     args {
      name=;
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="led_number";
       var_type=T_Int;
       int_val=0;
       objs_ptr=0;
       flags=NULL_CHECK|LOCAL_VAR|FUN_ARG|USED;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     fun_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      ProgVars @[0] {
       desc=;
       flags=;
       local_vars {
	name=;
	el_typ=ProgVar;
	el_def=0;
	ProgVar @[0] {
	 name="st_x";
	 var_type=T_Real;
	 real_val=0;
	 objs_ptr=0;
	 flags=NULL_CHECK|LOCAL_VAR;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[1] {
	 name="st_y";
	 var_type=T_Real;
	 real_val=0;
	 objs_ptr=0;
	 flags=NULL_CHECK|LOCAL_VAR;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[2] {
	 name="ed_x";
	 var_type=T_Real;
	 real_val=0;
	 objs_ptr=0;
	 flags=NULL_CHECK|LOCAL_VAR;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[3] {
	 name="ed_y";
	 var_type=T_Real;
	 real_val=0;
	 objs_ptr=0;
	 flags=NULL_CHECK|LOCAL_VAR;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
       };
      };
      Switch @[1] {
       desc=;
       flags=;
       switch_var=.projects[0].programs[1].functions[0].args[0]$$;
       cases {
	name=;
	el_typ=CaseBlock;
	el_def=0;
	CaseBlock @[0] {
	 desc="bottom horiz";
	 flags=;
	 prog_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  MethodCall @[0] {
	   desc=;
	   flags=;
	   result_var=NULL;
	   obj=.projects[0].programs[1].vars[2]$$;
	   method=taCanvas::Line;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_x - size";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_y - size";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_x + size";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_y - size";
	     };
	    };
	   };
	  };
	 };
	 case_val {
	  expr="0";
	 };
	};
	CaseBlock @[1] {
	 desc="left vert";
	 flags=;
	 prog_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  MethodCall @[0] {
	   desc=;
	   flags=;
	   result_var=NULL;
	   obj=$.projects[0].programs[1].vars[2]$;
	   method=taCanvas::Line;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_x - size";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_y - size";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_x - size";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_y + size";
	     };
	    };
	   };
	  };
	 };
	 case_val {
	  expr="1";
	 };
	};
	CaseBlock @[2] {
	 desc="right vert";
	 flags=;
	 prog_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  MethodCall @[0] {
	   desc=;
	   flags=;
	   result_var=NULL;
	   obj=$.projects[0].programs[1].vars[2]$;
	   method=taCanvas::Line;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_x + size";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_y - size";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_x + size";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_y + size";
	     };
	    };
	   };
	  };
	 };
	 case_val {
	  expr="2";
	 };
	};
	CaseBlock @[3] {
	 desc="top horiz";
	 flags=;
	 prog_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  MethodCall @[0] {
	   desc=;
	   flags=;
	   result_var=NULL;
	   obj=$.projects[0].programs[1].vars[2]$;
	   method=taCanvas::Line;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_x - size";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_y + size";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_x + size";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_y + size";
	     };
	    };
	   };
	  };
	 };
	 case_val {
	  expr="3";
	 };
	};
	CaseBlock @[4] {
	 desc="horiz middle";
	 flags=;
	 prog_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  MethodCall @[0] {
	   desc=;
	   flags=;
	   result_var=NULL;
	   obj=$.projects[0].programs[1].vars[2]$;
	   method=taCanvas::Line;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_x - size";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_y";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_x + size";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_y";
	     };
	    };
	   };
	  };
	 };
	 case_val {
	  expr="4";
	 };
	};
	CaseBlock @[5] {
	 desc="vert middle";
	 flags=;
	 prog_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  MethodCall @[0] {
	   desc=;
	   flags=;
	   result_var=NULL;
	   obj=$.projects[0].programs[1].vars[2]$;
	   method=taCanvas::Line;
	   meth_args {
	    name=;
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=float;
	     type="float";
	     name="x1";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_x";
	     };
	    };
	    ProgArg @[1] {
	     arg_type=float;
	     type="float";
	     name="y1";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_y - size";
	     };
	    };
	    ProgArg @[2] {
	     arg_type=float;
	     type="float";
	     name="x2";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_x";
	     };
	    };
	    ProgArg @[3] {
	     arg_type=float;
	     type="float";
	     name="y2";
	     required=1;
	     def_val=;
	     expr {
	      expr="ctr_y + size";
	     };
	    };
	   };
	  };
	 };
	 case_val {
	  expr="5";
	 };
	};
       };
      };
     };
    };
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    ResetDataRows @[0] {
     desc=;
     flags=;
     data_var=.projects[0].programs[1].vars[3]$$;
    };
    MethodCall @[1] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs[1].vars[2]$;
     method=taImage::SetImageSize;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="width";
       required=1;
       def_val=;
       expr {
	expr="canvas_width";
       };
      };
      ProgArg @[1] {
       arg_type=int;
       type="int";
       name="height";
       required=1;
       def_val=;
       expr {
	expr="canvas_height";
       };
      };
     };
    };
    MethodCall @[2] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs[1].vars[2]$;
     method=taImage::ConfigDataColName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dt";
       required=1;
       def_val=;
       expr {
	expr="StimGenData";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="col_nm";
       required=1;
       def_val=;
       expr {
	expr="\"Canvas\"";
       };
      };
      ProgArg @[2] {
       arg_type=taBase::ValType;
       type="taBase::ValType";
       name="val_type";
       required=1;
       def_val=;
       expr {
	expr="taBase::VT_FLOAT";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="rgb";
       required=0;
       def_val="true";
       expr {
	expr="true";
       };
      };
     };
    };
    AddNewDataRow @[3] {
     desc=;
     flags=;
     data_var=$.projects[0].programs[1].vars[3]$;
    };
    MethodCall @[4] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs[1].vars[2]$;
     method=taCanvas::InitCanvas;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
    MethodCall @[5] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs[1].vars[2]$;
     method=taCanvas::EraseName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=1;
       def_val="\"\"";
       expr {
	expr="bg_color";
       };
      };
     };
    };
    MethodCall @[6] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs[1].vars[2]$;
     method=taCanvas::PenWidth;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=float;
       type="float";
       name="width";
       required=1;
       def_val=;
       expr {
	expr="line_width";
       };
      };
     };
    };
    MethodCall @[7] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs[1].vars[2]$;
     method=taCanvas::PenColorName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=1;
       def_val="\"\"";
       expr {
	expr="line_color";
       };
      };
     };
    };
    AssignExpr @[8] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[9]$$;
     expr {
      expr="ObjectNo";
     };
    };
    AssignExpr @[9] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[8]$$;
     expr {
      expr="ObjectEnum";
     };
    };
    AssignExpr @[10] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[14]$$;
     expr {
      expr="ObjectName.before(\"_\").after(\"LED\")";
     };
    };
    AssignExpr @[11] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[15]$$;
     expr {
      expr="ObjectName.after(\"_\",-1)";
     };
    };
    ForLoop @[12] {
     desc=;
     flags=;
     loop_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=;
       result_var=.projects[0].programs[1].vars[16]$$;
       expr {
	expr="LED_segs.at(i,1)";
       };
      };
      FunctionCall @[1] {
       desc=;
       flags=;
       result_var=NULL;
       fun=.projects[0].programs[1].functions[0]$$;
       fun_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="led_number";
	 required=1;
	 def_val=;
	 expr {
	  expr="cur_led";
	 };
	};
       };
      };
     };
     init {
      expr="i = 0";
     };
     test {
      expr="i < LED_n";
     };
     iter {
      expr="i++";
     };
    };
    Comment @[13] {
     desc="update the datatable with the current image";
     flags=;
    };
    MethodCall @[14] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs[1].vars[2]$;
     method=taImage::ImageToDataCellName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="dt";
       required=1;
       def_val=;
       expr {
	expr="StimGenData";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="col_nm";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"Canvas\"";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="row";
       required=1;
       def_val=;
       expr {
	expr="-1";
       };
      };
     };
    };
    DoneWritingDataRow @[15] {
     desc=;
     flags=;
     data_var=$.projects[0].programs[1].vars[3]$;
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program @[2] {
   name="ApplyInputsImage";
   short_nm="AplyIn";
   tags=;
   desc="apply input data to the network, using a RetinaSpec to process a bitmap image.  epoch should iterate over a datatable with names of images to load, and the current value of that is used here to load the image and process into a second datatable (image_data) which is actually presented to the network.";
   flags=NO_STOP_STEP;
   objs {
    name=;
    el_typ=LayerWriter;
    el_def=0;
    V1RetinaProc @[0] {
     name="V1RetinaProc_0";
     edge_mode=WRAP;
     fade_width=-1;
     regions {
      name=;
      el_typ=V1RegionSpec;
      el_def=0;
      V1RegionSpec @[0] {
       name="V1";
       threads {
	run_time {name="TimeUsedHR_6": s_used=0: n_used=0: };
	sync_time {name="TimeUsedHR_7": s_used=0: n_used=0: };
	total_time {name="TimeUsedHR_8": s_used=0: n_used=0: };
	n_wake_in_sync=0;
	run_time_pct=0;
	sync_time_pct=0;
	wake_in_sync_pct=1.919385910272122e-23;
       };
       data_table=.projects[0].programs[2].objs[1]$$;
       save_mode=FIRST_ROW;
       image_save=SAVE_DATA|ONLY_GUI;
       region {ocularity=MONOCULAR: region=FOVEA: res=HI_RES: color=MONOCHROME: edge_mode=WRAP: renorm_thr=1e-05: };
       input_size {retina_size={x=40: y=40: }: border={x=0: y=0: }: input_size={x=40: y=40: }: };
       motion_frames=0;
       v1s_specs {n_angles=4: filter_size=6: spacing=2: wvlen=6: gauss_sig_len=0.3: gauss_sig_wd=0.2: phase_off=0: circle_edge=1: };
       v1s_kwta {on=1: raw_pct=0: gp_k=1: gp_g=0.02: kwta_pt=0.5: gelin=1: gain=40: nvar=0.01: g_bar_l=0.1: };
       v1s_neigh_inhib {on=1: inhib_d=1: inhib_g=0.8: tot_ni_len=3: };
       v1s_motion {n_speeds=1: tuning_width=1: gauss_sig=0.8: tot_width=3: };
       v1s_renorm=LIN_RENORM;
       v1m_renorm=NO_RENORM;
       v1s_save=SAVE_DATA;
       v1s_feat_geom {x=4: y=2: n_not_xy=0: n=8: };
       v1s_img_geom {x=20: y=20: n_not_xy=0: n=400: };
       v1s_feat_mot_y=2;
       v1b_specs {use_sum=0: n_disps=1: disp_off=4: tuning_width=2: end_width=20: gauss_sig=0.7: opt_thr=0.01: tot_disps=3: max_width=25: };
       v1b_dsp_specs {dsp_iters=10: dsp_gain=0.2: v1b_mix=0.5: neigh_width=4: gauss_sig=1: v1b_mix_c=0.5: };
       v1b_save=SAVE_DATA;
       v1b_feat_geom {x=4: y=6: n_not_xy=0: n=1: };
       v1b_img_geom {x=20: y=20: n_not_xy=0: n=400: };
       v1c_filters=V1S_MAX;
       v1c_specs {len_sum_len=1: end_stop_dist=2: es_adjang_wt=0.2: gauss_sig=0.8: nonfocal_wt=0.8: pre_gp4=0: spat_rf={x=4: y=4: }: pre_rf=4: pre_half=2: pre_spacing=2: pre_border=0: spat_half={x=2: y=2: }: spat_spacing={x=2: y=2: }: spat_border={x=0: y=0: }: net_rf={x=4: y=4: }: net_half={x=2: y=2: }: net_spacing={x=2: y=2: }: net_border={x=0: y=0: }: len_sum_width=3: len_sum_norm=0.3333333: };
       v1c_kwta {on=1: raw_pct=0: gp_k=2: gp_g=0.1: kwta_pt=0.5: gelin=1: gain=40: nvar=0.01: g_bar_l=0.1: };
       v1c_renorm=LIN_RENORM;
       v1c_sep_renorm=;
       v1bmax_renorm=LIN_RENORM;
       v1c_save=SAVE_DATA;
       v1c_feat_geom {x=4: y=2: n_not_xy=0: n=8: };
       v1c_pre_geom {x=20: y=20: n_not_xy=0: n=400: };
       v1c_img_geom {x=10: y=10: n_not_xy=0: n=100: };
       n_colors=1;
       n_polarities=2;
       n_polclr=2;
       v1c_feat_es_y=-1;
       v1c_feat_ls_y=-1;
       v1c_feat_smax_y=0;
       v1c_feat_blob_y=-1;
       v1c_feat_edge_y=-1;
      };
     };
    };
    DataTable @[1] {
     name="V1FilterInputData";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
	UserDataItem @[0] {
	 name="IMAGE";
	 value 1 0=1;
	 val_type_fixed=0;
	};
       };
       name="V1_image_r";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 40;40;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [2] ;;       };
      };
      float_Data @[1] {
       name="V1_v1s_r";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;2;20;20;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [4] ;;;;       };
      };
      float_Data @[2] {
       name="V1_v1c";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 4;2;10;10;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [4] ;;;;       };
      };
      float_Data @[3] {
       name="Output";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 5;4;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [2] ;;       };
      };
      String_Data @[4] {
       name="Name";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{        };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    LayerWriter @[2] {
     name="V1LayerWriter";
     data=$.projects[0].programs[2].objs[1]$;
     network=$.projects[0].networks[0]$;
     layer_data {
      name=;
      el_typ=LayerWriterEl;
      el_def=0;
      LayerWriterEl @[0] {
       chan_name="V1_v1c";
       net_target=LAYER;
       layer_name="V1";
       offset {x=0: y=0: };
       use_layer_type=1;
       na_by_range=0;
       ext_flags=EXT;
       noise {name="": type=NONE: mean=0: var=0.5: par=1: };
      };
      LayerWriterEl @[1] {
       chan_name="V1_image_r";
       net_target=LAYER;
       layer_name="Image";
       offset {x=0: y=0: };
       use_layer_type=1;
       na_by_range=0;
       ext_flags=EXT;
       noise {name="": type=NONE: mean=0: var=0.5: par=1: };
      };
      LayerWriterEl @[2] {
       chan_name="Output";
       net_target=LAYER;
       layer_name="Output";
       offset {x=0: y=0: };
       use_layer_type=1;
       na_by_range=0;
       ext_flags=TARG;
       noise {name="RandomSpec_23": type=NONE: mean=0: var=0.5: par=1: };
      };
      LayerWriterEl @[3] {
       chan_name="Name";
       net_target=TRIAL_NAME;
       layer_name="Name";
       offset {x=0: y=0: };
       use_layer_type=1;
       na_by_range=0;
       ext_flags=;
       noise {name="RandomSpec_24": type=NONE: mean=0: var=0.5: par=1: };
      };
     };
    };
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$.projects[0].data.gp[0][0]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="Source data for input process";
     init_from=NULL;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=$.projects[0].networks[0]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="Network to which to apply inputs";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="V1LayerWriter";
     var_type=T_Object;
     object_type=LayerWriter;
     object_val=.projects[0].programs[2].objs[2]$$;
     objs_ptr=1;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="Moves data into the network";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="ObjectName";
     var_type=T_String;
     string_val="LED3_7_034";
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="name of object to render";
     init_from=NULL;
    };
    ProgVar @[3] {
     name="Name";
     var_type=T_String;
     string_val="13";
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="name of object to render";
     init_from=NULL;
    };
    ProgVar @[4] {
     name="ObjectNo";
     var_type=T_Int;
     int_val=13;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="object number (for output layer)";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="translate_x";
     var_type=T_Real;
     real_val=-0.2435270204338613;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="Horizontal translation in image coordinates for current input (0.0 - 1.0, 0.3 is generally maximum)";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="translate_y";
     var_type=T_Real;
     real_val=-0.2401474901590197;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="Vertical translation for current input (image coords)";
     init_from=NULL;
    };
    ProgVar @[7] {
     name="scale";
     var_type=T_Real;
     real_val=0.7422332710716359;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="Scaling factor for current input - fraction of size of one dimension (50% = 0.5)";
     init_from=NULL;
    };
    ProgVar @[8] {
     name="rotate";
     var_type=T_Real;
     real_val=0.0004977141546280081;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="Rotation for current input - 0.5 is 180 degrees";
     init_from=NULL;
    };
    ProgVar @[9] {
     name="Canvas";
     var_type=T_Object;
     object_type=taCanvas;
     object_val=$.projects[0].programs[1].objs[0]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[10] {
     name="V1RetinaProc_0";
     var_type=T_Object;
     object_type=V1RetinaProc;
     object_val=.projects[0].programs[2].objs[0]$$;
     objs_ptr=1;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[11] {
     name="V1FilterInputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$.projects[0].programs[2].objs[1]$;
     objs_ptr=1;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=MethodCall;
    el_def=0;
    MethodCall @[0] {
     desc="Connect the image data table to the layerwriter";
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[2].vars[1]$$;
     method=LayerWriter::SetDataNetwork;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=DataBlock_ptr;
       type="DataBlock*";
       name="db";
       required=1;
       def_val=;
       expr {
	expr="V1FilterInputData";
       };
      };
      ProgArg @[1] {
       arg_type=Network_ptr;
       type="Network*";
       name="net";
       required=1;
       def_val=;
       expr {
	expr="network";
       };
      };
     };
    };
    MethodCall @[1] {
     desc="Confirm that all is well with the layerwriter";
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs[2].vars[1]$;
     method=taList_impl::CheckConfig;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="quiet";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
     };
    };
   };
   prog_code {
    name=;
    el_typ=MethodCall;
    el_def=0;
    IfElse @[0] {
     desc="For minus phase";
     flags=;
     cond {
      expr="network.phase_no == 0";
     };
     true_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      DataVarProg @[0] {
       desc="get object name, number";
       flags=;
       data_var=.projects[0].programs[2].args[0]$$;
       set_data=0;
       row_spec=CUR_ROW;
       row_var=NULL;
       quiet=0;
       var_1=.projects[0].programs[2].vars[2]$$;
       var_2=.projects[0].programs[2].vars[4]$$;
       var_3=NULL;
       var_4=NULL;
      };
      DataVarProg @[1] {
       desc="get display transformations (translation, rotation, scale)";
       flags=;
       data_var=$.projects[0].programs[2].args[0]$;
       set_data=0;
       row_spec=CUR_ROW;
       row_var=NULL;
       quiet=0;
       var_1=.projects[0].programs[2].vars[5]$$;
       var_2=.projects[0].programs[2].vars[6]$$;
       var_3=.projects[0].programs[2].vars[8]$$;
       var_4=.projects[0].programs[2].vars[7]$$;
      };
      ProgramCall @[2] {
       desc=;
       flags=;
       prog_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=int;
	 type="int";
	 name="ObjectNo";
	 required=1;
	 def_val=;
	 expr {
	  expr="ObjectNo";
	 };
	};
       };
       target=.projects[0].programs[1]$$;
       targ_ld_init="*LEDStimGen*";
      };
      MethodCall @[3] {
       desc="Key operation: Read and filter the image into the image data table ";
       flags=;
       result_var=NULL;
       obj=.projects[0].programs[2].vars[10]$$;
       method=RetinaProc::LookAtImage;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=taImage_ptr;
	 type="taImage*";
	 name="right_eye_image";
	 required=1;
	 def_val=;
	 expr {
	  expr="Canvas";
	 };
	};
	ProgArg @[1] {
	 arg_type=taImage_ptr;
	 type="taImage*";
	 name="left_eye_image";
	 required=0;
	 def_val="NULL";
	 expr {
	  expr="NULL";
	 };
	};
	ProgArg @[2] {
	 arg_type=VisRegionParams::Region;
	 type="VisRegionParams::Region";
	 name="region";
	 required=0;
	 def_val="VisRegionParams::FOVEA";
	 expr {
	  expr="VisRegionParams::FOVEA";
	 };
	};
	ProgArg @[3] {
	 arg_type=float;
	 type="float";
	 name="box_ll_x";
	 required=0;
	 def_val="0.0f";
	 expr {
	  expr="0.0";
	 };
	};
	ProgArg @[4] {
	 arg_type=float;
	 type="float";
	 name="box_ll_y";
	 required=0;
	 def_val="0.0f";
	 expr {
	  expr="0.0";
	 };
	};
	ProgArg @[5] {
	 arg_type=float;
	 type="float";
	 name="box_ur_x";
	 required=0;
	 def_val="1.0f";
	 expr {
	  expr="1.0";
	 };
	};
	ProgArg @[6] {
	 arg_type=float;
	 type="float";
	 name="box_ur_y";
	 required=0;
	 def_val="1.0f";
	 expr {
	  expr="1.0";
	 };
	};
	ProgArg @[7] {
	 arg_type=float;
	 type="float";
	 name="move_x";
	 required=0;
	 def_val="0.0f";
	 expr {
	  expr="translate_x";
	 };
	};
	ProgArg @[8] {
	 arg_type=float;
	 type="float";
	 name="move_y";
	 required=0;
	 def_val="0.0f";
	 expr {
	  expr="translate_y";
	 };
	};
	ProgArg @[9] {
	 arg_type=float;
	 type="float";
	 name="scale";
	 required=0;
	 def_val="1.0f";
	 expr {
	  expr="scale";
	 };
	};
	ProgArg @[10] {
	 arg_type=float;
	 type="float";
	 name="rotate";
	 required=0;
	 def_val="0.0f";
	 expr {
	  expr="rotate";
	 };
	};
       };
      };
      MethodCall @[4] {
       desc="Key operation: Read and filter the image into the image data table ";
       flags=;
       result_var=NULL;
       obj=$.projects[0].programs[2].vars[10]$;
       method=RetinaProc::FilterImageData;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
       };
      };
      Comment @[5] {
       desc="set Output target value";
       flags=;
      };
      MethodCall @[6] {
       desc="set output unit";
       flags=;
       result_var=NULL;
       obj=.projects[0].programs[2].vars[11]$$;
       method=DataTable::InitVals;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="const Variant&";
	 name="init_val";
	 required=1;
	 def_val=;
	 expr {
	  expr="0.0";
	 };
	};
	ProgArg @[1] {
	 arg_type=Variant;
	 type="Variant";
	 name="col";
	 required=1;
	 def_val=;
	 expr {
	  expr="\"Output\"";
	 };
	};
       };
      };
      MethodCall @[7] {
       desc="set output unit";
       flags=;
       result_var=NULL;
       obj=$.projects[0].programs[2].vars[11]$;
       method=DataTable::SetMatrixFlatValColName;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=const_Variant_ref;
	 type="const Variant&";
	 name="val";
	 required=1;
	 def_val=;
	 expr {
	  expr="1.0";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="const taString&";
	 name="col_name";
	 required=1;
	 def_val="\"\"";
	 expr {
	  expr="\"Output\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=int;
	 type="int";
	 name="row";
	 required=1;
	 def_val=;
	 expr {
	  expr="-1";
	 };
	};
	ProgArg @[3] {
	 arg_type=int;
	 type="int";
	 name="cell";
	 required=1;
	 def_val=;
	 expr {
	  expr="ObjectNo";
	 };
	};
	ProgArg @[4] {
	 arg_type=bool;
	 type="bool";
	 name="quiet";
	 required=0;
	 def_val="false";
	 expr {
	  expr=;
	 };
	};
       };
      };
      AssignExpr @[8] {
       desc=;
       flags=;
       result_var=.projects[0].programs[2].vars[3]$$;
       expr {
	expr="taMisc::LeadingZeros(ObjectNo,2)";
       };
      };
      DataVarProg @[9] {
       desc=;
       flags=;
       data_var=$.projects[0].programs[2].vars[11]$;
       set_data=1;
       row_spec=CUR_ROW;
       row_var=NULL;
       quiet=0;
       var_1=$.projects[0].programs[2].vars[3]$;
       var_2=NULL;
       var_3=NULL;
       var_4=NULL;
      };
     };
     false_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
     };
    };
    MethodCall @[1] {
     desc="Final read of image data before applying to network";
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs[2].vars[11]$;
     method=DataBlock_Idx::ReadItem;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="idx";
       required=1;
       def_val=;
       expr {
	expr="-1";
       };
      };
     };
    };
    MethodCall @[2] {
     desc="write the data to the network!";
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs[2].vars[1]$;
     method=LayerWriter::ApplyInputData;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
    DoneWritingDataRow @[3] {
     desc=;
     flags=;
     data_var=$.projects[0].programs[2].vars[11]$;
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program @[3] {
   name="LeabraStartup";
   short_nm="Start";
   tags="Leabra, Startup";
   desc="run project in the background (replaces leabra_startup.css)
command line is: emergent -nogui -ni -p <project name>.proj [epochs=xxx] [batches=xxx] [tag=xxx]";
   flags=NO_STOP_STEP|STARTUP_RUN;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=$.projects[0].networks[0]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$.projects[0].data.gp[0][0]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="datatable with training patterns -- not used by this program, but passed to train program";
     init_from=NULL;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="batch";
     var_type=T_Object;
     object_type=Program;
     object_val=.projects[0].programs.gp[0][0]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="set this to point to your batch process";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="tag";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="log_dir";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="log file directory";
     init_from=NULL;
    };
    ProgVar @[3] {
     name="log_file_nm";
     var_type=T_String;
     string_val=;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="name of log file";
     init_from=NULL;
    };
    ProgVar @[4] {
     name="EpochOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[1][1]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="TrialOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[1][0]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    IfReturn @[0] {
     desc="don't run if running in the gui!";
     flags=;
     cond {
      expr="taMisc::gui_active";
     };
    };
    Comment @[1] {
     desc="add our special args from command line";
     flags=;
    };
    MiscCall @[2] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"tag=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[3] {
     desc=;
     flags=;
     result_var=NULL;
     object_type=taMisc;
     method=taMisc::AddArgName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="flag";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"logdir=\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="name";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    RegisterArgs @[4] {
     desc="This is KEY!!! actuall processes all args, including those from ProgVarFmArg guys below";
     flags=;
    };
    Comment @[5] {
     desc="Initialize and set variables from args";
     flags=;
    };
    PrintExpr @[6] {
     desc=;
     flags=;
     expr {
      expr="\"Loaded project: \" << .projects[0].file_name";
     };
    };
    MethodCall @[7] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[3].vars[0]$$;
     method=Program::Init;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
    MiscCall @[8] {
     desc=;
     flags=;
     result_var=.projects[0].programs[3].vars[1]$$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="nm";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"FileTag\"";
       };
      };
     };
    };
    MiscCall @[9] {
     desc=;
     flags=;
     result_var=.projects[0].programs[3].vars[2]$$;
     object_type=taMisc;
     method=taMisc::FindArgByName;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="nm";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"LogDir\"";
       };
      };
     };
    };
    ProgVarFmArg @[10] {
     desc=;
     flags=;
     prog=$.projects[0].programs.gp[0][1]$;
     var_name="max_epoch";
     arg_name="epochs";
    };
    ProgVarFmArg @[11] {
     desc=;
     flags=;
     prog=$.projects[0].programs.gp[0][0]$;
     var_name="max_batch";
     arg_name="batches";
    };
    Comment @[12] {
     desc="custom params for this sim";
     flags=;
    };
    ProgVarFmArg @[13] {
     desc=;
     flags=;
     prog=.projects[0].programs[0]$$;
     var_name="translate_max";
     arg_name="translate_max";
    };
    ProgVarFmArg @[14] {
     desc=;
     flags=;
     prog=$.projects[0].programs[0]$;
     var_name="scale_min";
     arg_name="scale_min";
    };
    ProgVarFmArg @[15] {
     desc=;
     flags=;
     prog=$.projects[0].programs[0]$;
     var_name="scale_max";
     arg_name="scale_max";
    };
    ProgVarFmArg @[16] {
     desc=;
     flags=;
     prog=$.projects[0].programs[0]$;
     var_name="rotate_max";
     arg_name="rotate_max";
    };
    ProgVarFmArg @[17] {
     desc=;
     flags=;
     prog=$.projects[0].programs[1]$;
     var_name="line_width";
     arg_name="line_width";
    };
    Comment @[18] {
     desc="Set log files";
     flags=;
    };
    MethodCall @[19] {
     desc="last arg is to include dmem proc number";
     flags=;
     result_var=.projects[0].programs[3].vars[3]$$;
     obj=.projects[0].programs[3].vars[4]$$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".epc.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
     };
    };
    MethodCall @[20] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs[3].vars[4]$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       expr {
	expr="true";
       };
      };
     };
    };
    MethodCall @[21] {
     desc="last arg is to include dmem proc number";
     flags=OFF;
     result_var=$.projects[0].programs[3].vars[3]$;
     obj=.projects[0].programs[3].vars[5]$$;
     method=taBase::GetFileNameFmProject;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="ext";
       required=1;
       def_val=;
       expr {
	expr="\".trl.dat\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="tag";
       required=0;
       def_val="\"\"";
       expr {
	expr="tag";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="subdir";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_dir";
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_no";
       required=0;
       def_val="false";
       expr {
	expr="true";
       };
      };
     };
    };
    MethodCall @[22] {
     desc="last arg is to restrict log to dmem_proc = 0";
     flags=OFF;
     result_var=NULL;
     obj=$.projects[0].programs[3].vars[5]$;
     method=DataTable::SaveDataLog;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="log_file_nm";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="append";
       required=0;
       def_val="false";
       expr {
	expr="false";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="dmem_proc_0";
       required=0;
       def_val="true";
       expr {
	expr="false";
       };
      };
     };
    };
    OtherProgramVar @[23] {
     desc=;
     flags=;
     other_prog=.projects[0].programs.gp[0][8]$$;
     set_other=1;
     var_1=$.projects[0].programs[3].vars[1]$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    PrintExpr @[24] {
     desc=;
     flags=;
     expr {
      expr="\"Running: \" << batch.name";
     };
    };
    ProgramCall @[25] {
     desc=;
     flags=;
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable;
       type="DataTable*";
       name="input_data";
       required=1;
       def_val=;
       expr {
	expr="input_data";
       };
      };
     };
     target=$.projects[0].programs.gp[0][0]$;
     targ_ld_init="*LeabraBatch*";
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program @[4] {
   name="LoadWeights";
   short_nm="LWghts";
   tags=;
   desc="load weights from trained networks";
   flags=;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=$.projects[0].networks[0]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="network to train";
     init_from=NULL;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[4].args[0]$$;
     method=Network::LoadWeights;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr=;
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="quiet";
       required=0;
       def_val="false";
       expr {
	expr=;
       };
      };
     };
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program @[5] {
   name="LoadTestData";
   short_nm="LTsDt";
   tags=;
   desc="load pre-run testing data";
   flags=;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="TestErrorData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[2][0]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[5].args[0]$$;
     method=DataTable::LoadData;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"\"";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable::Delimiters;
       type="DataTable::Delimiters";
       name="delim";
       required=0;
       def_val="DataTable::TAB";
       expr {
	expr="DataTable::TAB";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="quote_str";
       required=0;
       def_val="true";
       expr {
	expr="true";
       };
      };
      ProgArg @[3] {
       arg_type=int;
       type="int";
       name="max_recs";
       required=0;
       def_val="-1";
       expr {
	expr="-1";
       };
      };
      ProgArg @[4] {
       arg_type=bool;
       type="bool";
       name="reset_first";
       required=0;
       def_val="false";
       expr {
	expr="true";
       };
      };
     };
    };
    MethodCall @[1] {
     desc="this is not good because it resets the view axes";
     flags=OFF;
     result_var=NULL;
     obj=$.projects[0].programs[5].args[0]$;
     method=DataTable::FindMakeGraphView;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=T3DataViewFrame_ptr;
       type="T3DataViewFrame*";
       name="fr";
       required=0;
       def_val="NULL";
       expr {
	expr=;
       };
      };
     };
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program @[6] {
   name="LoadActRFData";
   short_nm="LdcRFD";
   tags=;
   desc="load pre-run activation-based receptive field data";
   flags=;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="ActRFData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs.gp[1][7].objs[1]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[6].args[0]$$;
     method=DataTable::LoadData;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"\"";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable::Delimiters;
       type="DataTable::Delimiters";
       name="delim";
       required=0;
       def_val="DataTable::TAB";
       expr {
	expr="DataTable::TAB";
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="quote_str";
       required=0;
       def_val="true";
       expr {
	expr="true";
       };
      };
      ProgArg @[3] {
       arg_type=int;
       type="int";
       name="max_recs";
       required=0;
       def_val="-1";
       expr {
	expr="-1";
       };
      };
      ProgArg @[4] {
       arg_type=bool;
       type="bool";
       name="reset_first";
       required=0;
       def_val="false";
       expr {
	expr="true";
       };
      };
     };
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program @[7] {
   name="GenTrain";
   short_nm="GTrn";
   tags=;
   desc="generalization training preparation: load weights, set lrate to 0, epoch to 90, train mode to TRAIN_NOVEL";
   flags=NO_STOP_STEP;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=$.projects[0].networks[0]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="network to operate on";
     init_from=NULL;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="LeabraEpoch";
     var_type=T_Object;
     object_type=Program;
     object_val=.projects[0].programs.gp[0][2]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="LeabraConSpec_0";
     var_type=T_Object;
     object_type=LeabraConSpec;
     object_val=$.projects[0].networks[0].specs[2]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[7].args[0]$$;
     method=Network::LoadWeights;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"objrec_train1.wts.gz\"";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="quiet";
       required=0;
       def_val="false";
       expr {
	expr=;
       };
      };
     };
    };
    MemberAssign @[1] {
     desc="reset epoch to 90 so learning rate schedule goes back to .01 for 10 epochs, then .001 for remainder";
     flags=;
     obj=$.projects[0].programs[7].args[0]$;
     path="epoch";
     expr {
      expr="90";
     };
     update_after=0;
    };
    MethodCall @[2] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[7].vars[0]$$;
     method=Program::SetVar;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="var_nm";
       required=1;
       def_val="\"\"";
       expr {
	expr="\"input_type\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="const Variant&";
       name="value";
       required=1;
       def_val=;
       expr {
	expr="\"TRAIN_NOVEL\"";
       };
      };
     };
    };
    MemberAssign @[3] {
     desc="set lrate to 0 for all but output <-> V4_IT pathways";
     flags=;
     obj=.projects[0].programs[7].vars[1]$$;
     path="lrate";
     expr {
      expr="0.0";
     };
     update_after=1;
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   Program @[0] {
    name="LeabraBatch";
    short_nm="Batch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="batch counter";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="max_batch";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of batch runs to perform";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=.projects[0].programs.gp[0][0].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[0][0].vars[0]$$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=$.projects[0].programs.gp[0][0].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][0].vars[0]$;
      counter=Network::batch;
      update_after=0;
     };
     WhileLoop @[1] {
      desc="the main loop over training runs";
      flags=;
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="run the training program -- sets the network and input_data args";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	};
	target=$.projects[0].programs.gp[0][1]$;
	targ_ld_init="*LeabraTrain*";
       };
       NetCounterIncr @[1] {
	desc="increment the local batch counter and copy to network";
	flags=;
	network_var=$.projects[0].programs.gp[0][0].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[0][0].vars[0]$;
	counter=Network::batch;
	update_after=0;
       };
      };
      test {
       expr="batch < max_batch";
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[1] {
    name="LeabraTrain";
    short_nm="Train";
    tags="Leabra, Std";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
    flags=;
    objs {
     name=;
     el_typ=RndSeed;
     el_def=0;
     RndSeed @[0] {
      name="rnd_seed";
      seed{ 897248114;-1259630319;-1954705695;-2086433643;-1705562578;-246166775;142172280;-1066196830;649876912;-363601797;-1551220787;-201998924;984813377;-1929982005;1866720504;1737535582;-2064818913;-596409631;-537210356;-394821123;-1176302275;-1088439095;390472553;1002483428;-644065336;-93234492;-249392311;1955837623;486322880;268723693;-1316990013;-1148081097;1053267338;-194887551;722894185;-1796145741;-419870710;-744395548;-2126350183;-1623934615;-1975558537;-1109580724;1457379925;952758326;-932820647;-793678521;622734178;-1116891631;992844023;348717466;1162608598;-2078137647;-402129645;-523610230;-892508948;-545793120;1897913877;280270467;-1694155315;294983543;-1251003482;-1650029695;-1335161250;-843867016;1576969605;-260969840;-224140684;1265137246;954732510;2064975050;-1145863940;-1435022393;-1859029257;1513712809;985631399;417291160;-2038587757;-1933156114;888379733;1446724555;-464909414;-1706911051;-1159096460;-1791674743;-147343083;960690226;682596297;1099430942;359127508;311504974;93962501;-1671326033;632618192;-885562045;1179982281;-1505675969;1344906533;-1418551925;1622092278;1701084792;242471559;-1984251903;-1568971862;-1063520265;1591722069;-1959097976;-1601150455;-874166212;-889564662;717605003;-1582378599;-1301052667;1211123575;485189748;-182999148;374766658;1150697026;-738165078;-390496439;960351772;-332421139;71115877;-1747551486;-288197538;2067393244;-402841323;168191432;698976579;-691346957;454158309;419567441;-1655444926;1843518827;-1387150657;-1775972895;1209349907;1737084105;-273997764;2063222132;-629133755;1321145195;-340980602;-64855207;836106865;-384606302;857100345;-616134379;-1192753754;-1534913223;1646103447;-337508797;-104008340;1371554336;1910014402;1731164243;157488784;-1230766726;1651230814;-1801393009;1853249886;-1909629469;-2064890998;-586605120;1029458265;-1567764431;-569878997;-1071722633;1842759325;1870815306;1275367738;-2047480342;699437794;-2078020834;2120915280;1609487567;715455530;-1961002406;-1366381474;1214551640;1682680277;1866914062;-1438763676;1522254727;410589237;1882867230;-2066414372;335577213;-1969515802;-2079897542;1101145964;-914546306;-578950040;-399253994;-1096753521;-660660212;-1198578643;1339175923;-781551297;-1839371394;1105332893;-1928816742;-400816250;1655921312;-452260989;2002840327;447789431;319958765;-658015714;-2019202134;-1586612048;-137582258;706769011;1101838665;827045450;599553857;-2145445088;244597783;1487421271;1630555190;-344172316;-1830139429;-1553867370;-156727033;-755056810;-2131860048;-494346652;1852068823;91308896;725609566;-1111505690;-982815291;1292267944;1836226774;-810066908;-496780978;202956912;603675823;637918661;-10943404;552199869;1297990249;-1519144401;-1727998742;1493519921;-1227758025;-860568373;2118867559;1126222143;-1549971275;-1469719981;-370967157;-1094842937;2081077388;-1045858167;-179155018;-384518151;905350287;-1851803717;571620219;760498291;-480881197;-973785647;838212682;340510526;510321855;-801267485;-852016520;1774211485;39420368;537777206;2107097314;1618664461;210916571;-423959548;631482818;-1040919263;-279241335;-892903760;497369428;1334556795;-290177741;-620998078;1723791759;253979182;2098469877;2033083432;2025527244;-556275368;-1153759308;1554310973;-2109179006;1594713042;-1652347925;-1896234258;1399293819;-1212915145;264979477;2035769098;-26264659;816116738;-1472777223;-1886895409;579752040;1987550252;850378084;-592526232;228677599;-1282752773;-3264037;1636907752;554996081;10747923;1856021975;150743074;1441285143;-284865308;64061770;547700487;2007963302;-518601320;717968026;-1887063740;-1161755710;654757340;624448862;1095845326;1219653475;1112960789;540367258;1430941426;-1573264900;842324047;-1866598839;672477326;-834606497;456739053;2014938441;1820294365;-1127769538;237909957;778195458;-320898672;-493131725;374332760;1492882317;244532839;1469335464;813662131;1904048850;1828753335;1969748325;1462812563;773013089;1263710334;6222118;1806899780;-1306665146;695150693;1034369820;-410885147;-2065109159;-21981403;1688153775;-1834763828;-2034905187;-868895926;-2040902706;760295113;705437415;-801989522;-327259983;340256932;1639347777;676478214;-868392127;-2126595595;1085040460;-101711712;1181203896;-1177629723;1052562025;-385800214;-2127578499;-247860261;-210619237;-1285411717;-1501642238;-1370695642;-901640534;-1139102088;-1435816006;2062624444;733280257;-325264040;815916517;1806401640;106587238;222094010;-1348528385;297616670;-861761020;117428779;2046490308;1520601476;1774880419;2117307057;709856479;658783300;-1019651996;1857641166;-1623434894;-1466106812;1764750271;337867896;1769011978;1878580541;-337505063;55931846;657238908;1968152816;-169076117;-975001150;-619957198;463669432;-1908341507;-643594058;-2026430605;1348524010;-730896925;454931916;416148985;-1578791134;-739712940;-1725329931;204101311;-1062609662;-1691773722;860783264;946450304;1161241387;207536058;3478215;923381087;-305329130;-1353819564;48467194;-497866365;-1191262819;1442954968;-408984143;934531440;1843513070;-1086308879;585900848;-1977125474;-643228730;1005419111;430194483;1169789286;892875109;-1732318651;-897476207;416658129;2090816327;-186559977;-187909452;1699611428;132945605;1386154990;-1021089733;1553010825;1685237703;1771892687;-1665309430;-1471203233;408978895;-1985168698;-1461014828;-475885929;-149644797;184461852;-1631733780;-113049057;1929365839;-1841043271;755994780;1384891379;-572376242;-1822728640;527993133;536302677;-728200547;-1916517795;401821920;777687226;634513383;938837982;-1741204308;-712292839;-888158003;-989731250;1070351745;-997999887;-1220926516;-477621207;-668502217;432615022;341097247;-1817216444;-1580909839;1073812924;-1037427637;-421491456;-2071807233;419582815;835099779;-300811050;1008848942;-622226245;1119083448;2015783992;374250496;417956216;70961961;-1285132279;1021911943;1585993281;1118486430;-946608452;-1704284523;1344252873;908115709;2135579935;636192621;-776174384;533471998;586778067;-154978136;1359740759;1629951629;-1733015859;2121954041;2104107711;-295897115;1345244080;-1738577645;-559564224;1033955967;-1763695458;250221436;-693902564;1091788545;927707887;-712040796;1439001997;1595609215;1364606826;661845780;-755815374;-2034931863;1346096804;-2074100882;-1065691144;654888208;1007146357;778226326;1410374083;1808044267;239070962;-300943249;1387420801;914251343;580430497;1404608152;117575915;1513662704;256310634;-569005681;-1678005121;-1445134348;2053633677;2025466731;-1577911340;-1278866808;-623511374;-1672074119;45321757;1247003680;1061170196;1198754894;-104913407;2054118989;-1781862918;1530368638;-226966082;-707276305;1591871350;331461390;608113940;235882513;-2046843672;-1075932011;-1894925926;1648301914;1170547429;1665497643;-1251944432;-1796010764;-73953480;788544378;1090859788;-1128050928;-145143834;594707390;-728801566;-252193318;1890915838;-834826210;602694736;1275821290;-2078563303;-1397408457;-343458496;1558647263;      };
      mti=156;
     };
    };
    types {
     name=;
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to train";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="datatable with training patterns";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=150;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of epochs to run";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current epoch -- local copy, which is used to update network's epoch counter";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects[0].programs.gp[0][1].types[0]$$;
       value=0;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=-1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects[0].programs.gp[0][1].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="random seed that is used at start of training -- if OldSeed is called";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].train_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="records time used to train network (object lives on network -- this is a pointer to it)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][1].args[2]$$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      desc="check network to make sure it is ready to be run";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][1].args[0]$$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     AssignExpr @[2] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[6]$$;
      expr {
       expr="network.train_time";
      };
     };
     IfElse @[3] {
      desc="initialize random seed (either old or new)";
      flags=;
      cond {
       expr="rnd_init == OLD_SEED";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="restore previous random seed (all runs produce same results)";
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[0][1].vars[5]$$;
	method=RndSeed::OldSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="new random numbers each time";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][1].vars[5]$;
	method=RndSeed::NewSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     IfGuiPrompt @[4] {
      desc="don't initialize weights without checking";
      flags=;
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][1].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=$.projects[0].programs.gp[0][1].vars[6]$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      desc="start timer to keep track of how long it takes to run entire training run";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][1].vars[6]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MemberAssign @[2] {
      desc="set network's training mode to our local value";
      flags=;
      obj=$.projects[0].programs.gp[0][1].args[0]$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     If @[3] {
      desc=;
      flags=;
      cond {
       expr="no_prompts";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][1].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
     AssignExpr @[4] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[1]$$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[5] {
      desc="main loop over epochs of training";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the epoch program (one epoch), passes our network and input_data";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=$.projects[0].programs.gp[0][2]$;
	targ_ld_init="*LeabraEpoch*";
       };
       NetCounterIncr @[1] {
	desc="increment the epoch counter (locally and on network)";
	flags=;
	network_var=$.projects[0].programs.gp[0][1].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[0][1].vars[1]$;
	counter=Network::epoch;
	update_after=1;
       };
       IfBreak @[2] {
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
	flags=;
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
       };
       If @[3] {
	desc=;
	flags=;
	cond {
	 expr="epoch % 100 == 0";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 ProgramCall @[0] {
	  desc=;
	  flags=;
	  prog_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=Network;
	    type="LeabraNetwork*";
	    name="network";
	    required=1;
	    def_val=;
	    expr {
	     expr="network";
	    };
	   };
	  };
	  target=$.projects[0].programs.gp[0][8]$;
	  targ_ld_init="*SaveWeights*";
	 };
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     MethodCall @[6] {
      desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][1].vars[6]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[7] {
      desc=;
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=$.projects[0].programs.gp[0][8]$;
      targ_ld_init="*SaveWeights*";
     };
    };
    step_prog=.projects[0].programs.gp[0][4]$$;
    step_n=1;
   };
   Program @[2] {
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
     DynEnumType @[0] {
      name="InputType";
      desc="type of input patterns to generate";
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="TRAIN";
	value=0;
	desc="just training objects with full transforms";
       };
       DynEnumItem @[1] {
	name="TRAIN_NOVEL";
	value=1;
	desc="training the novel testing objects: novel shown in restricted locations";
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].epoch_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=9;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="input_type";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects[0].programs.gp[0][2].types[0]$$;
       value=0;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[0][2].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[0][2].vars[1]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[3]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     ProgramCall @[0] {
      desc=;
      flags=NON_STD;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="InputItemList";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=DynEnum;
	type="InputType";
	name="input_type";
	required=1;
	def_val=;
	expr {
	 expr="input_type";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="n_items";
	required=1;
	def_val=;
	expr {
	 expr="100";
	};
       };
      };
      target=$.projects[0].programs[0]$;
      targ_ld_init="*GenerateItemList*";
     };
     NetCounterInit @[1] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$.projects[0].programs.gp[0][2].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][2].vars[1]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[2] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$.projects[0].programs.gp[0][2].vars[3]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].vars[3]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[4] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].vars[2]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[5] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[0][3]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.projects[0].programs.gp[0][2].args[1]$$;
      index_var=.projects[0].programs.gp[0][2].vars[4]$$;
      order_var=.projects[0].programs.gp[0][2].vars[0]$$;
      order=PERMUTED;
      item_idx_list{ 52;94;51;58;2;68;85;66;77;98;3;48;56;78;88;86;4;71;95;55;75;83;32;21;64;47;14;61;12;33;30;27;43;79;17;93;5;80;62;10;70;40;0;16;45;28;9;73;74;42;29;46;31;6;41;20;26;8;37;63;99;39;81;18;24;89;22;82;72;59;76;91;25;7;90;97;92;11;13;57;53;84;36;15;67;65;19;96;38;49;54;35;44;34;50;69;1;87;60;23;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     IfElse @[6] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][2].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[7] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].args[0]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].vars[3]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[9] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs.gp[0][7]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[3] {
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[0][3].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[0][3].vars[0]$$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$.projects[0].programs.gp[0][3].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][3].vars[0]$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[2] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=$.projects[0].programs.gp[0][4]$;
	targ_ld_init="*LeabraSettle*";
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[0][3].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[0][3].vars[0]$;
	counter=LeabraNetwork::phase_no;
	update_after=0;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][3].args[0]$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[3] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[4] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][3].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     ProgramCall @[5] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs.gp[0][6]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[6] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$.projects[0].programs.gp[0][3].args[0]$;
      update_var=.projects[0].programs.gp[0][3].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[4] {
    name="LeabraSettle";
    short_nm="Settle";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[0][4].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[0][4].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$.projects[0].programs.gp[0][4].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][4].vars[0]$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][4].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects[0].programs[2]$$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[0][4].vars[1]$$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$.projects[0].programs.gp[0][4].vars[1]$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[5] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.projects[0].programs.gp[0][5]$$;
	targ_ld_init="*LeabraCycle*";
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[0][4].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[0][4].vars[0]$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[6] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[7] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.phase == LeabraNetwork::MINUS_PHASE";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][4].args[0]$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[8] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][4].args[0]$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[0][4].args[0]$;
      update_var=.projects[0].programs.gp[0][4].vars[2]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[5] {
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][5].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[0][5].args[0]$;
      update_var=$.projects[0].programs.gp[0][5].vars[0]$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[6] {
    name="LeabraTrialMonitor";
    short_nm="TrlMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=$.projects[0].data.gp[1][0]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][6].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][6].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][6].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][6].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][6].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[7] {
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=$.projects[0].data.gp[1][1]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][1]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][7].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects[0].networks[0].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[0][7].vars[2]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$.projects[0].programs.gp[0][7].vars[2]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[8] {
    name="SaveWeights";
    short_nm="SvWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val="/Users/oreilly/svn_sims/cecn/new_v4/chapter_8/objrec.00_0150.wts.gz";
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0150";
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="00";
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".00_0150";
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     IfReturn @[0] {
      desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
      flags=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
     };
     MiscCall @[1] {
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=;
      result_var=.projects[0].programs.gp[0][8].vars[4]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      desc="get current epoch counter with leading zeros to length 4";
      flags=;
      result_var=.projects[0].programs.gp[0][8].vars[3]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][8].vars[5]$$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][8].vars[2]$$;
      obj=.projects[0].programs.gp[0][8].args[0]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="save the weights to that file name";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][8].args[0]$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
  Program_Group @.gp[1] {
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   Program @[0] {
    name="LeabraEpochTest";
    short_nm="pchTst";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
     DynEnumType @[0] {
      name="InputType";
      desc="type of input patterns to generate";
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="TEST_RANDOM";
	value=2;
	desc="test all objects in random transforms";
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][2]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects[0].networks[0].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=1000;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="input_type";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects[0].programs.gp[1][0].types[0]$$;
       value=0;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[7] {
      name="n_test_items";
      var_type=T_Int;
      int_val=1000;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[1][0].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[1][0].vars[2]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[1][0].vars[4]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     ProgramCall @[0] {
      desc=;
      flags=NON_STD;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="InputItemList";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=DynEnum;
	type="InputType";
	name="input_type";
	required=1;
	def_val=;
	expr {
	 expr="input_type";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="n_items";
	required=1;
	def_val=;
	expr {
	 expr="n_test_items";
	};
       };
      };
      target=$.projects[0].programs[0]$;
      targ_ld_init="*GenerateItemList*";
     };
     NetCounterInit @[1] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$.projects[0].programs.gp[1][0].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[1][0].vars[2]$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[2] {
      desc="set to testing mode";
      flags=NEW_EL;
      obj=$.projects[0].programs.gp[1][0].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TEST";
      };
      update_after=0;
     };
     AssignExpr @[3] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$.projects[0].programs.gp[1][0].vars[4]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[4] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][0].vars[4]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][0].vars[3]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[6] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[1][1]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.projects[0].programs.gp[1][0].vars[0]$$;
      index_var=.projects[0].programs.gp[1][0].vars[5]$$;
      order_var=.projects[0].programs.gp[1][0].vars[1]$$;
      order=SEQUENTIAL;
      item_idx_list{ 0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;36;37;38;39;40;41;42;43;44;45;46;47;48;49;50;51;52;53;54;55;56;57;58;59;60;61;62;63;64;65;66;67;68;69;70;71;72;73;74;75;76;77;78;79;80;81;82;83;84;85;86;87;88;89;90;91;92;93;94;95;96;97;98;99;100;101;102;103;104;105;106;107;108;109;110;111;112;113;114;115;116;117;118;119;120;121;122;123;124;125;126;127;128;129;130;131;132;133;134;135;136;137;138;139;140;141;142;143;144;145;146;147;148;149;150;151;152;153;154;155;156;157;158;159;160;161;162;163;164;165;166;167;168;169;170;171;172;173;174;175;176;177;178;179;180;181;182;183;184;185;186;187;188;189;190;191;192;193;194;195;196;197;198;199;200;201;202;203;204;205;206;207;208;209;210;211;212;213;214;215;216;217;218;219;220;221;222;223;224;225;226;227;228;229;230;231;232;233;234;235;236;237;238;239;240;241;242;243;244;245;246;247;248;249;250;251;252;253;254;255;256;257;258;259;260;261;262;263;264;265;266;267;268;269;270;271;272;273;274;275;276;277;278;279;280;281;282;283;284;285;286;287;288;289;290;291;292;293;294;295;296;297;298;299;300;301;302;303;304;305;306;307;308;309;310;311;312;313;314;315;316;317;318;319;320;321;322;323;324;325;326;327;328;329;330;331;332;333;334;335;336;337;338;339;340;341;342;343;344;345;346;347;348;349;350;351;352;353;354;355;356;357;358;359;360;361;362;363;364;365;366;367;368;369;370;371;372;373;374;375;376;377;378;379;380;381;382;383;384;385;386;387;388;389;390;391;392;393;394;395;396;397;398;399;400;401;402;403;404;405;406;407;408;409;410;411;412;413;414;415;416;417;418;419;420;421;422;423;424;425;426;427;428;429;430;431;432;433;434;435;436;437;438;439;440;441;442;443;444;445;446;447;448;449;450;451;452;453;454;455;456;457;458;459;460;461;462;463;464;465;466;467;468;469;470;471;472;473;474;475;476;477;478;479;480;481;482;483;484;485;486;487;488;489;490;491;492;493;494;495;496;497;498;499;500;501;502;503;504;505;506;507;508;509;510;511;512;513;514;515;516;517;518;519;520;521;522;523;524;525;526;527;528;529;530;531;532;533;534;535;536;537;538;539;540;541;542;543;544;545;546;547;548;549;550;551;552;553;554;555;556;557;558;559;560;561;562;563;564;565;566;567;568;569;570;571;572;573;574;575;576;577;578;579;580;581;582;583;584;585;586;587;588;589;590;591;592;593;594;595;596;597;598;599;600;601;602;603;604;605;606;607;608;609;610;611;612;613;614;615;616;617;618;619;620;621;622;623;624;625;626;627;628;629;630;631;632;633;634;635;636;637;638;639;640;641;642;643;644;645;646;647;648;649;650;651;652;653;654;655;656;657;658;659;660;661;662;663;664;665;666;667;668;669;670;671;672;673;674;675;676;677;678;679;680;681;682;683;684;685;686;687;688;689;690;691;692;693;694;695;696;697;698;699;700;701;702;703;704;705;706;707;708;709;710;711;712;713;714;715;716;717;718;719;720;721;722;723;724;725;726;727;728;729;730;731;732;733;734;735;736;737;738;739;740;741;742;743;744;745;746;747;748;749;750;751;752;753;754;755;756;757;758;759;760;761;762;763;764;765;766;767;768;769;770;771;772;773;774;775;776;777;778;779;780;781;782;783;784;785;786;787;788;789;790;791;792;793;794;795;796;797;798;799;800;801;802;803;804;805;806;807;808;809;810;811;812;813;814;815;816;817;818;819;820;821;822;823;824;825;826;827;828;829;830;831;832;833;834;835;836;837;838;839;840;841;842;843;844;845;846;847;848;849;850;851;852;853;854;855;856;857;858;859;860;861;862;863;864;865;866;867;868;869;870;871;872;873;874;875;876;877;878;879;880;881;882;883;884;885;886;887;888;889;890;891;892;893;894;895;896;897;898;899;900;901;902;903;904;905;906;907;908;909;910;911;912;913;914;915;916;917;918;919;920;921;922;923;924;925;926;927;928;929;930;931;932;933;934;935;936;937;938;939;940;941;942;943;944;945;946;947;948;949;950;951;952;953;954;955;956;957;958;959;960;961;962;963;964;965;966;967;968;969;970;971;972;973;974;975;976;977;978;979;980;981;982;983;984;985;986;987;988;989;990;991;992;993;994;995;996;997;998;999;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     IfElse @[7] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][0].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][0].args[0]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[9] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][0].vars[4]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[10] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs.gp[1][5]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     MemberAssign @[11] {
      desc="set back to training mode";
      flags=NEW_EL;
      obj=$.projects[0].programs.gp[1][0].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
     ProgramCall @[12] {
      desc=;
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=bool;
	type="bool";
	name="final_rf";
	required=1;
	def_val=;
	expr {
	 expr="true";
	};
       };
      };
      target=.projects[0].programs.gp[1][7]$$;
      targ_ld_init="*ActBasedRField*";
     };
     ProgramCall @[13] {
      desc=;
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="trial_mon_data";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
      };
      target=.projects[0].programs.gp[1][6]$$;
      targ_ld_init="*TestErrorByObject*";
     };
    };
    step_prog=.projects[0].programs.gp[1][3]$$;
    step_n=1;
   };
   Program @[1] {
    name="LeabraTrialTest";
    short_nm="TrlTst";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[1][1].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[1][1].vars[0]$$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$.projects[0].programs.gp[1][1].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[1][1].vars[0]$;
      counter=LeabraNetwork::phase_no;
      update_after=1;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][1].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[2] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[1][2]$$;
	targ_ld_init="*LeabraSettle*";
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[1][1].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[1][1].vars[0]$;
	counter=LeabraNetwork::phase_no;
	update_after=1;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][1].args[0]$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[3] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][1].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[4] {
      desc=;
      flags=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][1].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     ProgramCall @[5] {
      desc=;
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=bool;
	type="bool";
	name="final_rf";
	required=1;
	def_val=;
	expr {
	 expr="false";
	};
       };
      };
      target=$.projects[0].programs.gp[1][7]$;
      targ_ld_init="*ActBasedRField*";
     };
     ProgramCall @[6] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs.gp[1][4]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[7] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$.projects[0].programs.gp[1][1].args[0]$;
      update_var=.projects[0].programs.gp[1][1].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[2] {
    name="LeabraSettleTest";
    short_nm="SttTst";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[1][2].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[1][2].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$.projects[0].programs.gp[1][2].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[1][2].vars[0]$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][2].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=$.projects[0].programs[2]$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[1][2].vars[1]$$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$.projects[0].programs.gp[1][2].vars[1]$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[5] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=$.projects[0].programs.gp[1][3]$;
	targ_ld_init="*LeabraCycle*";
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[1][2].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[1][2].vars[0]$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[6] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[7] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.phase == LeabraNetwork::MINUS_PHASE";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][2].args[0]$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[8] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][2].args[0]$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[1][2].args[0]$;
      update_var=.projects[0].programs.gp[1][2].vars[2]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[3] {
    name="LeabraCycleTest";
    short_nm="CycTst";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][3].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[1][3].args[0]$;
      update_var=.projects[0].programs.gp[1][3].vars[0]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[4] {
    name="LeabraTrialMonitorTest";
    short_nm="TrlMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=$.projects[0].data.gp[1][2]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][2]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[1][4].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][4].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][4].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][4].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][4].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][4].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][4].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][4].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[5] {
    name="LeabraEpochMonitorTest";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=.projects[0].data.gp[1][3]$$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][3]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[1][5].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects[0].networks[0].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[1][5].vars[2]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][5].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][5].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][5].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][5].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][5].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$.projects[0].programs.gp[1][5].vars[2]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][5].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][5].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][5].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[6] {
    name="TestErrorByObject";
    short_nm="TstByb";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][2]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="err_output_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[2][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][6].vars[0]$$;
      method=taBase::StructUpdate;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="begin";
	required=1;
	def_val=;
	expr {
	 expr="true";
	};
       };
      };
     };
     DataGroupProg @[1] {
      desc=;
      flags=;
      src_data_var=.projects[0].programs.gp[1][6].args[0]$$;
      dest_data_var=$.projects[0].programs.gp[1][6].vars[0]$;
      group_spec {
       name="group_spec";
       ops {
	name=;
	el_typ=DataGroupEl;
	el_def=0;
	DataGroupEl @[0] {
	 col_name="trial_name";
	 agg {name="Aggregate": op=GROUP: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	};
	DataGroupEl @[1] {
	 col_name="sse";
	 agg {name="Aggregate": op=N: rel={name="Relation": rel=GREATERTHAN: val=0: use_var=0: var=NULL: }: };
	};
	DataGroupEl @[2] {
	 col_name="sse";
	 agg {name="Aggregate": op=COUNT: rel={name="Relation": rel=GREATERTHAN: val=0: use_var=0: var=NULL: }: };
	};
       };
       append_agg_name=1;
      };
     };
     MethodCall @[2] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[0]$;
      method=DataTable::FindMakeCol;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_nm";
	required=1;
	def_val=;
	expr {
	 expr="\"pct_err\"";
	};
       };
       ProgArg @[1] {
	arg_type=taBase::ValType;
	type="taBase::ValType";
	name="val_type";
	required=1;
	def_val="taBase::VT_FLOAT";
	expr {
	 expr="taBase::VT_FLOAT";
	};
       };
      };
     };
     UserScript @[3] {
      desc=;
      flags=;
      script {
       expr="err_output_data.data.pct_err.SetColFlag(DataCol::CALC);
err_output_data.data.pct_err.calc_expr.SetExpr(\"(float)sse_count / (float)N\");
err_output_data.data.pct_err.UpdateAfterEdit();";
      };
     };
     MethodCall @[4] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[0]$;
      method=DataTable::CalcAllRows;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[5] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[0]$;
      method=taBase::StructUpdate;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="begin";
	required=1;
	def_val=;
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[7] {
    name="ActBasedRField";
    short_nm="cBsRFl";
    tags="Statistic, Receptive Field";
    desc="computes an activation based receptive field using ActBasedRF object type -- allows you to see how units in a selected target layer relate to activations of units throughout the network";
    flags=NO_STOP_STEP|OBJS_UPDT_GUI;
    objs {
     name=;
     el_typ=ActBasedRF;
     el_def=0;
     ActBasedRF @[0] {
      name="ActBasedRF_0";
      rf_data=$.projects[0].programs.gp[1][7].objs[1]$;
      network=$.projects[0].networks[0]$;
      trg_layer=.projects[0].networks[0].layers[1]$$;
      norm_mode=NORM_TRG_UNIT_RF_LAY;
      threshold=0.1;
     };
     DataTable @[1] {
      name="ActRFData";
      desc="receptive field data -- could move this into AnalysisData if you want..";
      data {
       name="data";
       el_typ=float_Data;
       el_def=0;
       float_Data @[0] {
	name="V1";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=1;
	cell_geom{ 4;2;10;10;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[4] ;;;;	};
       };
       float_Data @[1] {
	name="V2";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=1;
	cell_geom{ 6;6;4;4;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[4] ;;;;	};
       };
       float_Data @[2] {
	name="V4_IT";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=1;
	cell_geom{ 10;10;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[2] ;;	};
       };
       float_Data @[3] {
	name="Output";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=1;
	cell_geom{ 5;4;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[2] ;;	};
       };
       float_Data @[4] {
	name="Image";
	col_flags=SAVE_ROWS|SAVE_DATA;
	is_matrix=1;
	cell_geom{ 40;40;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name=;
		[2] ;;	};
       };
      };
      data_flags=AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      keygen 4 0=0;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="final_rf";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="whether to compute the final receptive field or just increment the sums -- call with false to accumulate, and true at end to get final values";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="ActBasedRF_0";
      var_type=T_Object;
      object_type=ActBasedRF;
      object_val=.projects[0].programs.gp[1][7].objs[0]$$;
      objs_ptr=1;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="ActRFData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].programs.gp[1][7].objs[1]$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to record activation based receptive field information into";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trg_layer_name";
      var_type=T_String;
      string_val="V2";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[3] {
      name="trg_layer";
      var_type=T_Object;
      object_type=LeabraLayer;
      object_val=$.projects[0].networks[0].layers[1]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="target layer to get receptive field data for";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     MethodCall @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[1][7].vars[3]$$;
      obj=.projects[0].programs.gp[1][7].args[0]$$;
      method=Network::FindLayer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="nm";
	required=1;
	def_val=;
	expr {
	 expr="trg_layer_name";
	};
       };
      };
     };
     MethodCall @[1] {
      desc=;
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][7].vars[0]$$;
      method=ActBasedRF::InitAll;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="ActRFData";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[2] {
	arg_type=Layer_ptr;
	type="Layer*";
	name="tlay";
	required=1;
	def_val=;
	expr {
	 expr="trg_layer";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     IfElse @[0] {
      desc=;
      flags=;
      cond {
       expr="final_rf";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][7].vars[0]$;
	method=ActBasedRF::ComputeRF;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc=;
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][7].vars[0]$;
	method=ActBasedRF::IncrementSums;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
 };
 viewers {
  name=;
  el_typ=TopLevelViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="view_win_lft";
     value 6 0=0.001843884470872581;
     val_type_fixed=0;
    };
    UserDataItem @[1] {
     name="view_win_top";
     value 6 0=0.02821011655032635;
     val_type_fixed=0;
    };
    UserDataItem @[2] {
     name="view_win_wd";
     value 6 0=0.9981561303138733;
     val_type_fixed=0;
    };
    UserDataItem @[3] {
     name="view_win_ht";
     value 6 0=0.7986381053924561;
     val_type_fixed=0;
    };
    UserDataItem @[4] {
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @[5] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAAAAAADAAAAtwAAAmMAAAMwAQAAAAcBAAAAAQ==";
     val_type_fixed=0;
    };
   };
   name="DefaultProjectBrowser";
   m_data=.projects[0]$$;
   visible=1;
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name=;
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_win_visible";
       value 1 0=0;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name=;
    el_typ=FrameViewer;
    el_def=0;
    tabBrowseViewer @[0] {
     name="Tree";
     m_data=NULL;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects[0]$;
    };
    PanelViewer @[1] {
     name="Panels";
     m_data=NULL;
     visible=1;
    };
    T3DataViewer @[2] {
     name="DefaultViewer";
     m_data=NULL;
     visible=1;
     frames {
      name=;
      el_typ=T3DataViewFrame;
      el_def=0;
      T3DataViewFrame @[0] {
       name="ObjrecNet";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 NetView @[0] {
	  name=;
	  m_data=$.projects[0].networks[0]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=0: z=0: }: };
	  display=1;
	  lay_mv=0;
	  net_text=0;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  cur_unit_vals{ act;	  };
	  unit_src_path=".layers[1].units.gp[4][15]";
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NAMES;
	  max_size {x=49: y=29: z=1.5: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.03;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.005;
	   unit=0.015;
	   un_nm_len=12;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.001;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=0;
	  wt_line_thr=0.9;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=.projects[0].networks[0].layers[0]$$;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name=;
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs[0]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    name="targ";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    name="r.wt";
	    auto_scale=1;
	    min=-0.749605;
	    max=0.749605;
	   };
	   ScaleRange @[3] {
	    name="dav";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    name="net";
	    auto_scale=0;
	    min=-0.59;
	    max=0.59;
	   };
	   ScaleRange @[5] {
	    name="s.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[6] {
	    name="act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[7] {
	    name="act_p";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[8] {
	    name="gc.h";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	   ScaleRange @[9] {
	    name="r.pdw";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	   ScaleRange @[10] {
	    name="gc.i";
	    auto_scale=0;
	    min=-1.724444;
	    max=1.724444;
	   };
	   ScaleRange @[11] {
	    name="ext";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[12] {
	    name="gc.a";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[13] {
	    name="act_dif";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[14] {
	    name="da";
	    auto_scale=1;
	    min=-0.2958892;
	    max=0.2958892;
	   };
	   ScaleRange @[15] {
	    name="wt_prjn";
	    auto_scale=1;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ V1=0;V2=0;V4_IT=0;Output=0;Image=-1;	  };
	 };
	 GridTableView @[1] {
	  name="GridTableView_1";
	  m_data=$.projects[0].programs[2].objs[1]$;
FloatTransform @*(.m_transform) {scale={x=0.2444948: y=0.2444946: z=0.2444947: }: rotate={x=-1: y=-1.192092e-07: z=3.329529e-14: rot=0.2978167: }: translate={x=0.5926644: y=0.8837311: z=-0.008646961: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="V1_image_r";
	    m_data=.projects[0].programs[2].objs[1].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=40;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=1;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="V1_v1s_r";
	    m_data=.projects[0].programs[2].objs[1].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="V1_v1c";
	    m_data=.projects[0].programs[2].objs[1].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    name="Output";
	    m_data=.projects[0].programs[2].objs[1].data[3]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    name="Name";
	    m_data=.projects[0].programs[2].objs[1].data[4]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=0.2444948: y=0.2444946: z=0.2444947: }: rotate={x=-1: y=-1.192092e-07: z=3.329529e-14: rot=0.2978167: }: translate={x=0.5926644: y=0.8837311: z=-0.008646961: }: };
	  view_rows=1;
	  view_range {min=0: max=0: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=1;
	  col_range {min=0: max=0: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale_0";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=0.4876113: y=1.299388: z=1.168482: };
	 orient {x=-1.000001: y=0: z=0: rot=0.5099996: };
	 focal_dist=1.740415;
	};
	T3SavedView @[1] {
	 name="Image";
	 view_saved=1;
	 pos {x=1.037612: y=1.112202: z=-0.3174799: };
	 orient {x=-1.000001: y=0: z=0: rot=0.5099996: };
	 focal_dist=0.0377838;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[1] {
       name="StimGenData";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GridTableView @[0] {
	  name=;
	  m_data=$.projects[0].programs[1].objs[1]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="Canvas";
	    m_data=.projects[0].programs[1].objs[1].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=256;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=1;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=1;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=1;
	  col_range {min=0: max=0: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=1.5325: y=0.5174999: z=1.443747: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.453747;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[2] {
       name="EpochOutputData";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GraphTableView @[0] {
	  name=;
	  m_data=$.projects[0].data.gp[1][1]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="batch";
	    m_data=.projects[0].data.gp[1][1].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="epoch";
	    m_data=.projects[0].data.gp[1][1].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=234: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="avg_sse";
	    m_data=.projects[0].data.gp[1][1].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="cnt_err";
	    m_data=.projects[0].data.gp[1][1].data[3]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=100: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="avg_ext_rew";
	    m_data=.projects[0].data.gp[1][1].data[4]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="avg_cycles";
	    m_data=.projects[0].data.gp[1][1].data[5]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="epoch_time_tot";
	    m_data=.projects[0].data.gp[1][1].data[6]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="epoch_time_usr";
	    m_data=.projects[0].data.gp[1][1].data[7]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-07: max=6e-07: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="cnt_err";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=100: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=100: };
	   range {min=0: max=100: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=VALUE_COLOR;
	  color_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=1.4275: y=0.445: z=1.624621: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.637121;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[3] {
       name="TestErrorData";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GraphTableView @[0] {
	  name=;
	  m_data=$.projects[0].data.gp[2][0]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="trial_name_group";
	    m_data=.projects[0].data.gp[2][0].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="N";
	    m_data=.projects[0].data.gp[2][0].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="sse_count";
	    m_data=.projects[0].data.gp[2][0].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="pct_err";
	    m_data=.projects[0].data.gp[2][0].data[3]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=19: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=BAR;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="sse_n";
	   fixed_range {fix_min=1: min=-1: fix_max=1: max=20: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=-1: max=20: };
	   range {min=-1: max=20: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=1;
	  };
	  z_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="pct_err";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=VALUE_COLOR;
	  color_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=1.427578: y=0.445: z=1.62471: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.63721;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[4] {
       name="ActRFData";
       m_data=NULL;
       visible=1;
       root_view {
	name="T3DataViewRoot_0";
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataViewMain;
	 el_def=0;
	 GridTableView @[0] {
	  name="GridTableView_2";
	  m_data=$.projects[0].programs.gp[1][7].objs[1]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="V1";
	    m_data=.projects[0].programs.gp[1][7].objs[1].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="V2";
	    m_data=.projects[0].programs.gp[1][7].objs[1].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=6;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="V4_IT";
	    m_data=.projects[0].programs.gp[1][7].objs[1].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=10;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    name="Output";
	    m_data=.projects[0].programs.gp[1][7].objs[1].data[3]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=5;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    name="Image";
	    m_data=.projects[0].programs.gp[1][7].objs[1].data[4]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=40;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=5;
	  view_range {min=0: max=4: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=0: max=4: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale_0";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=1.5325: y=0.5175: z=1.443747: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.453747;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name=;
    el_typ=DockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_win_lft";
       value 6 0=0;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_win_top";
       value 6 0=0.008754863403737545;
       val_type_fixed=0;
      };
      UserDataItem @[2] {
       name="view_win_wd";
       value 6 0=0.05961893126368523;
       val_type_fixed=0;
      };
      UserDataItem @[3] {
       name="view_win_ht";
       value 6 0=0.7276264429092407;
       val_type_fixed=0;
      };
      UserDataItem @[4] {
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @[5] {
       name="view_visible";
       value 1 0=0;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     visible=0;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 last_change_desc="exact control model for ct leabra network


";
 networks {
  name=;
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="norm_err";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[1] {
     name="ext_rew";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[2] {
     name="maxda";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[3] {
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[4] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[5] {
     name="ct_cycle";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[6] {
     name="phase_no";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[7] {
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[8] {
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[9] {
     name="output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[10] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[11] {
     name="group_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[12] {
     name="time";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[13] {
     name="cycle";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[14] {
     name="tick";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[15] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[16] {
     name="group";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[17] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[18] {
     name="batch";
     value 1 0=0;
     val_type_fixed=1;
    };
   };
   name="ObjrecNet";
   desc="object recognition network";
   specs {
    name=;
    el_typ=LeabraUnitSpec;
    el_def=0;
    DaModUnitSpec @[0] {
     name="StdDaModUnitSpec";
     desc=;
     unique{ opt_thresh;     };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
      DaModUnitSpec @[0] {
       name="V1Units";
       desc=;
       unique{ bias_spec;dt;da_mod;       };
       children {
	name=;
	el_typ=LeabraUnitSpec;
	el_def=0;
       };
       act_range {min=0: max=1: range=1: scale=1: };
       bias_con_type=LeabraCon;
       bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[2].children[1].children[0]$$: };
       sse_tol=0.5;
       act_fun=NOISY_XX1;
       act {gelin=0: thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
       spike {rise=1: decay=0.95: g_gain=4: window=20: eq_gain=10: eq_dt=0.02: };
       spike_misc {
	exp_slope=0.02;
	spk_thr=1.2;
	clamp_max_p=0.11;
	clamp_type=REGULAR;
	vm_r=0.3;
	vm_dend=0.3;
	vm_dend_dt=0.16;
	vm_dend_time=6.25;
       };
       opt_thresh {send=0.1: delta=0.005: phase_dif=0.8: };
       maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
       clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
       vm_range {min=0: max=1: range=1: scale=1: };
       v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
       dt {integ=1: vm=0.2: net=1: midpoint=0: d_vm_max=0.02: vm_eq_cyc=100: vm_eq_dt=1: integ_time=1: vm_time=5: net_time=1: };
       act_avg {l_gain=3: l_dt=0.005: ml_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=200: ml_time=2.5: m_time=10: s_time=5: ss_time=1: };
       g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
       e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
       hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=1: trl=0: };
       acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
       adapt {
	on=0;
	dt=0.007;
	vm_gain=0.04;
	spike_gain=0.00805;
	interval=10;
	dt_time=142.8571;
       };
       depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=2: };
       syn_delay {
	on=0;
	delay=4;
       };
       da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
       noise_type=NO_NOISE;
       noise {name="": type=GAUSSIAN: mean=0: var=0.001: par=1: };
       noise_adapt {trial_fixed=1: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
       noise_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=1;
	cur_val=0;
       };
      };
      DaModUnitSpec @[1] {
       name="HigherUnits";
       desc=;
       unique{ act_reg;da_mod;       };
       children {
	name=;
	el_typ=DaModUnitSpec;
	el_def=0;
	DaModUnitSpec @[0] {
	 name="OutputUnits";
	 desc=;
	 unique{ bias_spec;	 };
	 children {
	  name=;
	  el_typ=DaModUnitSpec;
	  el_def=0;
	 };
	 act_range {min=0: max=1: range=1: scale=1: };
	 bias_con_type=LeabraCon;
	 bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[2].children[0].children[1]$$: };
	 sse_tol=0.5;
	 act_fun=NOISY_XX1;
	 act {gelin=0: thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
	 spike {rise=1: decay=0.95: g_gain=4: window=20: eq_gain=10: eq_dt=0.02: };
	 spike_misc {
	  exp_slope=0.02;
	  spk_thr=1.2;
	  clamp_max_p=0.11;
	  clamp_type=REGULAR;
	  vm_r=0.3;
	  vm_dend=0.3;
	  vm_dend_dt=0.16;
	  vm_dend_time=6.25;
	 };
	 opt_thresh {send=0.1: delta=0.005: phase_dif=0.8: };
	 maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
	 clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
	 vm_range {min=0: max=1: range=1: scale=1: };
	 v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
	 dt {integ=1: vm=0.25: net=0.7: midpoint=0: d_vm_max=0.02: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=4: net_time=1.428571: };
	 act_avg {l_gain=3: l_dt=0.005: ml_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=200: ml_time=2.5: m_time=10: s_time=5: ss_time=1: };
	 g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
	 e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
	 hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=1: trl=0: };
	 acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
	 adapt {
	  on=0;
	  dt=0.007;
	  vm_gain=0.04;
	  spike_gain=0.00805;
	  interval=10;
	  dt_time=142.8571;
	 };
	 depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=2: };
	 syn_delay {
	  on=0;
	  delay=4;
	 };
	 da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
	 noise_type=NO_NOISE;
	 noise {name="": type=GAUSSIAN: mean=0: var=0.001: par=1: };
	 noise_adapt {trial_fixed=1: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
	 noise_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=-1;
	  default_val=1;
	  interpolate=1;
	  cur_val=0;
	 };
	};
       };
       act_range {min=0: max=1: range=1: scale=1: };
       bias_con_type=LeabraCon;
       bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[2].children[0]$$: };
       sse_tol=0.5;
       act_fun=NOISY_XX1;
       act {gelin=0: thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
       spike {rise=1: decay=0.95: g_gain=4: window=20: eq_gain=10: eq_dt=0.02: };
       spike_misc {
	exp_slope=0.02;
	spk_thr=1.2;
	clamp_max_p=0.11;
	clamp_type=REGULAR;
	vm_r=0.3;
	vm_dend=0.3;
	vm_dend_dt=0.16;
	vm_dend_time=6.25;
       };
       opt_thresh {send=0.1: delta=0.005: phase_dif=0.8: };
       maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
       clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
       vm_range {min=0: max=1: range=1: scale=1: };
       v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
       dt {integ=1: vm=0.25: net=0.7: midpoint=0: d_vm_max=0.02: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=4: net_time=1.428571: };
       act_avg {l_gain=3: l_dt=0.005: ml_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=200: ml_time=2.5: m_time=10: s_time=5: ss_time=1: };
       g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
       e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
       hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=1: trl=0: };
       acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
       adapt {
	on=0;
	dt=0.007;
	vm_gain=0.04;
	spike_gain=0.00805;
	interval=10;
	dt_time=142.8571;
       };
       depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=2: };
       syn_delay {
	on=0;
	delay=4;
       };
       da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
       noise_type=NO_NOISE;
       noise {name="": type=GAUSSIAN: mean=0: var=0.001: par=1: };
       noise_adapt {trial_fixed=1: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
       noise_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=1;
	cur_val=0;
       };
      };
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=$.projects[0].networks[0].specs[2].children[0]$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {gelin=0: thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
     spike {rise=1: decay=0.95: g_gain=4: window=20: eq_gain=10: eq_dt=0.02: };
     spike_misc {
      exp_slope=0.02;
      spk_thr=1.2;
      clamp_max_p=0.11;
      clamp_type=REGULAR;
      vm_r=0.3;
      vm_dend=0.3;
      vm_dend_dt=0.16;
      vm_dend_time=6.25;
     };
     opt_thresh {send=0.1: delta=0.005: phase_dif=0.8: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
     dt {integ=1: vm=0.25: net=0.7: midpoint=0: d_vm_max=0.02: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=4: net_time=1.428571: };
     act_avg {l_gain=3: l_dt=0.005: ml_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=200: ml_time=2.5: m_time=10: s_time=5: ss_time=1: };
     g_bar {e=1: l=0.1: i=1: h=0.01: a=0.03: };
     e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
     hyst {on=0: b_inc_dt=0.05: b_dec_dt=0.05: a_thr=0.8: d_thr=0.7: g_dt=0.1: init=1: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
     adapt {
      on=0;
      dt=0.007;
      vm_gain=0.04;
      spike_gain=0.00805;
      interval=10;
      dt_time=142.8571;
     };
     depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=2: };
     syn_delay {
      on=0;
      delay=4;
     };
     da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
     noise_type=NO_NOISE;
     noise {name="": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     noise_adapt {trial_fixed=1: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
    };
    LeabraLayerSpec @[1] {
     name="LeabraLayerSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="LGN";
       desc=;
       unique{ kwta;inhib_group;inhib;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	fb_act_thr=0;
	ff_pct=0;
	fb_max_dt=0.1;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PCT: k=12: pct=0.15: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
       i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=1: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.1;
       };
      };
      LeabraLayerSpec @[1] {
       name="V1";
       desc=;
       unique{ kwta;gp_kwta;compute_i;i_kwta_pt;feat_inhib;feat_kwta;inhib_group;inhib;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=UNIT_GROUPS;
       inhib {
	type=KWTA_AVG_INHIB;
	kwta_pt=0.6;
	min_i=0.8;
	fb_act_thr=0;
	ff_pct=0;
	fb_max_dt=0.1;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PCT: k=12: pct=0.8: pat_q=0.5: diff_act_pct=1: act_pct=0.1: gp_i=1: gp_g=0.8: };
       gp_kwta {k_from=USE_K: k=1: pct=0.02: pat_q=0.5: diff_act_pct=1: act_pct=0.2: gp_i=1: gp_g=0.6: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
       i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=1: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.1;
       };
      };
      LeabraLayerSpec @[2] {
       name="V2";
       desc=;
       unique{ kwta;gp_kwta;inhib_group;abs_net_adapt;inhib;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=UNIT_GROUPS;
       inhib {
	type=KWTA_AVG_INHIB;
	kwta_pt=0.6;
	min_i=0;
	fb_act_thr=0;
	ff_pct=0;
	fb_max_dt=0.1;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PCT: k=12: pct=0.8: pat_q=0.5: diff_act_pct=0: act_pct=0.05: gp_i=1: gp_g=0.8: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.1: pat_q=0.5: diff_act_pct=1: act_pct=0.1: gp_i=1: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
       i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=1: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.2;
       };
      };
      LeabraLayerSpec @[3] {
       name="V4";
       desc=;
       unique{ kwta;gp_kwta;inhib_group;abs_net_adapt;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_AVG_INHIB;
	kwta_pt=0.6;
	min_i=0;
	fb_act_thr=0;
	ff_pct=0;
	fb_max_dt=0.1;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=1: gp_g=0.8: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=1: act_pct=0.12: gp_i=1: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
       i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=1: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.2;
       };
      };
      LeabraLayerSpec @[4] {
       name="Output";
       desc=;
       unique{ kwta;inhib_group;compute_i;i_kwta_pt;abs_net_adapt;inhib;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	fb_act_thr=0;
	ff_pct=0;
	fb_max_dt=0.1;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_K: k=1: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
       i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=1: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.2;
       };
      };
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.6;
      min_i=0;
      fb_act_thr=0;
      ff_pct=0;
      fb_max_dt=0.1;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.25: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=1: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    LeabraConSpec @[2] {
     name="LeabraConSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="LeabraBiasSpec_0";
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       children {
	name=;
	el_typ=LeabraBiasSpec;
	el_def=0;
	LeabraBiasSpec @[0] {
	 name="FixedBias";
	 desc=;
	 unique{ rnd;wt_limits;wt_scale;lrate;	 };
	 children {
	  name=;
	  el_typ=LeabraBiasSpec;
	  el_def=0;
	 };
	 rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
	 wt_limits {type=NONE: min=-1: max=5: sym=0: };
	 learn_rule=LEABRA_CHL;
	 inhib=0;
	 wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
	 wt_scale_init {init=0: abs=1: rel=1: };
	 lrate=0;
	 cur_lrate=0;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=-1;
	  default_val=1;
	  interpolate=0;
	  cur_val=0;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=100;
	   step=-0.009;
	  };
	  SchedItem @[1] {
	   start_ctr=100;
	   start_val=0.1;
	   duration=100;
	   step=-0.0009;
	  };
	  SchedItem @[2] {
	   start_ctr=200;
	   start_val=0.01;
	   duration=1;
	   step=1;
	  };
	 };
	 wt_sig {gain=6: off=1.25: };
	 lmix {hebb=0.002: err=0.998: err_sb=1: };
	 xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
	 savg_cor {cor=0.8: thresh=0.001: norm_con_n=0: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.05;
	 };
	 dwt_thresh=0.1;
	};
	LeabraBiasSpec @[1] {
	 name="OutputBias";
	 desc=;
	 unique{ rnd;wt_limits;wt_scale;wt_scale_init;lrate;	 };
	 children {
	  name=;
	  el_typ=LeabraBiasSpec;
	  el_def=0;
	 };
	 rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
	 wt_limits {type=NONE: min=-1: max=5: sym=0: };
	 learn_rule=LEABRA_CHL;
	 inhib=0;
	 wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
	 wt_scale_init {init=0: abs=1: rel=1: };
	 lrate=0.01;
	 cur_lrate=0.001;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=100;
	  default_val=1;
	  interpolate=0;
	  cur_val=0.1;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=100;
	   step=-0.009;
	  };
	  SchedItem @[1] {
	   start_ctr=100;
	   start_val=0.1;
	   duration=100;
	   step=-0.0009;
	  };
	  SchedItem @[2] {
	   start_ctr=200;
	   start_val=0.01;
	   duration=1;
	   step=1;
	  };
	 };
	 wt_sig {gain=6: off=1.25: };
	 lmix {hebb=0.002: err=0.998: err_sb=1: };
	 xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
	 savg_cor {cor=0.8: thresh=0.001: norm_con_n=0: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.05;
	 };
	 dwt_thresh=0.1;
	};
       };
       rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.01;
       cur_lrate=0.001;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=100;
	default_val=1;
	interpolate=0;
	cur_val=0.1;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=100;
	 step=-0.009;
	};
	SchedItem @[1] {
	 start_ctr=100;
	 start_val=0.1;
	 duration=100;
	 step=-0.0009;
	};
	SchedItem @[2] {
	 start_ctr=200;
	 start_val=0.01;
	 duration=1;
	 step=1;
	};
       };
       wt_sig {gain=6: off=1.25: };
       lmix {hebb=0.002: err=0.998: err_sb=1: };
       xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
       savg_cor {cor=0.8: thresh=0.001: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.05;
       };
       dwt_thresh=0.1;
      };
      LeabraConSpec @[1] {
       name="V1Cons";
       desc=;
       unique{ lrate;lmix;savg_cor;       };
       children {
	name=;
	el_typ=LeabraConSpec;
	el_def=0;
	LeabraBiasSpec @[0] {
	 name="V1Bias";
	 desc=;
	 unique{ rnd;wt_limits;wt_scale;wt_scale_init;	 };
	 children {
	  name=;
	  el_typ=LeabraBiasSpec;
	  el_def=0;
	 };
	 rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
	 wt_limits {type=NONE: min=-1: max=5: sym=0: };
	 learn_rule=LEABRA_CHL;
	 inhib=0;
	 wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
	 wt_scale_init {init=0: abs=1: rel=1: };
	 lrate=0;
	 cur_lrate=0;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=100;
	  default_val=1;
	  interpolate=0;
	  cur_val=0.1;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=100;
	   step=-0.009;
	  };
	  SchedItem @[1] {
	   start_ctr=100;
	   start_val=0.1;
	   duration=100;
	   step=-0.0009;
	  };
	  SchedItem @[2] {
	   start_ctr=200;
	   start_val=0.01;
	   duration=1;
	   step=1;
	  };
	 };
	 wt_sig {gain=6: off=1.25: };
	 lmix {hebb=1: err=0: err_sb=1: };
	 xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
	 savg_cor {cor=0.5: thresh=0.0001: norm_con_n=1: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.05;
	 };
	 dwt_thresh=0.1;
	};
       };
       rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0;
       cur_lrate=0;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=100;
	 step=-0.009;
	};
	SchedItem @[1] {
	 start_ctr=100;
	 start_val=0.1;
	 duration=100;
	 step=-0.0009;
	};
	SchedItem @[2] {
	 start_ctr=200;
	 start_val=0.01;
	 duration=1;
	 step=1;
	};
       };
       wt_sig {gain=6: off=1.25: };
       lmix {hebb=1: err=0: err_sb=1: };
       xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
       savg_cor {cor=0.5: thresh=0.0001: norm_con_n=1: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.05;
       };
      };
      LeabraConSpec @[2] {
       name="HigherCons";
       desc=;
       unique{ rel_net_adapt;savg_cor;       };
       children {
	name=;
	el_typ=LeabraConSpec;
	el_def=0;
	LeabraConSpec @[0] {
	 name="V1_V2";
	 desc=;
	 unique{ wt_scale;wt_scale_init;	 };
	 children {
	  name=;
	  el_typ=LeabraConSpec;
	  el_def=0;
	 };
	 rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	 learn_rule=LEABRA_CHL;
	 inhib=0;
	 wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
	 wt_scale_init {init=1: abs=1: rel=1: };
	 lrate=0.01;
	 cur_lrate=0.001;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=100;
	  default_val=1;
	  interpolate=0;
	  cur_val=0.1;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=100;
	   step=-0.009;
	  };
	  SchedItem @[1] {
	   start_ctr=100;
	   start_val=0.1;
	   duration=100;
	   step=-0.0009;
	  };
	  SchedItem @[2] {
	   start_ctr=200;
	   start_val=0.01;
	   duration=1;
	   step=1;
	  };
	 };
	 wt_sig {gain=6: off=1.25: };
	 lmix {hebb=0.002: err=0.998: err_sb=1: };
	 xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
	 savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.2;
	 };
	};
	LeabraConSpec @[1] {
	 name="V2_V4_IT";
	 desc=;
	 unique{ wt_scale;wt_scale_init;	 };
	 children {
	  name=;
	  el_typ=LeabraConSpec;
	  el_def=0;
	 };
	 rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	 learn_rule=LEABRA_CHL;
	 inhib=0;
	 wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
	 wt_scale_init {init=1: abs=1: rel=1: };
	 lrate=0.01;
	 cur_lrate=0.001;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=100;
	  default_val=1;
	  interpolate=0;
	  cur_val=0.1;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=100;
	   step=-0.009;
	  };
	  SchedItem @[1] {
	   start_ctr=100;
	   start_val=0.1;
	   duration=100;
	   step=-0.0009;
	  };
	  SchedItem @[2] {
	   start_ctr=200;
	   start_val=0.01;
	   duration=1;
	   step=1;
	  };
	 };
	 wt_sig {gain=6: off=1.25: };
	 lmix {hebb=0.002: err=0.998: err_sb=1: };
	 xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
	 savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.2;
	 };
	};
	LeabraConSpec @[2] {
	 name="V4_V2";
	 desc=;
	 unique{ wt_scale;wt_scale_init;	 };
	 children {
	  name=;
	  el_typ=LeabraConSpec;
	  el_def=0;
	 };
	 rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	 learn_rule=LEABRA_CHL;
	 inhib=0;
	 wt_scale {abs=1: rel=0.2: sem_extra=2: old=0: };
	 wt_scale_init {init=1: abs=1: rel=0.2: };
	 lrate=0.01;
	 cur_lrate=0.001;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=100;
	  default_val=1;
	  interpolate=0;
	  cur_val=0.1;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=100;
	   step=-0.009;
	  };
	  SchedItem @[1] {
	   start_ctr=100;
	   start_val=0.1;
	   duration=100;
	   step=-0.0009;
	  };
	  SchedItem @[2] {
	   start_ctr=200;
	   start_val=0.01;
	   duration=1;
	   step=1;
	  };
	 };
	 wt_sig {gain=6: off=1.25: };
	 lmix {hebb=0.002: err=0.998: err_sb=1: };
	 xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
	 savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.2;
	 };
	};
	LeabraConSpec @[3] {
	 name="V4_IT_Out";
	 desc=;
	 unique{ wt_scale;wt_scale_init;lrate;	 };
	 children {
	  name=;
	  el_typ=LeabraConSpec;
	  el_def=0;
	 };
	 rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	 learn_rule=LEABRA_CHL;
	 inhib=0;
	 wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
	 wt_scale_init {init=1: abs=1: rel=1: };
	 lrate=0.01;
	 cur_lrate=0.001;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=100;
	  default_val=1;
	  interpolate=0;
	  cur_val=0.1;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=100;
	   step=-0.009;
	  };
	  SchedItem @[1] {
	   start_ctr=100;
	   start_val=0.1;
	   duration=100;
	   step=-0.0009;
	  };
	  SchedItem @[2] {
	   start_ctr=200;
	   start_val=0.01;
	   duration=1;
	   step=1;
	  };
	 };
	 wt_sig {gain=6: off=1.25: };
	 lmix {hebb=0.002: err=0.998: err_sb=1: };
	 xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
	 savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.2;
	 };
	};
	LeabraConSpec @[4] {
	 name="Out_V4_IT";
	 desc=;
	 unique{ wt_scale;wt_scale_init;lrate;	 };
	 children {
	  name=;
	  el_typ=LeabraConSpec;
	  el_def=0;
	 };
	 rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	 learn_rule=LEABRA_CHL;
	 inhib=0;
	 wt_scale {abs=1: rel=0.2: sem_extra=2: old=0: };
	 wt_scale_init {init=1: abs=1: rel=0.2: };
	 lrate=0.01;
	 cur_lrate=0.001;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=100;
	  default_val=1;
	  interpolate=0;
	  cur_val=0.1;
	  SchedItem @[0] {
	   start_ctr=0;
	   start_val=1;
	   duration=100;
	   step=-0.009;
	  };
	  SchedItem @[1] {
	   start_ctr=100;
	   start_val=0.1;
	   duration=100;
	   step=-0.0009;
	  };
	  SchedItem @[2] {
	   start_ctr=200;
	   start_val=0.01;
	   duration=1;
	   step=1;
	  };
	 };
	 wt_sig {gain=6: off=1.25: };
	 lmix {hebb=0.002: err=0.998: err_sb=1: };
	 xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
	 savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.2;
	 };
	};
       };
       rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.01;
       cur_lrate=0.01;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
	SchedItem @[0] {
	 start_ctr=0;
	 start_val=1;
	 duration=100;
	 step=-0.009;
	};
	SchedItem @[1] {
	 start_ctr=100;
	 start_val=0.1;
	 duration=100;
	 step=-0.0009;
	};
	SchedItem @[2] {
	 start_ctr=200;
	 start_val=0.01;
	 duration=1;
	 step=1;
	};
       };
       wt_sig {gain=6: off=1.25: };
       lmix {hebb=0.002: err=0.998: err_sb=1: };
       xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
       savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.2;
       };
      };
     };
     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     learn_rule=LEABRA_CHL;
     inhib=0;
     wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
     wt_scale_init {init=0: abs=1: rel=1: };
     lrate=0.01;
     cur_lrate=0.01;
     lrs_value=EPOCH;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=0;
      cur_val=0;
      SchedItem @[0] {
       start_ctr=0;
       start_val=1;
       duration=100;
       step=-0.009;
      };
      SchedItem @[1] {
       start_ctr=100;
       start_val=0.1;
       duration=100;
       step=-0.0009;
      };
      SchedItem @[2] {
       start_ctr=200;
       start_val=0.01;
       duration=1;
       step=1;
      };
     };
     wt_sig {gain=6: off=1.25: };
     lmix {hebb=0.002: err=0.998: err_sb=1: };
     xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
     savg_cor {cor=0.8: thresh=0.001: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.05;
     };
    };
    BaseSpec_Group @.gp[0] {
     name="LeabraPrjns";
     el_typ=FullPrjnSpec;
     el_def=0;
     FullPrjnSpec @[0] {
      name="FullPrjnSpec_0";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=FullPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
     };
     TiledGpRFPrjnSpec @[1] {
      name=;
      desc=;
      unique{       };
      children {
       name=;
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      send_gp_size {x=4: y=4: };
      send_gp_skip {x=2: y=2: };
      wrap=0;
      reciprocal=0;
      trg_recv_geom {x=0: y=0: };
      trg_send_geom {x=0: y=0: };
     };
     TiledGpRFPrjnSpec @[2] {
      name="V1_V2";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=TiledGpRFPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      send_gp_size {x=4: y=4: };
      send_gp_skip {x=2: y=2: };
      wrap=0;
      reciprocal=0;
      trg_recv_geom {x=0: y=0: };
      trg_send_geom {x=0: y=0: };
     };
     GpOneToOnePrjnSpec @[3] {
      name="GpOneToOne";
      desc=;
      unique{ self_con;      };
      children {
       name=;
       el_typ=GpOneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      add_rnd_wts=0;
      n_conns=-1;
      recv_start=0;
      send_start=0;
     };
     OneToOnePrjnSpec @[4] {
      name="OneToOne";
      desc=;
      unique{ self_con;      };
      children {
       name=;
       el_typ=OneToOnePrjnSpec;
       el_def=0;
      };
      self_con=1;
      init_wts=0;
      add_rnd_wts=0;
      n_conns=-1;
      recv_start=0;
      send_start=0;
     };
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    max_size {x=49: y=29: z=2: };
    LeabraV1Layer @[0] {
     name="V1";
     desc=;
     flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     disp_scale=1;
     un_geom {x=4: y=2: n_not_xy=0: n=8: };
     unit_groups=1;
     gp_geom {x=10: y=10: n_not_xy=0: n=100: };
     gp_spc {x=1: y=1: };
     act_geom {x=49: y=29: n_not_xy=0: n=1: };
     scaled_act_geom {x=49: y=29: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[1].projections[0];
     };
     units {
      name=;
      el_typ=DaModUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=4: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
      LeabraUnit_Group @.gp[0] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2584577: max=0.7187549: max_i=7: };
       acts_m {cmpt=1: avg=0.2584577: max=0.7187549: max_i=7: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.218112: k1_ithr=0.4828158: ithr_r=0.9254226: ithr_diff=0.6036361: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[1] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=5: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2424577: max=0.7702823: max_i=7: };
       acts_m {cmpt=1: avg=0.2424577: max=0.7702823: max_i=7: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.979002: k1_ithr=0.730261: ithr_r=0.9969462: ithr_diff=0.6309954: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[2] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=10: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1939141: max=0.6837584: max_i=3: };
       acts_m {cmpt=1: avg=0.1939141: max=0.6837584: max_i=3: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.98396: k1_ithr=0.7208499: ithr_r=1.012419: ithr_diff=0.6366611: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[3] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=15: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.08230309: max=0.393891: max_i=0: };
       acts_m {cmpt=1: avg=0.08230309: max=0.393891: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.856284: k1_ithr=0.6974849: ithr_r=0.978851: ithr_diff=0.6242574: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[4] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=20: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3075502: max=0.7594931: max_i=1: };
       acts_m {cmpt=1: avg=0.3075502: max=0.7594931: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.711829: k1_ithr=0.7579853: ithr_r=0.8146534: ithr_diff=0.5572072: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[5] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=25: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1862063: max=0.8185027: max_i=0: };
       acts_m {cmpt=1: avg=0.1862063: max=0.8185027: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.561015: k1_ithr=0.8068242: ithr_r=0.6599858: ithr_diff=0.4831413: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[6] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=30: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1106719: max=0.8651928: max_i=0: };
       acts_m {cmpt=1: avg=0.1106719: max=0.8651928: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.316474: k1_ithr=0.7726597: ithr_r=0.5328736: ithr_diff=0.413084: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[7] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=35: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1222128: max=0.8624275: max_i=0: };
       acts_m {cmpt=1: avg=0.1222128: max=0.8624275: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.066233: k1_ithr=0.6923417: ithr_r=0.4318073: ithr_diff=0.3506655: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[8] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=40: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2779561: max=0.8140233: max_i=7: };
       acts_m {cmpt=1: avg=0.2779561: max=0.8140233: max_i=7: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=0.8505499: k1_ithr=0.4568736: ithr_r=0.6214764: ithr_diff=0.4628492: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[9] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=45: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2664143: max=0.73498: max_i=0: };
       acts_m {cmpt=1: avg=0.2664143: max=0.73498: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=0.2887592: k1_ithr=0.06138114: ithr_r=1.548491: ithr_diff=0.7874314: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[10] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=0: y=3: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.393782: max=0.8284957: max_i=5: };
       acts_m {cmpt=1: avg=0.393782: max=0.8284957: max_i=5: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.612781: k1_ithr=1.256797: ithr_r=0.731849: ithr_diff=0.5189812: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[11] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=5: y=3: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3444679: max=0.7541846: max_i=0: };
       acts_m {cmpt=1: avg=0.3444679: max=0.7541846: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=3.879967: k1_ithr=2.213776: ithr_r=0.5611269: ithr_diff=0.4294343: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[12] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=10: y=3: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2582059: max=0.7982101: max_i=3: };
       acts_m {cmpt=1: avg=0.2582059: max=0.7982101: max_i=3: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=3.457031: k1_ithr=2.117017: ithr_r=0.4904023: ithr_diff=0.38762: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[13] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=15: y=3: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2925697: max=0.7483556: max_i=5: };
       acts_m {cmpt=1: avg=0.2925697: max=0.7483556: max_i=5: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=3.16309: k1_ithr=2.193752: ithr_r=0.365936: ithr_diff=0.3064528: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[14] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=20: y=3: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.4011114: max=0.8232264: max_i=0: };
       acts_m {cmpt=1: avg=0.4011114: max=0.8232264: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.850138: k1_ithr=2.334216: ithr_r=0.1996913: ithr_diff=0.1810165: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[15] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=25: y=3: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2207563: max=0.8851115: max_i=0: };
       acts_m {cmpt=1: avg=0.2207563: max=0.8851115: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.725103: k1_ithr=2.327312: ithr_r=0.1577922: ithr_diff=0.1459728: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[16] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=30: y=3: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2255764: max=0.9037606: max_i=0: };
       acts_m {cmpt=1: avg=0.2255764: max=0.9037606: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.540731: k1_ithr=2.251506: ithr_r=0.1208522: ithr_diff=0.1138351: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[17] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=35: y=3: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2255579: max=0.9036887: max_i=0: };
       acts_m {cmpt=1: avg=0.2255579: max=0.9036887: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.719749: k1_ithr=2.218848: ithr_r=0.2035515: ithr_diff=0.1841719: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[18] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=40: y=3: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3828887: max=0.8484848: max_i=0: };
       acts_m {cmpt=1: avg=0.3828887: max=0.8484848: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.538723: k1_ithr=1.450508: ithr_r=0.5597474: ithr_diff=0.4286467: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[19] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=45: y=3: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3382074: max=0.8286482: max_i=3: };
       acts_m {cmpt=1: avg=0.3382074: max=0.8286482: max_i=3: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.262514: k1_ithr=0.482571: ithr_r=0.961732: ithr_diff=0.6177697: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[20] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=0: y=6: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2715682: max=0.8240085: max_i=6: };
       acts_m {cmpt=1: avg=0.2715682: max=0.8240085: max_i=6: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.255865: k1_ithr=1.160251: ithr_r=0.6648968: ithr_diff=0.4856734: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[21] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=5: y=6: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2139833: max=0.8504882: max_i=5: };
       acts_m {cmpt=1: avg=0.2139833: max=0.8504882: max_i=5: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.751168: k1_ithr=2.26031: ithr_r=0.1965238: ithr_diff=0.1784182: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[22] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=10: y=6: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2743394: max=0.6779893: max_i=5: };
       acts_m {cmpt=1: avg=0.2743394: max=0.6779893: max_i=5: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.772007: k1_ithr=2.409434: ithr_r=0.1401795: ithr_diff=0.1307978: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[23] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=15: y=6: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.05987149: max=0.4709727: max_i=5: };
       acts_m {cmpt=1: avg=0.05987149: max=0.4709727: max_i=5: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.95382: k1_ithr=2.356313: ithr_r=0.226001: ithr_diff=0.2022827: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[24] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=20: y=6: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2637765: max=0.878163: max_i=3: };
       acts_m {cmpt=1: avg=0.2637765: max=0.878163: max_i=3: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=3.151921: k1_ithr=2.152668: ithr_r=0.3813039: ithr_diff=0.3170297: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[25] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=25: y=6: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2851702: max=0.8945043: max_i=3: };
       acts_m {cmpt=1: avg=0.2851702: max=0.8945043: max_i=3: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=3.220452: k1_ithr=2.016317: ithr_r=0.4682493: ithr_diff=0.3739026: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[26] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=30: y=6: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2895702: max=0.822929: max_i=4: };
       acts_m {cmpt=1: avg=0.2895702: max=0.822929: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=3.437607: k1_ithr=1.980369: ithr_r=0.5514923: ithr_diff=0.4239105: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[27] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=35: y=6: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2900913: max=0.8214578: max_i=4: };
       acts_m {cmpt=1: avg=0.2900913: max=0.8214578: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=4.593042: k1_ithr=2.413095: ithr_r=0.6436324: ithr_diff=0.4746194: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[28] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=40: y=6: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2574989: max=0.8912941: max_i=5: };
       acts_m {cmpt=1: avg=0.2574989: max=0.8912941: max_i=5: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=4.182974: k1_ithr=2.250777: ithr_r=0.6197473: ithr_diff=0.4619196: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[29] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=45: y=6: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2770342: max=0.7771295: max_i=5: };
       acts_m {cmpt=1: avg=0.2770342: max=0.7771295: max_i=5: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.351696: k1_ithr=0.9735464: ithr_r=0.8819466: ithr_diff=0.5860237: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[30] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=0: y=9: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2840084: max=0.7515172: max_i=7: };
       acts_m {cmpt=1: avg=0.2840084: max=0.7515172: max_i=7: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=0.5997127: k1_ithr=0.2992084: ithr_r=0.6953103: ithr_diff=0.5010803: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[31] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=5: y=9: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.277954: max=0.8115593: max_i=7: };
       acts_m {cmpt=1: avg=0.277954: max=0.8115593: max_i=7: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.109663: k1_ithr=0.6119271: ithr_r=0.5951983: ithr_diff=0.4485468: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[32] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=10: y=9: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2228905: max=0.5577416: max_i=1: };
       acts_m {cmpt=1: avg=0.2228905: max=0.5577416: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.559824: k1_ithr=0.808019: ithr_r=0.6577428: ithr_diff=0.4819807: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[33] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=15: y=9: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.08230309: max=0.393891: max_i=0: };
       acts_m {cmpt=1: avg=0.08230309: max=0.393891: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.741752: k1_ithr=0.7680009: ithr_r=0.8188558: ithr_diff=0.5590641: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[34] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=20: y=9: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2903593: max=0.7961356: max_i=1: };
       acts_m {cmpt=1: avg=0.2903593: max=0.7961356: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.843468: k1_ithr=0.6855295: ithr_r=0.9892125: ithr_diff=0.6281306: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[35] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=25: y=9: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1903257: max=0.8547167: max_i=0: };
       acts_m {cmpt=1: avg=0.1903257: max=0.8547167: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.951231: k1_ithr=0.6835303: ithr_r=1.048945: ithr_diff=0.6496928: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[36] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=30: y=9: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1091956: max=0.8735645: max_i=0: };
       acts_m {cmpt=1: avg=0.1091956: max=0.8735645: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.902804: k1_ithr=1.300413: ithr_r=0.8029954: ithr_diff=0.5520149: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[37] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=35: y=9: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1091956: max=0.8735645: max_i=0: };
       acts_m {cmpt=1: avg=0.1091956: max=0.8735645: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=3.080113: k1_ithr=2.03352: ithr_r=0.4151977: ithr_diff=0.3397903: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[38] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=40: y=9: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2828753: max=0.8407297: max_i=7: };
       acts_m {cmpt=1: avg=0.2828753: max=0.8407297: max_i=7: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=4.567444: k1_ithr=1.942414: ithr_r=0.855022: ithr_diff=0.5747262: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[39] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=45: y=9: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.28698: max=0.7478448: max_i=0: };
       acts_m {cmpt=1: avg=0.28698: max=0.7478448: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.87405: k1_ithr=1.266319: ithr_r=0.8196078: ithr_diff=0.5593956: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[40] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=0: y=12: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.388245: max=0.826219: max_i=5: };
       acts_m {cmpt=1: avg=0.388245: max=0.826219: max_i=5: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[41] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=5: y=12: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3363224: max=0.7439979: max_i=0: };
       acts_m {cmpt=1: avg=0.3363224: max=0.7439979: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=0.05496655: k1_ithr=-0.03942525: ithr_r=0: ithr_diff=1.717259: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[42] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=10: y=12: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2807341: max=0.8195042: max_i=1: };
       acts_m {cmpt=1: avg=0.2807341: max=0.8195042: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=0.1984475: k1_ithr=0.04480285: ithr_r=1.488253: ithr_diff=0.7742332: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[43] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=15: y=12: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2925697: max=0.7483556: max_i=5: };
       acts_m {cmpt=1: avg=0.2925697: max=0.7483556: max_i=5: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=0.2745223: k1_ithr=0.08139777: ithr_r=1.215685: ithr_diff=0.7034931: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[44] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=20: y=12: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.4011114: max=0.8232264: max_i=0: };
       acts_m {cmpt=1: avg=0.4011114: max=0.8232264: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=0.3454872: k1_ithr=0.1154496: ithr_r=1.096121: ithr_diff=0.6658353: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[45] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=25: y=12: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2207563: max=0.8851115: max_i=0: };
       acts_m {cmpt=1: avg=0.2207563: max=0.8851115: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=0.4238085: k1_ithr=0.1563303: ithr_r=0.9973109: ithr_diff=0.63113: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[46] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=30: y=12: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2255764: max=0.9037606: max_i=0: };
       acts_m {cmpt=1: avg=0.2255764: max=0.9037606: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.384075: k1_ithr=1.051216: ithr_r=0.2750848: ithr_diff=0.2404923: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[47] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=35: y=12: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2255579: max=0.9036887: max_i=0: };
       acts_m {cmpt=1: avg=0.2255579: max=0.9036887: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=3.000273: k1_ithr=2.012537: ithr_r=0.3993072: ithr_diff=0.3292154: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[48] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=40: y=12: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3828887: max=0.8484848: max_i=0: };
       acts_m {cmpt=1: avg=0.3828887: max=0.8484848: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=4.350649: k1_ithr=1.880789: ithr_r=0.8386338: ithr_diff=0.5676993: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[49] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=45: y=12: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3429939: max=0.8306007: max_i=3: };
       acts_m {cmpt=1: avg=0.3429939: max=0.8306007: max_i=3: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.786888: k1_ithr=1.127936: ithr_r=0.9045357: ithr_diff=0.5952702: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[50] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=0: y=15: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2485851: max=0.7978054: max_i=6: };
       acts_m {cmpt=1: avg=0.2485851: max=0.7978054: max_i=6: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[51] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=5: y=15: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1942007: max=0.7860937: max_i=5: };
       acts_m {cmpt=1: avg=0.1942007: max=0.7860937: max_i=5: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[52] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=10: y=15: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2482018: max=0.6233876: max_i=1: };
       acts_m {cmpt=1: avg=0.2482018: max=0.6233876: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[53] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=15: y=15: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.05987167: max=0.4709727: max_i=5: };
       acts_m {cmpt=1: avg=0.05987167: max=0.4709727: max_i=5: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[54] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=20: y=15: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1474844: max=0.8520645: max_i=3: };
       acts_m {cmpt=1: avg=0.1474844: max=0.8520645: max_i=3: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[55] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=25: y=15: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1710493: max=0.8665075: max_i=3: };
       acts_m {cmpt=1: avg=0.1710493: max=0.8665075: max_i=3: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[56] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=30: y=15: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3017046: max=0.7210473: max_i=4: };
       acts_m {cmpt=1: avg=0.3017046: max=0.7210473: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.043719: k1_ithr=0.7265398: ithr_r=0.3622521: ithr_diff=0.3038932: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[57] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=35: y=15: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3051475: max=0.7198299: max_i=4: };
       acts_m {cmpt=1: avg=0.3051475: max=0.7198299: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.788576: k1_ithr=2.099369: ithr_r=0.2838941: ithr_diff=0.2471536: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[58] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=40: y=15: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1358179: max=0.8606495: max_i=5: };
       acts_m {cmpt=1: avg=0.1358179: max=0.8606495: max_i=5: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=4.302273: k1_ithr=2.048157: ithr_r=0.7422029: ithr_diff=0.523936: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[59] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=45: y=15: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2561038: max=0.7391931: max_i=5: };
       acts_m {cmpt=1: avg=0.2561038: max=0.7391931: max_i=5: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.642331: k1_ithr=1.018227: ithr_r=0.953599: ithr_diff=0.6146483: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[60] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=0: y=18: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2721072: max=0.8402854: max_i=7: };
       acts_m {cmpt=1: avg=0.2721072: max=0.8402854: max_i=7: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[61] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=5: y=18: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3363181: max=0.7528901: max_i=1: };
       acts_m {cmpt=1: avg=0.3363181: max=0.7528901: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[62] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=10: y=18: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2605721: max=0.830726: max_i=3: };
       acts_m {cmpt=1: avg=0.2605721: max=0.830726: max_i=3: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[63] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=15: y=18: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2212555: max=0.7703364: max_i=7: };
       acts_m {cmpt=1: avg=0.2212555: max=0.7703364: max_i=7: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[64] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=20: y=18: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2701021: max=0.8397765: max_i=7: };
       acts_m {cmpt=1: avg=0.2701021: max=0.8397765: max_i=7: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=-0.1: k1_ithr=-0.1: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[65] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=25: y=18: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3089725: max=0.8713527: max_i=0: };
       acts_m {cmpt=1: avg=0.3089725: max=0.8713527: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=-0.0131384: k1_ithr=-0.07201156: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[66] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=30: y=18: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3125295: max=0.8823664: max_i=0: };
       acts_m {cmpt=1: avg=0.3125295: max=0.8823664: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.136286: k1_ithr=0.7559025: ithr_r=0.407608: ithr_diff=0.3347604: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[67] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=35: y=18: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3125295: max=0.8823664: max_i=0: };
       acts_m {cmpt=1: avg=0.3125295: max=0.8823664: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.698885: k1_ithr=2.297354: ithr_r=0.1610809: ithr_diff=0.1487768: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[68] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=40: y=18: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2979687: max=0.852311: max_i=0: };
       acts_m {cmpt=1: avg=0.2979687: max=0.852311: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=3.992433: k1_ithr=2.093542: ithr_r=0.6455433: ithr_diff=0.4756225: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[69] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=45: y=18: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3560942: max=0.8366391: max_i=1: };
       acts_m {cmpt=1: avg=0.3560942: max=0.8366391: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.413068: k1_ithr=0.8972999: ithr_r=0.9892641: ithr_diff=0.6281497: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[70] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=0: y=21: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3111377: max=0.8463877: max_i=4: };
       acts_m {cmpt=1: avg=0.3111377: max=0.8463877: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=0.5090262: k1_ithr=0.2589333: ithr_r=0.6759289: ithr_diff=0.4913163: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[71] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=5: y=21: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2931629: max=0.8524137: max_i=4: };
       acts_m {cmpt=1: avg=0.2931629: max=0.8524137: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=0.6365196: k1_ithr=0.4626759: ithr_r=0.3189885: ithr_diff=0.2731161: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[72] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=10: y=21: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2547924: max=0.7665618: max_i=4: };
       acts_m {cmpt=1: avg=0.2547924: max=0.7665618: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=0.6671978: k1_ithr=0.3687737: ithr_r=0.5929033: ithr_diff=0.4472797: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[73] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=15: y=21: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1939624: max=0.7935863: max_i=4: };
       acts_m {cmpt=1: avg=0.1939624: max=0.7935863: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=0.6128179: k1_ithr=0.2452053: ithr_r=0.9159719: ithr_diff=0.5998725: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[74] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=20: y=21: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2168803: max=0.8856332: max_i=4: };
       acts_m {cmpt=1: avg=0.2168803: max=0.8856332: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=0.5417549: k1_ithr=0.211189: ithr_r=0.9420602: ithr_diff=0.6101761: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[75] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=25: y=21: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1595613: max=0.9207997: max_i=4: };
       acts_m {cmpt=1: avg=0.1595613: max=0.9207997: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=0.5480573: k1_ithr=0.3101863: ithr_r=0.5692067: ithr_diff=0.4340257: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[76] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=30: y=21: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1166257: max=0.933006: max_i=4: };
       acts_m {cmpt=1: avg=0.1166257: max=0.933006: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.779805: k1_ithr=1.092705: ithr_r=0.4878476: ithr_diff=0.3860535: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[77] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=35: y=21: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1166257: max=0.933006: max_i=4: };
       acts_m {cmpt=1: avg=0.1166257: max=0.933006: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.881689: k1_ithr=2.469499: ithr_r=0.1543614: ithr_diff=0.1430378: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[78] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=40: y=21: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2182816: max=0.8971158: max_i=4: };
       acts_m {cmpt=1: avg=0.2182816: max=0.8971158: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=3.485813: k1_ithr=2.018526: ithr_r=0.5463339: ithr_diff=0.4209311: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[79] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=45: y=21: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2748551: max=0.8689051: max_i=4: };
       acts_m {cmpt=1: avg=0.2748551: max=0.8689051: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.081061: k1_ithr=0.7542117: ithr_r=1.01496: ithr_diff=0.6375831: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[80] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=0: y=24: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3112788: max=0.8533517: max_i=7: };
       acts_m {cmpt=1: avg=0.3112788: max=0.8533517: max_i=7: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.984681: k1_ithr=0.8623456: ithr_r=0.8335574: ithr_diff=0.5654991: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[81] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=5: y=24: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2263385: max=0.833383: max_i=0: };
       acts_m {cmpt=1: avg=0.2263385: max=0.833383: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.807938: k1_ithr=1.315442: ithr_r=0.758278: ithr_diff=0.5315276: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[82] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=10: y=24: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3353554: max=0.7477367: max_i=1: };
       acts_m {cmpt=1: avg=0.3353554: max=0.7477367: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.93702: k1_ithr=1.243654: ithr_r=0.8593416: ithr_diff=0.5765592: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[83] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=15: y=24: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1919855: max=0.7496222: max_i=0: };
       acts_m {cmpt=1: avg=0.1919855: max=0.7496222: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.746246: k1_ithr=1.068686: ithr_r=0.9438044: ithr_diff=0.6108555: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[84] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=20: y=24: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2142144: max=0.8684621: max_i=0: };
       acts_m {cmpt=1: avg=0.2142144: max=0.8684621: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.497506: k1_ithr=0.9485086: ithr_r=0.9681572: ithr_diff=0.6202177: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[85] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=25: y=24: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1741603: max=0.9158893: max_i=0: };
       acts_m {cmpt=1: avg=0.1741603: max=0.9158893: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.458865: k1_ithr=0.9487023: ithr_r=0.9523602: ithr_diff=0.6141707: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[86] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=30: y=24: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2026805: max=0.9254171: max_i=0: };
       acts_m {cmpt=1: avg=0.2026805: max=0.9254171: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.988741: k1_ithr=1.460751: ithr_r=0.7159014: ithr_diff=0.5112486: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[87] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=35: y=24: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2026805: max=0.9254171: max_i=0: };
       acts_m {cmpt=1: avg=0.2026805: max=0.9254171: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=3.001159: k1_ithr=2.43815: ithr_r=0.207759: ithr_diff=0.1875972: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[88] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=40: y=24: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2128419: max=0.885949: max_i=0: };
       acts_m {cmpt=1: avg=0.2128419: max=0.885949: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=3.039474: k1_ithr=1.924202: ithr_r=0.4571729: ithr_diff=0.3669291: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[89] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=45: y=24: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2917187: max=0.840829: max_i=1: };
       acts_m {cmpt=1: avg=0.2917187: max=0.840829: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.863303: k1_ithr=0.6548344: ithr_r=1.045724: ithr_diff=0.6485626: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[90] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=0: y=27: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2091093: max=0.8573078: max_i=5: };
       acts_m {cmpt=1: avg=0.2091093: max=0.8573078: max_i=5: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=3.694012: k1_ithr=1.462074: ithr_r=0.926857: ithr_diff=0.6042043: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[91] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=5: y=27: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.270923: max=0.805336: max_i=4: };
       acts_m {cmpt=1: avg=0.270923: max=0.805336: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=4.872895: k1_ithr=1.926959: ithr_r=0.927745: ithr_diff=0.6045555: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[92] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=10: y=27: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.224151: max=0.8257126: max_i=1: };
       acts_m {cmpt=1: avg=0.224151: max=0.8257126: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=4.750932: k1_ithr=2.02602: ithr_r=0.8522675: ithr_diff=0.5735531: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[93] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=15: y=27: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1739915: max=0.7928717: max_i=5: };
       acts_m {cmpt=1: avg=0.1739915: max=0.7928717: max_i=5: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=4.482712: k1_ithr=2.095882: ithr_r=0.7602535: ithr_diff=0.5324522: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[94] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=20: y=27: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2862304: max=0.8474981: max_i=5: };
       acts_m {cmpt=1: avg=0.2862304: max=0.8474981: max_i=5: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=4.084064: k1_ithr=2.057647: ithr_r=0.6855294: ithr_diff=0.4961765: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[95] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=25: y=27: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2145316: max=0.8982046: max_i=4: };
       acts_m {cmpt=1: avg=0.2145316: max=0.8982046: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=3.758042: k1_ithr=2.073242: ithr_r=0.5947844: ithr_diff=0.4483185: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[96] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=30: y=27: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1888876: max=0.9166524: max_i=4: };
       acts_m {cmpt=1: avg=0.1888876: max=0.9166524: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=3.565569: k1_ithr=2.211994: ithr_r=0.477429: ithr_diff=0.3796237: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[97] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=35: y=27: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1866474: max=0.9159555: max_i=4: };
       acts_m {cmpt=1: avg=0.1866474: max=0.9159555: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=5.327882: k1_ithr=2.68913: ithr_r=0.6837361: ithr_diff=0.4952722: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[98] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=40: y=27: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.3039343: max=0.8755105: max_i=4: };
       acts_m {cmpt=1: avg=0.3039343: max=0.8755105: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=2.780498: k1_ithr=1.974179: ithr_r=0.3424773: ithr_diff=0.2899908: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[99] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=45: y=27: z=0: };
       unique_geom=0;
       geom {x=4: y=2: n_not_xy=0: n=8: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1881329: max=0.8693658: max_i=3: };
       acts_m {cmpt=1: avg=0.1881329: max=0.8693658: max_i=3: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=1: pct=0.125: pct_c=0.875: adth_k=1: k_ithr=1.440275: k1_ithr=0.5580807: ithr_r=0.9480856: ithr_diff=0.6125179: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.125: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
     };
     unit_spec {type=DaModUnitSpec: spec=.projects[0].networks[0].specs[0].children[0]$$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2462931: max=0.933006: max_i=76: };
     acts_m {cmpt=1: avg=0.2462931: max=0.933006: max_i=76: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=100: pct=0.2: pct_c=0.875: adth_k=1: k_ithr=1.192: k1_ithr=-0.1: ithr_r=0: ithr_diff=1.08389: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.2: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1].children[1]$$: };
     hard_clamped=0;
     avg_l_avg=nan;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
    LeabraLayer @[1] {
     name="V2";
     desc=;
     flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=1: };
     disp_scale=1;
     un_geom {x=6: y=6: n_not_xy=0: n=36: };
     unit_groups=1;
     gp_geom {x=4: y=4: n_not_xy=0: n=16: };
     gp_spc {x=1: y=1: };
     act_geom {x=27: y=27: n_not_xy=0: n=1: };
     scaled_act_geom {x=27: y=27: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_V1";
       from_type=CUSTOM;
       from=$.projects[0].networks[0].layers[0]$;
       spec {type=TiledGpRFPrjnSpec: spec=.projects[0].networks[0].specs.gp[0][2]$$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[2].children[2].children[0]$$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=0.8;
      };
      LeabraPrjn @[1] {
       name="Fm_V4_IT";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[2]$$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[0].specs.gp[0][0]$$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[2].children[2].children[2]$$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=FM_OUTPUT;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=0.2;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[2].projections[0];
     };
     units {
      name=;
      el_typ=DaModUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=9: y=9: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
      LeabraUnit_Group @.gp[0] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       unique_geom=0;
       geom {x=6: y=6: n_not_xy=0: n=36: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.147935: max=0.4993756: max_i=11: };
       acts_m {cmpt=1: avg=0.1479274: max=0.4992701: max_i=11: };
       phase_dif_ratio=0.9999482;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=3.680474: k1_ithr=3.484388: ithr_r=0.05474903: ithr_diff=0.05327729: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.08333334: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[1] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=7: y=0: z=0: };
       unique_geom=0;
       geom {x=6: y=6: n_not_xy=0: n=36: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.117605: max=0.5549686: max_i=19: };
       acts_m {cmpt=1: avg=0.1176667: max=0.5540307: max_i=19: };
       phase_dif_ratio=1.000525;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=3.606817: k1_ithr=3.286941: ithr_r=0.09286842: ithr_diff=0.08868655: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.08333334: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[2] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=14: y=0: z=0: };
       unique_geom=0;
       geom {x=6: y=6: n_not_xy=0: n=36: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1230762: max=0.5815458: max_i=12: };
       acts_m {cmpt=1: avg=0.1230709: max=0.5825607: max_i=12: };
       phase_dif_ratio=0.999957;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=3.650728: k1_ithr=3.337059: ithr_r=0.08983676: ithr_diff=0.08591958: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.08333334: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[3] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=21: y=0: z=0: };
       unique_geom=0;
       geom {x=6: y=6: n_not_xy=0: n=36: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1471565: max=0.6303994: max_i=24: };
       acts_m {cmpt=1: avg=0.1472226: max=0.6305183: max_i=24: };
       phase_dif_ratio=1.000449;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=3.86685: k1_ithr=3.620572: ithr_r=0.06580812: ithr_diff=0.06368946: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.08333334: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[4] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=0: y=7: z=0: };
       unique_geom=0;
       geom {x=6: y=6: n_not_xy=0: n=36: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1295935: max=0.5098785: max_i=33: };
       acts_m {cmpt=1: avg=0.1295537: max=0.5090347: max_i=33: };
       phase_dif_ratio=0.9996929;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=3.642193: k1_ithr=3.369714: ithr_r=0.07775814: ithr_diff=0.07481182: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.08333334: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[5] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=7: y=7: z=0: };
       unique_geom=0;
       geom {x=6: y=6: n_not_xy=0: n=36: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1271237: max=0.6863403: max_i=19: };
       acts_m {cmpt=1: avg=0.1270834: max=0.6858551: max_i=19: };
       phase_dif_ratio=0.999683;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=3.463725: k1_ithr=3.148203: ithr_r=0.09551284: ithr_diff=0.09109332: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.08333334: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[6] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=14: y=7: z=0: };
       unique_geom=0;
       geom {x=6: y=6: n_not_xy=0: n=36: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.103142: max=0.6869216: max_i=16: };
       acts_m {cmpt=1: avg=0.1031404: max=0.6873953: max_i=16: };
       phase_dif_ratio=0.9999847;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=3.700485: k1_ithr=3.358347: ithr_r=0.09701496: ithr_diff=0.09245761: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.08333334: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[7] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=21: y=7: z=0: };
       unique_geom=0;
       geom {x=6: y=6: n_not_xy=0: n=36: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.130031: max=0.5380622: max_i=14: };
       acts_m {cmpt=1: avg=0.1300594: max=0.537369: max_i=14: };
       phase_dif_ratio=1.000219;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=3.975801: k1_ithr=3.609867: ithr_r=0.09655538: ithr_diff=0.0920404: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.08333334: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[8] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=0: y=14: z=0: };
       unique_geom=0;
       geom {x=6: y=6: n_not_xy=0: n=36: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1413298: max=0.501924: max_i=8: };
       acts_m {cmpt=1: avg=0.1413608: max=0.5023484: max_i=8: };
       phase_dif_ratio=1.000219;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=4.004244: k1_ithr=3.716624: ithr_r=0.07453909: ithr_diff=0.0718288: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.08333334: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[9] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=7: y=14: z=0: };
       unique_geom=0;
       geom {x=6: y=6: n_not_xy=0: n=36: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1100169: max=0.6419668: max_i=16: };
       acts_m {cmpt=1: avg=0.1100581: max=0.641612: max_i=16: };
       phase_dif_ratio=1.000375;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=3.652874: k1_ithr=3.289071: ithr_r=0.104909: ithr_diff=0.09959355: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.08333334: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[10] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=14: y=14: z=0: };
       unique_geom=0;
       geom {x=6: y=6: n_not_xy=0: n=36: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1087819: max=0.6431662: max_i=16: };
       acts_m {cmpt=1: avg=0.108806: max=0.643638: max_i=16: };
       phase_dif_ratio=1.000221;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=3.796254: k1_ithr=3.333002: ithr_r=0.1301413: ithr_diff=0.1220287: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.08333334: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[11] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=21: y=14: z=0: };
       unique_geom=0;
       geom {x=6: y=6: n_not_xy=0: n=36: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.121554: max=0.5465482: max_i=26: };
       acts_m {cmpt=1: avg=0.1215318: max=0.5468155: max_i=26: };
       phase_dif_ratio=0.9998175;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=4.131275: k1_ithr=3.769517: ithr_r=0.0916393: ithr_diff=0.08756582: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.08333334: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[12] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=0: y=21: z=0: };
       unique_geom=0;
       geom {x=6: y=6: n_not_xy=0: n=36: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1322157: max=0.5450531: max_i=12: };
       acts_m {cmpt=1: avg=0.1321474: max=0.5448107: max_i=12: };
       phase_dif_ratio=0.9994832;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=3.996387: k1_ithr=3.656875: ithr_r=0.08878185: ithr_diff=0.08495487: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.08333334: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[13] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=7: y=21: z=0: };
       unique_geom=0;
       geom {x=6: y=6: n_not_xy=0: n=36: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1351729: max=0.5263253: max_i=17: };
       acts_m {cmpt=1: avg=0.1350946: max=0.526749: max_i=17: };
       phase_dif_ratio=0.9994214;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=3.598913: k1_ithr=3.318799: ithr_r=0.08102898: ithr_diff=0.07783305: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.08333334: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[14] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=14: y=21: z=0: };
       unique_geom=0;
       geom {x=6: y=6: n_not_xy=0: n=36: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1329022: max=0.626954: max_i=7: };
       acts_m {cmpt=1: avg=0.1329144: max=0.6273445: max_i=7: };
       phase_dif_ratio=1.000092;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=3.534092: k1_ithr=3.159583: ithr_r=0.1120164: ithr_diff=0.1059704: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.08333334: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[15] {
       name=;
       el_typ=DaModUnit;
       el_def=0;
       pos {x=21: y=21: z=0: };
       unique_geom=0;
       geom {x=6: y=6: n_not_xy=0: n=36: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.1111607: max=0.672527: max_i=35: };
       acts_m {cmpt=1: avg=0.1111817: max=0.6727638: max_i=35: };
       phase_dif_ratio=1.000189;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=3.819108: k1_ithr=3.42046: ithr_r=0.1102419: ithr_diff=0.1043826: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.08333334: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
     };
     unit_spec {type=DaModUnitSpec: spec=.projects[0].networks[0].specs[0].children[1]$$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.1261748: max=0.6869216: max_i=6: };
     acts_m {cmpt=1: avg=0.1261762: max=0.6873953: max_i=6: };
     phase_dif_ratio=1.000011;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=48: pct=0.1: pct_c=0.9166667: adth_k=1: k_ithr=2.14808: k1_ithr=1.13656: ithr_r=0.636571: ithr_diff=0.470897: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.1: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1].children[2]$$: };
     hard_clamped=0;
     avg_l_avg=0;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
    LeabraLayer @[2] {
     name="V4_IT";
     desc=;
     flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
     layer_type=HIDDEN;
     pos {x=29: y=0: z=1: };
     disp_scale=1;
     un_geom {x=10: y=10: n_not_xy=0: n=100: };
     unit_groups=0;
     gp_geom {x=3: y=3: n_not_xy=0: n=9: };
     gp_spc {x=1: y=1: };
     act_geom {x=10: y=10: n_not_xy=0: n=100: };
     scaled_act_geom {x=10: y=10: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_V2";
       from_type=CUSTOM;
       from=$.projects[0].networks[0].layers[1]$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[0].specs.gp[0][0]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[2].children[2].children[1]$$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=FM_INPUT;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=0.9;
      };
      LeabraPrjn @[1] {
       name="Fm_Output";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[3]$$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[0].specs.gp[0][0]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[2].children[2].children[4]$$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=FM_OUTPUT;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=0.1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[3].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[1].projections[1];
     };
     units {
      name=;
      el_typ=DaModUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=10: y=10: n_not_xy=0: n=100: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=DaModUnitSpec: spec=$.projects[0].networks[0].specs[0].children[1]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.1772979: max=0.8619595: max_i=7: };
     acts_m {cmpt=1: avg=0.1770654: max=0.8609058: max_i=7: };
     phase_dif_ratio=0.998689;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=25: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=3.47818: k1_ithr=2.87229: ithr_r=0.1913995: ithr_diff=0.1741974: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1].children[3]$$: };
     hard_clamped=0;
     avg_l_avg=0;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
    LeabraLayer @[3] {
     name="Output";
     desc=;
     flags=PROJECT_WTS_NEXT|PROJECT_WTS_DONE;
     layer_type=TARGET;
     pos {x=41: y=0: z=1: };
     disp_scale=1;
     un_geom {x=5: y=4: n_not_xy=0: n=20: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=5: y=4: n_not_xy=0: n=20: };
     scaled_act_geom {x=5: y=4: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_V4_IT";
       from_type=CUSTOM;
       from=$.projects[0].networks[0].layers[2]$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[0].specs.gp[0][0]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[2].children[2].children[3]$$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=FM_INPUT;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[2].projections[1];
     };
     units {
      name=;
      el_typ=DaModUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=5: y=4: n_not_xy=0: n=20: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=DaModUnitSpec: spec=.projects[0].networks[0].specs[0].children[1].children[0]$$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="13";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [5 4] "00";"01";"02";"03";"04";"05";"06";"07";"08";"09";
"10";"11";"12";"13";"14";"15";"16";"17";"18";"19";
     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.0475: max=0.95: max_i=13: };
     acts_m {cmpt=1: avg=0.04739092: max=0.9449711: max_i=13: };
     phase_dif_ratio=0.9977037;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.05: pct_c=0.95: adth_k=1: k_ithr=3.201711: k1_ithr=2.076872: ithr_r=0.4328228: ithr_diff=0.3513245: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.05: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1].children[4]$$: };
     hard_clamped=0;
     avg_l_avg=0;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
    LeabraLayer @[4] {
     name="Image";
     desc=;
     flags=;
     layer_type=INPUT;
     pos {x=41: y=7: z=1: };
     disp_scale=0.2;
     un_geom {x=40: y=40: n_not_xy=0: n=1600: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=1: y=1: };
     act_geom {x=40: y=40: n_not_xy=0: n=1600: };
     scaled_act_geom {x=8: y=8: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=40: y=40: n_not_xy=0: n=1600: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=DaModUnitSpec: spec=.projects[0].networks[0].specs[0]$$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0.06278374;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.06080068: max=0.5680574: max_i=120: };
     acts_m {cmpt=1: avg=0.06080068: max=0.5680574: max_i=120: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=400: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.6: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[1]$$: };
     hard_clamped=0;
     avg_l_avg=0;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=;
   auto_build=AUTO_BUILD;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=2;
   batch=0;
   epoch=0;
   group=0;
   trial=0;
   tick=0;
   cycle=0;
   time=0;
   group_name=;
   trial_name=;
   output_name=;
   sse_unit_avg=0;
   sse_sqrt=0;
   sse=0;
   sum_sse=0;
   avg_sse=0;
   cnt_err_tol=0;
   cnt_err=0;
   pct_err=0;
   pct_cor=0;
   cur_sum_sse=0;
   avg_sse_n=0;
   cur_cnt_err=0;
   train_time {name="train_time": start={usr=445: sys=97: tot=128798389314: }: end={usr=252567: sys=16815: tot=237634861: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   epoch_time {name="epoch_time": start={usr=8581: sys=1036: tot=128798441518: }: end={usr=15264: sys=1325: tot=128798448845: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   trial_time {name="trial_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   settle_time {name="settle_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   cycle_time {name="cycle_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   wt_sync_time {name="wt_sync_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   misc_time {name="misc_time": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   threads {
    run_time {name="": s_used=0: n_used=0: };
    sync_time {name="": s_used=0: n_used=0: };
    total_time {name="": s_used=0: n_used=0: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=6.941089259693811e+228;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=JUST_WEIGHTS;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=3096;
   n_cons=192928;
   max_size {x=49: y=29: z=2: };
   learn_rule=LEABRA_CHL;
   phase_order=MINUS_PLUS;
   no_plus_test=0;
   sequence_init=DO_NOTHING;
   phase=MINUS_PHASE;
   nothing_phase=0;
   phase_no=0;
   phase_max=2;
   ct_cycle=39;
   time_inc=1;
   cycle_max=60;
   mid_minus_cycle=-1;
   min_cycles=15;
   min_cycles_phase2=35;
   ct_time {
    minus=50;
    plus=20;
    inhib=1;
    n_avg_only_epcs=0;
    total_cycles=71;
    inhib_start=70;
   };
   ct_sravg {
    start=30;
    end=1;
    interval=1;
    plus_s_st=19;
    force_con=0;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0.02;
    trough_i=0.02;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   sravg_vals {
    s_sum=0;
    s_nrm=0;
    m_sum=0;
    m_nrm=0;
    do_s=0;
   };
   ct_lrn_trig {
    plus_lrn_cyc=-1;
    davg_dt=0.1;
    davg_s_dt=0.05;
    davg_m_dt=0.03;
    davg_l_dt=0.0005;
    thr_min=0;
    thr_max=0.5;
    loc_max_cyc=8;
    loc_max_dec=0.01;
    lrn_delay=40;
    lrn_refract=100;
    davg_l_init=0;
    davg_max_init=0.001;
    davg_time=10;
    davg_s_time=20;
    davg_m_time=33.33334;
    davg_l_time=2000;
    lrn_delay_inc=0.025;
    lrn_refract_inc=0.01;
   };
   lrn_trig {
    davg=0;
    davg_s=0;
    davg_m=0;
    davg_smd=0;
    davg_l=0;
    davg_max=0.001;
    cyc_fm_inc=0;
    cyc_fm_dec=0;
    loc_max=0;
    lrn_max=0;
    lrn_trig=0;
    lrn=0;
    lrn_min=0;
    lrn_min_cyc=0;
    lrn_min_thr=0;
    lrn_min_sum=0;
    lrn_min_cyc_sum=0;
    lrn_min_thr_sum=0;
    lrn_plus=0;
    lrn_plus_cyc=0;
    lrn_plus_thr=0;
    lrn_plus_sum=0;
    lrn_plus_cyc_sum=0;
    lrn_plus_thr_sum=0;
    lrn_noth=0;
    lrn_noth_cyc=0;
    lrn_noth_thr=0;
    lrn_noth_sum=0;
    lrn_noth_cyc_sum=0;
    lrn_noth_thr_sum=0;
    lrn_stats_n=0;
   };
   minus_cycles=0;
   avg_cycles=0;
   avg_cycles_sum=0;
   avg_cycles_n=0;
   minus_output_name=;
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   send_pct=0;
   send_pct_n=0;
   send_pct_tot=0;
   avg_send_pct=0;
   avg_send_pct_sum=0;
   avg_send_pct_n=0;
   maxda_stopcrit=0.005;
   maxda=0;
   trg_max_act_stopcrit=1;
   trg_max_act=0;
   ext_rew=0;
   ext_rew_avail=0;
   norew_val=0.5;
   avg_ext_rew=0;
   pvlv_pvi=0;
   pvlv_pvr=0;
   pvlv_lve=0;
   pvlv_lvi=0;
   pv_detected=0;
   avg_ext_rew_sum=0;
   avg_ext_rew_n=0;
   off_errs=1;
   on_errs=1;
   norm_err=0;
   avg_norm_err=1;
   avg_norm_err_sum=0;
   avg_norm_err_n=0;
  };
 };
};
