// ta_Dump File v3.0 -- code v5.1.0.0
LeabraProject .projects[0] { 
  taBase_Group @.templates = [0] {
  };

  Doc_Group @.docs = [3] {
    taDoc @[0] { };
    taDoc @[1] { };
    taDoc @[2] { };
  };

  Wizard_Group @.wizards = [1] {
    LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };

      LayerWizElList @.layer_cfg = [3] {
	LayerWizEl @[0] { };
	LayerWizEl @[1] { };
	LayerWizEl @[2] { };
      };
    };
  };

  SelectEdit_Group @.edits = [1] {
    SelectEdit @[0] { 
      EditMbrItem_Group @.mbrs = [3] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
	EditMbrItem_Group @.gp[0] = [7] { 
	  EditMbrItem @[0] { };
	  EditMbrItem @[1] { };
	  EditMbrItem @[2] { };
	  EditMbrItem @[3] { };
	  EditMbrItem @[4] { };
	  EditMbrItem @[5] { };
	  EditMbrItem @[6] { };
	};
      };

      EditMthItem_Group @.mths = [7] {
	EditMthItem @[0] { };
	EditMthItem @[1] { };
	EditMthItem @[2] { };
	EditMthItem @[3] { };
	EditMthItem @[4] { };
	EditMthItem @[5] { };
	EditMthItem @[6] { };
      };
    };
  };

  DataTable_Group @.data = [0] {
    DataTable_Group @.gp[0] = [4] { 
      DataTable @[0] { 
	DataTableCols @.data = [4] {
	  String_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[3] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [4] {
	  String_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[3] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
      DataTable @[2] { 
	DataTableCols @.data = [4] {
	  String_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[3] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
      DataTable @[3] { 
	DataTableCols @.data = [2] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	};
      };
    };
    DataTable_Group @.gp[1] = [4] { 
      DataTable @[0] { 
	DataTableCols @.data = [11] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  String_Data @[4] { };
	  int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  float_Data @[10] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [8] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  float_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[3] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[4] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[7] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
      DataTable @[2] { 
	DataTableCols @.data = [11] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  String_Data @[4] { };
	  int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  float_Data @[10] { };
	};
      };
      DataTable @[3] { 
	DataTableCols @.data = [8] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	  float_Data @[7] { };
	};
      };
    };
    DataTable_Group @.gp[2] = [1] { 
      DataTable @[0] { 
	DataTableCols @.data = [3] {
	  float_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  float_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
	      UserDataItem @[2] { };
      };
};
	  String_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
    };
  };

  taBase_Group @.data_proc = [4] {
    taDataProc @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataAnal @[1] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataGen @[2] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taImageProc @[3] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
  };

  Program_Group @.programs = [2] {
    Program @[0] { 
      ProgObjList @.objs = [3] {
	DataTable @[0] { 
	  DataTableCols @.data = [11] {
	    int_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    int_Data @[2] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    String_Data @[3] { };
	    String_Data @[4] { };
	    int_Data @[5] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    float_Data @[6] { };
	    float_Data @[7] { };
	    float_Data @[8] { };
	    float_Data @[9] { };
	    float_Data @[10] { };
	  };
	};
	SimpleMathSpec @[1] { };
	DataTable @[2] { 
	  DataTableCols @.data = [3] {
	    String_Data @[0] { };
	    float_Data @[1] { };
	    float_Data @[2] { };
	  };
	};
      };

      ProgType_List @.types = [0] {
      };

      ProgVar_List @.args = [3] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
      };

      ProgVar_List @.vars = [7] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [2] {
	ProgramCall @[0] { 
	  ProgArg_List @.prog_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	IfElse @[1] { 
	  ProgEl_List @.true_code = [5] {
	    DataProcCall @[0] { 
	      ProgArg_List @.meth_args = [2] {
		ProgArg @[0] { };
		ProgArg @[1] { };
	      };
	    };
	    DataGenCall @[1] { 
	      ProgArg_List @.meth_args = [3] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
	      };
	    };
	    DataLoop @[2] { 
	      ProgEl_List @.loop_code = [3] {
		DataVarProg @[0] { };
		AssignExpr @[1] { };
		DataVarProg @[2] { };
	      };
	    };
	    DataGroupProg @[3] { 
	      DataOpList @.ops = [3] {
		DataGroupEl @[0] { };
		DataGroupEl @[1] { };
		DataGroupEl @[2] { };
	      };
	    };
	    DataAnalCall @[4] { 
	      ProgArg_List @.meth_args = [8] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
		ProgArg @[3] { };
		ProgArg @[4] { };
		ProgArg @[5] { };
		ProgArg @[6] { };
		ProgArg @[7] { };
	      };
	    };
	  };

	  ProgEl_List @.false_code = [1] {
	    DataAnalCall @[0] { 
	      ProgArg_List @.meth_args = [8] {
		ProgArg @[0] { };
		ProgArg @[1] { };
		ProgArg @[2] { };
		ProgArg @[3] { };
		ProgArg @[4] { };
		ProgArg @[5] { };
		ProgArg @[6] { };
		ProgArg @[7] { };
	      };
	    };
	  };
	};
      };
    };
    Program @[1] { 
      ProgObjList @.objs = [0] {
      };

      ProgType_List @.types = [1] {
	DynEnumType @[0] { 
	  DynEnumItem_List @.enums = [3] {
	    DynEnumItem @[0] { };
	    DynEnumItem @[1] { };
	    DynEnumItem @[2] { };
	  };
	};
      };

      ProgVar_List @.args = [3] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
      };

      ProgVar_List @.vars = [2] {
	ProgVar @[0] { };
	ProgVar @[1] { };
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [4] {
	AssignExpr @[0] { };
	IfElse @[1] { 
	  ProgEl_List @.true_code = [2] {
	    MemberAssign @[0] { };
	    MemberAssign @[1] { };
	  };

	  ProgEl_List @.false_code = [1] {
	    IfElse @[0] { 
	      ProgEl_List @.true_code = [2] {
		MemberAssign @[0] { };
		MemberAssign @[1] { };
	      };

	      ProgEl_List @.false_code = [2] {
		MemberAssign @[0] { };
		MemberAssign @[1] { };
	      };
	    };
	  };
	};
	MethodCall @[2] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	MethodCall @[3] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	};
      };
    };
    Program_Group @.gp[0] = [10] { 
      Program @[0] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [1] {
	  DynEnumType @[0] { 
	    DynEnumItem_List @.enums = [3] {
	      DynEnumItem @[0] { };
	      DynEnumItem @[1] { };
	      DynEnumItem @[2] { };
	    };
	  };
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  NetCounterInit @[0] { };
	  WhileLoop @[1] { 
	    ProgEl_List @.loop_code = [4] {
	      IfElse @[0] { 
		ProgEl_List @.true_code = [1] {
		  AssignExpr @[0] { };
		};

		ProgEl_List @.false_code = [1] {
		  IfElse @[0] { 
		    ProgEl_List @.true_code = [1] {
		      AssignExpr @[0] { };
		    };

		    ProgEl_List @.false_code = [1] {
		      AssignExpr @[0] { };
		    };
		  };
		};
	      };
	      ProgramCall @[1] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      ProgramCall @[2] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      NetCounterIncr @[3] { };
	    };
	  };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [1] {
	  RndSeed @[0] { };
	};

	ProgType_List @.types = [1] {
	  DynEnumType @[0] { 
	    DynEnumItem_List @.enums = [2] {
	      DynEnumItem @[0] { };
	      DynEnumItem @[1] { };
	    };
	  };
	};

	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [7] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [5] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  IfGuiPrompt @[4] { 
	    ProgEl_List @.yes_code = [2] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	      PrintExpr @[1] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [7] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	      PrintExpr @[1] { };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  AssignExpr @[4] { };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfBreak @[2] { };
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @[2] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [5] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [9] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetDataLoop @[4] { 
	    ProgEl_List @.loop_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  IfElse @[5] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[7] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[8] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @[3] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [7] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  WhileLoop @[2] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  If @[4] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  ProgramCall @[5] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[6] { };
	};
      };
      Program @[4] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[4] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  IfElse @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  NetUpdateView @[9] { };
	};
      };
      Program @[5] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetUpdateView @[1] { };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [4] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	      LayerWriterEl @[3] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @[7] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [9] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[8] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [8] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @[9] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [6] {
	  IfReturn @[0] { };
	  MiscCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MiscCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
    };
    Program_Group @.gp[1] = [7] { 
      Program @[0] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [11] {
	  NetCounterInit @[0] { };
	  MemberAssign @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetDataLoop @[5] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      IfElse @[1] { 
		ProgEl_List @.true_code = [1] {
		  MethodCall @[0] { 
		    ProgArg_List @.meth_args = [0] {
		    };
		  };
		};

		ProgEl_List @.false_code = [0] {
		};
	      };
	    };
	  };
	  IfElse @[6] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  MethodCall @[7] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[8] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[9] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[10] { };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [6] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  WhileLoop @[2] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[4] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[5] { };
	};
      };
      Program @[2] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[4] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  IfElse @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  NetUpdateView @[9] { };
	};
      };
      Program @[3] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetUpdateView @[1] { };
	};
      };
      Program @[4] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [4] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	      LayerWriterEl @[3] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [1] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @[5] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [11] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [8] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
    };
  };

  DataViewer_List @.viewers = [1] {
    MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
   };

      ToolBar_List @.toolbars = [1] {
	ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @[0] { };
     };
};
      };

      FrameViewer_List @.frames = [3] {
	tabBrowseViewer @[0] { };
	PanelViewer @[1] { };
	T3DataViewer @[2] { 
	  T3DataViewFrame_List @.frames = [4] {
	    T3DataViewFrame @[0] { 
	      T3DataView_List @.children = [1] {
		NetView @[0] { 
		  ScaleRange_List @.scale_ranges = [3] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		    ScaleRange @[2] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[1] { 
	      T3DataView_List @.children = [1] {
		GridTableView @[0] { 
		  T3DataView_List @.children = [4] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		    GridColView @[3] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[2] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [8] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[3] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [3] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	  };
	};
      };

      DockViewer_List @.docks = [1] {
	ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @[0] { };
	    UserDataItem @[1] { };
	    UserDataItem @[2] { };
	    UserDataItem @[3] { };
	    UserDataItem @[4] { };
	    UserDataItem @[5] { };
     };
};
      };
    };
  };

  Network_Group @.networks = [1] {
    LeabraNetwork @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
	UserDataItem @[6] { };
	UserDataItem @[7] { };
	UserDataItem @[8] { };
	UserDataItem @[9] { };
	UserDataItem @[10] { };
	UserDataItem @[11] { };
	UserDataItem @[12] { };
	UserDataItem @[13] { };
	UserDataItem @[14] { };
	UserDataItem @[15] { };
	UserDataItem @[16] { };
	UserDataItem @[17] { };
	UserDataItem @[18] { };
   };

      BaseSpec_Group @.specs = [4] {
	LeabraLayerSpec @[0] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraLayerSpec @[0] { 
	      BaseSpec_Group @.children = [0] {
	      };
	    };
	  };
	};
	LeabraConSpec @[1] { 
	  BaseSpec_Group @.children = [2] {
	    LeabraBiasSpec @[0] { 
	      BaseSpec_Group @.children = [0] {
	      };

	      Schedule @.lrate_sched = [0] {
	      };
	    };
	    LeabraConSpec @[1] { 
	      BaseSpec_Group @.children = [0] {
	      };

	      Schedule @.lrate_sched = [0] {
	      };
	    };
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	};
	LeabraUnitSpec @[2] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	};
	FullPrjnSpec @[3] { 
	  BaseSpec_Group @.children = [0] {
	  };
	};
      };

      Layer_Group @.layers = [7] {
	LeabraLayer @[0] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [24] {
	  };
	};
	LeabraLayer @[1] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [40] {
	  };
	};
	LeabraLayer @[2] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [12] {
	  };
	};
	LeabraLayer @[3] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [40] {
	  };
	};
	LeabraLayer @[4] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [24] {
	  };
	};
	LeabraLayer @[5] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [40] {
	  };
	};
	LeabraLayer @[6] { 
	  Projection_Group @.projections = [3] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	  };

	  Unit_Group @.units = [40] {
	  };
	};
      };

      NetViewObj_Group @.view_objs = [0] {
      };
    };
  };
};
LeabraProject .projects[0] {
 name="Project_0";
 desc="


";
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 wiki_url {
  sync=0;
  wiki=;
  url=;
 };
 templates {
  name=;
  el_typ=taBase;
  el_def=0;
 };
 docs {
  name=;
  el_typ=taDoc;
  el_def=0;
  taDoc @[0] {
   name="ChangeLog";
   desc=;
   auto_open=0;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>

<li>Wed Jan 16 19:42:43 2008 thazy <code>family_trees.proj</code><br>

<li>Mon Jan  7 20:24:52 2008 thazy <code>family_trees.proj</code><br>
</ul>
</body>
</html>
";
   html_text="<html>
<head>ChangeLog</head>
<body>
<h1>ChangeLog</h1>
<ul>
<P>
<li>Wed Jan 16 19:42:43 2008 thazy <code>family_trees.proj</code><br>
<P>
<li>Mon Jan  7 20:24:52 2008 thazy <code>family_trees.proj</code><br>
</ul>
</body>
</html>
";
  };
  taDoc @[1] {
   name="ProjectDocs";
   desc=;
   auto_open=1;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head></head>
<body>

= Exploration of a Deep Network: Family Trees =

* GENERAL USAGE NOTE: To start, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open this documentation in a separate window that you can more easily come back to.  Alternatively, you can just always return to this document by clicking on the <code>ProjectDocs</code> tab at the top of the middle panel.

Now, let's explore the case of learning in a deep network using the same ''family trees'' task as O'Reilly (1996b) and Hinton (1986).  The structure of the environment is shown in Figure 6.7 in the text. The network is trained to produce the correct name in response to questions like \"Rob is married to whom?\" These questions are presented by activating one of 24 name units in an ''agent'' input layer (e.g., \"Rob\"), in conjunction with one of 12 units in a ''relation'' input layer (e.g., \"Married'\"), and training the network to produce the correct unit activation over the ''patient'' output layer.

First, notice that the network (displayed in ''family_trees'' tab in the far right panel) has <code>Agent</code> and <code>Relation</code> input layers, and a <code>Patient</code> output layer all at the bottom of the network.  These layers have <em>localist</em> representations of the 24 different people and 12 different relationships, which means that there is no overlap, and thus no overt similarity, in these input patterns between any of the people.  Thus, the <code>Agent_Code</code>, <code>Relation_Code</code>, and <code>Patient_Code</code> hidden layers provide a means for the network to re-represent these localist representations as richer distributed patterns that should facilitate the learning of the mapping by emphasizing relevant distinctions and deemphasizing irrelevant ones.  The central <code>Hidden</code> layer is responsible for performing the mapping between these recoded representations to produce the correct answers.

* Press the [[.T3Tab.ft_1ufg_train]] tab in the right 3d view panel to display the first ten (out of 100) training events in the viewer window, which should help you understand how the task is presented to the network.  (If you wish, you can click on the red arrow to activate selection mode on your cursor and \"grab\" the purple task bar on the right and scroll down to see the other events.) The names of the events in the first column are in the following format: Agent.Relation.Patient, and can be interpreted along the following lines: \"Christo's wife is who?\" \"Penny.\"

Now, let's see how this works with the network itself.  

* Press the [[.T3Tab.family_trees]] tab to display the network again.

* Press the <code>Init</code> (and \"Yes\" to the dialog box query: \"Initialize Network Weights?\") and <code>Step Settle</code> buttons after activating the master [[.PanelTab.ControlPanel]] tab in the middle panel. This will run the network through one <code>LeabraSettle</code> process.

The activations in the network display reflect the minus phase state for the first training event (selected at random from the list of all training events).  NOTE: If you ever find that the network does not display activations, click on the <code>family_trees</code> tab in the middle panel and make sure the <code>Display</code> checkbox is checked.

* Press <code>Step Settle</code> again in the [[.PanelTab.ControlPanel]] to see the plus phase activations for the same event. Note that the <code>Patient</code> layer is now displaying the correct answer. and that all the hidden layers change their activation patterns to reflect this additional information.

The default network is using a combination of Hebbian and GeneRec error-driven learning, with the amount of Hebbian learning set to .01 as reflected by the <code>lmix.hebb</code> parameter in the <code>ControlPanel</code>. (The error-driven component is automatically calculated to 1 - hebb). Let's see how long it takes this network to learn the task.

* Let's view a graph to monitor training.  Press the [[.T3Tab.EpochOutputData]] tab in the right 3d view panel to display the graph. You will notice that this may also change the active tab in the middle panel so you may have to click the [[.PanelTab.ControlPanel]] tab to bring it back up. Press the <code>Init</code> button at the bottom (and answer \"Yes\" to the dialog box query: \"Initialize Network Weights?\"). Then, press <code>Run</code> to allow the network to train on all the events.

As the network trains, the graph displays the error count statistic for training (<code>cnt_err</code>). You can also display the average number of network settling cycles (<code>avg_cycles</code>) by activating the <code>EpochOutputData</code> tab in the middle '''Panels''' frame and toggling <code>On</code> the <code>Y2: avg_cycles</code> flag. It is probably best to leave this off before you continue.

Your network should train in around 40-50 epochs using the initial default parameters.  This may take a few minutes.  You can either watch and wait, or you can instead load the results from a fully trained network.

* If you want to wait for your network to train to completion, you will want to save your weights. After training is done expand the networks->family_trees branch (near bottom) in the left tree browser. Right click on <code>family_trees</code> to display the context menu and scroll down to <code>Object->SaveAs</code> and save the trained network with some personalized descriptive name (e.g., mytrainednetwork.net) --- we will be able to come back and use it later. This saves the network with its trained weights.

* If you instead prefer to load the results from a fully trained network, press <code>Stop</code> in the master [[.PanelTab.ControlPanel]].  To display a trained network's learning curve in the <code>EpochOutputData</code> tab in the right panel, expand the <code>data->OutputData subgroup</code> branch in the left tree panel and click on <code>EpochOutputData</code> to display the table of data in the middle panel.  Now in the middle panel, press the <code>Load Any Data</code>, revealing a dialog window. Click on the ... button next to the file name, and a file browser will appear showing several file names of pre-trained data. Highlight the <code>family_trees_hebb_and_err.epc.dat</code> file and click the <code>Open</code> button to load the data into the <code>EpochOutputData</code> data table. Click on the <code>EpochOutputData</code> tab in the right view frame if it is not already active; the learning curve should automatically display the trained data set. 

This particular network took 41 epochs to learn.  You might note that the <code>EpochOutputData</code> data table goes from 0 to 40.

The 41 epochs it took for the default network to learn the problem is actually relatively rapid learning for a deep network like this one. For example, Figure 6.9 shows a comparison of a typical learning curve in Leabra versus the fastest standard feedforward backpropagation network (BP; for a refresher see Box 5.2: The Backpropagation Algorithm in Chapter 5), which took about 77 epochs to learn and required a very large learning rate of .39 compared to the standard .01 for the Leabra network (O'Reilly, 1996b).

== The Roles of Hebbian Vs. Error-Driven Learning ==

We are not so interested in raw learning speed for its own sake, but more in the facilitation of learning in deep networks from the additional biases or constraints imposed by combining model and task learning.  Figure 6.9 shows that these additional constraints facilitate learning in deep networks; the purely task-driven BP network learns relatively slowly, whereas the Leabra network, with both Hebbian learning and inhibitory competition, learns relatively quickly.  In this exploration (as in the previous one), we will manipulate the contribution of Hebbian learning.  To do this, we can run a network without Hebbian learning and compare the learning times.

* If you want to wait while the network trains, go back to the master [[.PanelTab.ControlPanel]] and set the LearnRule <code>value</code> to <code>PURE_ERR</code>, and <code>Apply</code>.  Then click <code>SetLearnRule</code> and you will see the <code>lmix.hebb</code> change to 0.  Now click <code>Init</code> then <code>Run</code> to train the network using the <code>PURE_ERR</code> values.  This should take around 70-80 epochs or so. 

Again, if you do not want to wait for the network to train, you can just load the results from a fully trained network.

* In this case, press <code>Stop</code> in the [[.PanelTab.ControlPanel]] (if you started the network), then do Load Any Data on the <code>EpochOutputData</code> data table as you did before, and choose <code>family_trees_pure_err.epc.dat</code>.

Hebbian learning clearly facilitates learning in deep networks, as demonstrated by the network taking longer to learn without it (70 epochs in this case compared to 41; repeated runs of the networks with different starting weights substantiate this effect).  Further, kWTA activation constraints play an important facilitatory role in learning as well.  The benefits of kWTA activation constraints are somewhat obscured in comparing the purely error-driven Leabra network with the backpropagation (BP) network shown in Figure 6.9, because of the very high learning rate used for finding the best performance of the BP network.  The benefits of kWTA activation constraints are particularly clear in comparing the purely error-driven Leabra network to a bidirectionally-connected error-driven (GeneRec) network that does not have the kWTA activation constraints, which takes around 300 or more epochs to learn at its fastest (O'Reilly, 1996b).

Now, let's see what pure Hebbian learning can do in this task.

* Select <code>PURE_HEBB</code> for the LearnRule <code>value</code> in the  [[.PanelTab.ControlPanel]] as before (remembering to <code>Apply</code> and <code>SetLearnRule</code>). Now re-run the network (<code>Init</code>, then <code>Run</code>).  

You can <code>Stop</code> the network after 10 epochs or so because this network isn't going to improve at all.  You can see this by loading the <code>EpochOutputData</code> data file for a network trained for 100 epochs:

* As before, do Load Any Data on the <code>EpochOutputData</code> data table and select <code>family_trees_pure_hebb.epc.dat</code>. 

As before, this will load the data in the <code>EpochOutputData</code> data table, and display it graphically in the [[.T3Tab.EpochOutputData]] view in the right view panel.

Although Hebbian model learning is useful for helping error-driven learning, the graph shows that it is simply not capable of learning tasks like this on its own.

We next compare all three cases with each other.

* Load the <code>family_trees_all.epc.dat</code> data table file into EpochOutputData per the instructions above.

The graph view of this has the three runs displayed on top of each other, similar to Figure 6.10 in the text.  You can identify the curves based on what epoch they end on: 100 = <code>PURE_HEBB</code> (all yellow, at the top; no learning); 70 = <code>PURE_ERR</code> (middle curve), and; 41 = <code>HEBB_AND_ERR</code> (bottom left corner). 

<hr>

'''Question 6.3 (a)'''  <em> What do you notice about the general shape of the standard backpropagation (BP) learning curve (SSE over epochs) in Figure 6.9 compared to that of the <code>PURE_ERR</code> Leabra network you just ran?  Pay special attention to the first 30 or so epochs of learning.  '''(b)''' Given that one of the primary differences between these two cases is that the <code>PURE_ERR</code> network has inhibitory competition via the kWTA function, whereas BP does not, speculate about the possible importance of this competition for learning based on these results (also note that the BP network has a <em> much</em> larger learning rate, .39 vs .01).  '''(c)''' Now, compare the <code>PURE_ERR</code> case with the original <code>HEBB_AND_ERR</code> case (i.e., where do the <code>cnt_err</code> learning curves start to diverge, and how is this different from the BP case)?  '''(d)''' What does this suggest about the role of Hebbian learning?  (Hint: Error signals get smaller as the network has learned more.)</em>

<hr>

== Cluster Plot Analysis ==

To get a sense of how learning has shaped the ''transformations'' performed by this network to emphasize relevant similarities, we can do a cluster plot of the hidden unit activity patterns over all the inputs.  Let's do a comparison between the initial clusters and those after learning for the default network.  

* First, press <code>Init</code> on the master [[.PanelTab.ControlPanel]] to reinitialize the weights.  Then, press  [[.programs.ClusterPlot.Init()|Cluster Init]] and [[.programs.ClusterPlot.Run()|Cluster Run]] to generate a cluster plot..

After a bit (it tests all 100 patterns, so be patient), a cluster plot window will appear.  We will compare this cluster plot to one for the trained network.

* Go to the left browser panel and expand the <code>networks</code> tree, then click on <code>family_trees</code> which will display an editing panel in the middle window. Select Object->Load Weights from the menu at the top of that middle panel (you can also do right click and use the context menu in the left window), and then select <code>family_trees_hebb_err.wts</code> (or the network that you saved).  Then press [[.programs.ClusterPlot.Run()|Cluster Run]].

Your results should look something like Figure 6.11 in the text. There are many ways in which people who appear together can be justifiably related, so you may think there is some sensibility to the initial plot.  However, the final plot has a much more sensible structure in terms of the overall nationality difference coming out as the two largest clusters, and individuals within a given generation tending to be grouped together within these overall clusters.  The network is able to solve the task by transforming the patterns in this way.

* To leave this project, click <code>File->Close Project</code>.  To continue on  to the next simulation, select a new project <code>File->Open Project...</code> in the <code>.viewers[0](root) - root</code> window. Or, if you wish to stop now, quit by selecting   <code>File->Quit</code>.


</body>
</html>
";
   html_text="<html><head></head><body>
<p>
</p><h1> Exploration of a Deep Network: Family Trees </h1>
<p>
</p><ul><li> GENERAL USAGE NOTE: To start, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open this documentation in a separate window that you can more easily come back to.  Alternatively, you can just always return to this document by clicking on the <code>ProjectDocs</code> tab at the top of the middle panel.
</li></ul>
Now, let's explore the case of learning in a deep network using the same  <i>family trees</i>  task as O'Reilly (1996b) and Hinton (1986).  The structure of the environment is shown in Figure 6.7 in the text. The network is trained to produce the correct name in response to questions like \"Rob is married to whom?\" These questions are presented by activating one of 24 name units in an  <i>agent</i>  input layer (e.g., \"Rob\"), in conjunction with one of 12 units in a  <i>relation</i>  input layer (e.g., \"Married'\"), and training the network to produce the correct unit activation over the  <i>patient</i>  output layer.
<p>
First, notice that the network (displayed in  <i>family_trees</i>  tab in the far right panel) has <code>Agent</code> and <code>Relation</code> input layers, and a <code>Patient</code> output layer all at the bottom of the network.  These layers have <em>localist</em> representations of the 24 different people and 12 different relationships, which means that there is no overlap, and thus no overt similarity, in these input patterns between any of the people.  Thus, the <code>Agent_Code</code>, <code>Relation_Code</code>, and <code>Patient_Code</code> hidden layers provide a means for the network to re-represent these localist representations as richer distributed patterns that should facilitate the learning of the mapping by emphasizing relevant distinctions and deemphasizing irrelevant ones.  The central <code>Hidden</code> layer is responsible for performing the mapping between these recoded representations to produce the correct answers.
</p><p>
</p><ul><li> Press the <a href=\"ta:.T3Tab.ft_1ufg_train\">ft_1ufg_train</a> tab in the right 3d view panel to display the first ten (out of 100) training events in the viewer window, which should help you understand how the task is presented to the network.  (If you wish, you can click on the red arrow to activate selection mode on your cursor and \"grab\" the purple task bar on the right and scroll down to see the other events.) The names of the events in the first column are in the following format: Agent.Relation.Patient, and can be interpreted along the following lines: \"Christo's wife is who?\" \"Penny.\"
</li></ul>
Now, let's see how this works with the network itself.  
<p>
</p><ul><li> Press the <a href=\"ta:.T3Tab.family_trees\">family_trees</a> tab to display the network again.
</li></ul>
<ul><li> Press the <code>Init</code> (and \"Yes\" to the dialog box query: \"Initialize Network Weights?\") and <code>Step Settle</code> buttons after activating the master <a href=\"ta:.PanelTab.ControlPanel\">ControlPanel</a> tab in the middle panel. This will run the network through one <code>LeabraSettle</code> process.
</li></ul>
The activations in the network display reflect the minus phase state for the first training event (selected at random from the list of all training events).  NOTE: If you ever find that the network does not display activations, click on the <code>family_trees</code> tab in the middle panel and make sure the <code>Display</code> checkbox is checked.
<p>
</p><ul><li> Press <code>Step Settle</code> again in the <a href=\"ta:.PanelTab.ControlPanel\">ControlPanel</a> to see the plus phase activations for the same event. Note that the <code>Patient</code> layer is now displaying the correct answer. and that all the hidden layers change their activation patterns to reflect this additional information.
</li></ul>
The default network is using a combination of Hebbian and GeneRec error-driven learning, with the amount of Hebbian learning set to .01 as reflected by the <code>lmix.hebb</code> parameter in the <code>ControlPanel</code>. (The error-driven component is automatically calculated to 1 - hebb). Let's see how long it takes this network to learn the task.
<p>
</p><ul><li> Let's view a graph to monitor training.  Press the <a href=\"ta:.T3Tab.EpochOutputData\">EpochOutputData</a> tab in the right 3d view panel to display the graph. You will notice that this may also change the active tab in the middle panel so you may have to click the <a href=\"ta:.PanelTab.ControlPanel\">ControlPanel</a> tab to bring it back up. Press the <code>Init</code> button at the bottom (and answer \"Yes\" to the dialog box query: \"Initialize Network Weights?\"). Then, press <code>Run</code> to allow the network to train on all the events.
</li></ul>
As the network trains, the graph displays the error count statistic for training (<code>cnt_err</code>). You can also display the average number of network settling cycles (<code>avg_cycles</code>) by activating the <code>EpochOutputData</code> tab in the middle  <b>Panels</b>  frame and toggling <code>On</code> the <code>Y2: avg_cycles</code> flag. It is probably best to leave this off before you continue.
<p>
Your network should train in around 40-50 epochs using the initial default parameters.  This may take a few minutes.  You can either watch and wait, or you can instead load the results from a fully trained network.
</p><p>
</p><ul><li> If you want to wait for your network to train to completion, you will want to save your weights. After training is done expand the networks-&gt;family_trees branch (near bottom) in the left tree browser. Right click on <code>family_trees</code> to display the context menu and scroll down to <code>Object-&gt;SaveAs</code> and save the trained network with some personalized descriptive name (e.g., mytrainednetwork.net) --- we will be able to come back and use it later. This saves the network with its trained weights.
</li></ul>
<ul><li> If you instead prefer to load the results from a fully trained network, press <code>Stop</code> in the master <a href=\"ta:.PanelTab.ControlPanel\">ControlPanel</a>.  To display a trained network's learning curve in the <code>EpochOutputData</code> tab in the right panel, expand the <code>data-&gt;OutputData subgroup</code> branch in the left tree panel and click on <code>EpochOutputData</code> to display the table of data in the middle panel.  Now in the middle panel, press the <code>Load Any Data</code>, revealing a dialog window. Click on the ... button next to the file name, and a file browser will appear showing several file names of pre-trained data. Highlight the <code>family_trees_hebb_and_err.epc.dat</code> file and click the <code>Open</code> button to load the data into the <code>EpochOutputData</code> data table. Click on the <code>EpochOutputData</code> tab in the right view frame if it is not already active; the learning curve should automatically display the trained data set. 
</li></ul>
This particular network took 41 epochs to learn.  You might note that the <code>EpochOutputData</code> data table goes from 0 to 40.
<p>
The 41 epochs it took for the default network to learn the problem is actually relatively rapid learning for a deep network like this one. For example, Figure 6.9 shows a comparison of a typical learning curve in Leabra versus the fastest standard feedforward backpropagation network (BP; for a refresher see Box 5.2: The Backpropagation Algorithm in Chapter 5), which took about 77 epochs to learn and required a very large learning rate of .39 compared to the standard .01 for the Leabra network (O'Reilly, 1996b).
</p><p>
</p><h2> The Roles of Hebbian Vs. Error-Driven Learning </h2>
<p>
We are not so interested in raw learning speed for its own sake, but more in the facilitation of learning in deep networks from the additional biases or constraints imposed by combining model and task learning.  Figure 6.9 shows that these additional constraints facilitate learning in deep networks; the purely task-driven BP network learns relatively slowly, whereas the Leabra network, with both Hebbian learning and inhibitory competition, learns relatively quickly.  In this exploration (as in the previous one), we will manipulate the contribution of Hebbian learning.  To do this, we can run a network without Hebbian learning and compare the learning times.
</p><p>
</p><ul><li> If you want to wait while the network trains, go back to the master <a href=\"ta:.PanelTab.ControlPanel\">ControlPanel</a> and set the LearnRule <code>value</code> to <code>PURE_ERR</code>, and <code>Apply</code>.  Then click <code>SetLearnRule</code> and you will see the <code>lmix.hebb</code> change to 0.  Now click <code>Init</code> then <code>Run</code> to train the network using the <code>PURE_ERR</code> values.  This should take around 70-80 epochs or so. 
</li></ul>
Again, if you do not want to wait for the network to train, you can just load the results from a fully trained network.
<p>
</p><ul><li> In this case, press <code>Stop</code> in the <a href=\"ta:.PanelTab.ControlPanel\">ControlPanel</a> (if you started the network), then do Load Any Data on the <code>EpochOutputData</code> data table as you did before, and choose <code>family_trees_pure_err.epc.dat</code>.
</li></ul>
Hebbian learning clearly facilitates learning in deep networks, as demonstrated by the network taking longer to learn without it (70 epochs in this case compared to 41; repeated runs of the networks with different starting weights substantiate this effect).  Further, kWTA activation constraints play an important facilitatory role in learning as well.  The benefits of kWTA activation constraints are somewhat obscured in comparing the purely error-driven Leabra network with the backpropagation (BP) network shown in Figure 6.9, because of the very high learning rate used for finding the best performance of the BP network.  The benefits of kWTA activation constraints are particularly clear in comparing the purely error-driven Leabra network to a bidirectionally-connected error-driven (GeneRec) network that does not have the kWTA activation constraints, which takes around 300 or more epochs to learn at its fastest (O'Reilly, 1996b).
<p>
Now, let's see what pure Hebbian learning can do in this task.
</p><p>
</p><ul><li> Select <code>PURE_HEBB</code> for the LearnRule <code>value</code> in the  <a href=\"ta:.PanelTab.ControlPanel\">ControlPanel</a> as before (remembering to <code>Apply</code> and <code>SetLearnRule</code>). Now re-run the network (<code>Init</code>, then <code>Run</code>).  
</li></ul>
You can <code>Stop</code> the network after 10 epochs or so because this network isn't going to improve at all.  You can see this by loading the <code>EpochOutputData</code> data file for a network trained for 100 epochs:
<p>
</p><ul><li> As before, do Load Any Data on the <code>EpochOutputData</code> data table and select <code>family_trees_pure_hebb.epc.dat</code>. 
</li></ul>
As before, this will load the data in the <code>EpochOutputData</code> data table, and display it graphically in the <a href=\"ta:.T3Tab.EpochOutputData\">EpochOutputData</a> view in the right view panel.
<p>
Although Hebbian model learning is useful for helping error-driven learning, the graph shows that it is simply not capable of learning tasks like this on its own.
</p><p>
We next compare all three cases with each other.
</p><p>
</p><ul><li> Load the <code>family_trees_all.epc.dat</code> data table file into EpochOutputData per the instructions above.
</li></ul>
The graph view of this has the three runs displayed on top of each other, similar to Figure 6.10 in the text.  You can identify the curves based on what epoch they end on: 100 = <code>PURE_HEBB</code> (all yellow, at the top; no learning); 70 = <code>PURE_ERR</code> (middle curve), and; 41 = <code>HEBB_AND_ERR</code> (bottom left corner). 
<p>
</p><hr>
<p>
 <b>Question 6.3 (a)</b>   <em> What do you notice about the general shape of the standard backpropagation (BP) learning curve (SSE over epochs) in Figure 6.9 compared to that of the <code>PURE_ERR</code> Leabra network you just ran?  Pay special attention to the first 30 or so epochs of learning.   <b>(b)</b>  Given that one of the primary differences between these two cases is that the <code>PURE_ERR</code> network has inhibitory competition via the kWTA function, whereas BP does not, speculate about the possible importance of this competition for learning based on these results (also note that the BP network has a <em> much</em> larger learning rate, .39 vs .01).   <b>(c)</b>  Now, compare the <code>PURE_ERR</code> case with the original <code>HEBB_AND_ERR</code> case (i.e., where do the <code>cnt_err</code> learning curves start to diverge, and how is this different from the BP case)?   <b>(d)</b>  What does this suggest about the role of Hebbian learning?  (Hint: Error signals get smaller as the network has learned more.)</em>
</p><p>
</p><hr>
<p>
</p><h2> Cluster Plot Analysis </h2>
<p>
To get a sense of how learning has shaped the  <i>transformations</i>  performed by this network to emphasize relevant similarities, we can do a cluster plot of the hidden unit activity patterns over all the inputs.  Let's do a comparison between the initial clusters and those after learning for the default network.  
</p><p>
</p><ul><li> First, press <code>Init</code> on the master <a href=\"ta:.PanelTab.ControlPanel\">ControlPanel</a> to reinitialize the weights.  Then, press  <a href=\"ta:.programs.ClusterPlot.Init()\">Cluster Init</a> and <a href=\"ta:.programs.ClusterPlot.Run()\">Cluster Run</a> to generate a cluster plot..
</li></ul>
After a bit (it tests all 100 patterns, so be patient), a cluster plot window will appear.  We will compare this cluster plot to one for the trained network.
<p>
</p><ul><li> Go to the left browser panel and expand the <code>networks</code> tree, then click on <code>family_trees</code> which will display an editing panel in the middle window. Select Object-&gt;Load Weights from the menu at the top of that middle panel (you can also do right click and use the context menu in the left window), and then select <code>family_trees_hebb_err.wts</code> (or the network that you saved).  Then press <a href=\"ta:.programs.ClusterPlot.Run()\">Cluster Run</a>.
</li></ul>
Your results should look something like Figure 6.11 in the text. There are many ways in which people who appear together can be justifiably related, so you may think there is some sensibility to the initial plot.  However, the final plot has a much more sensible structure in terms of the overall nationality difference coming out as the two largest clusters, and individuals within a given generation tending to be grouped together within these overall clusters.  The network is able to solve the task by transforming the patterns in this way.
<p>
</p><ul><li> To leave this project, click <code>File-&gt;Close Project</code>.  To continue on  to the next simulation, select a new project <code>File-&gt;Open Project...</code> in the <code>.viewers[0](root) - root</code> window. Or, if you wish to stop now, quit by selecting   <code>File-&gt;Quit</code>.
</li></ul>
<p>


</p></body></html>";
  };
  taDoc @[2] {
   name="WikiDoc";
   desc=;
   auto_open=0;
   web_doc=1;
   wiki="CCN";
   url="CECN1_Family_Trees";
   full_url="http://grey.colorado.edu/CompCogNeuro/index.php/CECN1_Family_Trees";
   text_size=1;
   text="<html>
<head></head>
<body>
== Enter Title Here ==
</body>
</html>
";
   html_text="<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\" dir=\"ltr\"><head>
		<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">
		<meta http-equiv=\"Content-Style-Type\" content=\"text/css\">
		<meta name=\"generator\" content=\"MediaWiki 1.16alpha-wmf\">
		<meta name=\"keywords\" content=\"CECN1 Family Trees,CECN1 Projects,Emergent,.T3Tab.ft 1ufg train,.T3Tab.family trees,.PanelTab.ControlPanel,.T3Tab.EpochOutputData,.programs.ClusterPlot.Init(),.programs.ClusterPlot.Run()\">
		<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
		<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/CompCogNeuro/opensearch_desc.php\" title=\"Computational Cognitive Neuroscience Wiki (en)\">
		<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Computational Cognitive Neuroscience Wiki RSS Feed\" href=\"/CompCogNeuro/index.php?title=Special:RecentChanges&amp;feed=rss\">
		<link rel=\"alternate\" type=\"application/atom+xml\" title=\"Computational Cognitive Neuroscience Wiki Atom Feed\" href=\"/CompCogNeuro/index.php?title=Special:RecentChanges&amp;feed=atom\">
		<title>CECN1 Family Trees - Computational Cognitive Neuroscience Wiki</title>
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/common/shared.css?233z\" type=\"text/css\" media=\"screen\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/common/commonPrint.css?233z\" type=\"text/css\" media=\"print\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/main.css?233z\" type=\"text/css\" media=\"screen\">
		<!--[if lt IE 5.5000]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE50Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<!--[if IE 5.5000]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE55Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<!--[if IE 6]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE60Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<!--[if IE 7]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE70Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000\" type=\"text/css\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000\" type=\"text/css\" media=\"print\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=MediaWiki:monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000\" type=\"text/css\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=-&amp;action=raw&amp;maxage=18000&amp;gen=css\" type=\"text/css\">
		<!--[if lt IE 7]><script type=\"text/javascript\" src=\"/CompCogNeuro/skins/common/IEFixes.js?233z\"></script>
		<meta http-equiv=\"imagetoolbar\" content=\"no\" /><![endif]-->

		<script type=\"text/javascript\">/*<![CDATA[*/
		var skin = \"monobook\";
		var stylepath = \"/CompCogNeuro/skins\";
		var wgArticlePath = \"/CompCogNeuro/index.php/$1\";
		var wgScriptPath = \"/CompCogNeuro\";
		var wgScript = \"/CompCogNeuro/index.php\";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = \"http://grey.colorado.edu\";
		var wgCanonicalNamespace = \"\";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = \"CECN1_Family_Trees\";
		var wgTitle = \"CECN1 Family Trees\";
		var wgAction = \"view\";
		var wgArticleId = \"73\";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = \"en\";
		var wgContentLanguage = \"en\";
		var wgBreakFrames = false;
		var wgCurRevisionId = 406;
		var wgVersion = \"1.16alpha-wmf\";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = [\"\", \"\"];
		var wgDigitTransformTable = [\"\", \"\"];
		var wgMainPageTitle = \"Main Page\";
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		var wgFCKEditorDir = \"extensions/FCKeditor/fckeditor/\";
		var wgFCKEditorExtDir = \"extensions/FCKeditor\";
		var wgFCKEditorToolbarSet = \"Wiki\";
		var wgFCKEditorHeight = \"0\";
		/*]]>*/</script>

		<script type=\"text/javascript\" src=\"/CompCogNeuro/skins/common/wikibits.js?233z\"><!-- wikibits js --></script><style type=\"text/css\">@import \"/CompCogNeuro/skins/monobook/KHTMLFixes.css\";</style>
		<!-- Head Scripts -->
		<script type=\"text/javascript\" src=\"/CompCogNeuro/skins/common/ajax.js?233z\"></script>
		<script type=\"text/javascript\" src=\"/CompCogNeuro/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook\"><!-- site js --></script>
	<style type=\"text/css\">@import \"/CompCogNeuro/extensions/Collection/collection/Gadget-navpop.css?2\";</style></head><body class=\"mediawiki ltr ns-0 ns-subject page-CECN1_Family_Trees skin-monobook\">
	<div id=\"globalWrapper\">
		<div id=\"column-content\">
	<div id=\"content\">
		<a name=\"top\" id=\"top\"></a>
				<h1 id=\"firstHeading\" class=\"firstHeading\">CECN1 Family Trees</h1>
		<div id=\"bodyContent\">
			<h3 id=\"siteSub\">From Computational Cognitive Neuroscience Wiki</h3>
			<div id=\"contentSub\"></div>
									<div id=\"jump-to-nav\">Jump to: <a href=\"#column-one\">navigation</a>, <a href=\"#searchInput\">search</a></div>			<!-- start content -->
			<table id=\"toc\" class=\"toc\" summary=\"Contents\"><tbody><tr><td><div id=\"toctitle\"><h2>Contents</h2> <span class=\"toctoggle\">[<a id=\"togglelink\" class=\"internal\" href=\"javascript:toggleToc()\">hide</a>]</span></div>
<ul>
<li class=\"toclevel-1\"><a href=\"#Family_Trees:_Learning_in_Deep_Networks\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Family Trees: Learning in Deep Networks</span></a></li>
<li class=\"toclevel-1\"><a href=\"#Project_Documentation\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Project Documentation</span></a>
<ul>
<li class=\"toclevel-2\"><a href=\"#The_Roles_of_Hebbian_Vs._Error-Driven_Learning\"><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">The Roles of Hebbian Vs. Error-Driven Learning</span></a></li>
<li class=\"toclevel-2\"><a href=\"#Cluster_Plot_Analysis\"><span class=\"tocnumber\">2.2</span> <span class=\"toctext\">Cluster Plot Analysis</span></a></li>
</ul>
</li>
</ul>
</td></tr></tbody></table><script type=\"text/javascript\"> if (window.showTocToggle) { var tocShowText = \"show\"; var tocHideText = \"hide\"; showTocToggle(); } </script>
<a name=\"Family_Trees:_Learning_in_Deep_Networks\" id=\"Family_Trees:_Learning_in_Deep_Networks\"></a><h1> <span class=\"mw-headline\"> Family Trees: Learning in Deep Networks </span></h1>
<ul><li> The project file: <a href=\"/mediawiki/sites/CompCogNeuro/images/a/a6/family_trees.proj\" class=\"internal\" title=\"family trees.proj\">family_trees.proj</a> (click and Save As to download, then open in <a href=\"/CompCogNeuro/index.php/Emergent\" title=\"Emergent\">Emergent</a>)
</li><li> Additional files for pre-trained weights and epoch data (recommended):
<ul><li> <a href=\"/mediawiki/sites/CompCogNeuro/images/1/16/family_trees_hebb_err.epc.dat\" class=\"internal\" title=\"family trees hebb err.epc.dat\">family_trees_hebb_err.epc.dat</a>
</li><li> <a href=\"/mediawiki/sites/CompCogNeuro/images/f/f6/family_trees_hebb_err.wts\" class=\"internal\" title=\"family trees hebb err.wts\">family_trees_hebb_err.wts</a>
</li><li> <a href=\"/mediawiki/sites/CompCogNeuro/images/4/47/family_trees_pure_err.epc.dat\" class=\"internal\" title=\"family trees pure err.epc.dat\">family_trees_pure_err.epc.dat</a>
</li><li> <a href=\"/mediawiki/sites/CompCogNeuro/images/d/dd/family_trees_pure_err.wts\" class=\"internal\" title=\"family trees pure err.wts\">family_trees_pure_err.wts</a>
</li><li> <a href=\"/mediawiki/sites/CompCogNeuro/images/6/6e/family_trees_pure_hebb.epc.dat\" class=\"internal\" title=\"family trees pure hebb.epc.dat\">family_trees_pure_hebb.epc.dat</a>
</li><li> <a href=\"/mediawiki/sites/CompCogNeuro/images/6/67/family_trees_all.epc.dat\" class=\"internal\" title=\"family trees all.epc.dat\">family_trees_all.epc.dat</a>
</li></ul>
</li></ul>
<p>Back to <a href=\"/CompCogNeuro/index.php/CECN1_Projects\" title=\"CECN1 Projects\">CECN1 Projects</a>
</p>
<a name=\"Project_Documentation\" id=\"Project_Documentation\"></a><h1> <span class=\"mw-headline\"> Project Documentation </span></h1>
<p>(note: this is a literal copy from the simulation documentation -- it contains links that will not work within the wiki)
</p>
<ul><li> GENERAL USAGE NOTE: To start, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open this documentation in a separate window that you can more easily come back to.  Alternatively, you can just always return to this document by clicking on the <code>ProjectDocs</code> tab at the top of the middle panel.
</li></ul>
<p>Now, let's explore the case of learning in a deep network using the same <i>family trees</i> task as O'Reilly (1996b) and Hinton (1986).  The structure of the environment is shown in Figure 6.7 in the text. The network is trained to produce the correct name in response to questions like \"Rob is married to whom?\" These questions are presented by activating one of 24 name units in an <i>agent</i> input layer (e.g., \"Rob\"), in conjunction with one of 12 units in a <i>relation</i> input layer (e.g., \"Married'\"), and training the network to produce the correct unit activation over the <i>patient</i> output layer.
</p><p>First, notice that the network (displayed in <i>family_trees</i> tab in the far right panel) has <code>Agent</code> and <code>Relation</code> input layers, and a <code>Patient</code> output layer all at the bottom of the network.  These layers have <em>localist</em> representations of the 24 different people and 12 different relationships, which means that there is no overlap, and thus no overt similarity, in these input patterns between any of the people.  Thus, the <code>Agent_Code</code>, <code>Relation_Code</code>, and <code>Patient_Code</code> hidden layers provide a means for the network to re-represent these localist representations as richer distributed patterns that should facilitate the learning of the mapping by emphasizing relevant distinctions and deemphasizing irrelevant ones.  The central <code>Hidden</code> layer is responsible for performing the mapping between these recoded representations to produce the correct answers.
</p>
<ul><li> Press the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.ft_1ufg_train&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.ft 1ufg train (page does not exist)\">.T3Tab.ft_1ufg_train</a> tab in the right 3d view panel to display the first ten (out of 100) training events in the viewer window, which should help you understand how the task is presented to the network.  (If you wish, you can click on the red arrow to activate selection mode on your cursor and \"grab\" the purple task bar on the right and scroll down to see the other events.) The names of the events in the first column are in the following format: Agent.Relation.Patient, and can be interpreted along the following lines: \"Christo's wife is who?\" \"Penny.\"
</li></ul>
<p>Now, let's see how this works with the network itself.  
</p>
<ul><li> Press the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.family_trees&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.family trees (page does not exist)\">.T3Tab.family_trees</a> tab to display the network again.
</li></ul>
<ul><li> Press the <code>Init</code> (and \"Yes\" to the dialog box query: \"Initialize Network Weights?\") and <code>Step</code> buttons after activating the master <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\">.PanelTab.ControlPanel</a> tab in the middle panel. This will run the network through one <code>LeabraSettle</code> process.
</li></ul>
<p>The activations in the network display reflect the minus phase state for the first training event (selected at random from the list of all training events).  NOTE: If you ever find that the network does not display activations, click on the <code>family_trees</code> tab in the middle panel and make sure the <code>Display</code> checkbox is checked.
</p>
<ul><li> Press <code>Step</code> again in the <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\">.PanelTab.ControlPanel</a> to see the plus phase activations for the same event. Note that the <code>Patient</code> layer is now displaying the correct answer. and that all the hidden layers change their activation patterns to reflect this additional information.
</li></ul>
<p>The default network is using a combination of Hebbian and GeneRec error-driven learning, with the amount of Hebbian learning set to .01 as reflected by the <code>lmix.hebb</code> parameter in the <code>ControlPanel</code>. (The error-driven component is automatically calculated to 1 - hebb). Let's see how long it takes this network to learn the task.
</p>
<ul><li> Let's view a graph to monitor training.  Press the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.EpochOutputData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.EpochOutputData (page does not exist)\">.T3Tab.EpochOutputData</a> tab in the right 3d view panel to display the graph. You will notice that this will also change the active tab in the middle panel so you will have to click the <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\">.PanelTab.ControlPanel</a> tab to bring it back up. Press the <code>Init</code> button at the bottom (and answer \"Yes\" to the dialog box query: \"Initialize Network Weights?\"). Then, press <code>Run</code> to allow the network to train on all the events.
</li></ul>
<p>As the network trains, the graph displays the error count statistic for training (<code>cnt_err</code>). You can also display the average number of network settling cycles (<code>avg_cycles</code>) by activating the <code>EpochOutputData</code> tab in the middle <b>Panels</b> frame and toggling <code>On</code> the <code>Y2: avg_cycles</code> flag. It is probably best to leave this off before you continue.
</p><p>Your network should train in around 40-50 epochs using the initial default parameters.  This may take a few minutes.  You can either watch and wait, or you can instead load the results from a fully trained network.
</p>
<ul><li> If you want to wait for your network to train to completion, after training is done expand the <code>networks-&gt;family_trees</code> branch (near bottom) in the left tree browser. Right click on <code>family_trees</code> to display the context menu and scroll down to <code>Object-&gt;SaveAs</code> and save the trained network with some personalized descriptive name (e.g., mytrainednetwork.net) --- we will be able to come back and use it later. This saves the network with its trained weights.
</li></ul>
<ul><li> If you instead prefer to load the results from a fully trained network, press <code>Stop</code> in the master <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\">.PanelTab.ControlPanel</a>.  To display a trained network's learning curve in the <code>EpochOutputData</code> tab in the right panel, expand the <code>data-&gt;OutputData subgroup</code> branch in the left tree panel and click on <code>EpochOutputData</code> to display the table of data in the middle panel.  Then select <code>Object-&gt;Load_Data</code>, revealing a dialog window. Click the reset_first button on, to remove any existing data in the table, but don't enter a file name -- just click <code>Ok</code>, and a file browser will appear showing several file names of pre-trained data. Highlight the <code>family_trees.hebb_and_err.epc.dat</code> file and click the <code>Open</code> button to load the data into the <code>EpochOutputData</code> data table. Click on the <code>EpochOutputData</code> tab in the right view frame if it is not already active; the learning curve should automatically display the trained data set. 
</li></ul>
<p>This particular network took 41 epochs to learn.  You might note that the <code>EpochOutputData</code> data table goes from 0 to 40.
</p><p>The 41 epochs it took for the default network to learn the problem is actually relatively rapid learning for a deep network like this one. For example, Figure 6.9 shows a comparison of a typical learning curve in Leabra versus the fastest standard feedforward backpropagation network (BP; for a refresher see Box 5.2: The Backpropagation Algorithm in Chapter 5), which took about 77 epochs to learn and required a very large learning rate of .39 compared to the standard .01 for the Leabra network (O'Reilly, 1996b).
</p>
<a name=\"The_Roles_of_Hebbian_Vs._Error-Driven_Learning\" id=\"The_Roles_of_Hebbian_Vs._Error-Driven_Learning\"></a><h2> <span class=\"mw-headline\"> The Roles of Hebbian Vs. Error-Driven Learning </span></h2>
<p>We are not so interested in raw learning speed for its own sake, but more in the facilitation of learning in deep networks from the additional biases or constraints imposed by combining model and task learning.  Figure 6.9 shows that these additional constraints facilitate learning in deep networks; the purely task-driven BP network learns relatively slowly, whereas the Leabra network, with both Hebbian learning and inhibitory competition, learns relatively quickly.  In this exploration (as in the previous one), we will manipulate the contribution of Hebbian learning.  To do this, we can run a network without Hebbian learning and compare the learning times.
</p>
<ul><li> If you want to wait while the network trains, go back to the master <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\">.PanelTab.ControlPanel</a> and set the LearnRule <code>value</code> to <code>PURE_ERR</code>, and <code>Apply</code>.  Then click <code>SetLearnRule</code> and you will see the <code>lmix.hebb</code> change to 0.  Now click <code>Init</code> then <code>Run</code> to train the network using the <code>PURE_ERR</code> values.  This should take around 70-80 epochs or so. 
</li></ul>
<p>Again, if you do not want to wait for the network to train, you can just load the results from a fully trained network.
</p>
<ul><li> In this case, press <code>Stop</code> in the <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\">.PanelTab.ControlPanel</a> (if you started the network), then do  <code>Object-&gt;Load_Data</code> on the <code>EpochOutputData</code> data table again, and choose <code>family_trees.pure_err.epc.dat</code> (ensure that reset first is checked on).
</li></ul>
<p>Hebbian learning clearly facilitates learning in deep networks, as demonstrated by the network taking longer to learn without it (70 epochs in this case compared to 41; repeated runs of the networks with different starting weights substantiate this effect).  Further, kWTA activation constraints play an important facilitatory role in learning as well.  The benefits of kWTA activation constraints are somewhat obscured in comparing the purely error-driven Leabra network with the backpropagation (BP) network shown in Figure 6.9, because of the very high learning rate used for finding the best performance of the BP network.  The benefits of kWTA activation constraints are particularly clear in comparing the purely error-driven Leabra network to a bidirectionally-connected error-driven (GeneRec) network that does not have the kWTA activation constraints, which takes around 300 or more epochs to learn at its fastest (O'Reilly, 1996b).
</p><p>Now, let's see what pure Hebbian learning can do in this task.
</p>
<ul><li> Select <code>PURE_HEBB</code> for the LearnRule <code>value</code> in the  <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\">.PanelTab.ControlPanel</a> as before (remembering to <code>Apply</code> and <code>SetLearnRule</code>). Now re-run the network (<code>Init</code>, then <code>Run</code>).  
</li></ul>
<p>You can <code>Stop</code> the network after 10 epochs or so because this network isn't going to improve at all.  You can see this by loading the <code>EpochOutputData</code> data file for a network trained for 100 epochs:
</p>
<ul><li> As before, do <code>Object-&gt;Load_Data</code> on the <code>EpochOutputData</code> data table, make sure reset first is clicked, and then <code>Ok</code> to display the list of files. Select <code>family_trees_pure_hebb.epc.dat</code>. 
</li></ul>
<p>As before, this will load the data in the <code>EpochOutputData</code> data table, and display it graphically in the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.EpochOutputData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.EpochOutputData (page does not exist)\">.T3Tab.EpochOutputData</a> view in the right view panel.
</p><p>Although Hebbian model learning is useful for helping error-driven learning, the graph shows that it is simply not capable of learning tasks like this on its own.
</p><p>We next compare all three cases with each other.
</p>
<ul><li> Load the <code>family_trees_all.epc.dat</code> data table file into EpochOutputData per the instructions above.
</li></ul>
<p>The graph view of this has the three runs displayed on top of each other, similar to Figure 6.10 in the text.  You can identify the curves based on what epoch they end on: 100 = <code>PURE_HEBB</code> (all yellow, at the top; no learning); 70 = <code>PURE_ERR</code> (middle curve), and; 41 = <code>HEBB_AND_ERR</code> (bottom left corner). 
</p>
<hr>
<p><b>Question 6.3 (a)</b>  <em> What do you notice about the general shape of the standard backpropagation (BP) learning curve (SSE over epochs) in Figure 6.9 compared to that of the <code>PURE_ERR</code> Leabra network you just ran?  Pay special attention to the first 30 or so epochs of learning.  <b>(b)</b> Given that one of the primary differences between these two cases is that the <code>PURE_ERR</code> network has inhibitory competition via the kWTA function, whereas BP does not, speculate about the possible importance of this competition for learning based on these results (also note that the BP network has a <i>much</i> larger learning rate, .39 vs .01).  <b>(c)</b> Now, compare the <code>PURE_ERR</code> case with the original <code>HEBB_AND_ERR</code> case (i.e., where do the <code>cnt_err</code> learning curves start to diverge, and how is this different from the BP case)?  <b>(d)</b> What does this suggest about the role of Hebbian learning?  (Hint: Error signals get smaller as the network has learned more.)</em>
</p>
<hr>
<a name=\"Cluster_Plot_Analysis\" id=\"Cluster_Plot_Analysis\"></a><h2> <span class=\"mw-headline\"> Cluster Plot Analysis </span></h2>
<p>To get a sense of how learning has shaped the <i>transformations</i> performed by this network to emphasize relevant similarities, we can do a cluster plot of the hidden unit activity patterns over all the inputs.  Let's do a comparison between the initial clusters and those after learning for the default network.  
</p>
<ul><li> First, press <code>Init</code> on the master <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\">.PanelTab.ControlPanel</a> to reinitialize the weights.  Then, press  <a href=\"/CompCogNeuro/index.php?title=.programs.ClusterPlot.Init()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.ClusterPlot.Init() (page does not exist)\">Cluster Init</a> and <a href=\"/CompCogNeuro/index.php?title=.programs.ClusterPlot.Run()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.ClusterPlot.Run() (page does not exist)\">Cluster Run</a> to generate a cluster plot..
</li></ul>
<p>After a bit (it tests all 100 patterns, so be patient), a cluster plot window will appear.  We will compare this cluster plot to one for the trained network.
</p>
<ul><li> Go to the left browser panel and expand the <code>networks</code> tree, then click on <code>family_trees</code> and select <code>Object-&gt;Load Weights</code> from the menu (can also do right click and use the context menu), and then select <code>family_trees_hebb_and_err.wts</code> (or the network that you saved).  Then press <a href=\"/CompCogNeuro/index.php?title=.programs.ClusterPlot.Run()&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".programs.ClusterPlot.Run() (page does not exist)\">Cluster Run</a>.
</li></ul>
<p>Your results should look something like Figure 6.11 in the text. There are many ways in which people who appear together can be justifiably related, so you may think there is some sensibility to the initial plot.  However, the final plot has a much more sensible structure in terms of the overall nationality difference coming out as the two largest clusters, and individuals within a given generation tending to be grouped together within these overall clusters.  The network is able to solve the task by transforming the patterns in this way.
</p>
<ul><li> To leave this project, click <code>File-&gt;Close Project</code>.  To continue on  to the next simulation, select a new project <code>File-&gt;Open Project...</code> in the <code>.viewers[0](root) - root</code> window. Or, if you wish to stop now, quit by selecting   <code>File-&gt;Quit</code>.
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 5/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key compcogneuro:pcache:idhash:73-0!1!0!!en!2!edit=0 and timestamp 20090904080935 -->
<div class=\"printfooter\">
Retrieved from \"<a href=\"http://grey.colorado.edu/CompCogNeuro/index.php/CECN1_Family_Trees\">http://grey.colorado.edu/CompCogNeuro/index.php/CECN1_Family_Trees</a>\"</div>
						<!-- end content -->
						<div class=\"visualClear\"></div>
		</div>
	</div>
		</div>
		<div id=\"column-one\">
	<div id=\"p-cactions\" class=\"portlet\">
		<h5>Views</h5>
		<div class=\"pBody\">
			<ul lang=\"en\" xml:lang=\"en\">
	
				 <li id=\"ca-nstab-main\" class=\"selected\"><a href=\"/CompCogNeuro/index.php/CECN1_Family_Trees\" title=\"View the content page [ctrl-alt-c]\" accesskey=\"c\">Page</a></li>
				 <li id=\"ca-talk\" class=\"new\"><a href=\"/CompCogNeuro/index.php?title=Talk:CECN1_Family_Trees&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [ctrl-alt-t]\" accesskey=\"t\">Discussion</a></li>
				 <li id=\"ca-viewsource\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Family_Trees&amp;action=edit\" title=\"This page is protected.
You can view its source [ctrl-alt-e]\" accesskey=\"e\">View source</a></li>
				 <li id=\"ca-history\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Family_Trees&amp;action=history\" title=\"Past revisions of this page [ctrl-alt-h]\" accesskey=\"h\">History</a></li>			</ul>
		</div>
	</div>
	<div class=\"portlet\" id=\"p-personal\">
		<h5>Personal tools</h5>
		<div class=\"pBody\">
			<ul lang=\"en\" xml:lang=\"en\">
				<li id=\"pt-login\"><a href=\"/CompCogNeuro/index.php?title=Special:UserLogin&amp;returnto=CECN1_Family_Trees\" title=\"You are encouraged to log in; however, it is not mandatory [ctrl-alt-o]\" accesskey=\"o\">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class=\"portlet\" id=\"p-logo\">
		<a style=\"background-image: url(/mediawiki/sites//CompCogNeuro/logo.png);\" href=\"/CompCogNeuro/index.php/Main_Page\" title=\"Visit the main page [ctrl-alt-z]\" accesskey=\"z\"></a>
	</div>
	<script type=\"text/javascript\"> if (window.isMSIE55) fixalpha(); </script>
	<div class=\"generated-sidebar portlet\" id=\"p-navigation\">
		<h5 lang=\"en\" xml:lang=\"en\">Navigation</h5>
		<div class=\"pBody\">
			<ul>
				<li id=\"n-mainpage-description\"><a href=\"/CompCogNeuro/index.php/Main_Page\">Main Page</a></li>
				<li id=\"n-portal\"><a href=\"/CompCogNeuro/index.php/Project:Community_Portal\" title=\"About the project, what you can do, where to find things\">Community portal</a></li>
				<li id=\"n-currentevents\"><a href=\"/CompCogNeuro/index.php/Project:Current_events\" title=\"Find background information on current events\">Current events</a></li>
				<li id=\"n-recentchanges\"><a href=\"/CompCogNeuro/index.php/Special:RecentChanges\" title=\"The list of recent changes in the wiki [ctrl-alt-r]\" accesskey=\"r\">Recent changes</a></li>
				<li id=\"n-randompage\"><a href=\"/CompCogNeuro/index.php/Special:Random\" title=\"Load a random page [ctrl-alt-x]\" accesskey=\"x\">Random page</a></li>
				<li id=\"n-help\"><a href=\"/CompCogNeuro/index.php/Help:Contents\" title=\"The place to find out\">Help</a></li>
			</ul>
		</div>
	</div>
	<div id=\"p-search\" class=\"portlet\">
		<h5 lang=\"en\" xml:lang=\"en\"><label for=\"searchInput\">Search</label></h5>
		<div id=\"searchBody\" class=\"pBody\">
			<form action=\"/CompCogNeuro/index.php\" id=\"searchform\"><div>
				<input type=\"hidden\" name=\"title\" value=\"Special:Search\">
				<input id=\"searchInput\" name=\"search\" type=\"text\" title=\"Search Computational Cognitive Neuroscience Wiki [ctrl-alt-f]\" accesskey=\"f\" value=\"\">
				<input type=\"submit\" name=\"go\" class=\"searchButton\" id=\"searchGoButton\" value=\"Go\" title=\"Go to a page with this exact name if exists\">&nbsp;
				<input type=\"submit\" name=\"fulltext\" class=\"searchButton\" id=\"mw-searchButton\" value=\"Search\" title=\"Search the pages for this text\">
			</div></form>
		</div>
	</div>
	<div class=\"portlet\" id=\"p-tb\">
		<h5 lang=\"en\" xml:lang=\"en\">Toolbox</h5>
		<div class=\"pBody\">
			<ul>
				<li id=\"t-whatlinkshere\"><a href=\"/CompCogNeuro/index.php/Special:WhatLinksHere/CECN1_Family_Trees\" title=\"List of all wiki pages that link here [ctrl-alt-j]\" accesskey=\"j\">What links here</a></li>
				<li id=\"t-recentchangeslinked\"><a href=\"/CompCogNeuro/index.php/Special:RecentChangesLinked/CECN1_Family_Trees\" title=\"Recent changes in pages linked from this page [ctrl-alt-k]\" accesskey=\"k\">Related changes</a></li>
<li id=\"t-upload\"><a href=\"/CompCogNeuro/index.php/Special:Upload\" title=\"Upload files [ctrl-alt-u]\" accesskey=\"u\">Upload file</a></li>
<li id=\"t-specialpages\"><a href=\"/CompCogNeuro/index.php/Special:SpecialPages\" title=\"List of all special pages [ctrl-alt-q]\" accesskey=\"q\">Special pages</a></li>
				<li id=\"t-print\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Family_Trees&amp;printable=yes\" rel=\"alternate\" title=\"Printable version of this page [ctrl-alt-p]\" accesskey=\"p\">Printable version</a></li>				<li id=\"t-permalink\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Family_Trees&amp;oldid=406\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-download-as-pdf\"><a href=\"/CompCogNeuro/index.php?title=Special:Book/render_article/&amp;arttitle=CECN1+Family+Trees&amp;oldid=406&amp;writer=rl\" rel=\"nofollow\">PDF version</a></li>			</ul>
		</div>
	</div>
	<div class=\"generated-sidebar portlet\" id=\"p-coll-create_a_book\">
		<h5 lang=\"en\" xml:lang=\"en\">Create a book</h5>
		<div class=\"pBody\">
<ul id=\"collectionPortletList\"><li id=\"coll-add_page\"><a href=\"/CompCogNeuro/index.php?title=Special:Book/add_article/&amp;arttitle=CECN1+Family+Trees&amp;oldid=0\" title=\"Add the current wiki page to your book\" onclick=\"collectionCall('AddArticle', ['removepage', wgNamespaceNumber, wgTitle, 0]); return false;\" rel=\"nofollow\">Add page to book</a></li><li id=\"coll-help_collections\"><a href=\"/CompCogNeuro/index.php/Help:Books\" title=\"Show help about the book tool\">Books help</a></li></ul><script type=\"text/javascript\">/*<![CDATA[*/
		var wgCollectionAddRemoveSate = \"addpage\";
		/*]]>*/</script>
<script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/portlet.js?2\"></script><script type=\"text/javascript\">/*<![CDATA[*/
		var wgCollectionNavPopupJSURL = \"/CompCogNeuro/extensions/Collection/collection/Gadget-popups.js?2\";
		var wgCollectionNavPopupCSSURL = \"/CompCogNeuro/extensions/Collection/collection/Gadget-navpop.css?2\";
		var wgCollectionAddPageText = \"Add linked wiki page to your book\";
		var wgCollectionAddCategoryText = \"Add wiki pages in linked category to your book\";
		var wgCollectionRemovePageText = \"Remove linked wiki page from your book\";
		var wgCollectionPopupHelpText = \"To deactivate this feature click \\\"Clear book\\\" in the \\\"Create a book\\\" box\";
		var wgCollectionArticleNamespaces = [0, 1, 2, 3, 4, 5, 8, 9, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111];
		/*]]>*/</script>
<script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/json2.js?2\"></script><script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/popupcheck.js?2\"></script><script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/popup.js\"></script><script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/Gadget-popups.js?2\"></script>		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class=\"visualClear\"></div>
			<div id=\"footer\">
				<div id=\"f-poweredbyico\"><a href=\"http://www.mediawiki.org/\"><img src=\"/CompCogNeuro/skins/common/images/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\"></a></div>
			<ul id=\"f-list\">
					<li id=\"lastmod\"> This page was last modified on 7 January 2009, at 09:14.</li>
					<li id=\"viewcount\">This page has been accessed 1,630 times.</li>
					<li id=\"privacy\"><a href=\"/CompCogNeuro/index.php/Project:Privacy_policy\" title=\"Project:Privacy policy\">Privacy policy</a></li>
					<li id=\"about\"><a href=\"/CompCogNeuro/index.php/Project:About\" title=\"Project:About\">About Computational Cognitive Neuroscience Wiki</a></li>
					<li id=\"disclaimer\"><a href=\"/CompCogNeuro/index.php/Project:General_disclaimer\" title=\"Project:General disclaimer\">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type=\"text/javascript\">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served in 0.165 secs. -->
</body></html>";
  };
 };
 wizards {
  name=;
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_1";
   auto_open=0;
   n_layers=3;
   layer_cfg {
    name=;
    el_typ=LayerWizEl;
    el_def=0;
    LayerWizEl @[0] {
     name="Input";
     n_units=25;
     io_type=INPUT;
    };
    LayerWizEl @[1] {
     name="Hidden";
     n_units=25;
     io_type=HIDDEN;
    };
    LayerWizEl @[2] {
     name="Output";
     n_units=25;
     io_type=OUTPUT;
    };
   };
   connectivity=BIDIRECTIONAL;
   default_net_type=LeabraNetwork;
  };
 };
 edits {
  name=;
  el_typ=SelectEdit;
  el_def=0;
  SelectEdit @[0] {
   name="ControlPanel";
   auto_edit=1;
   desc=;
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="Learn Rule";
     desc=" current value, which for normal mutually-exclusive options is index into list of enums (-1 = not set), and for bits is the bit values";
     cust_desc=0;
     base=.projects[0].programs[1].args[2].dyn_enum_val$$;
     mbr=DynEnum::value;
     is_numeric=1;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[1] {
     label="lmix";
     desc=" mixture of hebbian & err-driven learning (note: no hebbian for CTLEABRA_XCAL)<br>  hebb:  [Default: .001] amount of hebbian learning (should be relatively small, can be effective at .0001)<br>  err:  [Default: .999] amount of error driven learning, automatically computed to be 1-hebb<br>  err sb: [Default: true]  apply exponential soft-bounding to the error learning component (applied in dWt)";
     cust_desc=0;
     base=.projects[0].networks[0].specs[1]$$;
     mbr=LeabraConSpec::lmix;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[2] {
     label="cycle update view";
     desc=" boolean value";
     cust_desc=0;
     base=.projects[0].programs.gp[0][5].vars[0]$$;
     mbr=ProgVar::bool_val;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem_Group @.gp[0] {
     name="Net Data";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      label="family_trees phase";
      desc=" type of settling phase<br>  MINUS PHASE:  minus phase<br>  PLUS PHASE:  plus phase";
      cust_desc=0;
      base=.projects[0].networks[0]$$;
      mbr=LeabraNetwork::phase;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[1] {
      label="family_trees trial";
      desc=" trial counter: number of external input patterns that have been presented in the current epoch (updated by program)";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=Network::trial;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[2] {
      label="family_trees trial name";
      desc=" name associated with the current trial (e.g., name of input pattern, typically set by a LayerWriter)";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=Network::trial_name;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[3] {
      label="family_trees minus output name";
      desc=" output_name in the minus phase -- for recording in logs as network's response (output_name in plus phase is clamped target value)";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=LeabraNetwork::minus_output_name;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[4] {
      label="family_trees minus cycles";
      desc=" cycles to settle in the minus phase -- this is the typical settling time statistic to record";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=LeabraNetwork::minus_cycles;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[5] {
      label="family_trees sse";
      desc=" sum squared error over the network, for the current external input pattern";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=Network::sse;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[6] {
      label="family_trees epoch";
      desc=" epoch counter: number of times a complete set of training patterns has been presented (updated by program)";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=Network::epoch;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Init";
     desc=" set the program state back to the beginning";
     cust_desc=0;
     base=.projects[0].programs.gp[0][1]$$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects[0].programs.gp[0][1]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[2] {
     label="Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects[0].programs.gp[0][1]$;
     mth=Program::Step_Gui;
    };
    EditMthItem @[3] {
     label="Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects[0].programs.gp[0][1]$;
     mth=Program::Stop;
    };
    EditMthItem @[4] {
     label="SetLearnRule";
     desc="must run this to make learning rule changes take effect!";
     cust_desc=1;
     base=.projects[0].programs[1]$$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[5] {
     label="Cluster Init";
     desc=" set the program state back to the beginning";
     cust_desc=0;
     base=.projects[0].programs[0]$$;
     mth=Program::Init;
    };
    EditMthItem @[6] {
     label="Cluster Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects[0].programs[0]$;
     mth=Program::Run_Gui;
    };
   };
  };
 };
 data {
  name=;
  el_typ=DataTable;
  el_def=0;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="ft_1ufg_train";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [100] "Christo.Wife.Penny";"Penny.Husb.Christo";"Maria.Husb.Rob";"Andy.Wife.Christi";"Christi.Husb.Andy";"Pierro.Wife.Francy";"Francy.Husb.Pierro";"Art.Wife.Marge";"Marge.Husb.Art";"Emilio.Wife.Gina";
"Gina.Husb.Emilio";"Vicky.Husb.James";"Marco.Wife.Lucia";"Lucia.Husb.Marco";"Chuck.Wife.Jenn";"Jenn.Husb.Chuck";"Tomaso.Wife.Angela";"Angela.Husb.Tomaso";"Christo.Son.Art";"Art.Fath.Christo";
"Christo.Daug.Vicky";"Vicky.Fath.Christo";"Rob.Son.Emilio";"Emilio.Fath.Rob";"Rob.Daug.Lucia";"Andy.Son.James";"James.Fath.Andy";"Andy.Daug.Jenn";"Jenn.Fath.Andy";"Pierro.Son.Marco";
"Marco.Fath.Pierro";"Pierro.Daug.Angela";"Angela.Fath.Pierro";"James.Son.Colin";"Colin.Fath.James";"James.Daug.Charlot";"Charlot.Fath.James";"Marco.Son.Alf";"Alf.Fath.Marco";"Marco.Daug.Sophia";
"Sophia.Fath.Marco";"Penny.Son.Art";"Art.Moth.Penny";"Penny.Daug.Vicky";"Vicky.Moth.Penny";"Art.Sis.Vicky";"Vicky.Bro.Art";"Maria.Son.Emilio";"Emilio.Moth.Maria";"Maria.Daug.Lucia";
"Lucia.Moth.Maria";"Lucia.Bro.Emilio";"Christi.Son.James";"James.Moth.Christi";"Jenn.Moth.Christi";"James.Sis.Jenn";"Jenn.Bro.James";"Francy.Son.Marco";"Marco.Moth.Francy";"Francy.Daug.Angela";
"Angela.Moth.Francy";"Marco.Sis.Angela";"Vicky.Son.Colin";"Colin.Moth.Vicky";"Vicky.Daug.Charlot";"Charlot.Moth.Vicky";"Colin.Sis.Charlot";"Lucia.Son.Alf";"Alf.Moth.Lucia";"Lucia.Daug.Sophia";
"Sophia.Moth.Lucia";"Alf.Sis.Sophia";"Sophia.Bro.Alf";"Colin.Uncle.ArtChu";"Colin.Aunt.MarJen";"Art.Nephew.Colin";"Chuck.Nephew.Colin";"Marge.Nephew.Colin";"Jenn.Nephew.Colin";"Alf.Uncle.EmiTom";
"Emilio.Nephew.Alf";"Tomaso.Nephew.Alf";"Gina.Nephew.Alf";"Angela.Nephew.Alf";"Charlot.Uncle.ArtChu";"Charlot.Aunt.MarJen";"Art.Neice.Charlot";"Chuck.Neice.Charlot";"Marge.Neice.Charlot";"Jenn.Neice.Charlot";
"Sophia.Uncle.EmiTom";"Sophia.Aunt.GinAng";"Emilio.Neice.Sophia";"Tomaso.Neice.Sophia";"Gina.Neice.Sophia";"Angela.Neice.Sophia";"Charlot.Bro.Colin";"Alf.Aunt.GinAng";"Emilio.Sis.Lucia";"Rob.Wife.Maria";
      };
     };
     float_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="Agent";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;4;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [6 4 100] 1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
     float_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="Relation";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;2;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [6 2 100] 0;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
      };
     };
     float_Data @[3] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="Patient";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;4;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [6 4 100] 0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="ft_1ufg_test";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [4] "James.Wife.Vicky";"Lucia.Fath.Robert";"Angela.Bro.Marco";"Christi.Daug.Jenn";      };
     };
     float_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="Agent";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;4;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [6 4 4] 0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;      };
     };
     float_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="Relation";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;2;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [6 2 4] 0;0;0;1;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;      };
     };
     float_Data @[3] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="Patient";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;4;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [6 4 4] 0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[2] {
    name="ft_1u_full_all";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [104] "Christo.Wife.Penny";"Penny.Husb.Christo";"Rob.Wife.Maria";"Maria.Husb.Rob";"Andy.Wife.Christi";"Christi.Husb.Andy";"Pierro.Wife.Francy";"Francy.Husb.Pierro";"Art.Wife.Marge";"Marge.Husb.Art";
"Emilio.Wife.Gina";"Gina.Husb.Emilio";"James.Wife.Vicky";"Vicky.Husb.James";"Marco.Wife.Lucia";"Lucia.Husb.Marco";"Chuck.Wife.Jenn";"Jenn.Husb.Chuck";"Tomaso.Wife.Angela";"Angela.Husb.Tomaso";
"Christo.Son.Art";"Art.Fath.Christo";"Christo.Daug.Vicky";"Vicky.Fath.Christo";"Rob.Son.Emilio";"Emilio.Fath.Rob";"Rob.Daug.Lucia";"Lucia.Fath.Rob";"Andy.Son.James";"James.Fath.Andy";
"Andy.Daug.Jenn";"Jenn.Fath.Andy";"Pierro.Son.Marco";"Marco.Fath.Pierro";"Pierro.Daug.Angela";"Angela.Fath.Pierro";"James.Son.Colin";"Colin.Fath.James";"James.Daug.Charlot";"Charlot.Fath.James";
"Marco.Son.Alf";"Alf.Fath.Marco";"Marco.Daug.Sophia";"Sophia.Fath.Marco";"Penny.Son.Art";"Art.Moth.Penny";"Penny.Daug.Vicky";"Vicky.Moth.Penny";"Art.Sis.Vicky";"Vicky.Bro.Art";
"Maria.Son.Emilio";"Emilio.Moth.Maria";"Maria.Daug.Lucia";"Lucia.Moth.Maria";"Emilio.Sis.Lucia";"Lucia.Bro.Emilio";"Christi.Son.James";"James.Moth.Christi";"Christi.Daug.Jenn";"Jenn.Moth.Christi";
"James.Sis.Jenn";"Jenn.Bro.James";"Francy.Son.Marco";"Marco.Moth.Francy";"Francy.Daug.Angela";"Angela.Moth.Francy";"Marco.Sis.Angela";"Angela.Bro.Marco";"Vicky.Son.Colin";"Colin.Moth.Vicky";
"Vicky.Daug.Charlot";"Charlot.Moth.Vicky";"Colin.Sis.Charlot";"Charlot.Bro.Colin";"Lucia.Son.Alf";"Alf.Moth.Lucia";"Lucia.Daug.Sophia";"Sophia.Moth.Lucia";"Alf.Sis.Sophia";"Sophia.Bro.Alf";
"Colin.Uncle.ArtChu";"Colin.Aunt.MarJen";"Art.Nephew.Colin";"Chuck.Nephew.Colin";"Marge.Nephew.Colin";"Jenn.Nephew.Colin";"Alf.Uncle.EmiTom";"Alf.Aunt.GinAng";"Emilio.Nephew.Alf";"Tomaso.Nephew.Alf";
"Gina.Nephew.Alf";"Angela.Nephew.Alf";"Charlot.Uncle.ArtChu";"Charlot.Aunt.MarJen";"Art.Neice.Charlot";"Chuck.Neice.Charlot";"Marge.Neice.Charlot";"Jenn.Neice.Charlot";"Sophia.Uncle.EmiTom";"Sophia.Aunt.GinAng";
"Emilio.Neice.Sophia";"Tomaso.Neice.Sophia";"Gina.Neice.Sophia";"Angela.Neice.Sophia";      };
     };
     float_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="Agent";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;4;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [6 4 104] 1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;      };
     };
     float_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="Relation";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;2;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [6 2 104] 0;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;1;      };
     };
     float_Data @[3] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="Patient";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;4;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [6 4 104] 0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[3] {
    name="People_Patterns";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [24] "Christo";"Penny";"Andy";"Christi";"Marge";"Art";"Vicky";"James";"Jenn";"Chuck";
"Colin";"Charlot";"Rob";"Maria";"Pierro";"Francy";"Gina";"Emilio";"Lucia";"Marco";
"Angela";"Tomaso";"Alf";"Sophia";      };
     };
     float_Data @[1] {
      name="People";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 6;4;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [6 4 24] 1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[9] {
      name="Hidden_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;4;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [10 4 0]       };
     };
     float_Data @[10] {
      name="Agent_Code_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;4;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [10 4 0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[3] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[4] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1766784489154816;
	val_type_fixed=0;
       };
      };
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[2] {
    name="TrialTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [104] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [104] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [104] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;      };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [104] "Christo.Wife.Penny";"Penny.Husb.Christo";"Rob.Wife.Maria";"Maria.Husb.Rob";"Andy.Wife.Christi";"Christi.Husb.Andy";"Pierro.Wife.Francy";"Francy.Husb.Pierro";"Art.Wife.Marge";"Marge.Husb.Art";
"Emilio.Wife.Gina";"Gina.Husb.Emilio";"James.Wife.Vicky";"Vicky.Husb.James";"Marco.Wife.Lucia";"Lucia.Husb.Marco";"Chuck.Wife.Jenn";"Jenn.Husb.Chuck";"Tomaso.Wife.Angela";"Angela.Husb.Tomaso";
"Christo.Son.Art";"Art.Fath.Christo";"Christo.Daug.Vicky";"Vicky.Fath.Christo";"Rob.Son.Emilio";"Emilio.Fath.Rob";"Rob.Daug.Lucia";"Lucia.Fath.Rob";"Andy.Son.James";"James.Fath.Andy";
"Andy.Daug.Jenn";"Jenn.Fath.Andy";"Pierro.Son.Marco";"Marco.Fath.Pierro";"Pierro.Daug.Angela";"Angela.Fath.Pierro";"James.Son.Colin";"Colin.Fath.James";"James.Daug.Charlot";"Charlot.Fath.James";
"Marco.Son.Alf";"Alf.Fath.Marco";"Marco.Daug.Sophia";"Sophia.Fath.Marco";"Penny.Son.Art";"Art.Moth.Penny";"Penny.Daug.Vicky";"Vicky.Moth.Penny";"Art.Sis.Vicky";"Vicky.Bro.Art";
"Maria.Son.Emilio";"Emilio.Moth.Maria";"Maria.Daug.Lucia";"Lucia.Moth.Maria";"Emilio.Sis.Lucia";"Lucia.Bro.Emilio";"Christi.Son.James";"James.Moth.Christi";"Christi.Daug.Jenn";"Jenn.Moth.Christi";
"James.Sis.Jenn";"Jenn.Bro.James";"Francy.Son.Marco";"Marco.Moth.Francy";"Francy.Daug.Angela";"Angela.Moth.Francy";"Marco.Sis.Angela";"Angela.Bro.Marco";"Vicky.Son.Colin";"Colin.Moth.Vicky";
"Vicky.Daug.Charlot";"Charlot.Moth.Vicky";"Colin.Sis.Charlot";"Charlot.Bro.Colin";"Lucia.Son.Alf";"Alf.Moth.Lucia";"Lucia.Daug.Sophia";"Sophia.Moth.Lucia";"Alf.Sis.Sophia";"Sophia.Bro.Alf";
"Colin.Uncle.ArtChu";"Colin.Aunt.MarJen";"Art.Nephew.Colin";"Chuck.Nephew.Colin";"Marge.Nephew.Colin";"Jenn.Nephew.Colin";"Alf.Uncle.EmiTom";"Alf.Aunt.GinAng";"Emilio.Nephew.Alf";"Tomaso.Nephew.Alf";
"Gina.Nephew.Alf";"Angela.Nephew.Alf";"Charlot.Uncle.ArtChu";"Charlot.Aunt.MarJen";"Art.Neice.Charlot";"Chuck.Neice.Charlot";"Marge.Neice.Charlot";"Jenn.Neice.Charlot";"Sophia.Uncle.EmiTom";"Sophia.Aunt.GinAng";
"Emilio.Neice.Sophia";"Tomaso.Neice.Sophia";"Gina.Neice.Sophia";"Angela.Neice.Sophia";      };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [104] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;      };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [104] 1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;      };
     };
     float_Data @[6] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [104] 47;46;56;60;49;51;50;56;53;41;
46;60;54;39;53;42;51;47;58;53;
60;51;60;60;37;60;56;39;47;58;
53;53;45;49;44;49;46;60;44;40;
60;51;50;55;60;46;60;54;47;45;
40;46;47;40;49;55;50;48;49;42;
55;60;60;60;43;60;60;60;50;52;
59;59;36;45;47;49;54;48;44;48;
60;48;60;54;50;60;60;60;58;60;
60;60;46;60;52;59;39;47;60;60;
53;48;60;51;      };
     };
     float_Data @[7] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [104] 1.7116321;1.6939567;0;1.6699877;1.5556393;1.6895764;1.5217603;0;1.6733471;1.7063854;
1.7133538;1.7561607;1.7105349;1.7070858;1.7106777;1.7132165;1.7101442;1.7532252;1.290938;1.7489878;
1.6128472;1.6734726;1.6872702;1.7988777;0.99771649;1.769362;1.6837462;1.776179;1.5759956;1.4902014;
1.5497022;1.5493747;1.7460374;1.8081561;1.5723324;1.8121799;1.3400306;1.5462505;1.7162997;1.7230138;
1.7129159;1.723605;1.6816492;1.8019962;1.5767491;1.5799727;1.5886919;1.7353619;1.7114522;1.729444;
1;1.5877799;1.4247421;1.5885352;1.7367034;1.6943074;1.681376;1.7264868;1.6866269;1.7392972;
1;1.7655431;1.6067058;1.7271003;0.9999947;1.3670515;1.6714904;1;1.7288327;1.4119476;
1.7352368;1.715834;0.99983287;1.6723418;1.7179596;1.6704022;1.7029982;1.6826724;1.7495859;1.7714309;
1.5570062;2.6286004;1.665887;1.7148124;1.687288;1.6934799;3.3550637;3.2247901;1.6990752;1.6778599;
1.6970576;1.5932038;3.4125688;3.3703721;1.6927447;1.7274046;1.73168;1.7434181;3.0922532;2.6553822;
1.7414826;1.7585546;1.567433;1.7141566;      };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [104] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;      };
     };
     float_Data @[9] {
      name="Hidden_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;4;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [10 4 104] 0.046943903;0.064694248;3.8271322e-05;0.1868397;0.017285163;0.050475232;0.0014147654;0.012006137;0.24167465;0.4947862;
0.83877891;0.00047806342;0.11369301;0.079781793;0.78215712;0.015708648;0.81068295;3.1990272e-05;0.71232641;0.0012151133;
0.0052768774;0.015874578;0.13090058;0.71932471;0.0071717659;0.0096781757;0.0065157688;0.084466666;0.13581458;0.64777547;
0.0023665915;0.055713024;0.030323673;0.1293232;0.038161714;0.78595972;0.00060792093;0.10019443;0.57652247;0.010331687;
0.024102481;0.0068776254;0.035701025;0.16345304;0.011437333;0.85611224;0.00062984898;0.022931261;0.66026992;0.086617477;
0.83174944;0.0035771232;0.041849393;0.00045247455;0.81720573;0.11941429;0.79802454;0.013859254;0.45520347;0.039588336;
0.053412389;0.0011575088;0.061566994;0.021020517;0.20822328;0.0014552407;0.37499246;0.015469182;0.046354733;0.014010767;
0.30817175;0.02473606;0.041879255;0.0015585084;0.40326893;0.068238072;9.4604315e-05;0.012501888;0.76653534;0.094464824;
0.0060010389;0.081497125;0.00083909743;0.36557531;0.0051617734;0.20114608;0.0015934769;0.074471056;0.098997876;0.66163284;
0.7716983;4.3612519e-05;0.23822919;0.039338376;0.62786227;0.031278893;0.83028102;4.4897217e-05;0.76292527;0.014088626;
0.026204674;0.012064772;0.061381239;0.54743999;0.0097523099;0.0051338151;0.011488879;0.012176754;0.038787454;0.25573486;
0.0023686511;0.37723666;0.22101153;0.070726961;0.080222391;0.80907714;0.013711226;0.022430321;0.69708234;0.013778632;
0.39523283;0.24363506;0.00019702845;0.80836505;0.07684429;0.12049155;0.013830057;0.027274957;0.37000868;0.032628346;
0.72423375;0.0021254865;0.019163998;0.038944479;0.85615009;0.040250987;0.67131913;0.032304909;0.5305202;0.039972506;
0.00048327562;0.0017767414;0.062403131;0.043296151;0.037723526;0.023864942;0.0051132948;0.0067865038;0.02484826;0.27349028;
0.1946117;0.021735638;0.38088694;0.020113738;0.70203233;0.44173288;0.00024489616;0.0006988903;0.75488055;0.028531266;
0.02001697;0.16844979;9.3673123e-05;0.052218921;0.01462619;0.14130618;0.0035288008;0.21502855;0.024699563;0.025620107;
0.86240256;0.040069472;0.18859491;0.072611026;0.83786744;0.16467409;0.70233041;0.0025793053;0.30419084;0.026799461;
0.033393666;0.0377809;0.61446518;0.0068430621;0.52725357;0.011528409;0.012686683;0.0068545407;0.27896014;0.39662388;
2.3980732e-05;0.012375367;0.70466876;0.011518316;0.011590288;0.86881584;0.00014663118;0.24046691;0.055530775;0.0011312934;
0.053291727;0.031725135;0.0049917144;0.045099895;0.049976315;0.8963322;0.00068200752;0.0099073071;0.4762899;0.22623324;
0.79746246;0.026136478;0.015323437;0.015311302;0.78385121;0.030619936;0.78507447;0.013372996;0.58995879;0.11273021;
0.023978602;0.0031365179;0.039480638;0.028549828;0.073994912;0.0012840937;0.58537996;0.3332971;0.17596993;0.012186847;
0.075939059;0.018181723;0.019299138;0.0002515961;0.054785259;0.024570886;0.00030033331;0.012266268;0.70974123;0.10301553;
0.064573586;0.056922168;4.8467278e-05;0.053829957;0.030669928;0.58004057;0.0063706543;0.002579337;0.16325653;0.53636932;
0.87629187;0.00023324662;0.15855901;0.37355387;0.81789935;0.047934689;0.83499187;0.00058744004;0.5052644;0.036544517;
0.014702126;0.019871611;0.27141726;0.41099229;0.12566832;0.0036945862;0.026610931;0.034415655;0.046518467;0.31411555;
0.014909991;0.017454507;0.004552844;0.0045145615;0.17801008;0.49136215;0.00031010158;0.037988923;0.76669443;0.00036787122;
0.029902279;0.051188543;0.038610972;0.5050388;0.049918607;0.86302459;0.0015675802;0.034790426;0.58741534;0.20631534;
0.68705994;0.0043738717;0.038079511;0.0012441692;0.63011622;0.015049969;0.39929843;0.020577138;0.74324602;0.051379453;
0.028517503;0.00042831444;0.094095103;0.011288104;0.024869949;0.0015933029;0.10015836;0.015696632;0.014316436;0.0104361;
0.58018553;0.2645016;0.4758116;0.012822816;0.20279492;0.03500583;0.0054121166;0.00064704317;0.68197912;0.62922019;
0.18776152;0.45077133;2.9494706e-05;0.32278112;0.0051808185;0.14557762;0.0049824803;0.0023807872;0.085027933;0.2191646;
0.87170398;0.0022514099;0.56752682;0.25065124;0.88127381;0.063207723;0.88164216;0.00017377501;0.34040192;0.029262029;
0.0034367824;0.0117257;0.020891216;0.085058473;0.15047881;0.01522371;0.0091820639;0.0024319931;0.18516935;0.47517389;
0.0074365372;0.050837927;0.28625646;0.0070547382;0.34147197;0.4575606;0.00059824466;0.016276194;0.32253936;0.0037487391;
0.021948986;0.005880869;0.042643901;0.1751419;0.10859948;0.87320763;0.00032112695;0.015702879;0.32041126;0.16065095;
0.82927489;0.0014594867;0.023446381;0.0074503245;0.81667745;0.070726961;0.80022156;0.0075041889;0.68710297;0.18831263;
0.045128077;0.0013031213;0.028964218;0.011303242;0.22187021;0.00051994505;0.38088945;0.014270417;0.072609022;0.070198245;
0.22635637;0.030961493;0.01518442;0.0059719905;0.16551819;0.028515209;0.00015065355;0.00069464423;0.83491701;0.075608611;
0.31387377;0.53150332;3.891927e-06;0.14156701;0.052508138;0.048670143;0.02290811;0.0068494747;0.092269398;0.35514989;
0.83496547;0.00032108402;0.32833475;0.12438297;0.85900003;0.090188421;0.80193365;1.8752267e-05;0.54575235;0.0080148792;
0.0093531618;0.007197544;0.39974877;0.23888443;0.01522371;0.02199153;0.0006249802;0.045639407;0.11535224;0.72312713;
0.0065648886;0.045870915;0.026030118;0.023094973;0.049137857;0.74422061;0.0027813404;0.013444968;0.43893674;0.0077334996;
0.055356037;0.071949124;0.12026819;0.61818814;0.083778232;0.87918019;0.01152925;0.11516426;0.16324045;0.15109156;
0.65680712;0.0011492921;0.027957335;0.0089350296;0.65122682;0.039511841;0.42001915;0.12819809;0.75766814;0.058852796;
0.015598827;0.00030128376;0.087837614;0.0074942498;0.1263814;0.0012370828;0.080225393;0.0064020115;0.070360966;0.013962946;
0.14679779;0.17606282;0.24703555;0.0023489103;0.32607022;0.015413071;0.0020835332;0.00097840605;0.84606683;0.42907661;
0.043861162;0.068090871;0.00028126276;0.081455566;0.023324586;0.64588624;0.010023976;0.01133232;0.1252979;0.53876829;
0.85445195;0.00038115316;0.041099846;0.49754068;0.63525659;0.057713747;0.73627043;0.00017551979;0.79764253;0.052629929;
0.0010910354;0.0030986206;0.5614149;0.22851808;0.24846384;0.0021688023;0.041049853;0.012612429;0.40540054;0.53645992;
0.0011565523;0.025605507;0.026928762;0.036864266;0.025572557;0.60201967;0.00016145108;0.068856418;0.59749192;0.00090865756;
0.0014520379;0.004668525;0.0017139381;0.80489469;0.060655251;0.67252141;0.006555398;0.079142421;0.66585577;0.12427545;
0.25497252;0.0031798973;0.023621771;0.0020603067;0.63687229;0.01945159;0.028670579;0.013031522;0.77494216;0.0033158972;
0.0035441373;0.0092760241;0.030111248;0.43368536;0.05684156;0.0018709463;0.018777553;0.12392099;0.11435753;0.049752526;
0.037456457;0.13525899;0.60741776;0.15880911;0.064242132;0.59355485;0.0047149514;0.051518023;0.74956566;0.59347558;
0.3258428;0.29897475;1.5698294e-06;0.54109931;0.041699082;0.028159838;0.016081002;0.010020371;0.039662823;0.17825572;
0.80593038;0.0002371274;0.16897948;0.24621648;0.85838389;0.071657225;0.85491276;0.00194747;0.7187674;0.023152741;
0.0083498852;0.0049878666;0.16051519;0.37410179;0.020218847;0.064437397;0.0025961944;0.014318118;0.11635735;0.6937421;
0.0014460239;0.01791749;0.013264137;0.022176724;0.074839063;0.40772733;0.00044164542;0.02791917;0.70063126;0.0013225836;
0.043261256;0.021355659;0.0080555342;0.034185153;0.060583655;0.8810882;0.0031534387;0.0090792133;0.58142918;0.12159446;
0.80160677;0.015907019;0.013608015;0.011844411;0.85975999;0.048591632;0.75762004;0.0084020318;0.4545486;0.049033511;
0.037777547;0.00083331525;0.023422815;0.0046079913;0.29706928;0.00018965091;0.66949415;0.12184695;0.17966524;0.014183908;
0.17742233;0.022490593;0.007887207;8.9979541e-05;0.14627703;0.083349645;7.8580881e-05;0.012319736;0.74825108;0.068346724;
0.036579076;0.080011599;1.893684e-05;0.54612386;0.073189817;0.034920942;0.063364439;0.0027517765;0.28733847;0.14088905;
0.74877107;0.0035046872;0.12796848;0.05219879;0.81775093;0.26022422;0.71580356;0.00056876807;0.46410948;0.0034621635;
0.002820632;0.031590253;0.22359081;0.36549774;0.038835771;0.018848877;0.00021623314;0.026060564;0.22183381;0.78158993;
0.0069825337;0.030877614;0.066292927;0.25140074;0.22305118;0.79478288;9.8691489e-05;0.02653335;0.72296184;0.0077666519;
0.016554611;0.027451599;0.11988876;0.25862035;0.045779318;0.86484611;0.00024070578;0.20422751;0.34004766;0.098092653;
0.79091024;0.011020162;0.022165045;0.0012333873;0.74592453;0.039455138;0.6835342;0.047038853;0.70696735;0.12635504;
0.31956863;0.0014080557;0.047367327;0.014631116;0.086012274;0.0015746376;0.055710521;0.026106447;0.011956153;0.014275224;
0.38337633;0.043896392;0.1318488;0.0067280862;0.14884062;0.018501224;0.0057146577;0.00021624753;0.82924342;0.34246778;
0.0065807276;0.51542169;0.00018246294;0.018196531;0.026991954;0.0039448766;0.0065157688;0.76837701;0.27324134;0.066827655;
0.81599516;0.021471612;0.16432394;0.044102736;0.87467939;0.045935337;0.77373463;0.0061966199;0.035962392;0.0060338709;
0.15707356;0.0012157799;0.042845882;0.042534858;0.80205774;0.023941062;0.010794516;0.00019700926;0.037289701;0.018380055;
0.00033917345;0.036878694;0.15658942;0.0031176643;0.12488171;0.85638815;0.0019747841;0.15605706;0.45425427;0.00043174837;
0.016314985;0.014398861;0.22476749;0.58974665;0.029930227;0.89156091;0.0035121653;0.098501213;0.47386166;0.18729793;
0.51933616;0.00057209161;0.046821773;0.00062798487;0.44359699;0.010504106;0.26673019;0.12425742;0.65237069;0.049968936;
0.017091002;0.0022440585;0.055615388;0.045553852;0.032394491;0.0011013825;0.045547143;0.0085686836;0.012629971;0.0065605924;
0.68531609;0.52040994;0.36460456;0.042889167;0.16232935;0.019482246;0.0039456459;0.0016536381;0.73083341;0.63483435;
0.0059156246;0.001538249;0.003403733;0.45881149;0.21586475;0.7962743;3.0201769e-05;0.0077569052;0.75960922;0.33417803;
0.69940084;0.0019405623;0.19326264;0.011810048;0.5623709;0.019031985;0.59395331;0.00020816679;0.80822635;0.00053138734;
0.60057455;0.00026412992;0.046064511;0.36970094;0.042316101;0.0077921096;0.11718141;0.049850497;0.003729315;0.031139653;
0.0044764713;0.12308583;0.35969585;0.0071648406;0.032164328;0.0058860634;0.0015300467;0.15980774;0.74382597;0.66985184;
0.36641845;0.46908122;0.00055318052;0.69607383;0.0052291043;0.11903486;0.0044336361;0.013361461;0.024679959;0.053229142;
0.85426277;0.00015917351;0.15510041;0.28851861;0.86497146;0.24712656;0.86062402;0.012722488;0.22693026;0.14902909;
0.010398131;0.0023822449;0.037650049;0.055524264;0.029004887;0.01383979;0.0089764828;0.00038857904;0.2127662;0.44688123;
0.022563793;0.14021823;0.14957753;0.064396843;0.51954687;0.25470594;0.0002214987;0.0034420106;0.38022643;0.043088797;
0.029923761;0.084082142;0.00013103608;0.30970615;0.034218367;0.2218852;0.00034420783;0.0019826423;0.44296908;0.6415329;
0.7940951;0.00019864125;0.043370299;0.29630566;0.73937827;0.01378512;0.84131557;0.00024287777;0.75538385;0.0014605735;
0.0025425486;0.068002753;0.037074301;0.82902712;0.00073135173;0.01076664;0.016756697;0.11221413;0.026363589;0.64311683;
0.003067821;0.2037821;0.053716306;0.16181752;0.012799626;0.32822224;0.00060433371;0.011791664;0.52753448;0.024396747;
0.026113121;0.31603777;0.028091224;0.78802115;0.0013690151;0.041707471;0.0086620431;0.048502721;0.0082338182;0.1877097;
0.38472986;0.00016214709;0.018519159;0.57601053;0.40009153;0.23403531;0.074023947;0.025096018;0.59904212;0.01086108;
0.066350006;0.015566747;0.21307135;0.21917209;0.00043208562;0.00029587533;0.005653162;0.01821968;0.29487416;0.60058248;
3.936232e-05;0.68505609;0.041977227;0.77623969;0.052167922;0.84993321;0.015086856;0.017894132;0.20422643;0.55472988;
0.00039176768;0.0088744732;0.014109412;0.6663112;0.027444508;0.79062557;0.00010668584;0.29038575;0.34065807;0.54132134;
0.1612387;6.5937995e-05;0.41040185;0.0013555812;0.23241431;0.016572546;0.49530131;4.8529822e-05;0.84555089;0.026392994;
0.7380383;0.0064197741;0.00666223;0.39045921;0.011715007;0.035466161;0.043748092;0.0014978606;0.0021964966;0.0062427255;
0.00065102894;0.67784065;0.60847044;0.058380153;0.081924208;0.023530219;0.011687612;0.0032347154;0.766482;0.58611846;
0.49297851;0.74254876;0.0076945759;0.4035041;0.024642002;0.05228569;0.0037325788;0.037076648;0.0027221495;0.045603842;
0.76553816;0.00089364412;0.073525272;0.52303547;0.76144463;0.43699169;0.59477997;0.0054539903;0.17115629;0.12382596;
0.10579363;0.022356702;0.64703006;0.0094788419;0.0045635528;0.0046672425;0.0048533971;0.026445551;0.19582371;0.70354098;
0.0030365144;0.1341496;0.0076875859;0.23739298;0.061108869;0.60109985;0.0041302615;0.0064040637;0.14619307;0.2645348;
0.002284396;0.16115743;0.0012294021;0.44070762;0.0052832258;0.24557835;0.00047147763;0.035485622;0.31694263;0.7522375;
0.59807074;5.6461264e-05;0.10459431;0.082146011;0.55276358;0.028418023;0.83637094;0.00070757087;0.72360581;0.0051622223;
0.011352746;0.064159021;0.017199866;0.79227597;0.00058106886;0.0062685679;0.019195907;0.014280871;0.0068378039;0.28552157;
0.0051611322;0.65051317;0.34354979;0.14326327;0.045390453;0.62224019;0.018966917;0.003968731;0.58880699;0.035818119;
0.56995749;0.79912424;0.0034137459;0.029660778;0.011237999;0.70393014;0.0024073091;0.045242488;0.004080629;0.024709573;
0.8594963;0.0015517698;0.029332936;0.65489936;0.83799517;0.030113125;0.73832899;0.063743457;0.030105408;0.29461801;
0.013912963;0.01613584;0.40244082;0.001463356;0.15008935;0.0072049825;0.16238651;0.022389028;0.49203667;0.26311827;
0.0036271568;0.054528408;0.00043077336;0.019500598;0.056613747;0.044000737;0.0022925078;0.0027926527;0.11117295;0.060476508;
0.017771088;0.019806752;0.0026479072;0.71935934;0.25080755;0.83659357;0.00060510635;0.01223647;0.4116478;0.15758896;
0.67505848;0.0010840505;0.22848383;0.011075433;0.78379053;0.074388951;0.54818302;0.0036359974;0.80371219;0.029466201;
0.25992015;0.002268204;0.14123651;0.0060954308;0.038390875;0.011764029;0.027524384;0.010116493;0.0035740496;0.22715083;
0.0038039943;0.051805228;0.65660673;0.0057853232;0.028840339;0.0082511203;0.00027219966;0.027681421;0.75152558;0.27289903;
0.081816562;0.33860898;0.0034781969;0.054973014;0.0073004644;0.80329859;0.00021531874;0.019439911;0.005407243;0.26050368;
0.85678196;7.0769303e-05;0.02981177;0.81924701;0.59989256;0.04546259;0.49894366;0.0025941664;0.71023053;0.34367186;
0.00072530867;0.0073774145;0.65546238;0.02229226;0.05839267;0.00044634254;0.11663134;0.0040678037;0.60943586;0.5881092;
0.00080099877;0.082288198;0.0028401194;0.27834973;0.023795495;0.12429141;0.00058676553;0.0089647081;0.37255561;0.030757163;
0.020041788;0.032714576;0.010638197;0.23613921;0.042666383;0.82367671;0.0045035961;0.017575467;0.070865653;0.054238513;
0.81446797;0.0010561249;0.58573109;0.036693152;0.84868681;0.18310687;0.68904388;0.015948232;0.71631688;0.1979458;
0.010676886;0.023701647;0.18705764;0.015553529;0.013088955;0.0026125764;0.020346899;0.010678688;0.031345662;0.34071791;
0.0049935738;0.0085961986;0.6702013;0.0038917812;0.010141605;0.029332101;0.00047232999;0.00617937;0.71639287;0.043521617;
0.63809741;0.79834974;0.00042247676;0.39174518;0.015392045;0.053430915;0.0016810788;0.14971241;0.020930424;0.014172012;
0.82586014;0.00050760742;0.011666825;0.25964928;0.84172887;0.0877086;0.86118376;0.044922743;0.30563909;0.091506369;
0.34981835;0.0013670587;0.14048798;0.27333468;0.041600104;0.034838069;0.0013390753;0.0016560779;0.045772273;0.20574895;
0.047564611;0.049693812;0.0068076653;0.059744511;0.083008684;0.034941074;0.0072622462;0.00020097643;0.65534645;0.18272278;
0.021612803;0.0034940087;0.001288905;0.2324657;0.037067924;0.75813901;0.0098820748;0.015921557;0.64104325;0.44973627;
0.076817252;0.0016234601;0.65731883;0.0047969674;0.75392944;0.11226546;0.074367918;0.0036056098;0.79145283;0.25936019;
0.68988347;0.00010190507;0.029900612;0.13978858;0.055891264;0.013987818;0.095510855;0.037167575;0.00028080898;0.020298097;
0.034968924;0.071948625;0.30433688;0.00016057509;0.60468405;0.0016009836;0.00034052861;0.077277377;0.78817183;0.55244869;
0.69126463;0.78891373;0.0059605762;0.63533986;0.019235948;0.045963854;0.0014186056;0.28013071;0.00039978835;0.0030684865;
0.77591324;0.00065412564;0.14351694;0.60444218;0.81814522;0.069423184;0.79104322;0.28023842;0.058071733;0.30548829;
0.079488389;0.018302266;0.17870322;0.023217183;0.011940053;0.034798481;0.015197276;0.0031899102;0.043456528;0.45454368;
0.002181699;0.18694599;0.0011809854;0.2841523;0.21156275;0.029237419;0.0019921483;0.0064532473;0.31534597;0.050568841;
0.044014495;0.0097754989;0.00018498773;0.018386729;0.00011088581;0.79103023;0.17809404;0.0022579692;0.29995859;0.26428425;
0.071892045;0.00033821072;0.32529703;0.16302072;0.74859637;0.56567377;0.52398014;0.01884575;0.71723413;0.74675649;
0.0041039702;0.015453202;0.022706233;0.46830371;0.030016148;0.00044165156;0.64906007;0.055429637;0.63795465;0.37188759;
0.038740817;0.19518559;0.014204814;0.00041166603;0.092148699;0.0075291977;0.00025438002;0.011448988;0.75369745;0.0082433103;
0.069981948;0.61115658;0.18810719;0.35007104;0.0023748935;0.63731831;0.0032141507;0.12219863;0.0062874844;0.35296825;
0.77709669;0.00011699377;0.1603553;0.66051501;0.24185023;0.022842418;0.2915324;0.052661367;0.35022867;0.06918937;
0.033747301;0.032356244;0.11629145;0.24004292;0.0042565875;0.0015858976;0.0059531378;0.0031114537;0.17101873;0.49638543;
0.013784279;0.81201547;0.011834439;0.75885373;0.050996628;0.36274317;0.014708615;0.011947142;0.088245489;0.34097403;
0.016223848;0.020393405;0.00077060971;0.56178415;0.64985502;0.74317938;0.00089755689;0.012163057;0.38848022;0.44889006;
0.78867513;7.300602e-05;0.03976113;0.2502144;0.69942236;0.0070468509;0.66119069;0.0006842537;0.84853297;0.014537877;
0.029452853;0.00024110658;0.28655806;0.19016252;0.1131797;0.021391947;0.043834992;0.016772754;0.028784657;0.14753561;
0.0053720386;0.013240227;0.05957428;0.01940258;0.071887039;0.016577968;0.00048952416;0.11312629;0.76304561;0.028148159;
0.51608545;0.79281938;6.9675705e-05;0.032522324;0.031859338;0.19080298;0.012745197;0.0044785873;0.012101899;0.025591742;
0.86771917;0.014965622;0.2154943;0.44316038;0.81837159;0.21958324;0.86516577;0.0026994299;0.020134386;0.23826344;
0.029419903;0.028784657;0.30753019;0.025658062;0.11844873;0.070274346;0.0055247201;0.013212712;0.57903928;0.55671662;
0.00095458172;0.0081684552;0.027938357;0.026665363;0.21010448;0.068539985;0.00073503261;0.00054018677;0.074369423;0.040518396;
0.019557742;0.014910832;0.0016961618;0.020899558;0.00049478537;0.80614203;0.10774489;0.0034683107;0.37390164;0.58068842;
0.12006842;0.00021915631;0.1369222;0.173702;0.58247805;0.55254155;0.58254826;0.0030430735;0.78264159;0.68174398;
0.00029123342;0.0050153765;0.029654939;0.34998849;0.070747487;0.00084040168;0.65489268;0.025731472;0.75071627;0.32160577;
0.0068585803;0.29957318;0.015132634;0.0054735481;0.038189899;0.022969425;0.0003150072;0.010251304;0.69184262;0.0045165494;
0.1392044;0.31030941;0.0017227153;0.26213324;0.02285785;0.050191049;0.0037818071;0.026579857;0.030356219;0.16595231;
0.86245501;1.6522294e-05;0.032260954;0.27141726;0.8002913;0.087783515;0.81339419;0.0036178408;0.60168666;0.009403266;
0.046924107;0.015940662;0.36771193;0.5568797;0.022574222;0.081499629;0.0019231344;0.001360465;0.081189208;0.5905872;
0.01442133;0.043782651;0.0039132629;0.39774475;0.075340241;0.66163945;0.0013338437;0.00347769;0.548729;0.038237207;
0.027126677;0.021390069;0.00080801273;0.74197811;0.11880249;0.76510912;0.0036124224;0.026854519;0.29744509;0.15916105;
0.34082803;0.00034608421;0.63145435;0.0051735081;0.77105266;0.018169211;0.30663013;0.015015245;0.86916262;0.0080231512;
0.60852194;0.00018131576;0.031722113;0.11134775;0.024573598;0.032968562;0.020296428;0.015531542;0.0059203701;0.031709027;
0.0015918828;0.056017436;0.49305457;0.00051353092;0.043990001;0.00045488443;0.0014030125;0.063677862;0.78762978;0.58719534;
0.060304273;0.15029123;0.0015556391;0.422436;0.022331884;0.022202583;0.0030549879;0.03391137;0.028709577;0.096881524;
0.83956313;4.0488063e-05;0.01655023;0.38400429;0.71926337;0.40063944;0.83775693;0.0020886664;0.45227978;0.050878525;
0.26530346;0.006316341;0.37645859;0.5023579;0.065934435;0.012854536;0.00041933105;0.0014368942;0.019514363;0.45491159;
0.030101655;0.043196164;0.0090241833;0.52523965;0.31372058;0.6163128;0.0016671367;0.00087845686;0.74880308;0.10273738;
0.14258887;0.29178137;2.2462304e-05;0.58185512;0.061921474;0.20264503;0.0092844348;0.0039862371;0.11733471;0.22200619;
0.66375923;9.9517085e-05;0.24845742;0.35451192;0.84646142;0.047304586;0.8591857;0.011265274;0.7848537;0.032473337;
0.0063601383;0.037702389;0.043414924;0.70946127;0.0034927411;0.03515178;0.0044201696;0.030567596;0.024733139;0.52813703;
0.0078552086;0.073917806;0.048328251;0.019657429;0.018610504;0.038039923;0.0013768985;0.0038080981;0.68868285;0.0035427748;
0.73506516;0.76608646;0.04426714;0.33250955;0.0087340139;0.2383384;0.0024372216;0.14231375;0.00064367056;0.017376717;
0.77765965;0.0006216137;0.039577935;0.62445849;0.78398204;0.19252424;0.84215111;0.02463533;0.022802167;0.35983095;
0.37279579;0.014077452;0.10303496;0.0069754156;0.046628851;0.012478938;0.15618569;0.012121364;0.40332147;0.26636633;
0.0070070936;0.19125585;0.00058289006;0.031774119;0.094864368;0.028263904;0.0019256694;0.0013947667;0.1213607;0.29872578;
0.089071631;0.059669409;9.3507522e-05;0.68069738;0.030797426;0.36009616;0.00047686155;0.0015464224;0.68367165;0.14421903;
0.80797654;8.3320985e-05;0.1205512;0.013090396;0.85150069;0.069904342;0.80275601;0.0035429965;0.58178937;0.0060470165;
0.045968216;0.0025577582;0.15999533;0.29379454;0.022043876;0.068707213;0.011342173;0.0072954628;0.0077696019;0.32981414;
0.062798165;0.029082883;0.063060522;0.030427013;0.66528779;0.032018375;7.7092918e-05;0.027060149;0.73869163;0.022808632;
0.030394468;0.0063675125;0.0018831774;0.3234466;0.00062405423;0.7528975;0.0031416831;0.0027305465;0.13395308;0.041113604;
0.83285874;0.0006405923;0.70134836;0.028270578;0.84378862;0.20666544;0.80444783;0.00042846162;0.51744235;0.33501825;
0.028382987;0.012521232;0.012529163;0.010320993;0.039963447;0.0015707539;0.065491833;0.0016270686;0.029947536;0.057016797;
0.028002799;0.051422063;0.5972203;0.0091759367;0.55115294;0.023299977;0.00068532611;0.0035683459;0.72147793;0.12915602;
0.037302453;0.065478317;0.00066422619;0.31846511;0.015431815;0.28850183;0.0044891038;0.00085755985;0.58691812;0.43452421;
0.83336502;3.5628087e-05;0.17568946;0.060227167;0.84164107;0.097130544;0.84795934;0.001539988;0.60828209;0.0060373978;
0.0038010445;0.070692919;0.15533353;0.69415778;0.014998904;0.045678329;0.0050316001;0.02538632;0.008687635;0.3708443;
0.053505015;0.040149659;0.074277297;0.042311739;0.085813999;0.26349837;0.00063072587;0.0072391611;0.69151801;0.0053356159;
0.0034912836;0.0035191681;0.00012261454;0.77766699;0.0048201806;0.16161923;0.018849295;0.020392153;0.41291127;0.041708812;
0.43266991;0.00090010744;0.065622009;0.031684536;0.71994466;0.24636959;0.21977489;0.0023834172;0.80190361;0.0075535011;
0.010214658;0.052056864;0.060029399;0.51737893;0.011361277;0.0033927376;0.001972344;0.028422821;0.048778515;0.3434636;
0.0043291766;0.079551473;0.61357313;0.50592178;0.35035625;0.75951612;0.0066558179;0.033147059;0.78004545;0.21945582;
0.4490912;0.050104819;0.027195081;0.40549561;0.00519499;0.65294158;0.008360099;0.023423649;0.078756392;0.013569806;
0.75676721;5.7276036e-05;0.054115847;0.031537578;0.87460208;0.24944566;0.86075133;0.0059235762;0.26393414;0.44224551;
0.056648295;0.0051624146;0.047254927;0.0011847243;0.27507979;0.019906439;0.38740689;0.0078684185;0.24400766;0.014844147;
0.26858777;0.034627702;0.046948601;0.0013307281;0.41652399;0.02222907;0.00024450014;0.0081045339;0.62641114;0.27556813;
0.010207329;0.034179114;0.00017360941;0.85982698;0.011939092;0.23193036;0.0079011219;0.013758566;0.72002465;0.5223242;
0.086346254;0.00041082595;0.010580643;0.0020408193;0.65538454;0.14167063;0.050907716;0.0049704891;0.65652061;0.0020130617;
0.0032756547;0.010929568;0.011707197;0.74700183;0.0080069918;0.0028840057;0.0041672615;0.074987762;0.07158713;0.27628148;
0.0027300711;0.69138551;0.44623125;0.33165497;0.064612135;0.73607308;0.0047905548;0.081076048;0.44605711;0.42649406;
0.027074123;0.11633099;0.00013807284;0.77653056;0.0080094924;0.002165697;0.15661889;0.029286847;0.44693765;0.058897857;
0.053855993;0.033586252;0.66931361;0.00072687375;0.81691331;0.073028095;0.012969883;0.010311381;0.73706239;0.034465645;
0.27084991;2.5659609e-05;0.0069773397;0.050510462;0.04668824;0.36246544;0.0064951209;0.0025468578;0.0050433348;0.054584485;
0.00063745881;0.53688353;0.88966113;0.0073703607;0.74963498;0.049491826;0.0019116005;0.078503549;0.035023276;0.44201985;
0.024478082;0.007671555;0.0023214379;0.033853661;0.01211812;0.83183998;0.0031375636;0.0031491928;0.076378658;0.14797865;
0.83222991;0.00092006248;0.64366794;0.042076539;0.82178193;0.15794177;0.67270523;1.1956252e-05;0.81258804;0.18892629;
0.32155311;0.0022366757;0.16412118;0.029777357;0.018996531;0.00071828021;0.052053511;0.035195734;0.03268807;0.054397229;
0.023696225;0.025743777;0.4153381;0.003197008;0.069904841;0.013924377;0.0035435669;0.0042238194;0.78043365;0.27043819;
0.041375309;0.65027529;0.00016218069;0.70874929;0.012534689;0.00077746424;0.60498935;0.013377681;0.12593052;0.29033551;
0.064315736;0.0071446411;0.62476379;0.048004139;0.81890678;0.026740858;0.71266508;0.035357118;0.55346131;0.0072923205;
0.0016531944;0.017668897;0.0041614259;0.35927051;0.0042962804;0.060632721;0.0035985119;0.0093191583;0.051487491;0.23593257;
0.0026262968;0.66733134;0.82545012;0.011730506;0.3918753;0.39206544;0.0024166885;0.0008968903;0.044002078;0.020498306;
0.023317704;0.0079764687;0.006353341;0.018817177;0.017630732;0.86400729;0.0062094447;0.0043968926;0.32905769;0.076111294;
0.83776385;0.0029527345;0.11838213;0.13272558;0.86325246;0.12013709;0.76874644;0.0014094034;0.59382641;0.1432043;
0.073696502;0.016645329;0.066990376;0.0096084867;0.30589524;0.00062093919;0.53113633;0.054860361;0.068684682;0.01794773;
0.039175648;0.012304597;0.045539089;0.00075801642;0.087737039;0.095558025;0.00043247195;0.011052604;0.78065968;0.04290225;
0.49122235;0.15053508;0.030922238;0.14304352;0.16233917;0.60521531;0.0037232628;0.014265732;0.046328228;0.02555754;
0.77339977;6.2235034e-05;0.037657768;0.027771724;0.85109574;0.37436199;0.78472811;0.00028263632;0.39046422;0.2538451;
0.40748465;0.0014301121;0.6625917;0.0021491565;0.043044847;0.0035198969;0.046048407;0.027605927;0.064295202;0.043214619;
0.064297207;0.025958585;0.011001899;0.0062093805;0.12472494;0.024176309;0.0075055356;0.006311724;0.71241844;0.60318929;
0.78584146;0.79493368;0.002231986;0.62189525;0.039052181;0.45374164;0.0017201171;0.013834382;0.074729912;0.064944588;
0.5469507;0.00033496076;0.026503319;0.133251;0.86621118;0.079649612;0.81080705;0.021412384;0.018624686;0.56037283;
0.021753365;0.026206343;0.045109626;0.018686624;0.042085934;0.023805087;0.17260243;0.079489894;0.063422017;0.25424874;
0.017779637;0.29429245;0.00017022542;0.024814891;0.3195447;0.0055849329;0.0018125158;0.0026414748;0.30708733;0.049561616;
0.010463495;0.011804881;0.00053742738;0.34261382;0.43536305;0.83885092;0.001293238;0.0078379586;0.714221;0.25661173;
0.61159867;0.006503521;0.27367461;0.014806059;0.6605581;0.011980304;0.42396715;0.00047128755;0.82496339;0.0059519834;
0.59971815;0.0011278153;0.11013108;0.21210237;0.075194545;0.025719376;0.218595;0.16911435;0.0070853899;0.021799663;
0.004048374;0.039166592;0.43413666;0.0010839925;0.024542106;0.01068037;0.00072172924;0.14594921;0.61221123;0.55590105;
0.043489743;0.0026809566;0.013550461;0.051709939;0.050392695;0.87008828;0.0072734039;0.0031769504;0.028533561;0.27382544;
0.80212504;2.6242971e-05;0.032210965;0.28224444;0.73565578;0.13629067;0.74236876;0.0012345901;0.82962954;0.37597069;
0.0052507785;0.0051798564;0.45481104;0.015879985;0.082109958;0.001280152;0.40236574;0.013265699;0.17737944;0.029648891;
0.012593805;0.0096847834;0.032944407;0.015805731;0.066122197;0.024716455;0.00057280291;0.015870133;0.80549806;0.045225713;
0.015012361;0.46670449;1.4039731e-05;0.047740422;0.015030985;0.75805116;0.007078785;8.4213061e-05;0.47045231;0.66746217;
0.78292203;0.0034114646;0.047557902;0.61177707;0.75250953;0.006125249;0.8470602;0.0014427778;0.71985799;0.0038011728;
0.0008011582;0.060899083;0.022924587;0.73054272;0.0060887616;0.011330397;0.030056398;0.30160314;0.12964782;0.46270159;
0.0045864452;0.24812444;0.015454284;0.012116557;0.0056727198;0.067387417;0.0017747134;0.0079070209;0.083841816;0.0030820484;
0.020424897;0.0067716269;0.0070188926;0.050267883;0.0036910691;0.79822886;0.00069315161;0.017117489;0.26730469;0.11771275;
0.83583015;0.0036653394;0.11890724;0.034947451;0.77344477;0.11983396;0.78293455;0.0006274943;0.80664814;0.14387155;
0.63415045;0.0059294114;0.071398877;0.065380186;0.052129;0.0020690206;0.035069913;0.011385667;0.004207083;0.031920068;
0.081002951;0.024070157;0.31005326;0.014307905;0.16804783;0.012494078;0.0097291199;0.00024396495;0.83789945;0.15490121;
0.55541855;0.027509993;0.0073609343;0.13593517;0.026110826;0.79764092;0.0080364253;0.013610778;0.042745564;0.048979491;
0.73817033;4.8286114e-07;0.0031964062;0.21008092;0.75451326;0.10567086;0.78219163;0.0016125045;0.74897903;0.72067928;
0.0019531102;0.00065128651;0.54673553;0.0099225659;0.17694356;0.014053061;0.38044661;0.013806867;0.48263767;0.042441249;
0.029782573;0.0080223819;0.0043461695;0.010943745;0.098298669;0.0025284479;0.00042924649;0.01422572;0.70234036;0.073876753;
0.77101606;0.77608901;0.0016990135;0.81064647;0.0059572416;0.13122797;0.0030527697;0.033324212;0.082767352;0.12172348;
0.15763094;0.00055135315;0.028581528;0.021774845;0.80038542;0.10027836;0.82165742;0.010939901;0.0792;0.64668912;
0.25796509;0.015148374;0.013795453;0.2677739;0.0031891498;0.014568637;0.046109803;0.055130228;0.008309274;0.12654994;
0.022175472;0.53621978;0.00079647737;0.069968432;0.41065204;0.0020360979;0.013079703;0.00014067681;0.40394196;0.20135057;
0.038085215;0.39954361;0.0010252576;0.6548447;0.012766103;0.018206958;0.014521176;0.046752322;0.54436594;0.29045758;
0.16675353;0.0072163329;0.37116456;0.00084476365;0.47442335;0.019469526;0.042319119;0.0063241641;0.81813139;0.03436264;
0.60069746;4.8037309e-05;0.015643764;0.23976669;0.026083507;0.52407527;0.0053568413;0.0077158012;0.0030326804;0.025249302;
0.0095446855;0.69034719;0.84970093;0.015374622;0.50687099;0.038627077;0.02668309;0.027793415;0.060516059;0.66673845;
0.4312939;0.16049911;2.0269534e-05;0.54070061;0.0093251662;0.18783119;0.003755742;0.006508138;0.046972759;0.013233499;
0.73215729;0.0004653027;0.12253021;0.16483755;0.83372408;0.39531291;0.82244915;0.0061683408;0.74341667;0.50962788;
0.024225527;0.012963274;0.21063875;0.12857543;0.0079803159;0.0411589;0.0025159633;0.0068267104;0.0098963734;0.55259818;
0.0070094662;0.015737483;0.18032177;0.064812407;0.37440953;0.019455761;0.00024081138;0.0020545714;0.817761;0.010877902;
0.0073472117;0.46478152;0.00056600256;0.36598313;0.0076523814;0.058140326;0.29316977;0.012976371;0.54249024;0.67075938;
0.094989225;0.0022219729;0.48455572;0.045584384;0.61929631;0.005601862;0.65661335;0.021872865;0.75370276;0.011548595;
0.0091403713;0.010847864;0.010430573;0.7488777;0.0013966217;0.045301542;0.0039050549;0.046688911;0.036028489;0.072475843;
0.016252419;0.79925239;0.78357184;0.014477321;0.054281075;0.18990171;0.033388298;0.0005076197;0.039097473;0.076261997;
0.0060439385;0.0065313512;0.024316872;0.5368405;2.7273667e-05;0.84298956;0.014849314;0.065229475;0.31019929;0.055429135;
0.29242051;8.0550926e-05;0.26932266;0.0042879442;0.25468987;0.046543967;0.30177787;0.013215836;0.73483849;0.45922357;
0.085567668;0.19476481;0.021706233;0.43883127;0.0070559564;0.00056031818;0.014116501;0.0010186204;0.015740126;0.012473171;
0.38028148;0.80476165;0.61538303;0.50810474;0.40288365;0.06682615;0.018205291;0.00030775915;0.74279803;0.28498533;
0.7745738;0.36840996;0.010201441;0.62369925;0.02833961;0.062765121;0.014745262;0.048445348;0.0081737414;0.001376087;
0.24745418;0.00049668021;0.036308311;0.1932787;0.82530046;0.39639622;0.8105402;0.033909358;0.25885054;0.72906017;
0.15823476;0.039207526;0.31225318;0.023426151;0.10803762;0.044999573;0.21911535;0.029902905;0.11629214;0.27013895;
0.016046157;0.039357502;0.0025289864;0.02710332;0.15975058;0.0046562133;0.0023619654;0.010774811;0.69308794;0.15450908;
0.12549143;0.28392729;0.012893345;0.74455929;0.00019792365;0.80803579;0.0043741921;0.062848233;0.59637779;0.71628219;
0.019843666;2.2604729e-05;0.057347246;0.00042947338;0.073163278;0.044406381;0.14921488;0.0074900175;0.052207176;0.62112212;
0.0135024;0.055409107;0.0034733806;0.68152702;0.0011995927;0.0013775217;0.024150865;0.0063540461;0.016823849;0.053901054;
0.16245529;0.88723689;0.012780762;0.50488913;0.44639069;0.0094050681;0.010146531;0.0012758625;0.29098183;0.46026108;
0.0013530597;0.0082457131;0.00015535273;0.84240365;0.058384158;0.20722006;0.0061403182;0.029632207;0.77176946;0.13103722;
0.11774743;0.0027801681;0.049296223;0.0057035;0.63282818;0.051199615;0.013807108;0.0022562898;0.80167896;0.00016038069;
0.046847273;0.010007635;0.041321289;0.54274851;0.045574989;0.023912909;0.0021999823;0.040030215;0.035845295;0.084770083;
0.0072493572;0.26793668;0.77634645;0.31157333;0.099308632;0.37148729;0.0074519916;0.23219267;0.57601053;0.70054352;
0.013405196;0.05160962;1.3970176e-06;0.014078774;0.00056265446;0.043102555;0.05027191;0.00023574741;0.070949763;0.0082571274;
0.53180689;0.58711296;0.79742599;0.0075166933;0.75923461;0.68439698;0.60481489;2.5870921e-05;0.63908464;0.71536624;
0.034227762;0.031554352;0.049348898;0.024581732;0.078250207;0.051022798;0.021199454;0.025687885;0.470781;0.7451939;
0.00034497431;0.0014125771;0.83870292;0.015786747;0.42796019;0.05961233;2.44737e-05;0.0023159876;0.089319266;0.04285226;
0.0029922163;0.029760882;1.8432538e-05;0.78583622;0.015881548;0.067673303;0.023945861;0.0031759364;0.4989363;0.53000593;
0.20505835;5.0502476e-05;0.032204252;0.11694349;0.73011744;0.050958041;0.39344147;0.0018657179;0.7873525;0.00011414979;
0.00050767488;0.082018338;0.034166697;0.8143155;0.00053965941;0.0022657325;0.00060858933;0.106968;0.06673903;0.58016288;
0.0016764526;0.38824001;0.47083741;0.54523587;0.025302066;0.79903829;0.0030283392;0.01053066;0.58646733;0.14657627;
0.0037189536;0.0014273586;0.0080216769;0.018964415;0.0045774039;0.82485771;0.0043244315;0.0033991383;0.29307881;0.08805681;
0.84083319;0.00051713659;0.39579076;0.030845068;0.80958158;0.051847503;0.80919147;0.0001588711;0.7427994;0.034535434;
0.20593204;0.029349204;0.060427442;0.2056665;0.31319633;0.0074562239;0.45159546;0.0057377424;0.017820096;0.018108314;
0.040845189;0.012300872;0.05569049;0.0076205116;0.2171046;0.22087769;0.00061656092;0.012915334;0.79041713;0.04018556;
0.64669901;0.41336912;0.0029190197;0.02834649;0.049133159;0.11788617;0.56176376;0.0026026901;0.014135606;0.0013473645;
0.2591182;0.0043773344;0.026520211;0.057404324;0.83181232;0.67769325;0.84218067;0.0015672034;0.022184856;0.45175979;
0.11083653;0.010717978;0.11862214;0.0074115926;0.66107476;0.1304712;0.51992065;0.13516609;0.75184691;0.053009842;
0.022064315;0.007404475;0.0043841316;9.0339541e-05;0.080632947;0.013094361;0.00021119797;0.013309555;0.25891262;0.20566542;
0.58178937;0.35954574;0.00022920985;0.68759811;0.043266624;0.15884395;0.0010183307;0.0053820419;0.44445544;0.27772015;
0.71973401;1.6786111e-06;0.027479129;0.0070758355;0.85867441;0.072425276;0.84530431;0.00061338453;0.26676369;0.056517117;
0.032527693;0.0065988749;0.058397178;0.71297038;0.01531731;0.092798658;0.01508217;0.013794252;0.018588189;0.30226862;
0.042865679;0.21939373;0.0013252501;0.14509439;0.40271601;0.24160933;0.00052058889;0.0036324167;0.59297997;0.036354948;
0.019820724;0.026733141;0.0026957225;0.13215679;0.19024202;0.83235127;0.0015092512;0.0070919949;0.68763125;0.22714868;
0.75005364;0.0027991168;0.035459787;0.045511242;0.85050732;0.029622197;0.72652966;0.0010862822;0.69732416;0.0035173618;
0.45784265;0.0007105706;0.03910083;0.011393838;0.36666113;0.0065085231;0.46486738;0.037564829;0.024245756;0.022593824;
0.037647367;0.038154669;0.038232509;0.00017147583;0.076559901;0.026685383;0.00025601729;0.031779822;0.71700883;0.12739621;
0.012108868;0.0032015394;7.2412753e-05;0.46303025;0.0073046326;0.11071097;0.0021049534;0.0016579158;0.3696309;0.045132104;
0.82399052;0.00017106542;0.054468829;0.034936376;0.77666974;0.25157952;0.81712204;0.00012147694;0.65177596;0.06968154;
0.37595069;0.0079249125;0.11567964;0.62617922;0.070608802;0.0065640551;0.0012237793;0.0036122957;0.00023688019;0.24770258;
0.11710511;0.05250176;0.2099835;0.195934;0.72029132;0.43664095;0.0020178463;0.0014514728;0.81662399;0.021702271;
0.027760254;0.16071884;0.0021304931;0.019406542;0.014395377;0.83871132;0.013020467;0.0038089959;0.51892388;0.31659552;
0.7935558;0.0055633872;0.070475623;0.13748492;0.87242717;0.081214242;0.84525889;0.0071788197;0.49488679;0.012049272;
0.023084963;0.029909579;0.029964846;0.052497067;0.1624812;0.0029504846;0.50156075;0.1010185;0.1652395;0.045747779;
0.047097236;0.04902982;0.0080078896;0.00018620693;0.016999658;0.054791767;0.0014402417;0.010995291;0.66141093;0.018997574;
0.058367137;0.00056173466;0.0069749667;0.051515672;7.3002549e-05;0.80009669;0.015291236;0.0083169639;0.23375265;0.077345975;
0.34244385;0.0015191199;0.043899745;0.015917594;0.81223363;0.62667483;0.76089001;5.2471656e-05;0.75213486;0.77955049;
0.037598044;0.0030933921;0.0049799155;0.0060625989;0.22390987;0.00046166644;0.51637989;0.030049935;0.62734681;0.076777197;
0.054179434;0.13041224;0.16395772;0.0090955542;0.093178779;0.0068544764;0.00024028578;0.00063847058;0.73581576;0.20043942;
0.32068416;0.036829706;0.03683608;0.083222978;0.038118098;0.16258213;0.011770758;0.049259312;0.070301384;0.0079086889;
0.69697142;0.00090845465;0.0079210643;0.011810768;0.84731913;0.24852273;0.85702318;0.0011898398;0.15127915;0.34253719;
0.66730982;0.0010593856;0.22578785;0.022079539;0.63631719;0.045784689;0.063654833;0.010411108;0.015020892;0.0080539314;
0.26533219;0.0043407832;0.0035323498;0.013343679;0.51879478;0.080516793;0.0058879871;0.009678416;0.73968488;0.47721705;
0.79129708;0.59741455;0.01355671;0.81307143;0.0044869878;0.067319326;0.028389869;0.034481078;0.044961996;0.062341545;
0.033831179;0.00021724832;0.012504651;0.026655352;0.78775537;0.20869868;0.85133892;0.0079178587;0.016869938;0.71111315;
0.21855859;0.011884422;0.0019943032;0.061894938;0.022448674;0.028383404;0.522331;0.072398737;0.27262375;0.094897665;
0.010162632;0.56942743;0.00054362073;0.0075286208;0.36960837;0.0037903998;0.0021548602;0.00093469908;0.11514691;0.29163772;
0.011963843;0.01561709;0.00046676825;0.0025818401;0.0020974753;0.44543657;0.0074825147;0.0044075372;0.68303239;0.0077946102;
0.70673221;0.47858569;0.050136693;0.030904455;0.67901975;0.64960921;0.067667797;0.001000216;0.62156218;0.05375085;
0.029011976;0.0025629231;0.32053575;0.06437882;0.81132609;0.0036727858;0.62541199;0.0071279686;0.63723111;0.016117288;
0.00022608988;0.0077622272;0.51394242;0.0015446834;0.11787507;0.8121931;8.5335327e-05;0.38093698;0.049092896;0.012289337;
0.0012205621;0.035894282;0.00061349495;0.016506435;0.0069520101;0.029374229;0.0036827037;0.0069907415;0.55695218;0.0057356264;
0.73193866;0.75077891;0.1682765;0.01579708;0.79508132;0.35252541;0.44354302;0.0048526917;0.76212585;0.035458781;
0.070663877;0.0057144654;0.084015056;0.048142038;0.61561698;0.029290808;0.032872941;0.0041094208;0.6048367;0.13204163;
0.00017677259;0.0081426222;0.84105808;0.0070576239;0.18518364;0.55798066;8.9612346e-05;0.037991606;0.048461117;0.034137174;
0.080609418;0.031532209;2.4266164e-05;0.72164989;0.00027974814;0.19143985;0.018388607;0.0016427061;0.41763234;0.20596629;
0.79934001;0.00055242016;0.26143304;0.0064163115;0.84572005;0.24943067;0.82231772;0.0019872687;0.53992587;0.13949738;
0.0051067541;0.0080355918;0.0089385146;0.3133615;0.020626774;0.0053026555;0.015265283;0.0013660297;0.032555204;0.27318868;
0.046336949;0.1244669;0.52698624;0.016240532;0.53268814;0.47325093;0.00045308773;0.019928336;0.68839306;0.020946691;
0.035138696;0.054614525;5.2649724e-05;0.72741628;0.033324212;0.0087747462;0.30601731;0.001904059;0.29391423;0.039898355;
0.34550008;0.006717057;0.068929017;0.0068634539;0.72822422;0.71479297;0.62248003;0.0076605254;0.37787715;0.013775988;
0.006134483;0.03016296;0.03884919;0.67950499;0.054755218;0.0074137733;0.00039357049;0.0099779563;0.26356584;0.71160114;
0.011508704;0.034218367;0.12688707;0.27054831;0.33620319;0.7351585;0.00074817654;0.026256396;0.74646717;0.03654049;
0.020399662;0.0019980422;0.0029848332;0.14744359;0.011199671;0.81658316;0.0055273487;0.0004629051;0.33383572;0.44147533;
0.83889925;0.00027715432;0.078956164;0.010897847;0.8098346;0.22609727;0.82310128;0.0012752538;0.78476053;0.18486921;
0.022614263;0.0038110479;0.034584753;0.077988848;0.084583327;0.0012062009;0.30891383;0.0096653188;0.11943719;0.1264341;
0.073006563;0.02041718;0.024885798;0.0061778952;0.077105649;0.088572897;0.00031734348;0.0048414059;0.83322537;0.033006478;
0.2039973;0.24255796;2.4287674e-05;0.66880524;0.006283124;0.0413743;0.035183989;0.0020981724;0.20196408;0.30569175;
0.6614275;0.00025961676;0.024352325;0.028746909;0.75150955;0.36606067;0.80212182;0.0036470878;0.71850741;0.047829337;
0.062548831;0.0036302304;0.054120354;0.76252031;0.0088371057;0.013557911;0.00030212998;0.012583952;0.026919795;0.52200252;
0.039550759;0.05770123;0.045548148;0.10770397;0.14192966;0.29150847;0.017053464;0.0011456546;0.81163996;0.055340014;
0.0090683997;0.0006229321;0.00035622041;0.059996355;0.0044126669;0.69581711;0.0040981988;0.0011669139;0.78073192;0.06262143;
0.86913329;0.0016783854;0.081499629;0.0076269242;0.7527948;0.050618835;0.631607;0.00013485926;0.6379844;0.012713958;
0.072915442;0.003194093;0.13684537;0.24399482;0.44298381;0.00051250076;0.21840549;0.011957355;0.0069639375;0.011335203;
0.05416742;0.024117289;0.146202;0.013527753;0.46950555;0.73304796;0.0012034765;0.1350991;0.72146058;0.013636371;
0.004007847;0.0075686988;0.0028193963;0.44779122;0.010714253;0.087361075;0.00040886985;0.020240121;0.58155608;0.027456395;
0.82532245;0.0015003242;0.011182609;0.0022835087;0.7957285;0.060290754;0.79183477;0.0073797228;0.74780047;0.0068378681;
0.53363729;0.0021293841;0.051179148;0.40844285;0.24032879;0.0076312847;0.010231239;0.000599747;0.018791109;0.028471204;
0.077647887;0.13988148;0.25535154;0.062132761;0.5919134;0.52546847;0.0023611097;0.022418225;0.72039932;0.083633035;
0.088281557;0.17580825;5.2940715e-05;0.56205374;0.038387854;0.042526133;0.056679338;0.0020193041;0.094626442;0.37319359;
0.68470502;0.00018667252;0.073946849;0.028029077;0.80846965;0.47217172;0.79485911;0.00024485774;0.6617521;0.028951706;
0.040712994;0.0019812165;0.1819019;0.70734662;0.0072977073;0.0064653028;0.00061482558;0.022314992;0.050651379;0.60147852;
0.010403778;0.045989688;0.044573803;0.06027323;0.07796181;0.55979067;0.010286509;0.02529289;0.70106685;0.053325273;
0.026400086;0.04800716;6.4772299e-05;0.66494662;0.0035553861;0.00037042829;0.13684715;0.024188822;0.39227059;0.16008733;
0.31356019;0.0011724932;0.18940149;0.0037669302;0.65521562;0.7131744;0.73021209;0.0014470672;0.16095823;0.06118397;
0.049662944;0.010952877;0.020193197;0.76943183;0.1408944;0.0034634944;0.00097853644;0.0011647692;0.041516226;0.47458032;
0.0063918158;0.042065132;0.12330779;0.031007795;0.61681437;0.78604448;0.0013330611;0.026878085;0.82183415;0.023792574;
0.40699175;0.26423392;0.00046739372;0.73869026;0.00098560844;0.013248757;0.61551589;0.0065736738;0.32009289;0.12221736;
0.13789581;0.00023016984;0.054475337;0.0069064177;0.50499707;0.73554248;0.7872625;0.0051175915;0.3671315;0.14256208;
0.0090065207;0.00096201594;0.0054231463;0.66840446;0.39962366;0.021367338;0.0080837468;0.00061250158;0.45417085;0.21577053;
0.023511449;0.2112394;0.18662353;0.012253051;0.51157969;0.29359347;0.0019488642;0.0027755734;0.77246219;0.073994912;
0.0037471864;0.015503306;0.0023730239;0.67972362;0.0015978534;0.65663159;0.025800293;0.010749819;0.73112935;0.26767334;
0.32094029;0.0014362565;0.25207955;0.0015510452;0.28739113;0.049755212;0.20778646;0.014651302;0.79916888;0.033250064;
0.013280959;0.01494099;0.011039508;0.77291006;0.12053525;0.0014311554;0.01130132;0.013238184;0.037036721;0.075258635;
0.30076051;0.39303115;0.62125093;0.036871646;0.11341624;0.29502976;0.019448461;0.056498591;0.78106153;0.22547093;
0.046632208;0.0047595822;0.0018477199;0.034337815;0.0065246182;0.79645032;0.0024744219;0.0010495603;0.64082122;0.082717784;
0.87134624;0.00018220136;0.19142109;0.0051760091;0.77044994;0.05221523;0.76450324;0.00013555045;0.65417397;0.016023207;
0.0334091;0.011630419;0.055564322;0.38060173;0.25850365;0.0080957627;0.49887252;0.0082931733;0.027455978;0.019682039;
0.04140215;0.024497686;0.013220762;0.011530091;0.22616687;0.50546312;0.00029529893;0.18322745;0.71618354;0.0064488226;
0.0090375207;0.0088463575;0.0088563301;0.15751749;0.020074949;0.57427979;0.00047671437;0.0071581076;0.53466576;0.087392285;
0.85284919;0.00045761318;0.07319282;0.0070812218;0.83973825;0.020694552;0.84637314;0.0019963628;0.7958988;0.0091861496;
0.16268931;0.025959834;0.052286025;0.45081794;0.094086781;0.039163571;0.096146248;0.0014704568;0.13898467;0.05450638;
0.043710515;0.062699534;0.027843466;0.053188585;0.27489784;0.17437997;0.00069123873;0.027309576;0.6998331;0.02195983;
0.059154209;0.0045554088;0.0051493333;0.40431222;0.0077864667;0.77145869;0.00061884202;0.021408631;0.28245029;0.0070322305;
0.86598015;0.0044934005;0.32583803;0.052216236;0.8619532;0.077329449;0.84921509;0.0026399854;0.33683994;0.022394242;
0.063203223;0.0026755698;0.0072390973;0.0010986147;0.53481299;0.0019847653;0.38731933;0.00083050388;0.062998943;0.0097563947;
0.051141907;0.010513959;0.18090415;0.0018914794;0.37799725;0.073908292;0.00056663412;0.036354613;0.77465647;0.069281995;
0.059690438;0.005188385;0.00035685202;0.62794948;0.063218743;0.10916343;0.0085334787;0.015194393;0.59103322;0.00099766545;
0.73752767;0.015504147;0.022593616;0.04542971;0.80449563;0.22670649;0.37574553;0.022671614;0.44155139;0.0047316239;
0.0037749456;0.015330886;0.19024113;0.068930015;0.064844951;0.017021138;0.0041177571;0.0073306672;0.10528033;0.65943193;
0.041139103;0.028283717;0.30278566;0.58338875;0.5897665;0.51825565;1.2296619e-05;0.06405738;0.80727744;0.076125309;
0.040174153;0.0025896351;0.014824563;0.079857394;0.055404603;0.81919229;0.00045134014;0.01322701;0.22640456;0.026878085;
0.87609094;0.0020954791;0.022412594;0.11500957;0.84558791;0.052917216;0.83576161;0.002365926;0.67568445;0.035033341;
0.15984258;0.0022761892;0.044258416;0.0024934972;0.48523515;0.0021217475;0.52639049;0.001803992;0.063109592;0.025451805;
0.084151238;0.0046909046;0.013823088;0.0061851414;0.074665323;0.039276641;0.00060438889;0.012054559;0.81181026;0.027429493;
0.036127802;0.0028336237;0.0088909343;0.18408942;0.029190078;0.74657118;8.4696891e-05;0.070347443;0.47014818;0.014940389;
0.84743947;0.0090315128;0.017587978;0.032259613;0.8049044;0.024961086;0.79382586;0.0016847228;0.72725093;0.0080564963;
0.720406;0.00044105673;0.042078555;0.0075726104;0.55610043;0.0081513934;0.14298636;0.0047398959;0.006200403;0.0036554849;
0.071418904;0.0053368341;0.063637808;0.0046283188;0.06272006;0.013159725;0.010747176;0.004220421;0.83942008;0.11373879;
0.093741335;0.0015128161;0.0071214279;0.065742172;0.0029126189;0.85052562;0.002348942;0.0021870858;0.63701302;0.07617788;
0.79749489;0.0010237215;0.03510011;0.009245865;0.79306513;0.30203402;0.79153472;0.00014698158;0.60198003;0.16016772;
0.10583664;0.00064621534;0.012997158;0.0097351279;0.54977334;0.0009483358;0.66143411;0.015046605;0.34854987;0.0032562942;
0.095395014;0.055707514;0.0096444124;0.00039758082;0.081890658;0.14397785;0.00076520431;0.027991328;0.72867352;0.028494772;
0.012474613;0.00084996619;0.0080007073;0.2151217;0.0028494988;0.82554758;0.0022392105;0.0092847953;0.49039823;0.022267442;
0.54432064;0.003129832;0.011620086;0.0077276002;0.83951283;0.18404119;0.84295946;0.0003770999;0.73184931;0.10216234;
0.37901801;0.00057069963;0.0022909867;0.0066837762;0.65870327;0.0025455588;0.66581935;0.004019069;0.62695432;0.00065652939;
0.03762589;0.11353139;0.0092611248;0.0003429385;0.022038246;0.012743635;0.0010811955;0.0074988026;0.72923881;0.18286301;
0.054725178;0.0034532596;0.0057083732;0.17606014;0.058386661;0.81154263;0.00078271027;0.041798394;0.25680232;0.026039502;
0.85709417;0.0019146741;0.23087358;0.049023446;0.8431257;0.0709012;0.77060169;0.00015563832;0.73340392;0.010183058;
0.47801176;0.00020650119;0.12326756;0.0060892748;0.27138615;0.0011387566;0.34466052;0.010878983;0.050142061;0.0074256361;
0.032291152;0.017488291;0.12977754;0.00090890389;0.053940609;0.033340987;0.0054422552;0.049535781;0.79105216;0.21847294;
0.015448036;0.0036809293;0.0034896042;0.14442715;0.0045259758;0.037734263;0.0043441178;0.20144479;0.77206248;0.0066362596;
0.54259443;0.57526749;0.04557633;0.00092456944;0.73182666;0.46703562;0.31302875;0.0018958205;0.18704782;0.018592359;
0.68832016;3.2408952e-05;0.015763797;0.010093904;0.84099495;0.010491851;0.26371038;0.00030266959;0.011571905;0.0026796258;
0.011415466;0.014522859;0.59471452;0.0015103235;0.72727895;0.50718248;4.7062709e-05;0.25885376;0.65530342;0.44559109;
0.41000906;0.047591116;0.00044025344;0.68054497;0.065937944;0.54146403;0.0045756726;0.02777235;0.43992031;0.0076955375;
0.82996726;0.00061851705;0.041732971;0.27705228;0.80230105;0.029825324;0.61818421;0.0024472028;0.75338012;0.039560154;
0.0069038523;9.6205105e-05;0.06234305;0.012587557;0.50296861;0.027411141;0.054996546;0.0015445239;0.042486209;0.048363145;
0.032725647;0.014669926;0.21150386;0.023891846;0.3576493;0.031684201;0.00049403118;0.0071086031;0.84972954;0.024301231;
0.006222398;0.0033367786;0.0038101503;0.77302307;0.007028447;0.54423004;0.00059381733;0.15834016;0.78087944;0.015947271;
0.35802707;0.0092768651;0.040370096;0.008095162;0.076968461;0.032493468;0.028268702;0.0014897018;0.77305865;0.0087580448;
0.043367948;0.011207361;0.0077914684;0.40555567;0.59685552;0.0063911746;0.027707282;0.0018481634;0.027318545;0.011854745;
0.079904959;0.34821713;0.7717548;0.43664095;0.037430957;0.20007646;0.01110463;0.13689004;0.78740269;0.55610949;
      };
     };
     float_Data @[10] {
      name="Agent_Code_act";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 10;4;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [10 4 104] 0.8723138;0.027973184;0.0010009985;0.82085311;0.00064277527;0.00062482688;0.23158452;0.15202589;0.021075366;0.00031381144;
0.0022716895;2.8464608e-06;0.80854267;2.1001426e-05;0.0010776741;2.5713673e-05;0.064405859;0.82425714;2.9466138e-14;0.025379438;
0.00078029017;0.068198018;0.55485451;1.7865161e-05;0.6303581;5.3227363e-05;2.7271286e-08;0.076081753;0.00019578046;0.87216407;
3.9773258e-07;0.011061856;0.64583075;0.65381461;3.3035601e-06;0.036634099;0.052290387;0.67857099;0.40066695;0.87143672;
0.92098749;0.69196844;0.1704953;0.70307398;4.2392094e-05;1.3558251e-11;0.65640301;0.63897562;1.3353718e-10;0.00020152603;
0.1815196;5.7215604e-10;0.00033188247;0.16890354;0.8208462;0.78425616;0.60936844;0.78435141;1.4018758e-06;1.6879676e-06;
0.13122867;0.0071941456;0.00039721903;2.2140885e-06;9.3146774e-08;1.1277714e-07;2.2174875e-09;0.00075716141;6.068627e-05;0.24942745;
0.021070153;0.0033501189;0.019144394;0.79514539;2.0183741e-06;0.44414151;0.8754676;0.81052315;0.0040463218;0.015022093;
0.51428223;0.0019864447;0.31979606;0.8023513;0.0020382528;0.058641508;0.0033575336;0.79047632;0.36432937;0.70224428;
0.014499429;0.051499233;6.898601e-05;1.4583744e-06;0.0013786955;0.68008792;0.0015230906;0.6744557;3.2815025e-11;0.0017806388;
2.1630906e-06;3.8261769e-05;0.82400185;0.00022725387;0.66536725;2.2428587e-05;0.010116373;0.053743843;0.80760348;0.011736995;
0.00055221166;5.4397577e-07;0.88212168;0.014777703;0.0012820214;7.7330481e-13;0.0003453361;0.90218747;0.62227583;4.1237687e-05;
0.76224929;0.84332204;7.3612568e-08;0.001660419;0.84146994;2.0517641e-06;0.050144076;0.0048625669;0.33696443;0.47802401;
0.091435619;4.2243623e-13;7.9631127e-06;7.0688526e-05;0.89618665;0.57364321;0.030847752;0.00053741509;4.8160137e-10;0.0043431558;
0.042162098;0.005581791;0.47070742;0.0039295508;0.0016819343;0.022814054;0.84236318;0.19606782;0.0058785607;0.66052496;
3.6019839e-05;0.19999616;0.74472994;0.015386998;1.0647605e-06;0.14573662;0.68713111;0.22541739;0.084018059;0.0069277068;
0.13778417;0.14312302;0.004145395;0.0014105048;0.00012378093;0.00022992985;0.0038488817;0.82605004;0.0033813938;0.0011113818;
0.38298103;6.8862484e-08;0.0049464423;5.980682e-07;0.89559031;0.6275847;1.5432252e-06;0.028696856;0.0031620259;5.8008292e-05;
0.00046337114;0.049711592;0.00018829011;0.78399664;0.00019763566;0.79295564;0.0014619792;0.81473804;0.00014193681;0.20294589;
0.68523663;0.0011476545;0.68879545;0.00084228558;0.43921146;5.0282911e-06;0.10829913;0.90194917;0.016820095;0.015789751;
0.84831446;0.0002061508;5.1503635e-11;0.0049218182;0.063172676;0.0011482921;0.73287064;0.0033823443;0.0020381575;0.048200417;
0.24498841;0.00021093877;0.064226612;0.10040877;0.37943083;0.0069392496;0.0067266757;0.56780547;2.7654675e-11;0.53992814;
0.00083169219;1.2547223e-07;2.8158829e-07;0.23507281;0.7784549;0.018579431;5.3064984e-09;4.5536487e-12;1.1901963e-09;0.013819003;
0.68514222;3.2927659e-07;0.013136054;0.84894925;0.86893719;0.57665384;0.69339597;0.75988233;0.63418019;0.87403703;
0.92554069;0.2529211;0.68248093;0.77340394;1.0871494e-05;0.36697137;0.45344239;0.53052926;0.14740875;0.034974627;
0.0014926582;3.3701863e-07;0.00012876089;0.31001496;0.001441488;0.36639592;0.0034951812;0.00057989766;1.2271502e-07;0.020028232;
2.2335284e-05;0.06969706;0.0001748598;9.3831972e-07;0.019630319;0.12467083;7.9959278e-08;0.00020993798;0.02298882;0.0035708176;
0.4606339;0.013613662;0.14466831;0.10592127;0.81620115;0.0086928019;0.82568532;0.074829549;0.63315529;0.70478797;
0.90286171;0.23501284;2.5410388e-06;0.0013391911;0.8161484;0.050723851;0.0020738053;0.33353171;0.18916658;0.3775444;
0.72123528;0.011118808;0.00087497884;0.38358399;3.6967338e-06;0.0067764362;0.45497781;0.77589124;5.5517731e-14;8.8095149e-09;
0.76463825;1.2999185e-07;0.028980069;0.0049163033;0.83566791;0.20399195;0.48963541;2.3517125e-05;0.0036862844;4.7852078e-09;
0.11591479;1.8673228e-10;0.64499813;0.59089053;0.039105527;0.00010662344;0.80021185;0.53732979;0.023944609;0.0013611461;
0.8929258;0.8895613;5.3757908e-06;0.83898014;0.81233257;3.0614088e-11;0.7476058;0.0038241935;0.69594961;0.012242357;
0.80746317;6.6029537e-10;0.00013715844;6.3338655e-07;0.63831151;0.85400534;0.00019336368;0.075130954;8.8807949e-14;0.59831655;
1.0231369e-07;4.3213714e-07;3.2695743e-06;0.0011401332;7.9861542e-07;0.57333511;2.9422142e-06;0.19879486;6.9334332e-05;0.1372259;
4.7966921e-07;4.9557147e-13;0.81648564;0.042366765;0.0001744062;0.047189169;0.0044687763;0.86742067;3.2261434e-07;0.25853574;
0.85804176;0.7130304;0.20342663;0.82893467;0.0004875251;0.01239339;0.65630698;0.73990887;1.1161696e-06;0.0071856813;
0.84041989;0.0026062389;0.00018661493;1.1714198e-08;0.0066706948;0.83129853;0.11841612;1.2391041e-07;2.8524848e-06;0.090766236;
1.8192159e-05;1.4841047e-06;3.238784e-12;0.00072500436;2.1584208e-05;6.4030104e-07;0.011366683;7.3789715e-06;5.9935971e-08;3.640605e-08;
0.0055414564;7.0702825e-08;0.79785663;0.82710278;0.16844085;2.8874901e-08;0.90878999;0.33007506;0.68098885;0.82893652;
0.90338165;0.072097331;0.024897059;0.55655575;0.19010358;1.2399114e-06;6.6430914e-07;0.00011726497;0.00055481162;6.247996e-10;
0.00029609608;0.30504063;0.0007652333;0.0026441999;0.44113442;0.39950109;1.8277233e-06;0.00089616567;4.8074845e-08;0.0010314746;
0.00096169714;0.20199834;0.66153848;0.70794278;0.084574811;0.078176603;0.041507501;0.020429902;0.7508136;0.81728244;
0.70813489;1.2316495e-10;0.82947922;0.82554698;3.929891e-05;1.2402969e-06;0.65476191;0.84184581;1.6307385e-07;0.0060620857;
0.69196683;0.76115894;0.0010483719;0.013144585;0.29637745;0.0075269532;0.3132107;0.041818526;0.011435051;0.10368977;
0.077714972;2.4636762e-05;0.00011509058;0.0057386402;0.018210921;0.87639165;0.85486388;6.024327e-05;0.24401301;0.014914076;
0.60586751;5.8256443e-08;0.010639999;1.6785255e-10;0.52475488;0.00040744722;0.70006657;2.641018e-06;0.00094346656;0.0013284673;
2.2106295e-09;0.045966204;0.88208085;0.075420849;0.58705634;1.8840676e-06;0.69971216;0.074698366;0.76578826;0.00067806576;
0.17436479;0.0031180128;0.55258912;0.0006149789;5.4338494e-07;0.38022894;0.12169921;0.82273722;0.034667291;0.0090166135;
9.2753929e-05;6.6595167e-06;0.61157489;0.15355511;0.00072654046;0.70654672;0.017245956;0.051900178;9.1744121e-15;0.00048313459;
0.77810752;0.041283041;5.3800657e-05;0.00074990105;2.8368001e-07;7.831216e-06;0.0061103078;0.0049058511;0.052500084;0.00051849172;
2.7584096e-05;3.6939747e-14;0.86228549;0.53107065;0.72247517;5.0608553e-09;0.86770177;0.88966936;0.69966912;0.83767408;
0.40810511;0.0074027437;4.0701853e-08;0.0011429157;0.007475974;0.001601882;6.3982712e-05;0.0049670264;1.1460589e-07;0.86907822;
0.73559314;4.8295355e-08;0.75938636;0.0017751571;0.028625948;0.0099196825;0.8855927;0.021037826;6.5009331e-13;1.215362e-07;
0.015077364;3.0752641e-08;0.83854657;2.073733e-07;0.87626803;0.0020448435;0.3374767;0.83640176;0.0033500872;0.72984946;
0.0001583767;5.4825426e-07;0.12697794;1.0200351e-05;0.60166484;4.9014171e-14;0.066911772;0.91250455;0.070574254;0.00098949217;
0.88658029;0.8361119;0.62018245;5.387362e-05;0.099910729;0.23123869;0.00014736077;2.343254e-05;0.0012557046;1.0458933e-06;
9.9550685e-05;0.0079665929;0.055649437;1.2907002e-07;0.26139233;0.79667902;0.014054262;0.023049092;3.4109382e-11;1.3178219e-06;
0.17706861;0.53233248;0.82537085;0.00033085843;0.035544671;0.44773236;0.054250531;0.0022539133;0.00021913472;0.36283073;
0.052465189;4.6046986e-12;0.68965662;0.52110994;0.00055658992;0.011629938;0.67584842;0.44830877;0.77760732;0.73636639;
0.89048445;0.20447162;2.8511566e-09;0.77309316;0.0035117851;2.6570138e-10;0.5005036;0.042637527;2.8044041e-13;2.5574735e-05;
0.79005378;8.3517007e-06;0.34547505;0.00039804683;0.26887983;0.85498053;0.00027211994;1.9464394e-05;0.00016911904;0.65875959;
0.3294048;4.1784857e-12;1.0789751e-06;5.2662112e-13;0.085206673;3.7713995e-11;1.0640259e-09;0.0018859342;4.2183623e-05;9.7658747e-12;
0.5986377;2.0471777e-14;0.14590456;0.86489856;0.84163618;0.76375091;0.90857744;0.7483151;0.1801842;0.7823559;
0.81982684;0.82158762;0.64818186;0.0034047787;2.8273601e-07;0.0013904773;0.003527882;0.0032297405;0.00013550965;0.019791318;
0.81233984;1.9897776e-05;0.75782722;0.00012981929;0.52672797;0.70165968;0.82236803;0.0022165861;3.2275883e-13;0.00020351082;
0.34380832;0.036557939;2.2849177e-05;0.13544209;3.0654284e-08;1.6615689e-06;3.4013815e-06;0.42033941;0.72382981;0.85587335;
1.2371974e-07;0.18882535;0.2600829;0.0010083604;0.01331364;0.00021793232;0.0073980624;0.19869636;0.048610758;0.85912615;
0.89133435;0.82401818;0.012189009;0.17038007;0.02818403;2.0805533e-06;0.074241243;0.56669319;2.7517734e-07;0.58163536;
0.21702109;0.056026448;1.6761949e-06;1.017826e-05;0.00095552363;0.22454692;0.3451573;0.3700237;1.1179947e-06;1.8744771e-07;
0.0081790285;0.4785955;0.048462123;7.0169939e-11;0.83909357;0.00051485543;0.043787684;2.2252186e-06;0.14029415;0.0099291746;
9.8689927e-09;9.1909932e-08;0.63505042;0.85739255;0.0081959702;0.6950835;0.89899528;0.034893095;0.37055409;6.9470705e-05;
0.41733712;0.84055305;0.018655343;0.89464355;1.0245959e-07;0.60113156;0.00059239467;0.054273061;1.9525843e-10;0.65405476;
0.0073211128;0.0019739284;0.34631568;0.020031778;0.89618492;0.47899529;3.5438208e-09;0.021891844;8.7209585e-08;2.4156003e-05;
0.20516756;0.2196539;0.6649847;7.4256345e-06;0.006832161;1.8536669e-08;0.7192927;2.4719263e-08;0.4742026;0.087526165;
0.006930849;5.8322734e-05;0.82417291;0.38549793;0.56468379;0.83195823;3.0415259e-10;0.005026598;1.626513e-08;0.04621885;
0.46226743;0.0011018898;0.00019182768;0.092993572;0.87294775;0.22003613;0.070116632;0.72429109;2.2628555e-12;0.20340414;
0.88581944;0.19310525;0.037176967;0.32973751;0.00024174977;0.3178499;0.88067043;0.67997861;0.0089458441;8.8464861e-07;
0.8716563;0.018878283;0.25357422;2.1305486e-06;0.81609815;0.0028850513;0.024018435;0.00035816425;0.0066135596;2.1919634e-05;
8.2697934e-06;1.9739263e-10;0.0014069978;0.19063327;1.2630968e-06;1.9209192e-05;0.24908483;0.0094819656;0.54901218;0.0052544978;
0.87207747;0.010928726;1.9914343e-05;0.8293277;0.019527711;3.976102e-05;0.29947025;0.03234148;0.00055409415;0.0067191087;
0.15541214;1.891476e-08;0.77725995;0.00035455253;4.1283725e-05;0.0007360325;0.11308745;0.85811979;1.1758666e-10;0.0042447243;
0.022471197;0.25069299;0.13665511;5.2669106e-06;0.89165044;0.0016616548;2.4932659e-05;0.12346803;0.0024965391;0.28719723;
1.4332431e-05;0.0059798779;0.23677734;0.70971322;2.6322068e-06;0.038017105;0.18872978;0.76320362;0.73142534;0.50949544;
0.89629787;0.88897091;2.6258958e-05;0.80131644;0.83897769;2.2135025e-11;0.82044435;0.00027226709;0.61712557;0.019262018;
0.79445761;1.4861374e-11;6.2563631e-06;4.8457252e-07;0.7011016;0.87041509;0.00017821018;0.022960667;5.9438272e-13;0.46462944;
3.7520593e-07;4.7050671e-06;2.7127305e-08;0.00077291386;1.2974979e-07;0.53479034;1.8382879e-06;0.38396928;1.3282552e-05;0.21218589;
2.6139105e-07;2.7886653e-13;0.84609592;0.040407337;4.7816698e-06;0.081054024;0.021438036;0.83536541;5.4014337e-05;0.18822421;
0.87014496;0.033697646;0.00023198663;0.81332362;0.009713741;0.0010424593;0.348037;0.080505773;0.015527217;0.00021796832;
0.0079048406;6.8403247e-06;0.61083937;0.00011466818;6.6072636e-05;2.0125946e-05;0.092825711;0.81096113;3.3942599e-12;0.035189021;
0.002714101;0.060254205;0.30632132;9.4861889e-06;0.80434155;4.056551e-06;1.1755539e-09;0.09157227;0.00012156094;0.81566346;
1.8228885e-08;0.0057737809;0.61316079;0.75163889;7.3903002e-06;0.070568249;0.24121852;0.67473722;0.73155469;0.86963427;
0.2429691;0.013188682;1.9919661e-07;0.0009262939;0.0097080935;0.0077417074;0.00092248264;0.014690472;0.00014839516;0.80046326;
0.49984872;1.1261686e-06;0.61279601;3.5525591e-05;0.027479753;0.00068594923;0.86544055;0.00081962062;1.1884168e-12;1.0259208e-06;
0.2233424;2.1274017e-11;0.89331084;2.4505673e-05;0.72831219;0.0046940469;0.10808756;0.88995093;0.091470301;0.8666144;
6.6135173e-05;0.00071207777;0.65664482;0.00070348417;0.48583853;8.9587636e-16;0.013037649;0.87301475;0.080965899;0.049644824;
0.39895317;0.00038550689;0.027085384;0.70440048;0.0076701441;0.08726535;0.0037078315;0.48180619;0.029024698;0.82101285;
0.088863537;0.025411764;0.00048865337;1.1260111e-05;1.5986442e-06;0.69285113;0.0076227561;0.75578147;1.4895284e-06;1.8542991e-05;
0.00043421343;0.0010642404;0.70950127;0.00013257447;0.89663392;0.012168103;0.0094568534;0.094102733;0.86591274;5.7033947e-07;
0.00032055666;1.3247673e-05;0.81885272;0.0077957003;3.0714258e-05;3.3019995e-13;0.00012073775;0.88240564;0.81081355;1.8155111e-11;
0.89442819;0.028016772;0.010134516;0.31686604;0.2313115;5.9576598e-07;7.6291894e-06;1.2759748e-06;0.00053013029;1.6059358e-10;
0.0011448866;0.17808332;0.00016241588;0.0018952501;0.65640968;0.31520712;1.9764498e-06;0.00013332086;1.0740698e-07;0.00070793316;
0.031781163;0.24039303;0.39052176;0.76146555;0.019063685;0.1420556;0.12859763;0.32251781;0.76130545;0.795044;
0.75981748;2.0636925e-08;0.84689152;0.82326919;1.330854e-06;7.3205306e-06;0.68699533;0.77981943;5.7907228e-06;0.0044226064;
0.44964796;0.0018313377;0.17646568;0.75362146;0.0036457253;0.10626394;0.0092912829;0.737701;0.35310835;0.71819276;
0.036822662;0.065780729;6.1934486e-05;8.1362778e-06;0.00023985618;0.58107352;0.0069605387;0.73437989;3.4981524e-09;0.0011617549;
3.6075431e-05;0.00011875056;0.79096133;0.00030704172;0.74843639;1.4110654e-05;0.0090992786;0.070621818;0.82536584;0.0070657036;
0.00013616725;8.7817108e-07;0.87356502;0.027366512;0.0010013608;3.0114528e-12;0.00023975298;0.89441514;0.68790948;2.4256864e-05;
0.87631309;0.16658024;2.9812749e-12;0.096567988;0.0076367995;7.027131e-11;0.76768219;0.00019701406;4.4948882e-07;6.8646071e-13;
0.45154884;2.0350819e-06;0.015909063;3.3347071e-05;0.63461828;0.84786165;2.4065924e-08;4.7833134e-07;1.8250292e-05;0.82623243;
0.72438574;2.3883155e-09;7.047116e-06;1.5499903e-07;0.0010911659;2.47245e-08;8.127351e-10;0.013378884;0.0010794566;2.0116677e-09;
0.78901732;7.8026785e-16;0.52778363;0.87766737;0.8003189;0.83126837;0.90936011;0.34914282;0.23269375;0.84711838;
0.38432205;0.4422774;0.0015247283;0.0014987302;0.041439727;1.9121687e-07;0.0071362411;0.75620735;1.5386669e-05;0.015390723;
0.78693289;1.3107751e-10;0.0012390246;0.000280159;0.63163871;0.75031632;0.00047810635;0.024603212;0.0022152553;7.0230307e-08;
0.00015323354;0.18700227;2.4313835e-05;0.68406576;0.58775234;0.75122422;9.9181088e-05;0.80592304;8.2415871e-05;0.034077115;
0.56093466;8.2609578e-05;0.63388878;0.0027257616;0.22028454;4.3455128e-09;0.78224605;0.904755;0.69507521;0.00025014282;
0.082510002;0.0011547554;0.15101475;7.7800041e-07;9.3219633e-06;0.10187239;0.36234537;0.68863982;0.049759571;0.00052516337;
0.00027746704;4.697245e-06;0.29128343;0.27086428;0.0011015419;0.75364679;0.0012697325;0.012747239;5.6294665e-15;5.7818062e-05;
0.84913319;0.03706893;2.3519158e-05;0.0048067141;2.652485e-07;0.00010293706;0.0011930569;0.019219473;0.066758059;1.3714479e-05;
6.8951695e-06;7.959307e-14;0.84982324;0.6483801;0.70504963;9.1505825e-09;0.90184152;0.87345231;0.81187999;0.87295389;
0.31184143;0.62365562;0.0003501068;0.0012555161;0.045560226;1.5389583e-06;0.043342788;0.76798671;3.8271322e-05;0.0010191422;
0.67899495;4.9338219e-08;1.0797084e-05;4.6625788e-05;0.83436555;0.83881342;5.6519025e-06;0.015430734;0.0015786374;5.1583111e-08;
1.6256336e-05;0.1658746;4.3405744e-06;0.79049253;0.37497744;0.74904573;1.0490544e-08;0.74084216;2.2862549e-05;0.0042552408;
0.56742716;0.00018541013;0.57558692;0.00043784358;0.30632612;4.6227187e-09;0.81529278;0.90526938;0.63708836;0.0043061557;
0.88345289;0.88246638;0.023545234;0.013679625;0.0071267504;2.3883425e-08;0.27893379;0.022199038;2.7092292e-05;0.17085974;
0.0018118504;0.0090604695;5.2723795e-08;1.3758733e-08;0.069820225;0.35394898;0.012468966;0.44581184;1.7629601e-10;2.4458293e-05;
0.014223558;0.79000109;0.3379387;4.0022083e-08;0.58138162;0.0062954361;0.13586549;1.5809584e-07;0.098996483;0.13499995;
1.8705472e-05;4.7415658e-09;0.85455483;0.88681829;0.0011889269;0.76656568;0.88201046;5.2951138e-05;0.22226958;0.00057912502;
0.91670287;0.32049027;0.22280706;0.78148007;0.00046139662;0.49488923;0.28551438;0.069461741;0.0035679657;0.57835513;
0.019894134;5.7107346e-09;0.018237198;0.77890694;1.6720236e-05;0.34931797;0.057092398;0.00047659787;1.6583816e-06;0.00027517366;
0.00020027804;0.28428635;0.00052223227;2.5122786e-08;0.47393769;0.80502689;6.7190558e-05;0.0060125813;0.49316248;2.666822e-06;
0.32538798;0.4193987;0.0051640817;0.049839761;0.65184927;8.0751583e-05;0.74176478;0.044347327;0.5391081;0.017844079;
0.87518358;0.84408897;0.13909274;5.4311329e-07;0.34159884;0.22900417;0.010036231;1.1413783e-09;0.016701013;1.0257731e-07;
0.00051508233;0.0040707537;1.2718082e-05;1.8457385e-08;0.75761896;0.8358264;8.6064974e-05;0.029650142;3.1537314e-11;5.8691694e-07;
0.7034151;0.65888214;0.74360734;0.00025879507;0.0014598635;0.43379083;0.060260713;0.021814054;0.00045182454;0.049206302;
0.056494586;1.4398227e-11;0.60473555;0.61581916;0.00026267665;0.29381847;0.7345652;0.050684258;0.84608555;0.65939552;
0.87155074;0.018961703;0.4963609;0.35709137;0.00019995164;0.63087946;0.80245191;0.013140379;0.0017601375;0.18456909;
0.0069181523;4.8921571e-05;0.00076418987;0.72449243;0.00015190875;0.73176932;0.048516814;4.7702888e-05;7.7394179e-06;0.0051658773;
1.6090545e-06;0.026127718;0.00091081677;6.8377171e-06;0.029519172;0.6690917;4.518367e-09;0.00021284196;0.14653964;2.3218934e-06;
0.16396396;0.026548991;0.18809916;0.17117684;0.74049419;0.0053570336;0.81242663;0.076322079;0.76600063;0.75739712;
0.16421853;0.0024861142;5.5452787e-05;0.0154198;0.8222096;0.30976841;0.26229385;0.70801896;5.507942e-07;0.012268671;
0.79707319;0.29670542;0.013283362;0.033912711;0.0005221403;0.1232412;0.80927098;0.66535068;0.0020788435;0.00010203947;
0.88844013;6.4212036e-05;0.75743377;0.0033190025;0.74489391;0.0025553182;0.00060871808;0.010707164;0.14793131;0.0047047557;
6.2073627e-06;3.45264e-09;0.054875884;0.54861122;0.00052822934;1.41334e-06;0.028534604;0.0062786997;0.57976192;0.40578586;
0.18685578;0.012168223;0.66663581;0.000354761;7.3699186e-05;0.04297271;0.075588584;0.75984257;0.0042009912;0.0086638452;
0.0030778975;8.1519424e-08;0.61862427;0.43025148;0.00052441529;0.76361275;0.028046595;0.024591742;1.8618353e-12;1.6373261e-07;
0.76436406;0.33041975;7.1389136e-06;0.0018389743;2.4542587e-05;4.6046384e-06;0.011498251;0.0027987999;0.014794163;2.0643329e-05;
2.1586533e-05;1.0036597e-17;0.84241742;0.61422336;0.66355389;4.0745934e-10;0.89036;0.89077359;0.84549665;0.77288181;
0.06292484;0.83332032;0.012507174;0.0013752464;1.2428e-05;1.2054838e-09;0.85543978;0.0027578922;0.49412888;2.0943961e-08;
2.1508811e-06;5.2262717e-06;0.10245922;0.089464247;0.89603835;0.37575555;6.14988e-10;0.022854721;0.00015754871;0.83799762;
0.0012515164;0.0035087115;0.00011419539;0.74952298;3.6832749e-13;0.02982595;0.04273751;2.0313061e-08;0.5025124;1.8747327e-05;
0.79803991;0.002939933;0.022479748;0.71003991;0.21331011;0.36555028;0.39760715;0.06298843;0.011638709;0.88397968;
0.0027953142;0.00041740559;0.52489763;0.0006935139;7.1935006e-05;0.70215487;0.69943064;0.25102279;0.001058661;0.17821105;
0.0014434299;4.3570824e-05;0.42723712;0.57059634;9.0008347e-05;0.84559137;0.084185287;0.047969583;3.984086e-13;0.00017359501;
0.56643492;0.027108533;3.919033e-05;0.00013880483;6.6913468e-05;0.0012788912;0.00021716193;0.00095694384;0.2626825;8.3641076e-09;
1.0947319e-06;4.8295233e-13;0.85066664;0.61921501;0.63541919;3.0373801e-08;0.86785603;0.880193;0.83273739;0.80389386;
0.91522807;0.84879881;6.3777588e-09;0.67290562;0.0022476709;5.3156633e-13;0.43159071;0.85736221;0.0073413122;2.4803782e-08;
0.00018537893;0.12959303;0.080761626;0.071843483;0.012836633;0.19473803;6.7998386e-05;0.67367071;2.1965466e-15;0.0010868908;
1.2840351e-07;1.4324934e-08;0.70024872;0.14854853;4.9941722e-08;0.00067919609;0.0013975927;0.019877242;0.00060996291;0.81606895;
0.11474598;0.00034787477;0.83601505;0.84029162;0.072896414;6.9527171e-09;0.0014026792;0.71395701;0.00017633339;0.76231313;
0.87235439;0.77583057;0.32739878;0.00057580764;0.27521861;0.12468956;1.5557433e-06;6.3988696e-06;2.4745059e-06;0.0016842792;
0.028750453;0.0018537403;0.29811776;6.6879591e-05;0.011951707;0.79543167;0.1733072;0.060567632;2.469346e-08;2.0723772e-09;
0.15448406;0.65086406;0.80394173;3.0319034e-05;0.78757536;0.7717663;0.18825726;0.0085047623;0.012392188;0.0015415821;
0.041035093;1.1829951e-09;0.1221369;0.26687142;0.0007862607;0.00021828752;0.50502896;0.73593313;0.79127842;0.047541462;
0.92550951;0.87368476;0.5011732;0.72808021;4.325117e-05;0.00077137776;0.047035165;0.86528206;6.570173e-05;0.78953636;
9.0519541e-05;0.059302911;0.21065374;2.2899172e-05;0.17064625;0.0008726457;0.0047600311;0.016497884;1.5384412e-08;0.017400283;
2.1884174e-05;0.2727865;0.0090897866;0.0071717659;0.00048358223;0.0085692843;0.022757746;0.0035605193;0.00061097468;0.074798502;
0.0029554279;5.5139817e-06;0.75742328;0.56627858;0.046995908;0.0010575596;0.0036967411;0.35794953;0.042268455;0.46052599;
0.88289005;0.85353971;0.62441093;6.8248548e-05;0.19149256;0.23964676;0.00078201463;3.6739866e-06;0.00012320252;6.0400623e-07;
8.3862134e-05;0.044182587;0.028631788;1.0353821e-05;0.077605329;0.79530919;0.029889351;0.033996589;1.8363975e-09;3.6177281e-07;
0.091048561;0.68115443;0.82143921;0.00014788397;0.24892317;0.34680605;0.0093596503;0.00038343426;7.5001262e-05;0.097363614;
0.006018545;2.6129283e-13;0.53425801;0.54740828;0.0012141279;0.0080125062;0.7003746;0.50492102;0.83521134;0.72088861;
0.6891101;0.0077985222;1.8052579e-11;0.65442568;9.0433139e-05;0.00069842656;0.87653691;0.0017931234;8.2745595e-07;0.013994907;
0.28678069;1.0946608e-09;9.2431358e-12;0.00089800614;0.24413614;0.88447994;0.037249438;5.1755906e-05;1.8088071e-11;0.8071534;
0.0013676818;0.00035601808;0.022053678;0.048654038;3.2005518e-10;0.73190397;0.001508744;0.00019861964;0.00016604706;3.9404492e-07;
0.49536261;0.0016225616;0.90357804;0.84308922;0.0028810587;0.8347196;0.45491159;0.021123959;0.78948361;0.0015745217;
0.92214614;0.82841647;0.30958888;0.57524031;3.8094993e-05;2.6075056e-10;0.426379;0.41251096;9.9092254e-08;0.002436873;
0.021936473;1.0513834e-11;0.012431718;0.25678197;0.81999475;0.6781702;0.66856015;0.67030561;1.775543e-06;5.1932623e-09;
0.08157523;0.015330406;0.0047012931;0.00031688358;1.2921261e-07;2.1211577e-05;5.5999925e-09;0.0056051966;0.00034090879;0.77152777;
0.0020587223;0.012048671;0.047531731;0.72259116;4.0950376e-09;0.091269143;0.83248395;0.8183471;0.012705547;0.0071141818;
0.89827704;0.88762403;2.3190917e-06;0.8633076;0.8536191;3.9930902e-11;0.76240414;0.0077513261;0.43515456;0.12049155;
0.8514874;2.0090341e-10;7.4662494e-05;5.2644511e-05;0.59674054;0.87479883;0.0015625806;0.084707499;1.2265274e-10;0.1105327;
1.9448425e-08;5.9694626e-06;2.4855359e-10;0.00052473415;0.0018362809;0.49100405;1.4145799e-08;0.12749264;6.0542949e-05;0.0015665079;
5.1147064e-09;2.4430585e-13;0.57113326;0.0059215245;0.00018687172;0.0077104787;0.029863698;0.89394009;0.00011487219;0.046643279;
0.9179846;0.76876944;0.50156564;0.6345489;5.4219646e-07;2.8442986e-09;0.29582688;0.6399014;6.1651967e-08;0.00012061054;
0.014755114;3.6166878e-09;0.030627988;0.23992515;0.66732138;0.44134781;0.73830229;0.81110549;3.1998613e-07;3.3970798e-07;
0.013171379;0.024188822;0.0537869;0.00038656159;7.7236837e-06;7.4633963e-06;2.3262441e-11;0.00031178788;0.0012504151;0.78624749;
0.0081307264;0.00064578612;0.14445305;0.76705539;5.879017e-07;0.077223308;0.79545194;0.84215456;0.0074082585;0.032303568;
0.56013501;0.27709058;2.6857929e-06;0.0062980652;0.0061675711;0.0032378524;7.002402e-05;0.026138563;4.496927e-06;0.87488127;
0.51989347;5.8348735e-07;0.81323683;0.0013818402;0.32745382;0.012331871;0.8549372;0.012282729;2.6107714e-14;7.3347294e-08;
0.0079990402;7.1961225e-08;0.83784324;3.3024811e-05;0.74891502;0.0024982502;0.15386327;0.86104226;0.0033645998;0.84732848;
7.6160627e-06;0.00013026809;0.37597069;2.006578e-05;0.35759926;2.265231e-15;0.039373271;0.88751101;0.030659191;0.0085257897;
0.89064342;0.79451358;0.00012645451;0.86139858;0.8343479;2.2885175e-11;0.88749981;0.0090100057;0.18380448;0.077399544;
0.84520465;6.7427763e-10;4.5771307e-07;2.3128712e-06;0.51178128;0.88321483;0.0030959272;0.037325602;1.6584907e-10;0.44093573;
4.0933887e-07;2.3899056e-05;2.3687469e-11;7.3114497e-06;1.5624522e-06;0.37604326;4.2164181e-08;0.049999803;3.4911389e-07;0.0095156087;
5.6791498e-07;9.6711145e-17;0.81733084;0.093827352;0.00021866671;0.26377138;0.093083747;0.8524043;0.00010704344;0.30052352;
0.2418952;0.009606204;4.0161038e-07;0.012914373;0.0090333149;0.11070612;2.2918937e-05;0.0073741442;6.8439208e-06;0.87180829;
0.62603647;9.9543524e-07;0.69592148;0.0024339261;0.0067626494;0.00032679905;0.89700645;0.024106445;2.3686154e-11;2.251053e-07;
0.019204665;9.7956931e-09;0.86551148;5.1918022e-08;0.84303939;0.0015163666;0.14814925;0.84241992;0.074464552;0.81529117;
6.5767103e-06;3.0835869e-05;0.29287294;4.6837733e-05;0.55077004;8.3400452e-16;0.0050539793;0.89909029;0.043999396;0.00066797953;
0.23596576;0.80348921;5.7077422e-13;7.0288086e-05;0.89041573;1.4672939e-06;0.0026152064;5.3411486e-07;0.30296043;0.78541034;
0.053201605;1.3117451e-11;8.4570071e-05;0.0049188687;0.83765334;0.31105867;0.1602892;0.00041426602;9.7500015e-07;0.00035328319;
0.12015928;0.00073274289;0.82495207;0.0053401687;0.10534553;0.75767654;0.89121008;0.50362355;0.3222138;0.20589349;
3.804427e-09;0.78964019;0.19468129;0.0078752795;5.4460054e-07;0.002736852;0.033129275;0.40732452;0.0077965981;5.0654239e-06;
0.90529478;0.079483882;0.0086596394;0.77607125;0.57109016;1.7598358e-08;1.0152278e-06;0.00018067737;1.6587928e-06;3.0965808e-08;
0.011547273;0.31007481;0.00018007976;0.029685179;0.2040669;0.68896437;1.7330049e-05;0.00082563463;3.0817537e-06;1.4779763e-05;
6.6156892e-05;0.35584792;0.25814816;0.68479943;0.82748699;0.080728076;0.0023055628;0.0069933706;0.72367644;0.068596058;
0.54856366;2.4855196e-11;0.54571837;0.79761654;6.6795335e-05;3.0035255e-07;0.78894824;0.89422446;0.00016071909;1.7242559e-05;
0.2652556;0.76706588;5.7712879e-09;7.6388997e-06;0.8680495;0.00058642827;0.09431915;1.0376783e-05;0.46953255;0.69838732;
0.055672966;5.2366113e-06;1.8296798e-05;0.00025896064;0.8141436;0.62704551;0.074613251;0.0041589253;7.5325365e-06;0.031826459;
0.058099773;0.001430199;0.83854806;0.10804594;0.034915239;0.48472989;0.84878796;0.1589565;0.47600293;0.26911202;
1.5306352e-07;0.42285129;0.56686759;0.01927432;0.00020194602;0.012577224;0.030558871;0.36919555;0.0098259635;0.0012280399;
0.8939693;0.37115955;3.5082057e-09;0.76263648;0.0048977071;5.9589611e-11;0.4345561;0.043281723;9.5829183e-15;2.1972778e-06;
0.77196723;4.0123239e-05;0.30214414;0.00011800657;0.39214048;0.86856562;3.6897152e-05;6.3755829e-06;0.00011784097;0.60145473;
0.23926453;2.3512199e-11;3.1766979e-06;1.4484984e-11;0.1488817;1.2058789e-10;1.5011228e-11;0.0019237999;2.2026888e-05;6.36517e-14;
0.52398694;9.4233754e-15;0.29266468;0.85257345;0.86530221;0.70912355;0.91377002;0.74278474;0.34636822;0.78521675;
0.9144513;0.013545536;0.069904342;0.72453505;0.20550162;2.3234946e-08;7.4631229e-05;6.1975312e-05;5.2719452e-07;4.1564485e-09;
0.0012437779;0.10258061;1.1982412e-05;0.0041625802;0.40558571;0.53074217;7.2939174e-06;0.00026905394;5.4339625e-06;5.4201093e-05;
0.0079130493;0.69729435;0.04167895;0.6275332;0.45719022;0.075355262;0.01377719;0.010545079;0.7302081;0.45209092;
0.81931615;4.3737115e-12;0.7685225;0.8440308;3.1487361e-06;3.6182271e-05;0.79320866;0.83329207;0.00013667364;5.8870839e-05;
0.88691795;0.55437422;4.7558023e-11;0.21890122;0.091711693;8.5270158e-10;0.8042118;5.9194726e-06;5.9601057e-08;8.0986056e-06;
0.68672538;1.5061592e-06;0.0069854194;4.6013115e-06;0.75837761;0.88050252;6.4594865e-08;1.1627511e-05;0.00014615119;0.62855214;
0.68311852;3.9911799e-07;1.660833e-05;2.6967641e-07;0.004537005;1.9379702e-06;7.6916801e-10;0.016331878;0.003295776;1.1102933e-09;
0.6944989;3.348006e-13;0.66656458;0.84976107;0.62732702;0.79139036;0.90651327;0.15880375;0.48621625;0.6206007;
0.86546934;0.0040446548;3.6807484e-09;0.018150233;0.071102977;0.0020794456;0.19223662;0.011606509;0.0016274019;0.13385572;
0.30599818;4.3236403e-05;0.68820757;0.33078122;0.1285352;0.00028308397;0.055396091;0.60760611;1.0511732e-07;0.15831962;
0.012145875;0.00031582889;6.794279e-05;0.41293627;0.85490608;0.34181666;5.7164852e-05;1.7514835e-06;0.00024238817;0.034035176;
0.61120218;0.00011408019;0.015881067;0.80747777;0.76359183;0.043351844;0.28731212;0.72578168;0.51411456;0.55991298;
0.076066732;0.001047372;0.54041517;0.00019947885;6.2778518e-06;0.078717344;0.4465673;0.74870306;0.0021938984;0.017042201;
0.0003317169;1.5558204e-06;0.17918825;0.20462687;0.0015196707;0.86010885;0.00069831067;0.079817839;1.1122751e-16;3.915663e-06;
0.75534517;0.21575661;4.0156286e-07;4.9335038e-05;5.6945196e-06;8.3383047e-06;0.0004002605;4.3715885e-05;0.01286547;6.2718497e-10;
4.4483759e-06;5.7435269e-18;0.84824294;0.55542535;0.80494982;4.9667128e-09;0.91320556;0.89629495;0.84556222;0.82457221;
0.83949459;0.0033937199;1.6414704e-10;0.0009755512;0.10942216;0.027199253;0.6956532;0.0041623879;0.057225082;0.0005480051;
0.037691653;0.0081718192;0.021900393;0.20081738;0.063349418;1.7649198e-05;0.0090176947;0.49432018;5.2476592e-09;0.75741386;
0.0075965929;1.9511822e-06;3.3846532e-05;0.37767449;0.77705067;0.0086773019;7.0708794e-10;1.4226952e-08;2.4857376e-05;0.094191521;
0.26370609;8.9693538e-07;0.068195514;0.86331314;0.85164374;0.33937019;0.51239747;0.66981208;0.60742569;0.871939;
0.8891356;0.8645643;0.03871062;0.22603945;0.0087307701;4.3018235e-06;0.054004196;0.53547901;4.4054891e-06;0.46317253;
0.047787394;0.0087300492;5.1407678e-06;3.4697125e-06;0.0026145093;0.2340503;0.14091942;0.32374823;2.9218587e-08;7.3108204e-06;
0.00053437363;0.46769786;0.035591979;5.092184e-09;0.86457962;0.0016508496;0.016593192;4.030841e-07;0.26915988;0.0055397251;
2.0482847e-08;1.2326215e-07;0.66428417;0.86760741;0.023642836;0.62619108;0.89511484;0.055400096;0.35145208;0.0001268193;
0.095716178;0.0002373914;0.34381551;6.1577325e-06;0.00012597931;0.11087537;0.6753301;0.51322883;0.0048557054;0.026170472;
0.00013189047;4.6960457e-07;0.1531067;0.19256355;0.026798626;0.87870842;0.0015377707;0.049474046;4.8696191e-15;1.0349751e-05;
0.77524978;0.29112068;3.0155462e-07;0.00094877055;3.4199861e-09;0.00049385335;0.0011854778;9.8276294e-05;0.0042419666;1.3988728e-08;
3.8339076e-05;1.0836681e-17;0.86219364;0.66220087;0.62347919;2.366075e-06;0.90477985;0.87015784;0.84318733;0.84561598;
0.82735056;0.83700109;0.02896109;0.0077454266;0.11859716;0.00056048983;0.68254715;0.00068305089;0.00051661534;0.70217967;
0.018674321;0.0067916983;2.9236912e-11;6.8839427e-07;0.088874638;0.44097006;0.091094337;0.26472896;4.7520898e-06;4.079388e-06;
0.032441799;0.75370145;0.16627565;3.0234921e-07;0.43434024;0.028150452;0.070540205;7.426566e-07;0.46830124;0.040511683;
3.2514069e-07;4.3650394e-07;0.85286301;0.85927474;0.00044279211;0.74147415;0.84320956;5.1519641e-05;0.41282868;2.9799594e-05;
0.84240216;0.53296673;5.056253e-06;5.0075978e-05;0.7623958;0.11199979;0.0001431368;0.0072938595;0.41615874;0.68100041;
0.13337605;0.0006213868;0.022465566;0.31356499;1.6497586e-05;0.00045993106;0.23831056;0.83570749;2.2591262e-13;6.5888081e-08;
0.76128554;9.0581892e-08;0.56106377;0.029560465;0.83958483;0.85716587;0.75147092;0.00028838203;0.34886262;1.0527815e-07;
0.02101155;6.1914488e-06;0.68942809;0.66301566;0.014906867;3.8149466e-07;0.033010501;0.2691144;0.00091664243;3.4855366e-06;
0.88102317;0.85019565;0.55603248;8.6410764e-05;0.24582568;0.34433734;0.0032300258;4.4816425e-06;0.00057339773;1.8192739e-05;
0.00019581646;0.0022336971;0.0077776816;2.7111473e-06;0.62778693;0.8323431;0.0063751433;0.0036960123;1.4387859e-09;1.9160089e-08;
0.26239771;0.61485374;0.44121781;0.0013189898;0.031358074;0.49930421;0.014684344;0.0029480765;0.00056795252;0.056455031;
0.016999658;2.3973215e-10;0.65623081;0.44469827;0.00010545705;0.01884992;0.80877137;0.34886011;0.84809941;0.62357831;
0.82022488;0.31132677;5.692077e-05;1.311542e-05;0.80963266;0.59866148;0.0014742971;0.014535595;0.69682896;0.55124128;
0.12047351;0.10976899;0.0033663108;0.49276513;1.0225535e-06;0.0048225531;0.38088694;0.85826331;1.4517088e-12;7.3599108e-06;
0.53983301;1.1522763e-07;0.62030536;0.076604463;0.80333751;0.64565825;0.52693641;4.5340062e-07;0.27311206;5.7981222e-08;
0.0084550194;2.7599758e-09;0.76661068;0.66950244;0.20481531;2.6743744e-06;0.063577726;0.54934973;0.0025826006;0.0015729856;
0.38986877;0.0072920644;7.5598007e-05;0.021530008;0.876495;0.39165512;0.19037691;0.68724537;4.3027275e-09;0.57953763;
0.84796572;0.12695228;0.10513189;0.47263038;0.00065355533;0.34045699;0.86690962;0.70132023;0.057537004;1.1191748e-09;
0.83036846;0.0069502788;0.35389394;0.0022218779;0.80410796;0.0062152161;0.00037442023;0.0004813195;0.04360684;1.9141467e-05;
4.58598e-08;8.781841e-09;0.0021286234;0.14381886;7.4210493e-06;2.6601118e-08;0.047842085;0.0074012689;0.6630637;0.034824651;
0.8439908;0.74993765;0.66685605;6.9328412e-06;0.1931984;0.48510024;0.024476204;7.3844303e-10;0.00031195345;2.647463e-05;
7.8967416e-05;0.00053218449;0.0006123237;1.1376586e-06;0.72288585;0.85127085;0.0033941953;0.0056258445;1.7219033e-10;4.621206e-07;
0.34408599;0.77369696;0.51283467;0.00043532331;0.0013956508;0.70163816;0.057093903;0.00051204086;0.00091622217;0.019520411;
0.13846928;1.5164151e-11;0.78946823;0.55518067;4.9645139e-05;0.18687989;0.75580555;0.1090566;0.84117353;0.59169137;
0.052223619;2.6433067e-05;0.0019939863;0.036094252;0.86089289;0.82093549;0.66614562;0.54969859;8.5828846e-09;0.57960784;
0.80766839;0.078003868;0.0071658022;0.43333462;8.2867864e-06;0.026065571;0.89667553;0.66700512;0.082409367;1.8905784e-08;
0.87775427;0.0038966546;0.27332273;7.9746576e-05;0.80057192;0.00074732152;6.2204635e-05;2.0483172e-05;0.29170474;6.4682827e-05;
4.9694684e-08;2.3637585e-12;0.0015896945;0.27059138;1.3039557e-05;8.4866224e-07;0.008624074;0.0013948247;0.6585874;0.019461391;
0.22712085;0.013802422;2.1181437e-08;0.0035202138;0.01497163;0.0010558206;1.4418758e-05;0.00038314608;4.2235092e-07;0.88488424;
0.69999206;6.8821031e-08;0.80652648;0.0071188631;0.042920705;0.001439749;0.88377661;0.046876129;1.1355722e-12;7.3473744e-10;
0.032858513;9.9191379e-07;0.85783011;3.3864853e-07;0.87541896;0.01113575;0.4508253;0.86516303;0.0022355665;0.72515368;
1.7920196e-06;2.0755815e-05;0.085187152;1.2849172e-05;0.40714687;5.5145011e-16;0.009688749;0.90934688;0.061943002;0.00014562078;
0.010415073;0.87648761;0.029391747;0.0063562905;0.00027084447;1.1368238e-05;0.46520832;0.00082179433;0.47334415;0.0070101074;
0.00015473593;1.8688032e-05;0.8145799;0.38482744;0.89667064;0.13607094;2.4544516e-07;0.012376448;0.001488586;0.54536045;
1.3183055e-07;0.00036295337;3.3578995e-05;0.87258977;1.3196153e-07;0.60795498;0.019394446;2.6341217e-05;0.77421701;1.1091193e-07;
0.074872606;0.46442342;0.0020204131;0.2397549;0.018043872;0.0097698523;0.080032632;0.31030941;0.017147729;0.81785786;
0.4179751;0.094961479;1.8926667e-05;0.011453554;0.005642517;0.031503692;5.8746624e-05;0.032769602;8.3867351e-05;0.85730147;
0.48478383;6.8513832e-06;0.71681017;0.0016282134;0.0421215;0.00086476223;0.86937606;0.02820551;3.6217904e-12;2.1787962e-06;
0.0063608433;1.918178e-08;0.86512595;3.4331228e-05;0.78110546;0.0015528421;0.029991331;0.81063753;0.021152321;0.85984945;
2.2246018e-06;2.0920332e-05;0.56252718;0.00053842692;0.44954005;6.9038193e-14;0.017010711;0.88679546;0.075870462;0.036458287;
0.91538942;0.82172912;2.5682902e-11;0.84240609;0.025737103;4.8544966e-12;0.75421816;0.85040474;2.4905627e-05;1.8940361e-07;
0.002924755;0.13158035;0.02035524;0.12162082;0.012584793;0.75882649;6.6829212e-05;0.72658032;3.1066122e-13;0.0041135889;
4.5779074e-09;2.3950957e-09;0.38518521;0.0079090092;1.2951486e-05;0.00023873539;0.00096787058;0.00019938045;7.0738039e-05;0.053413391;
0.14683352;5.3493161e-05;0.51472396;0.86208451;0.32765251;4.5110428e-06;0.011952188;0.83757496;0.00022650987;0.67344552;
0.00093374267;0.58566767;0.34783685;0.0035777569;1.1841149e-05;1.4255754e-06;0.88718325;0.00021580594;0.0073720277;0.0055638361;
1.222098e-06;7.5335687e-05;0.25794259;0.076119803;0.8784371;0.68856525;2.6978061e-05;0.0078273779;0.00085009664;0.85465539;
0.00018704213;0.0028368239;0.0001893149;0.64497435;1.2455889e-13;0.21476088;0.20718044;2.2563758e-09;0.42318407;4.4785213e-07;
0.76733691;0.0013186419;0.088512547;0.77266937;0.297943;0.5789215;0.029430121;0.028831581;0.00135861;0.85967249;
0.91259295;0.86715168;3.150963e-09;0.76232046;0.08735691;2.1849118e-09;0.78758061;0.62571728;0.0091803819;6.9893044e-06;
0.0005473796;0.025866613;0.0097185466;0.13262779;0.038372755;0.56223947;0.00076198712;0.72552299;6.277805e-14;0.0019339714;
1.9751647e-06;1.9178692e-06;0.40113983;0.035408787;4.0550179e-07;0.00027694582;0.0047307904;0.01702385;0.00041928198;0.72204989;
0.15406604;6.6574699e-05;0.75270283;0.85661012;0.0085796183;5.3671597e-06;0.0043038474;0.67515951;0.0029510234;0.52129799;
0.89919543;0.35349363;7.095484e-08;0.79309189;0.0015172506;1.5386175e-09;0.1818358;0.12574808;8.5447112e-14;2.6528403e-05;
0.7820242;1.911623e-06;0.5643757;0.00059650926;0.13784312;0.79120868;0.00066109601;5.0874249e-05;8.5253676e-05;0.62744993;
0.24562867;2.6980194e-09;8.4464837e-06;7.5676188e-11;0.27233887;2.3323206e-08;1.8290965e-08;0.0034551923;0.0011953322;8.4853277e-11;
0.56322718;2.6922754e-13;0.34479457;0.87370151;0.82699585;0.67812884;0.89853895;0.72918284;0.25467703;0.62056106;
0.93004853;0.88308185;0.38351643;0.78904241;0.00041801267;0.0027636592;0.067035936;0.85761923;4.2016847e-05;0.85720176;
0.00014322081;0.026620315;0.2870847;0.00044905901;0.13568595;0.0039706547;0.0072709671;0.030913178;9.1329639e-08;0.015673202;
4.4831709e-06;0.36262557;0.00086377678;0.00064018759;0.0013301339;0.0090823378;0.06451951;0.00059555884;0.00034147908;0.019954614;
0.00042984742;4.3677273e-06;0.50027305;0.5718196;0.023035327;0.0030828721;0.0048373016;0.4426772;0.024498312;0.18310866;
0.88335913;0.26046619;5.4576095e-09;0.72806287;0.0030961807;5.3146973e-11;0.46860293;0.020224687;1.3300168e-11;9.6255917e-07;
0.76779521;2.2600996e-06;0.20040409;0.00017648459;0.22420323;0.84261966;6.2961211e-05;2.0945328e-05;1.3106119e-05;0.75205088;
0.2931937;3.3503224e-12;5.1990291e-06;2.9871244e-12;0.20121032;2.3699737e-11;1.9501299e-10;0.0016005487;0.00016701185;2.2264286e-11;
0.61290902;3.8213674e-16;0.28124383;0.87060702;0.8584466;0.76936799;0.91252899;0.78656244;0.30999342;0.78900158;
0.47204909;0.00041980934;6.1759735e-08;0.77916962;1.7279473e-05;0.016792983;0.86567312;0.13794762;9.1721518e-12;0.29912794;
0.67521584;3.0410814e-07;4.6492539e-07;0.095999889;0.070483133;0.8996287;0.62661928;2.0737159e-06;2.679783e-08;0.59381056;
6.2053425e-07;6.5919949e-06;0.0059903301;0.016131043;3.5905507e-06;0.61717516;0.00021815792;1.9412089e-06;0.00016827905;1.7881704e-10;
0.085860565;0.0022560046;0.89571947;0.73598111;0.087823048;0.71288371;0.56425112;0.52720147;0.82636195;0.007997117;
0.9284516;0.86399311;0.40804255;0.86737013;7.3161507e-05;0.0056044911;0.40221062;0.85059512;1.0504688e-06;0.80742753;
8.8985951e-05;0.025709575;0.0063389768;8.1841999e-06;0.44063404;0.0067134658;0.0003937851;0.0013871297;1.7969208e-07;0.15678772;
7.530702e-05;0.70884866;5.295783e-07;0.0005654752;1.7614027e-05;0.014488615;0.050866783;7.4928998e-08;3.3740558e-05;1.739788e-06;
0.031605016;1.3673032e-06;0.65543091;0.77004606;0.012477016;0.44965777;0.0036055464;0.046491288;0.0036947448;0.15163107;
0.38134229;0.00051744317;1.9991633e-10;0.64212763;0.0010862532;0.005032626;0.90221453;1.5726455e-05;9.1956352e-08;0.65751588;
0.44296664;3.1783481e-10;5.2019511e-13;0.0020497234;0.23074511;0.9071511;0.17072307;4.3882661e-05;2.5913e-08;0.63476497;
0.0001898597;0.00069418055;0.038975347;0.016252836;1.8044709e-12;0.85413897;0.0070871855;6.2397298e-06;0.0004898982;1.3155507e-08;
0.21681017;0.019083081;0.90714896;0.76729506;0.00046612439;0.77729028;0.13115098;0.016612796;0.79647547;6.9552289e-06;
0.0063736686;0.24915336;0.064473949;0.072927959;1.6430103e-06;2.5870049e-05;0.24723148;0.23012839;0.020026147;0.004316608;
0.0024453017;1.9366591e-06;0.88712478;0.19166584;0.86621827;0.10901429;0.0011288008;0.092605822;0.0089013875;0.71863139;
0.00016406226;4.289416e-05;0.00127237;0.21878558;1.9051635e-08;0.11781403;0.77834088;0.0010541686;0.52350217;5.5912137e-06;
0.44677824;0.085068986;0.00047037387;0.38832259;0.78385961;0.044636544;0.016102988;0.76196051;3.7868282e-05;0.82781148;
0.014698522;0.80440807;0.029297482;0.011679442;1.5784588e-05;4.0702304e-07;0.076038696;0.061714694;0.37585312;0.0092261601;
0.0019053582;1.3314531e-07;0.89136428;0.21808;0.87698281;0.049715284;6.0249353e-05;0.066451639;0.00018223016;0.82595009;
3.7288331e-07;0.00012177694;0.00029618805;0.74136347;2.5017323e-08;0.13182175;0.77690941;0.00022419868;0.50600272;2.4023086e-06;
0.16120119;0.29914948;0.00093403249;0.3947925;0.26562902;0.1411186;0.0050538513;0.55754119;0.00013212087;0.80199283;
0.89856774;0.88374949;0.00051713042;0.86655688;0.7951892;2.8182296e-08;0.50481313;0.022301229;0.49898043;0.32655376;
0.82697952;8.1969431e-11;0.008634408;7.5804746e-05;0.51835304;0.80432618;0.017581724;0.12169157;5.4342131e-11;0.13250291;
6.9044739e-09;2.2632614e-06;8.9822542e-08;0.00025265693;0.00017717338;0.42371446;9.3335902e-06;0.34411711;0.00013802244;0.20030452;
2.8904348e-09;5.874471e-12;0.76939726;0.0077004111;6.2623309e-05;0.003290928;0.0059101102;0.88792735;7.0451388e-05;0.040538523;
0.72065264;0.8302446;0.77367389;0.00070104958;1.3917739e-06;0.015091062;0.015535747;4.6962818e-05;1.2007633e-06;0.14622881;
0.74095148;0.00043922942;0.81376076;0.00088002195;0.41129252;0.76039928;0.85950691;0.00058003259;2.7502629e-11;0.0003238557;
0.23028685;0.045724966;1.3750521e-05;0.19289003;1.0958887e-07;1.7827666e-05;8.6540176e-06;0.65466583;0.76009578;0.84490085;
6.2530665e-09;0.29227209;0.23553534;0.00020275482;0.0030923148;2.9744002e-05;0.00023963298;0.072294094;0.044728812;0.80518341;
0.8195256;0.74303406;0.33141318;0.82618523;0.00013114169;0.030818228;0.61909807;0.66050673;4.8104407e-06;0.0021711155;
0.80603093;0.00067506597;0.00019631805;4.4023256e-09;0.0033143128;0.8155669;0.15089327;1.2014848e-07;2.2856483e-08;0.13370119;
1.8386734e-06;1.6970213e-07;1.2127182e-11;0.0010817028;0.00057699723;2.2977827e-06;0.0030611351;2.2935505e-05;1.2295524e-06;1.2973867e-06;
0.0073940228;2.4451495e-08;0.84031236;0.81937087;0.12729356;3.909558e-09;0.91333985;0.53694695;0.77229792;0.83263677;
0.8618657;0.88445091;0.33248323;0.073176801;0.0069324523;0.00012039935;0.11800686;0.20419323;7.3547858e-06;0.58019459;
0.0032219456;0.04975152;0.0015177578;2.456177e-05;0.0085602729;0.13262293;0.47299829;0.24859554;9.8279848e-08;3.6772875e-07;
0.0001895141;0.53360331;0.34854239;3.9981748e-07;0.69139546;0.0017374813;0.029894982;7.8127841e-06;0.12743922;0.55130017;
4.3520592e-09;2.2634811e-07;0.84913075;0.82452947;0.0011872313;0.19265734;0.85670626;0.020254092;0.29082385;0.0043213535;
0.92549032;0.74604452;0.082765348;0.80162871;0.0001282497;0.0097382516;0.060799446;0.89103699;4.491802e-06;0.80945021;
0.0049540731;0.036964584;0.15852059;6.182678e-05;0.23161665;0.0072358269;0.0089983502;0.064267166;2.497712e-07;0.060278237;
0.00015617113;0.11156972;0.00041700088;3.4992029e-06;0.00014133922;0.00033061928;0.4232516;0.00018436374;2.481581e-05;0.00034110501;
0.0038368262;4.3662986e-08;0.2093914;0.63832337;0.59018475;0.054539926;0.011833357;0.75900233;0.0033977125;0.45551744;
0.93037271;0.87157613;0.29205424;0.81581426;0.00055108336;0.003338458;0.014286638;0.85957628;6.8282425e-05;0.87382323;
0.00032409484;0.0061309561;0.3057923;0.00018791572;0.12935719;0.0038123946;0.004788246;0.039971165;1.5060921e-08;0.050578907;
6.7824101e-07;0.31739986;0.00190051;9.6949101e-05;0.00066808099;0.01203221;0.35017863;0.00017895417;7.8259487e-05;0.0021504557;
0.00021856593;1.8519112e-06;0.47859797;0.6681875;0.063934214;0.027693726;0.00072884466;0.53092343;0.011916383;0.084666438;
0.89963973;0.1686731;0.46924311;0.72621232;0.17210312;1.53701e-05;3.1661085e-07;0.00023286743;1.6402341e-06;5.8686942e-07;
0.00031275061;0.47628009;0.015198478;0.0213957;0.22485207;0.34450731;0.00090074504;0.00023257703;4.3497453e-06;4.6104611e-05;
7.0499942e-07;0.34484962;0.5647155;0.71412098;0.46430078;0.02916985;0.0058688135;0.030048892;0.6565935;0.83458942;
0.40088713;2.6226235e-11;0.85754788;0.73068541;1.9760644e-06;1.5338413e-08;0.56721646;0.8656956;2.4392895e-05;0.00062193873;
0.43947142;0.87451905;0.48840412;0.88427013;1.4900388e-05;0.77658188;0.0062559992;0.0079163192;6.7961847e-10;0.83169913;
0.00022678346;0.0010006652;0.6927402;0.30418605;0.7750991;0.25896189;0.0007207148;0.00069468771;6.8150598e-06;5.6438353e-07;
0.026898105;0.17829323;0.24204831;0.00021837153;0.034639109;3.5420734e-07;0.27335623;0.00015853031;0.62731314;0.69634873;
0.00061764632;0.0049614473;0.76679593;0.064957611;0.05408781;0.025398416;1.230549e-07;0.025100606;1.832383e-05;0.039189741;
0.39891562;0.78931415;0.19017503;0.002972095;0.18864492;0.56887239;0.71499294;8.0035832e-05;0.014197725;0.3936041;
1.5026827e-05;0.00010109387;0.030049518;0.037466858;0.20582068;0.87744552;0.86249405;4.8147567e-06;0.095354088;0.17317589;
0.33175552;7.1366185e-07;0.0092452643;6.8820103e-05;0.00087271817;0.012854776;0.68220603;8.1827813e-05;0.028806971;0.077945791;
9.016243e-08;0.053144027;0.90022582;0.25730339;0.10008483;5.1147865e-05;0.052311525;0.0021611343;0.35630578;0.013182073;
0.39011896;0.0030947546;0.0034144432;0.035046093;0.85167384;0.54051489;0.027592788;0.6755901;2.5988307e-11;0.46635866;
0.79541868;0.12907626;0.60640675;0.59721833;0.00018779811;0.19881842;0.89536256;0.77011091;0.013194689;2.1292176e-07;
0.73973823;0.018158991;0.56269485;0.00019034211;0.82042736;0.0093889674;0.031111134;0.00015258555;0.011782412;0.00035282329;
4.6294915e-07;1.9601078e-11;0.0017251869;0.11185829;2.8158755e-05;8.2032976e-09;0.029163593;0.054025725;0.4357138;0.014530428;
0.91163874;0.72556967;1.6595844e-10;0.84884864;0.012352658;5.6977068e-10;0.70393515;0.84692997;4.8644481e-05;1.4065797e-06;
0.0055416487;0.10499385;0.063415505;0.16392019;0.01994231;0.63107771;0.00028602732;0.79279339;6.9930335e-13;0.0029080559;
5.7964641e-08;7.8080992e-10;0.37838253;0.0019115054;1.2844059e-06;6.3983585e-05;0.0089156851;0.0031915263;7.9953308e-05;0.16378354;
0.11977153;2.436935e-05;0.38197026;0.85572559;0.46185294;5.3801068e-06;0.0047593899;0.86355007;0.00010365466;0.71254373;
0.92536271;0.85652101;1.5676002e-10;0.81905454;0.022461604;5.8719305e-13;0.69000107;0.85277522;0.0004463364;5.1170279e-08;
0.00060388609;0.064391837;0.030028244;0.36164483;0.0017737311;0.57761663;0.00040111897;0.70810837;9.187724e-16;0.0033166576;
2.0052993e-10;2.2451465e-08;0.32354236;0.013864782;7.2664948e-06;3.3186374e-05;0.0015771157;0.0026000284;3.3527744e-05;0.45709702;
0.068870433;1.8395624e-05;0.56812483;0.87441313;0.086860947;7.1265058e-06;0.0072197313;0.84920079;0.0010870212;0.64069039;
0.89912361;0.86580199;7.1969948e-06;0.88534606;0.81635106;5.2868829e-12;0.82064873;0.049384464;0.13790564;0.061391253;
0.87020999;1.0596601e-09;2.7181526e-05;5.9190177e-07;0.57097465;0.89281821;0.0038319526;0.076891355;8.8219637e-10;0.2928873;
5.404226e-09;1.4866752e-06;1.6158599e-10;6.7566189e-06;4.7093978e-05;0.18620996;2.3894592e-07;0.032731351;5.5802754e-09;0.0017210043;
2.576453e-08;6.5393928e-17;0.66081643;0.02749164;0.0034060779;0.13778417;0.026317917;0.89173448;5.273474e-06;0.23247105;
0.81469667;0.85481775;0.25071013;0.0026273108;8.8400429e-06;0.00015216555;0.00062596129;0.0022622468;0.00016460946;0.083361663;
0.87021291;3.2357872e-07;0.74721378;0.00043824216;0.67221504;0.69942898;0.82150716;0.00080166536;7.5267002e-14;1.5425054e-06;
0.67152613;0.020207586;2.9903507e-07;0.092645355;2.0869081e-07;4.6591691e-07;0.00022355549;0.75620633;0.69208437;0.83275563;
5.5964855e-09;0.50137925;0.076725632;0.0004752856;0.0058439975;7.1322625e-05;0.028376939;0.13236627;0.074228726;0.8078298;
0.85336512;0.73255461;0.19897473;0.85307407;2.3871735e-05;0.0080071203;0.63456869;0.73170269;2.2518407e-08;0.0024004965;
0.82129395;0.0080423886;0.00035961141;2.5345072e-11;0.010328443;0.8638804;0.055942833;2.7409752e-07;1.5592648e-06;0.23063697;
1.7531543e-06;5.3853597e-07;1.2185459e-11;0.00054684002;1.6733316e-05;5.918746e-07;0.019582143;2.7448632e-06;1.9366844e-10;9.0007923e-10;
0.0072734682;1.1503696e-07;0.81277782;0.84524167;0.29889336;1.2351251e-07;0.90126979;0.31122863;0.62842923;0.85716707;
0.89193749;0.8460387;0.044809002;0.30797306;0.0028200618;1.2255927e-05;0.053483989;0.65973669;5.8092411e-09;0.40276605;
0.07651484;0.017957531;3.2231754e-05;1.2304778e-06;0.0042127259;0.27607322;0.31923112;0.22987999;2.5637911e-07;2.634325e-05;
0.000238265;0.50632155;0.041204192;1.0118174e-09;0.78761095;0.00029254565;0.063591748;2.4583883e-08;0.037194416;0.0027876461;
2.7603377e-08;1.5424055e-08;0.70256388;0.88681591;0.035085682;0.80882812;0.88254482;0.034445178;0.17929544;0.0010620375;
0.71004522;0.0015432776;1.8169144e-09;0.86244714;1.8992076e-06;0.0092533147;0.83192742;0.49645165;5.1749436e-13;0.16848284;
0.69039023;1.3865309e-07;4.9561841e-06;0.015110166;0.11286894;0.89796114;0.6028384;6.7541485e-05;4.2027404e-09;0.70697397;
1.9101064e-06;1.5249492e-06;0.0034554142;0.0016123016;7.7397715e-08;0.29515901;0.0035941075;1.0677165e-06;5.2091264e-07;8.930881e-10;
0.21534869;0.00069710787;0.86504793;0.80977052;0.20004541;0.80428964;0.55929232;0.57422769;0.68275416;0.01599377;
0.65767652;0.00085053139;1.8255438e-08;0.82959813;6.5258214e-06;0.0048422394;0.83279276;0.30884919;3.6571985e-13;0.27591762;
0.66229856;2.1852456e-07;4.9617342e-05;0.023358582;0.021900602;0.9017415;0.67541951;2.6930973e-05;9.1495437e-08;0.71369433;
2.274777e-06;8.0083373e-06;0.020155866;0.0032075599;2.2597912e-06;0.50895584;0.0068789078;1.3763512e-06;2.6235755e-06;3.8133114e-09;
0.14068538;0.0012315179;0.875853;0.81260425;0.080431677;0.77774757;0.34587786;0.52864903;0.6842314;0.0074037695;
0.9121927;0.032509573;0.015701318;0.81220686;0.42128763;5.1764291e-09;4.2372685e-06;0.00066260312;7.6591604e-09;1.9895212e-07;
0.025662858;0.33065197;0.00028830842;0.010020491;0.18471201;0.7454139;2.1659491e-05;0.0017960069;7.286365e-06;0.00015176235;
4.449852e-05;0.34854239;0.23179545;0.51360488;0.73767036;0.03545576;0.018098928;0.0045105214;0.44739878;0.084822655;
0.55507874;2.4688493e-12;0.60538185;0.85514295;0.00021136357;7.1917631e-05;0.79442114;0.88827521;6.9278743e-05;0.00017000463;
0.3795059;0.82231522;0.052959774;0.90356511;2.0429989e-06;0.64780915;0.00022620267;0.010296962;1.6225826e-10;0.80105692;
0.014757397;1.3728296e-06;0.80252647;0.10993755;0.85774773;0.12342364;2.9214452e-06;0.006126788;4.1967196e-06;8.3439118e-05;
0.18018064;0.26975358;0.044183593;4.2780372e-05;0.087144651;0.00013159048;0.81843513;0.0015293801;0.63064355;0.034991737;
0.0010021145;0.11908203;0.51241559;0.32073683;0.15865459;0.48667246;1.9209454e-08;0.011406334;1.2094597e-07;0.0051243887;
0.74069017;0.81994253;0.00099937548;0.01228369;0.47862002;0.010946388;0.29675567;0.014224759;0.024762545;0.028570058;
0.0073752343;2.6829099e-07;0.00022609707;0.01359672;0.31618381;0.88426179;0.82090908;4.1555413e-06;0.043228373;0.071083948;
0.45573083;1.213472e-07;0.0016668515;1.8901671e-08;0.023899978;8.1792197e-05;0.76848692;6.0476837e-06;1.5119427e-06;0.0022149067;
2.1560767e-09;0.020760246;0.89372653;0.30256784;0.50555879;0.00031684065;0.76120603;0.041705456;0.70451969;0.02776088;
0.13889535;0.0014724567;0.00047629126;0.013716753;0.80415338;0.34701371;0.0076364786;0.66810304;9.1479504e-14;0.65492749;
0.84672874;0.066810131;0.78200537;0.29628411;0.0021973522;0.14254242;0.8975324;0.75296813;0.017122911;3.2906164e-11;
0.8390975;0.0043461057;0.5158453;0.0021028938;0.83754534;0.011982107;0.22877719;0.0050893123;0.00052080961;7.6158278e-05;
2.4232346e-08;6.0786187e-10;0.0030982404;0.079850383;1.8586459e-06;1.8330606e-08;0.0021611659;0.027477043;0.53184766;0.0065661068;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[3] {
    name="EpochTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [1] 0;      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [1] 0;      };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [1] 1.6949217;      };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [1] 102;      };
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [1] 0;      };
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [1] 51.83654;      };
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [1] 8.1199999;      };
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [1] 4.3099999;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="ClusterPlotData";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="X_AXIS";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="MAX";
	value 6 0=11.69236321050471;
	val_type_fixed=0;
       };
      };
      name="X";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [215] 0;0;0;0;0;1.5292923;1.5292922;2.7857995;2.7857995;3.6903558;
2.7857995;2.7857995;2.7857995;2.7857995;3.6903558;2.7857995;2.7857995;2.7857995;1.5292922;1.5292923;
1.5292922;2.7857995;2.7857995;3.9860725;3.9860725;4.7900558;3.9860725;3.9860725;3.9860725;3.9860725;
4.7900558;3.9860725;3.9860725;3.9860725;2.7857995;2.7857995;2.7857995;3.9860725;3.9860728;5.0316439;
3.9860728;3.9860728;3.9860725;3.9860728;5.0316439;3.9860728;3.9860728;3.9860725;2.7857995;2.7857995;
1.5292922;1.5292923;0;0;0;1.5292923;1.5292923;2.9304109;2.9304109;4.0917912;
2.9304109;2.9304109;2.9304109;2.9304109;4.0917912;2.9304109;2.9304109;2.9304109;1.5292923;1.5292923;
1.5292923;2.9304109;2.9304109;4.2138052;2.9304109;2.9304109;2.9304109;2.9304109;4.2138052;4.2138052;
5.3430829;5.3430829;6.3487239;5.3430829;5.3430829;5.3430829;5.3430829;6.3487239;6.3487239;7.2592678;
7.2592678;8.0587997;7.2592678;7.2592678;7.2592678;7.2592678;8.0587997;8.0587997;8.6921635;8.0587997;
8.0587997;8.0587997;8.0587997;8.6921635;8.0587997;8.0587997;8.0587997;7.2592678;7.2592678;6.3487239;
6.3487239;6.3487239;7.2592678;7.2592678;8.128026;7.2592678;7.2592678;7.2592678;7.2592678;8.128026;
7.2592678;7.2592678;7.2592678;6.3487239;6.3487239;5.3430829;5.3430829;4.2138052;4.2138052;4.2138052;
5.3430829;5.3430829;6.3848;5.3430829;5.3430829;5.3430829;5.3430829;6.3848;6.3848;7.266994;
6.3848;6.3848;6.3848;6.3848;7.266994;7.2669935;8.1032391;8.1032391;8.8156977;8.1032391;
8.1032391;8.1032391;8.1032391;8.8156977;8.8156977;9.3306913;8.8156977;8.8156977;8.8156977;8.8156977;
9.3306913;8.8156977;8.8156977;8.8156977;8.1032391;8.1032391;7.2669935;7.266994;7.2669935;8.1032391;
8.1032391;8.8686533;8.1032391;8.1032391;8.1032391;8.1032391;8.8686533;8.8686533;9.5285349;8.8686533;
8.8686533;8.8686533;8.8686533;9.5285349;9.5285358;10.167273;9.5285358;9.5285358;9.5285349;9.5285358;
10.167273;9.5285358;9.5285358;9.5285349;8.8686533;8.8686533;8.1032391;8.1032391;7.2669935;7.266994;
6.3848;6.3848;5.3430829;5.3430829;4.2138052;4.2138052;2.9304109;2.9304109;1.5292923;1.5292923;
0;0;0;0;0;      };
     };
     float_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="PLOT_1";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="MAX";
	value 6 0=23.80000001192093;
	val_type_fixed=0;
       };
       UserDataItem @[2] {
	name="MIN";
	value 6 0=0.2000000029802322;
	val_type_fixed=0;
       };
      };
      name="Y";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [215] 5.8056641;5.8056641;5.8056641;5.8056641;2.5;2.5;1;1;0.5;0.5;
0.5;0.5;1;1.5;1.5;1.5;1.5;1;1;2.5;
4;4;3;3;2.5;2.5;2.5;2.5;3;3.5;
3.5;3.5;3.5;3;3;4;5;5;4.5;4.5;
4.5;4.5;5;5.5;5.5;5.5;5.5;5;5;4;
4;2.5;2.5;5.8056641;9.1113281;9.1113281;7;7;6.5;6.5;
6.5;6.5;7;7.5;7.5;7.5;7.5;7;7;9.1113281;
11.222656;11.222656;8.5;8.5;8.5;8.5;11.222656;13.945312;13.945312;11.0625;
11.0625;9.5;9.5;9.5;9.5;11.0625;12.625;12.625;11.25;11.25;
10.5;10.5;10.5;10.5;11.25;12;12;11.5;11.5;11.5;
11.5;12;12.5;12.5;12.5;12.5;12;12;11.25;11.25;
12.625;14;14;13.5;13.5;13.5;13.5;14;14.5;14.5;
14.5;14.5;14;14;12.625;12.625;11.0625;11.0625;13.945312;16.828125;
16.828125;15.5;15.5;15.5;15.5;16.828125;18.15625;18.15625;16.5;16.5;
16.5;16.5;18.15625;19.8125;19.8125;18.25;18.25;17.5;17.5;17.5;
17.5;18.25;19;19;18.5;18.5;18.5;18.5;19;19.5;
19.5;19.5;19.5;19;19;18.25;18.25;19.8125;21.375;21.375;
20.5;20.5;20.5;20.5;21.375;22.25;22.25;21.5;21.5;21.5;
21.5;22.25;23;23;22.5;22.5;22.5;22.5;23;23.5;
23.5;23.5;23.5;23;23;22.25;22.25;21.375;21.375;19.8125;
19.8125;18.15625;18.15625;16.828125;16.828125;13.945312;13.945312;11.222656;11.222656;9.1113281;
9.1113281;5.8056641;5.8056641;5.8056641;5.8056641;      };
     };
     String_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {
	name="PLOT_2";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="Label";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [215] ;;;;;;;;;"Francy";
;;;;"Maria";;;;;;
;;;;;"Christo";;;;;
"Rob";;;;;;;;;"Angela";
;;;;"Vicky";;;;;;
;;;;;;;;;"Chuck";
;;;;"Tomaso";;;;;;
;;;"Colin";;;;;;;
;;"Sophia";;;;;;;;
;"Christi";;;;;;;"Lucia";;
;;;"Marge";;;;;;;
;;;;"James";;;;;"Pierro";
;;;;;;;;;;
;;"Andy";;;;;;;"Gina";
;;;;;;;;"Alf";;
;;;;;"Charlot";;;;;
"Penny";;;;;;;;;;
;"Art";;;;;;;"Emilio";;
;;;;;"Jenn";;;;;
"Marco";;;;;;;;;;
;;;;;;;;;;
;;;;;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
 };
 data_proc {
  name=;
  el_typ=taDataProc;
  el_def=0;
  taDataProc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_base";
  };
  taDataAnal @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_anal";
  };
  taDataGen @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_gen";
  };
  taImageProc @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="image_proc";
  };
 };
 programs {
  name=;
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  Program @[0] {
   name="ClusterPlot";
   short_nm="ClsPlt";
   tags=;
   desc=;
   flags=;
   objs {
    name=;
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="Binarized_Data";
     desc=;
     data {
      name="data";
      el_typ=DataColTp;
      el_def=0;
      int_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	 val_type_fixed=0;
	};
       };
       name="batch";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [104] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;       };
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	 val_type_fixed=0;
	};
       };
       name="epoch";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [104] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;       };
      };
      int_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	 val_type_fixed=0;
	};
       };
       name="trial";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [104] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;       };
      };
      String_Data @[3] {
       name="trial_name";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [104] "Christo";"Penny";"Rob";"Maria";"Andy";"Christi";"Pierro";"Francy";"Art";"Marge";
"Emilio";"Gina";"James";"Vicky";"Marco";"Lucia";"Chuck";"Jenn";"Tomaso";"Angela";
"Christo";"Art";"Christo";"Vicky";"Rob";"Emilio";"Rob";"Lucia";"Andy";"James";
"Andy";"Jenn";"Pierro";"Marco";"Pierro";"Angela";"James";"Colin";"James";"Charlot";
"Marco";"Alf";"Marco";"Sophia";"Penny";"Art";"Penny";"Vicky";"Art";"Vicky";
"Maria";"Emilio";"Maria";"Lucia";"Emilio";"Lucia";"Christi";"James";"Christi";"Jenn";
"James";"Jenn";"Francy";"Marco";"Francy";"Angela";"Marco";"Angela";"Vicky";"Colin";
"Vicky";"Charlot";"Colin";"Charlot";"Lucia";"Alf";"Lucia";"Sophia";"Alf";"Sophia";
"Colin";"Colin";"Art";"Chuck";"Marge";"Jenn";"Alf";"Alf";"Emilio";"Tomaso";
"Gina";"Angela";"Charlot";"Charlot";"Art";"Chuck";"Marge";"Jenn";"Sophia";"Sophia";
"Emilio";"Tomaso";"Gina";"Angela";       };
      };
      String_Data @[4] {
       name="group_name";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [104] ;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;;;;;;;
;;;;       };
      };
      int_Data @[5] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	 val_type_fixed=0;
	};
       };
       name="phase_no";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [104] 1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;       };
      };
      float_Data @[6] {
       name="minus_cycles";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [104] 47;46;56;60;49;51;50;56;53;41;
46;60;54;39;53;42;51;47;58;53;
60;51;60;60;37;60;56;39;47;58;
53;53;45;49;44;49;46;60;44;40;
60;51;50;55;60;46;60;54;47;45;
40;46;47;40;49;55;50;48;49;42;
55;60;60;60;43;60;60;60;50;52;
59;59;36;45;47;49;54;48;44;48;
60;48;60;54;50;60;60;60;58;60;
60;60;46;60;52;59;39;47;60;60;
53;48;60;51;       };
      };
      float_Data @[7] {
       name="sse";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [104] 1.7116321;1.6939567;0;1.6699877;1.5556393;1.6895764;1.5217603;0;1.6733471;1.7063854;
1.7133538;1.7561607;1.7105349;1.7070858;1.7106777;1.7132165;1.7101442;1.7532252;1.290938;1.7489878;
1.6128472;1.6734726;1.6872702;1.7988777;0.99771649;1.769362;1.6837462;1.776179;1.5759956;1.4902014;
1.5497022;1.5493747;1.7460374;1.8081561;1.5723324;1.8121799;1.3400306;1.5462505;1.7162997;1.7230138;
1.7129159;1.723605;1.6816492;1.8019962;1.5767491;1.5799727;1.5886919;1.7353619;1.7114522;1.729444;
1;1.5877799;1.4247421;1.5885352;1.7367034;1.6943074;1.681376;1.7264868;1.6866269;1.7392972;
1;1.7655431;1.6067058;1.7271003;0.9999947;1.3670515;1.6714904;1;1.7288327;1.4119476;
1.7352368;1.715834;0.99983287;1.6723418;1.7179596;1.6704022;1.7029982;1.6826724;1.7495859;1.7714309;
1.5570062;2.6286004;1.665887;1.7148124;1.687288;1.6934799;3.3550637;3.2247901;1.6990752;1.6778599;
1.6970576;1.5932038;3.4125688;3.3703721;1.6927447;1.7274046;1.73168;1.7434181;3.0922532;2.6553822;
1.7414826;1.7585546;1.567433;1.7141566;       };
      };
      float_Data @[8] {
       name="ext_rew";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [104] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;       };
      };
      float_Data @[9] {
       name="Hidden_act";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 10;4;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [2] ;;       };
       ar {
	name=;
	      [10 4 104] 0.046943903;0.064694248;3.8271322e-05;0.1868397;0.017285163;0.050475232;0.0014147654;0.012006137;0.24167465;0.4947862;
0.83877891;0.00047806342;0.11369301;0.079781793;0.78215712;0.015708648;0.81068295;3.1990272e-05;0.71232641;0.0012151133;
0.0052768774;0.015874578;0.13090058;0.71932471;0.0071717659;0.0096781757;0.0065157688;0.084466666;0.13581458;0.64777547;
0.0023665915;0.055713024;0.030323673;0.1293232;0.038161714;0.78595972;0.00060792093;0.10019443;0.57652247;0.010331687;
0.024102481;0.0068776254;0.035701025;0.16345304;0.011437333;0.85611224;0.00062984898;0.022931261;0.66026992;0.086617477;
0.83174944;0.0035771232;0.041849393;0.00045247455;0.81720573;0.11941429;0.79802454;0.013859254;0.45520347;0.039588336;
0.053412389;0.0011575088;0.061566994;0.021020517;0.20822328;0.0014552407;0.37499246;0.015469182;0.046354733;0.014010767;
0.30817175;0.02473606;0.041879255;0.0015585084;0.40326893;0.068238072;9.4604315e-05;0.012501888;0.76653534;0.094464824;
0.0060010389;0.081497125;0.00083909743;0.36557531;0.0051617734;0.20114608;0.0015934769;0.074471056;0.098997876;0.66163284;
0.7716983;4.3612519e-05;0.23822919;0.039338376;0.62786227;0.031278893;0.83028102;4.4897217e-05;0.76292527;0.014088626;
0.026204674;0.012064772;0.061381239;0.54743999;0.0097523099;0.0051338151;0.011488879;0.012176754;0.038787454;0.25573486;
0.0023686511;0.37723666;0.22101153;0.070726961;0.080222391;0.80907714;0.013711226;0.022430321;0.69708234;0.013778632;
0.39523283;0.24363506;0.00019702845;0.80836505;0.07684429;0.12049155;0.013830057;0.027274957;0.37000868;0.032628346;
0.72423375;0.0021254865;0.019163998;0.038944479;0.85615009;0.040250987;0.67131913;0.032304909;0.5305202;0.039972506;
0.00048327562;0.0017767414;0.062403131;0.043296151;0.037723526;0.023864942;0.0051132948;0.0067865038;0.02484826;0.27349028;
0.1946117;0.021735638;0.38088694;0.020113738;0.70203233;0.44173288;0.00024489616;0.0006988903;0.75488055;0.028531266;
0.02001697;0.16844979;9.3673123e-05;0.052218921;0.01462619;0.14130618;0.0035288008;0.21502855;0.024699563;0.025620107;
0.86240256;0.040069472;0.18859491;0.072611026;0.83786744;0.16467409;0.70233041;0.0025793053;0.30419084;0.026799461;
0.033393666;0.0377809;0.61446518;0.0068430621;0.52725357;0.011528409;0.012686683;0.0068545407;0.27896014;0.39662388;
2.3980732e-05;0.012375367;0.70466876;0.011518316;0.011590288;0.86881584;0.00014663118;0.24046691;0.055530775;0.0011312934;
0.053291727;0.031725135;0.0049917144;0.045099895;0.049976315;0.8963322;0.00068200752;0.0099073071;0.4762899;0.22623324;
0.79746246;0.026136478;0.015323437;0.015311302;0.78385121;0.030619936;0.78507447;0.013372996;0.58995879;0.11273021;
0.023978602;0.0031365179;0.039480638;0.028549828;0.073994912;0.0012840937;0.58537996;0.3332971;0.17596993;0.012186847;
0.075939059;0.018181723;0.019299138;0.0002515961;0.054785259;0.024570886;0.00030033331;0.012266268;0.70974123;0.10301553;
0.064573586;0.056922168;4.8467278e-05;0.053829957;0.030669928;0.58004057;0.0063706543;0.002579337;0.16325653;0.53636932;
0.87629187;0.00023324662;0.15855901;0.37355387;0.81789935;0.047934689;0.83499187;0.00058744004;0.5052644;0.036544517;
0.014702126;0.019871611;0.27141726;0.41099229;0.12566832;0.0036945862;0.026610931;0.034415655;0.046518467;0.31411555;
0.014909991;0.017454507;0.004552844;0.0045145615;0.17801008;0.49136215;0.00031010158;0.037988923;0.76669443;0.00036787122;
0.029902279;0.051188543;0.038610972;0.5050388;0.049918607;0.86302459;0.0015675802;0.034790426;0.58741534;0.20631534;
0.68705994;0.0043738717;0.038079511;0.0012441692;0.63011622;0.015049969;0.39929843;0.020577138;0.74324602;0.051379453;
0.028517503;0.00042831444;0.094095103;0.011288104;0.024869949;0.0015933029;0.10015836;0.015696632;0.014316436;0.0104361;
0.58018553;0.2645016;0.4758116;0.012822816;0.20279492;0.03500583;0.0054121166;0.00064704317;0.68197912;0.62922019;
0.18776152;0.45077133;2.9494706e-05;0.32278112;0.0051808185;0.14557762;0.0049824803;0.0023807872;0.085027933;0.2191646;
0.87170398;0.0022514099;0.56752682;0.25065124;0.88127381;0.063207723;0.88164216;0.00017377501;0.34040192;0.029262029;
0.0034367824;0.0117257;0.020891216;0.085058473;0.15047881;0.01522371;0.0091820639;0.0024319931;0.18516935;0.47517389;
0.0074365372;0.050837927;0.28625646;0.0070547382;0.34147197;0.4575606;0.00059824466;0.016276194;0.32253936;0.0037487391;
0.021948986;0.005880869;0.042643901;0.1751419;0.10859948;0.87320763;0.00032112695;0.015702879;0.32041126;0.16065095;
0.82927489;0.0014594867;0.023446381;0.0074503245;0.81667745;0.070726961;0.80022156;0.0075041889;0.68710297;0.18831263;
0.045128077;0.0013031213;0.028964218;0.011303242;0.22187021;0.00051994505;0.38088945;0.014270417;0.072609022;0.070198245;
0.22635637;0.030961493;0.01518442;0.0059719905;0.16551819;0.028515209;0.00015065355;0.00069464423;0.83491701;0.075608611;
0.31387377;0.53150332;3.891927e-06;0.14156701;0.052508138;0.048670143;0.02290811;0.0068494747;0.092269398;0.35514989;
0.83496547;0.00032108402;0.32833475;0.12438297;0.85900003;0.090188421;0.80193365;1.8752267e-05;0.54575235;0.0080148792;
0.0093531618;0.007197544;0.39974877;0.23888443;0.01522371;0.02199153;0.0006249802;0.045639407;0.11535224;0.72312713;
0.0065648886;0.045870915;0.026030118;0.023094973;0.049137857;0.74422061;0.0027813404;0.013444968;0.43893674;0.0077334996;
0.055356037;0.071949124;0.12026819;0.61818814;0.083778232;0.87918019;0.01152925;0.11516426;0.16324045;0.15109156;
0.65680712;0.0011492921;0.027957335;0.0089350296;0.65122682;0.039511841;0.42001915;0.12819809;0.75766814;0.058852796;
0.015598827;0.00030128376;0.087837614;0.0074942498;0.1263814;0.0012370828;0.080225393;0.0064020115;0.070360966;0.013962946;
0.14679779;0.17606282;0.24703555;0.0023489103;0.32607022;0.015413071;0.0020835332;0.00097840605;0.84606683;0.42907661;
0.043861162;0.068090871;0.00028126276;0.081455566;0.023324586;0.64588624;0.010023976;0.01133232;0.1252979;0.53876829;
0.85445195;0.00038115316;0.041099846;0.49754068;0.63525659;0.057713747;0.73627043;0.00017551979;0.79764253;0.052629929;
0.0010910354;0.0030986206;0.5614149;0.22851808;0.24846384;0.0021688023;0.041049853;0.012612429;0.40540054;0.53645992;
0.0011565523;0.025605507;0.026928762;0.036864266;0.025572557;0.60201967;0.00016145108;0.068856418;0.59749192;0.00090865756;
0.0014520379;0.004668525;0.0017139381;0.80489469;0.060655251;0.67252141;0.006555398;0.079142421;0.66585577;0.12427545;
0.25497252;0.0031798973;0.023621771;0.0020603067;0.63687229;0.01945159;0.028670579;0.013031522;0.77494216;0.0033158972;
0.0035441373;0.0092760241;0.030111248;0.43368536;0.05684156;0.0018709463;0.018777553;0.12392099;0.11435753;0.049752526;
0.037456457;0.13525899;0.60741776;0.15880911;0.064242132;0.59355485;0.0047149514;0.051518023;0.74956566;0.59347558;
0.3258428;0.29897475;1.5698294e-06;0.54109931;0.041699082;0.028159838;0.016081002;0.010020371;0.039662823;0.17825572;
0.80593038;0.0002371274;0.16897948;0.24621648;0.85838389;0.071657225;0.85491276;0.00194747;0.7187674;0.023152741;
0.0083498852;0.0049878666;0.16051519;0.37410179;0.020218847;0.064437397;0.0025961944;0.014318118;0.11635735;0.6937421;
0.0014460239;0.01791749;0.013264137;0.022176724;0.074839063;0.40772733;0.00044164542;0.02791917;0.70063126;0.0013225836;
0.043261256;0.021355659;0.0080555342;0.034185153;0.060583655;0.8810882;0.0031534387;0.0090792133;0.58142918;0.12159446;
0.80160677;0.015907019;0.013608015;0.011844411;0.85975999;0.048591632;0.75762004;0.0084020318;0.4545486;0.049033511;
0.037777547;0.00083331525;0.023422815;0.0046079913;0.29706928;0.00018965091;0.66949415;0.12184695;0.17966524;0.014183908;
0.17742233;0.022490593;0.007887207;8.9979541e-05;0.14627703;0.083349645;7.8580881e-05;0.012319736;0.74825108;0.068346724;
0.036579076;0.080011599;1.893684e-05;0.54612386;0.073189817;0.034920942;0.063364439;0.0027517765;0.28733847;0.14088905;
0.74877107;0.0035046872;0.12796848;0.05219879;0.81775093;0.26022422;0.71580356;0.00056876807;0.46410948;0.0034621635;
0.002820632;0.031590253;0.22359081;0.36549774;0.038835771;0.018848877;0.00021623314;0.026060564;0.22183381;0.78158993;
0.0069825337;0.030877614;0.066292927;0.25140074;0.22305118;0.79478288;9.8691489e-05;0.02653335;0.72296184;0.0077666519;
0.016554611;0.027451599;0.11988876;0.25862035;0.045779318;0.86484611;0.00024070578;0.20422751;0.34004766;0.098092653;
0.79091024;0.011020162;0.022165045;0.0012333873;0.74592453;0.039455138;0.6835342;0.047038853;0.70696735;0.12635504;
0.31956863;0.0014080557;0.047367327;0.014631116;0.086012274;0.0015746376;0.055710521;0.026106447;0.011956153;0.014275224;
0.38337633;0.043896392;0.1318488;0.0067280862;0.14884062;0.018501224;0.0057146577;0.00021624753;0.82924342;0.34246778;
0.0065807276;0.51542169;0.00018246294;0.018196531;0.026991954;0.0039448766;0.0065157688;0.76837701;0.27324134;0.066827655;
0.81599516;0.021471612;0.16432394;0.044102736;0.87467939;0.045935337;0.77373463;0.0061966199;0.035962392;0.0060338709;
0.15707356;0.0012157799;0.042845882;0.042534858;0.80205774;0.023941062;0.010794516;0.00019700926;0.037289701;0.018380055;
0.00033917345;0.036878694;0.15658942;0.0031176643;0.12488171;0.85638815;0.0019747841;0.15605706;0.45425427;0.00043174837;
0.016314985;0.014398861;0.22476749;0.58974665;0.029930227;0.89156091;0.0035121653;0.098501213;0.47386166;0.18729793;
0.51933616;0.00057209161;0.046821773;0.00062798487;0.44359699;0.010504106;0.26673019;0.12425742;0.65237069;0.049968936;
0.017091002;0.0022440585;0.055615388;0.045553852;0.032394491;0.0011013825;0.045547143;0.0085686836;0.012629971;0.0065605924;
0.68531609;0.52040994;0.36460456;0.042889167;0.16232935;0.019482246;0.0039456459;0.0016536381;0.73083341;0.63483435;
0.0059156246;0.001538249;0.003403733;0.45881149;0.21586475;0.7962743;3.0201769e-05;0.0077569052;0.75960922;0.33417803;
0.69940084;0.0019405623;0.19326264;0.011810048;0.5623709;0.019031985;0.59395331;0.00020816679;0.80822635;0.00053138734;
0.60057455;0.00026412992;0.046064511;0.36970094;0.042316101;0.0077921096;0.11718141;0.049850497;0.003729315;0.031139653;
0.0044764713;0.12308583;0.35969585;0.0071648406;0.032164328;0.0058860634;0.0015300467;0.15980774;0.74382597;0.66985184;
0.36641845;0.46908122;0.00055318052;0.69607383;0.0052291043;0.11903486;0.0044336361;0.013361461;0.024679959;0.053229142;
0.85426277;0.00015917351;0.15510041;0.28851861;0.86497146;0.24712656;0.86062402;0.012722488;0.22693026;0.14902909;
0.010398131;0.0023822449;0.037650049;0.055524264;0.029004887;0.01383979;0.0089764828;0.00038857904;0.2127662;0.44688123;
0.022563793;0.14021823;0.14957753;0.064396843;0.51954687;0.25470594;0.0002214987;0.0034420106;0.38022643;0.043088797;
0.029923761;0.084082142;0.00013103608;0.30970615;0.034218367;0.2218852;0.00034420783;0.0019826423;0.44296908;0.6415329;
0.7940951;0.00019864125;0.043370299;0.29630566;0.73937827;0.01378512;0.84131557;0.00024287777;0.75538385;0.0014605735;
0.0025425486;0.068002753;0.037074301;0.82902712;0.00073135173;0.01076664;0.016756697;0.11221413;0.026363589;0.64311683;
0.003067821;0.2037821;0.053716306;0.16181752;0.012799626;0.32822224;0.00060433371;0.011791664;0.52753448;0.024396747;
0.026113121;0.31603777;0.028091224;0.78802115;0.0013690151;0.041707471;0.0086620431;0.048502721;0.0082338182;0.1877097;
0.38472986;0.00016214709;0.018519159;0.57601053;0.40009153;0.23403531;0.074023947;0.025096018;0.59904212;0.01086108;
0.066350006;0.015566747;0.21307135;0.21917209;0.00043208562;0.00029587533;0.005653162;0.01821968;0.29487416;0.60058248;
3.936232e-05;0.68505609;0.041977227;0.77623969;0.052167922;0.84993321;0.015086856;0.017894132;0.20422643;0.55472988;
0.00039176768;0.0088744732;0.014109412;0.6663112;0.027444508;0.79062557;0.00010668584;0.29038575;0.34065807;0.54132134;
0.1612387;6.5937995e-05;0.41040185;0.0013555812;0.23241431;0.016572546;0.49530131;4.8529822e-05;0.84555089;0.026392994;
0.7380383;0.0064197741;0.00666223;0.39045921;0.011715007;0.035466161;0.043748092;0.0014978606;0.0021964966;0.0062427255;
0.00065102894;0.67784065;0.60847044;0.058380153;0.081924208;0.023530219;0.011687612;0.0032347154;0.766482;0.58611846;
0.49297851;0.74254876;0.0076945759;0.4035041;0.024642002;0.05228569;0.0037325788;0.037076648;0.0027221495;0.045603842;
0.76553816;0.00089364412;0.073525272;0.52303547;0.76144463;0.43699169;0.59477997;0.0054539903;0.17115629;0.12382596;
0.10579363;0.022356702;0.64703006;0.0094788419;0.0045635528;0.0046672425;0.0048533971;0.026445551;0.19582371;0.70354098;
0.0030365144;0.1341496;0.0076875859;0.23739298;0.061108869;0.60109985;0.0041302615;0.0064040637;0.14619307;0.2645348;
0.002284396;0.16115743;0.0012294021;0.44070762;0.0052832258;0.24557835;0.00047147763;0.035485622;0.31694263;0.7522375;
0.59807074;5.6461264e-05;0.10459431;0.082146011;0.55276358;0.028418023;0.83637094;0.00070757087;0.72360581;0.0051622223;
0.011352746;0.064159021;0.017199866;0.79227597;0.00058106886;0.0062685679;0.019195907;0.014280871;0.0068378039;0.28552157;
0.0051611322;0.65051317;0.34354979;0.14326327;0.045390453;0.62224019;0.018966917;0.003968731;0.58880699;0.035818119;
0.56995749;0.79912424;0.0034137459;0.029660778;0.011237999;0.70393014;0.0024073091;0.045242488;0.004080629;0.024709573;
0.8594963;0.0015517698;0.029332936;0.65489936;0.83799517;0.030113125;0.73832899;0.063743457;0.030105408;0.29461801;
0.013912963;0.01613584;0.40244082;0.001463356;0.15008935;0.0072049825;0.16238651;0.022389028;0.49203667;0.26311827;
0.0036271568;0.054528408;0.00043077336;0.019500598;0.056613747;0.044000737;0.0022925078;0.0027926527;0.11117295;0.060476508;
0.017771088;0.019806752;0.0026479072;0.71935934;0.25080755;0.83659357;0.00060510635;0.01223647;0.4116478;0.15758896;
0.67505848;0.0010840505;0.22848383;0.011075433;0.78379053;0.074388951;0.54818302;0.0036359974;0.80371219;0.029466201;
0.25992015;0.002268204;0.14123651;0.0060954308;0.038390875;0.011764029;0.027524384;0.010116493;0.0035740496;0.22715083;
0.0038039943;0.051805228;0.65660673;0.0057853232;0.028840339;0.0082511203;0.00027219966;0.027681421;0.75152558;0.27289903;
0.081816562;0.33860898;0.0034781969;0.054973014;0.0073004644;0.80329859;0.00021531874;0.019439911;0.005407243;0.26050368;
0.85678196;7.0769303e-05;0.02981177;0.81924701;0.59989256;0.04546259;0.49894366;0.0025941664;0.71023053;0.34367186;
0.00072530867;0.0073774145;0.65546238;0.02229226;0.05839267;0.00044634254;0.11663134;0.0040678037;0.60943586;0.5881092;
0.00080099877;0.082288198;0.0028401194;0.27834973;0.023795495;0.12429141;0.00058676553;0.0089647081;0.37255561;0.030757163;
0.020041788;0.032714576;0.010638197;0.23613921;0.042666383;0.82367671;0.0045035961;0.017575467;0.070865653;0.054238513;
0.81446797;0.0010561249;0.58573109;0.036693152;0.84868681;0.18310687;0.68904388;0.015948232;0.71631688;0.1979458;
0.010676886;0.023701647;0.18705764;0.015553529;0.013088955;0.0026125764;0.020346899;0.010678688;0.031345662;0.34071791;
0.0049935738;0.0085961986;0.6702013;0.0038917812;0.010141605;0.029332101;0.00047232999;0.00617937;0.71639287;0.043521617;
0.63809741;0.79834974;0.00042247676;0.39174518;0.015392045;0.053430915;0.0016810788;0.14971241;0.020930424;0.014172012;
0.82586014;0.00050760742;0.011666825;0.25964928;0.84172887;0.0877086;0.86118376;0.044922743;0.30563909;0.091506369;
0.34981835;0.0013670587;0.14048798;0.27333468;0.041600104;0.034838069;0.0013390753;0.0016560779;0.045772273;0.20574895;
0.047564611;0.049693812;0.0068076653;0.059744511;0.083008684;0.034941074;0.0072622462;0.00020097643;0.65534645;0.18272278;
0.021612803;0.0034940087;0.001288905;0.2324657;0.037067924;0.75813901;0.0098820748;0.015921557;0.64104325;0.44973627;
0.076817252;0.0016234601;0.65731883;0.0047969674;0.75392944;0.11226546;0.074367918;0.0036056098;0.79145283;0.25936019;
0.68988347;0.00010190507;0.029900612;0.13978858;0.055891264;0.013987818;0.095510855;0.037167575;0.00028080898;0.020298097;
0.034968924;0.071948625;0.30433688;0.00016057509;0.60468405;0.0016009836;0.00034052861;0.077277377;0.78817183;0.55244869;
0.69126463;0.78891373;0.0059605762;0.63533986;0.019235948;0.045963854;0.0014186056;0.28013071;0.00039978835;0.0030684865;
0.77591324;0.00065412564;0.14351694;0.60444218;0.81814522;0.069423184;0.79104322;0.28023842;0.058071733;0.30548829;
0.079488389;0.018302266;0.17870322;0.023217183;0.011940053;0.034798481;0.015197276;0.0031899102;0.043456528;0.45454368;
0.002181699;0.18694599;0.0011809854;0.2841523;0.21156275;0.029237419;0.0019921483;0.0064532473;0.31534597;0.050568841;
0.044014495;0.0097754989;0.00018498773;0.018386729;0.00011088581;0.79103023;0.17809404;0.0022579692;0.29995859;0.26428425;
0.071892045;0.00033821072;0.32529703;0.16302072;0.74859637;0.56567377;0.52398014;0.01884575;0.71723413;0.74675649;
0.0041039702;0.015453202;0.022706233;0.46830371;0.030016148;0.00044165156;0.64906007;0.055429637;0.63795465;0.37188759;
0.038740817;0.19518559;0.014204814;0.00041166603;0.092148699;0.0075291977;0.00025438002;0.011448988;0.75369745;0.0082433103;
0.069981948;0.61115658;0.18810719;0.35007104;0.0023748935;0.63731831;0.0032141507;0.12219863;0.0062874844;0.35296825;
0.77709669;0.00011699377;0.1603553;0.66051501;0.24185023;0.022842418;0.2915324;0.052661367;0.35022867;0.06918937;
0.033747301;0.032356244;0.11629145;0.24004292;0.0042565875;0.0015858976;0.0059531378;0.0031114537;0.17101873;0.49638543;
0.013784279;0.81201547;0.011834439;0.75885373;0.050996628;0.36274317;0.014708615;0.011947142;0.088245489;0.34097403;
0.016223848;0.020393405;0.00077060971;0.56178415;0.64985502;0.74317938;0.00089755689;0.012163057;0.38848022;0.44889006;
0.78867513;7.300602e-05;0.03976113;0.2502144;0.69942236;0.0070468509;0.66119069;0.0006842537;0.84853297;0.014537877;
0.029452853;0.00024110658;0.28655806;0.19016252;0.1131797;0.021391947;0.043834992;0.016772754;0.028784657;0.14753561;
0.0053720386;0.013240227;0.05957428;0.01940258;0.071887039;0.016577968;0.00048952416;0.11312629;0.76304561;0.028148159;
0.51608545;0.79281938;6.9675705e-05;0.032522324;0.031859338;0.19080298;0.012745197;0.0044785873;0.012101899;0.025591742;
0.86771917;0.014965622;0.2154943;0.44316038;0.81837159;0.21958324;0.86516577;0.0026994299;0.020134386;0.23826344;
0.029419903;0.028784657;0.30753019;0.025658062;0.11844873;0.070274346;0.0055247201;0.013212712;0.57903928;0.55671662;
0.00095458172;0.0081684552;0.027938357;0.026665363;0.21010448;0.068539985;0.00073503261;0.00054018677;0.074369423;0.040518396;
0.019557742;0.014910832;0.0016961618;0.020899558;0.00049478537;0.80614203;0.10774489;0.0034683107;0.37390164;0.58068842;
0.12006842;0.00021915631;0.1369222;0.173702;0.58247805;0.55254155;0.58254826;0.0030430735;0.78264159;0.68174398;
0.00029123342;0.0050153765;0.029654939;0.34998849;0.070747487;0.00084040168;0.65489268;0.025731472;0.75071627;0.32160577;
0.0068585803;0.29957318;0.015132634;0.0054735481;0.038189899;0.022969425;0.0003150072;0.010251304;0.69184262;0.0045165494;
0.1392044;0.31030941;0.0017227153;0.26213324;0.02285785;0.050191049;0.0037818071;0.026579857;0.030356219;0.16595231;
0.86245501;1.6522294e-05;0.032260954;0.27141726;0.8002913;0.087783515;0.81339419;0.0036178408;0.60168666;0.009403266;
0.046924107;0.015940662;0.36771193;0.5568797;0.022574222;0.081499629;0.0019231344;0.001360465;0.081189208;0.5905872;
0.01442133;0.043782651;0.0039132629;0.39774475;0.075340241;0.66163945;0.0013338437;0.00347769;0.548729;0.038237207;
0.027126677;0.021390069;0.00080801273;0.74197811;0.11880249;0.76510912;0.0036124224;0.026854519;0.29744509;0.15916105;
0.34082803;0.00034608421;0.63145435;0.0051735081;0.77105266;0.018169211;0.30663013;0.015015245;0.86916262;0.0080231512;
0.60852194;0.00018131576;0.031722113;0.11134775;0.024573598;0.032968562;0.020296428;0.015531542;0.0059203701;0.031709027;
0.0015918828;0.056017436;0.49305457;0.00051353092;0.043990001;0.00045488443;0.0014030125;0.063677862;0.78762978;0.58719534;
0.060304273;0.15029123;0.0015556391;0.422436;0.022331884;0.022202583;0.0030549879;0.03391137;0.028709577;0.096881524;
0.83956313;4.0488063e-05;0.01655023;0.38400429;0.71926337;0.40063944;0.83775693;0.0020886664;0.45227978;0.050878525;
0.26530346;0.006316341;0.37645859;0.5023579;0.065934435;0.012854536;0.00041933105;0.0014368942;0.019514363;0.45491159;
0.030101655;0.043196164;0.0090241833;0.52523965;0.31372058;0.6163128;0.0016671367;0.00087845686;0.74880308;0.10273738;
0.14258887;0.29178137;2.2462304e-05;0.58185512;0.061921474;0.20264503;0.0092844348;0.0039862371;0.11733471;0.22200619;
0.66375923;9.9517085e-05;0.24845742;0.35451192;0.84646142;0.047304586;0.8591857;0.011265274;0.7848537;0.032473337;
0.0063601383;0.037702389;0.043414924;0.70946127;0.0034927411;0.03515178;0.0044201696;0.030567596;0.024733139;0.52813703;
0.0078552086;0.073917806;0.048328251;0.019657429;0.018610504;0.038039923;0.0013768985;0.0038080981;0.68868285;0.0035427748;
0.73506516;0.76608646;0.04426714;0.33250955;0.0087340139;0.2383384;0.0024372216;0.14231375;0.00064367056;0.017376717;
0.77765965;0.0006216137;0.039577935;0.62445849;0.78398204;0.19252424;0.84215111;0.02463533;0.022802167;0.35983095;
0.37279579;0.014077452;0.10303496;0.0069754156;0.046628851;0.012478938;0.15618569;0.012121364;0.40332147;0.26636633;
0.0070070936;0.19125585;0.00058289006;0.031774119;0.094864368;0.028263904;0.0019256694;0.0013947667;0.1213607;0.29872578;
0.089071631;0.059669409;9.3507522e-05;0.68069738;0.030797426;0.36009616;0.00047686155;0.0015464224;0.68367165;0.14421903;
0.80797654;8.3320985e-05;0.1205512;0.013090396;0.85150069;0.069904342;0.80275601;0.0035429965;0.58178937;0.0060470165;
0.045968216;0.0025577582;0.15999533;0.29379454;0.022043876;0.068707213;0.011342173;0.0072954628;0.0077696019;0.32981414;
0.062798165;0.029082883;0.063060522;0.030427013;0.66528779;0.032018375;7.7092918e-05;0.027060149;0.73869163;0.022808632;
0.030394468;0.0063675125;0.0018831774;0.3234466;0.00062405423;0.7528975;0.0031416831;0.0027305465;0.13395308;0.041113604;
0.83285874;0.0006405923;0.70134836;0.028270578;0.84378862;0.20666544;0.80444783;0.00042846162;0.51744235;0.33501825;
0.028382987;0.012521232;0.012529163;0.010320993;0.039963447;0.0015707539;0.065491833;0.0016270686;0.029947536;0.057016797;
0.028002799;0.051422063;0.5972203;0.0091759367;0.55115294;0.023299977;0.00068532611;0.0035683459;0.72147793;0.12915602;
0.037302453;0.065478317;0.00066422619;0.31846511;0.015431815;0.28850183;0.0044891038;0.00085755985;0.58691812;0.43452421;
0.83336502;3.5628087e-05;0.17568946;0.060227167;0.84164107;0.097130544;0.84795934;0.001539988;0.60828209;0.0060373978;
0.0038010445;0.070692919;0.15533353;0.69415778;0.014998904;0.045678329;0.0050316001;0.02538632;0.008687635;0.3708443;
0.053505015;0.040149659;0.074277297;0.042311739;0.085813999;0.26349837;0.00063072587;0.0072391611;0.69151801;0.0053356159;
0.0034912836;0.0035191681;0.00012261454;0.77766699;0.0048201806;0.16161923;0.018849295;0.020392153;0.41291127;0.041708812;
0.43266991;0.00090010744;0.065622009;0.031684536;0.71994466;0.24636959;0.21977489;0.0023834172;0.80190361;0.0075535011;
0.010214658;0.052056864;0.060029399;0.51737893;0.011361277;0.0033927376;0.001972344;0.028422821;0.048778515;0.3434636;
0.0043291766;0.079551473;0.61357313;0.50592178;0.35035625;0.75951612;0.0066558179;0.033147059;0.78004545;0.21945582;
0.4490912;0.050104819;0.027195081;0.40549561;0.00519499;0.65294158;0.008360099;0.023423649;0.078756392;0.013569806;
0.75676721;5.7276036e-05;0.054115847;0.031537578;0.87460208;0.24944566;0.86075133;0.0059235762;0.26393414;0.44224551;
0.056648295;0.0051624146;0.047254927;0.0011847243;0.27507979;0.019906439;0.38740689;0.0078684185;0.24400766;0.014844147;
0.26858777;0.034627702;0.046948601;0.0013307281;0.41652399;0.02222907;0.00024450014;0.0081045339;0.62641114;0.27556813;
0.010207329;0.034179114;0.00017360941;0.85982698;0.011939092;0.23193036;0.0079011219;0.013758566;0.72002465;0.5223242;
0.086346254;0.00041082595;0.010580643;0.0020408193;0.65538454;0.14167063;0.050907716;0.0049704891;0.65652061;0.0020130617;
0.0032756547;0.010929568;0.011707197;0.74700183;0.0080069918;0.0028840057;0.0041672615;0.074987762;0.07158713;0.27628148;
0.0027300711;0.69138551;0.44623125;0.33165497;0.064612135;0.73607308;0.0047905548;0.081076048;0.44605711;0.42649406;
0.027074123;0.11633099;0.00013807284;0.77653056;0.0080094924;0.002165697;0.15661889;0.029286847;0.44693765;0.058897857;
0.053855993;0.033586252;0.66931361;0.00072687375;0.81691331;0.073028095;0.012969883;0.010311381;0.73706239;0.034465645;
0.27084991;2.5659609e-05;0.0069773397;0.050510462;0.04668824;0.36246544;0.0064951209;0.0025468578;0.0050433348;0.054584485;
0.00063745881;0.53688353;0.88966113;0.0073703607;0.74963498;0.049491826;0.0019116005;0.078503549;0.035023276;0.44201985;
0.024478082;0.007671555;0.0023214379;0.033853661;0.01211812;0.83183998;0.0031375636;0.0031491928;0.076378658;0.14797865;
0.83222991;0.00092006248;0.64366794;0.042076539;0.82178193;0.15794177;0.67270523;1.1956252e-05;0.81258804;0.18892629;
0.32155311;0.0022366757;0.16412118;0.029777357;0.018996531;0.00071828021;0.052053511;0.035195734;0.03268807;0.054397229;
0.023696225;0.025743777;0.4153381;0.003197008;0.069904841;0.013924377;0.0035435669;0.0042238194;0.78043365;0.27043819;
0.041375309;0.65027529;0.00016218069;0.70874929;0.012534689;0.00077746424;0.60498935;0.013377681;0.12593052;0.29033551;
0.064315736;0.0071446411;0.62476379;0.048004139;0.81890678;0.026740858;0.71266508;0.035357118;0.55346131;0.0072923205;
0.0016531944;0.017668897;0.0041614259;0.35927051;0.0042962804;0.060632721;0.0035985119;0.0093191583;0.051487491;0.23593257;
0.0026262968;0.66733134;0.82545012;0.011730506;0.3918753;0.39206544;0.0024166885;0.0008968903;0.044002078;0.020498306;
0.023317704;0.0079764687;0.006353341;0.018817177;0.017630732;0.86400729;0.0062094447;0.0043968926;0.32905769;0.076111294;
0.83776385;0.0029527345;0.11838213;0.13272558;0.86325246;0.12013709;0.76874644;0.0014094034;0.59382641;0.1432043;
0.073696502;0.016645329;0.066990376;0.0096084867;0.30589524;0.00062093919;0.53113633;0.054860361;0.068684682;0.01794773;
0.039175648;0.012304597;0.045539089;0.00075801642;0.087737039;0.095558025;0.00043247195;0.011052604;0.78065968;0.04290225;
0.49122235;0.15053508;0.030922238;0.14304352;0.16233917;0.60521531;0.0037232628;0.014265732;0.046328228;0.02555754;
0.77339977;6.2235034e-05;0.037657768;0.027771724;0.85109574;0.37436199;0.78472811;0.00028263632;0.39046422;0.2538451;
0.40748465;0.0014301121;0.6625917;0.0021491565;0.043044847;0.0035198969;0.046048407;0.027605927;0.064295202;0.043214619;
0.064297207;0.025958585;0.011001899;0.0062093805;0.12472494;0.024176309;0.0075055356;0.006311724;0.71241844;0.60318929;
0.78584146;0.79493368;0.002231986;0.62189525;0.039052181;0.45374164;0.0017201171;0.013834382;0.074729912;0.064944588;
0.5469507;0.00033496076;0.026503319;0.133251;0.86621118;0.079649612;0.81080705;0.021412384;0.018624686;0.56037283;
0.021753365;0.026206343;0.045109626;0.018686624;0.042085934;0.023805087;0.17260243;0.079489894;0.063422017;0.25424874;
0.017779637;0.29429245;0.00017022542;0.024814891;0.3195447;0.0055849329;0.0018125158;0.0026414748;0.30708733;0.049561616;
0.010463495;0.011804881;0.00053742738;0.34261382;0.43536305;0.83885092;0.001293238;0.0078379586;0.714221;0.25661173;
0.61159867;0.006503521;0.27367461;0.014806059;0.6605581;0.011980304;0.42396715;0.00047128755;0.82496339;0.0059519834;
0.59971815;0.0011278153;0.11013108;0.21210237;0.075194545;0.025719376;0.218595;0.16911435;0.0070853899;0.021799663;
0.004048374;0.039166592;0.43413666;0.0010839925;0.024542106;0.01068037;0.00072172924;0.14594921;0.61221123;0.55590105;
0.043489743;0.0026809566;0.013550461;0.051709939;0.050392695;0.87008828;0.0072734039;0.0031769504;0.028533561;0.27382544;
0.80212504;2.6242971e-05;0.032210965;0.28224444;0.73565578;0.13629067;0.74236876;0.0012345901;0.82962954;0.37597069;
0.0052507785;0.0051798564;0.45481104;0.015879985;0.082109958;0.001280152;0.40236574;0.013265699;0.17737944;0.029648891;
0.012593805;0.0096847834;0.032944407;0.015805731;0.066122197;0.024716455;0.00057280291;0.015870133;0.80549806;0.045225713;
0.015012361;0.46670449;1.4039731e-05;0.047740422;0.015030985;0.75805116;0.007078785;8.4213061e-05;0.47045231;0.66746217;
0.78292203;0.0034114646;0.047557902;0.61177707;0.75250953;0.006125249;0.8470602;0.0014427778;0.71985799;0.0038011728;
0.0008011582;0.060899083;0.022924587;0.73054272;0.0060887616;0.011330397;0.030056398;0.30160314;0.12964782;0.46270159;
0.0045864452;0.24812444;0.015454284;0.012116557;0.0056727198;0.067387417;0.0017747134;0.0079070209;0.083841816;0.0030820484;
0.020424897;0.0067716269;0.0070188926;0.050267883;0.0036910691;0.79822886;0.00069315161;0.017117489;0.26730469;0.11771275;
0.83583015;0.0036653394;0.11890724;0.034947451;0.77344477;0.11983396;0.78293455;0.0006274943;0.80664814;0.14387155;
0.63415045;0.0059294114;0.071398877;0.065380186;0.052129;0.0020690206;0.035069913;0.011385667;0.004207083;0.031920068;
0.081002951;0.024070157;0.31005326;0.014307905;0.16804783;0.012494078;0.0097291199;0.00024396495;0.83789945;0.15490121;
0.55541855;0.027509993;0.0073609343;0.13593517;0.026110826;0.79764092;0.0080364253;0.013610778;0.042745564;0.048979491;
0.73817033;4.8286114e-07;0.0031964062;0.21008092;0.75451326;0.10567086;0.78219163;0.0016125045;0.74897903;0.72067928;
0.0019531102;0.00065128651;0.54673553;0.0099225659;0.17694356;0.014053061;0.38044661;0.013806867;0.48263767;0.042441249;
0.029782573;0.0080223819;0.0043461695;0.010943745;0.098298669;0.0025284479;0.00042924649;0.01422572;0.70234036;0.073876753;
0.77101606;0.77608901;0.0016990135;0.81064647;0.0059572416;0.13122797;0.0030527697;0.033324212;0.082767352;0.12172348;
0.15763094;0.00055135315;0.028581528;0.021774845;0.80038542;0.10027836;0.82165742;0.010939901;0.0792;0.64668912;
0.25796509;0.015148374;0.013795453;0.2677739;0.0031891498;0.014568637;0.046109803;0.055130228;0.008309274;0.12654994;
0.022175472;0.53621978;0.00079647737;0.069968432;0.41065204;0.0020360979;0.013079703;0.00014067681;0.40394196;0.20135057;
0.038085215;0.39954361;0.0010252576;0.6548447;0.012766103;0.018206958;0.014521176;0.046752322;0.54436594;0.29045758;
0.16675353;0.0072163329;0.37116456;0.00084476365;0.47442335;0.019469526;0.042319119;0.0063241641;0.81813139;0.03436264;
0.60069746;4.8037309e-05;0.015643764;0.23976669;0.026083507;0.52407527;0.0053568413;0.0077158012;0.0030326804;0.025249302;
0.0095446855;0.69034719;0.84970093;0.015374622;0.50687099;0.038627077;0.02668309;0.027793415;0.060516059;0.66673845;
0.4312939;0.16049911;2.0269534e-05;0.54070061;0.0093251662;0.18783119;0.003755742;0.006508138;0.046972759;0.013233499;
0.73215729;0.0004653027;0.12253021;0.16483755;0.83372408;0.39531291;0.82244915;0.0061683408;0.74341667;0.50962788;
0.024225527;0.012963274;0.21063875;0.12857543;0.0079803159;0.0411589;0.0025159633;0.0068267104;0.0098963734;0.55259818;
0.0070094662;0.015737483;0.18032177;0.064812407;0.37440953;0.019455761;0.00024081138;0.0020545714;0.817761;0.010877902;
0.0073472117;0.46478152;0.00056600256;0.36598313;0.0076523814;0.058140326;0.29316977;0.012976371;0.54249024;0.67075938;
0.094989225;0.0022219729;0.48455572;0.045584384;0.61929631;0.005601862;0.65661335;0.021872865;0.75370276;0.011548595;
0.0091403713;0.010847864;0.010430573;0.7488777;0.0013966217;0.045301542;0.0039050549;0.046688911;0.036028489;0.072475843;
0.016252419;0.79925239;0.78357184;0.014477321;0.054281075;0.18990171;0.033388298;0.0005076197;0.039097473;0.076261997;
0.0060439385;0.0065313512;0.024316872;0.5368405;2.7273667e-05;0.84298956;0.014849314;0.065229475;0.31019929;0.055429135;
0.29242051;8.0550926e-05;0.26932266;0.0042879442;0.25468987;0.046543967;0.30177787;0.013215836;0.73483849;0.45922357;
0.085567668;0.19476481;0.021706233;0.43883127;0.0070559564;0.00056031818;0.014116501;0.0010186204;0.015740126;0.012473171;
0.38028148;0.80476165;0.61538303;0.50810474;0.40288365;0.06682615;0.018205291;0.00030775915;0.74279803;0.28498533;
0.7745738;0.36840996;0.010201441;0.62369925;0.02833961;0.062765121;0.014745262;0.048445348;0.0081737414;0.001376087;
0.24745418;0.00049668021;0.036308311;0.1932787;0.82530046;0.39639622;0.8105402;0.033909358;0.25885054;0.72906017;
0.15823476;0.039207526;0.31225318;0.023426151;0.10803762;0.044999573;0.21911535;0.029902905;0.11629214;0.27013895;
0.016046157;0.039357502;0.0025289864;0.02710332;0.15975058;0.0046562133;0.0023619654;0.010774811;0.69308794;0.15450908;
0.12549143;0.28392729;0.012893345;0.74455929;0.00019792365;0.80803579;0.0043741921;0.062848233;0.59637779;0.71628219;
0.019843666;2.2604729e-05;0.057347246;0.00042947338;0.073163278;0.044406381;0.14921488;0.0074900175;0.052207176;0.62112212;
0.0135024;0.055409107;0.0034733806;0.68152702;0.0011995927;0.0013775217;0.024150865;0.0063540461;0.016823849;0.053901054;
0.16245529;0.88723689;0.012780762;0.50488913;0.44639069;0.0094050681;0.010146531;0.0012758625;0.29098183;0.46026108;
0.0013530597;0.0082457131;0.00015535273;0.84240365;0.058384158;0.20722006;0.0061403182;0.029632207;0.77176946;0.13103722;
0.11774743;0.0027801681;0.049296223;0.0057035;0.63282818;0.051199615;0.013807108;0.0022562898;0.80167896;0.00016038069;
0.046847273;0.010007635;0.041321289;0.54274851;0.045574989;0.023912909;0.0021999823;0.040030215;0.035845295;0.084770083;
0.0072493572;0.26793668;0.77634645;0.31157333;0.099308632;0.37148729;0.0074519916;0.23219267;0.57601053;0.70054352;
0.013405196;0.05160962;1.3970176e-06;0.014078774;0.00056265446;0.043102555;0.05027191;0.00023574741;0.070949763;0.0082571274;
0.53180689;0.58711296;0.79742599;0.0075166933;0.75923461;0.68439698;0.60481489;2.5870921e-05;0.63908464;0.71536624;
0.034227762;0.031554352;0.049348898;0.024581732;0.078250207;0.051022798;0.021199454;0.025687885;0.470781;0.7451939;
0.00034497431;0.0014125771;0.83870292;0.015786747;0.42796019;0.05961233;2.44737e-05;0.0023159876;0.089319266;0.04285226;
0.0029922163;0.029760882;1.8432538e-05;0.78583622;0.015881548;0.067673303;0.023945861;0.0031759364;0.4989363;0.53000593;
0.20505835;5.0502476e-05;0.032204252;0.11694349;0.73011744;0.050958041;0.39344147;0.0018657179;0.7873525;0.00011414979;
0.00050767488;0.082018338;0.034166697;0.8143155;0.00053965941;0.0022657325;0.00060858933;0.106968;0.06673903;0.58016288;
0.0016764526;0.38824001;0.47083741;0.54523587;0.025302066;0.79903829;0.0030283392;0.01053066;0.58646733;0.14657627;
0.0037189536;0.0014273586;0.0080216769;0.018964415;0.0045774039;0.82485771;0.0043244315;0.0033991383;0.29307881;0.08805681;
0.84083319;0.00051713659;0.39579076;0.030845068;0.80958158;0.051847503;0.80919147;0.0001588711;0.7427994;0.034535434;
0.20593204;0.029349204;0.060427442;0.2056665;0.31319633;0.0074562239;0.45159546;0.0057377424;0.017820096;0.018108314;
0.040845189;0.012300872;0.05569049;0.0076205116;0.2171046;0.22087769;0.00061656092;0.012915334;0.79041713;0.04018556;
0.64669901;0.41336912;0.0029190197;0.02834649;0.049133159;0.11788617;0.56176376;0.0026026901;0.014135606;0.0013473645;
0.2591182;0.0043773344;0.026520211;0.057404324;0.83181232;0.67769325;0.84218067;0.0015672034;0.022184856;0.45175979;
0.11083653;0.010717978;0.11862214;0.0074115926;0.66107476;0.1304712;0.51992065;0.13516609;0.75184691;0.053009842;
0.022064315;0.007404475;0.0043841316;9.0339541e-05;0.080632947;0.013094361;0.00021119797;0.013309555;0.25891262;0.20566542;
0.58178937;0.35954574;0.00022920985;0.68759811;0.043266624;0.15884395;0.0010183307;0.0053820419;0.44445544;0.27772015;
0.71973401;1.6786111e-06;0.027479129;0.0070758355;0.85867441;0.072425276;0.84530431;0.00061338453;0.26676369;0.056517117;
0.032527693;0.0065988749;0.058397178;0.71297038;0.01531731;0.092798658;0.01508217;0.013794252;0.018588189;0.30226862;
0.042865679;0.21939373;0.0013252501;0.14509439;0.40271601;0.24160933;0.00052058889;0.0036324167;0.59297997;0.036354948;
0.019820724;0.026733141;0.0026957225;0.13215679;0.19024202;0.83235127;0.0015092512;0.0070919949;0.68763125;0.22714868;
0.75005364;0.0027991168;0.035459787;0.045511242;0.85050732;0.029622197;0.72652966;0.0010862822;0.69732416;0.0035173618;
0.45784265;0.0007105706;0.03910083;0.011393838;0.36666113;0.0065085231;0.46486738;0.037564829;0.024245756;0.022593824;
0.037647367;0.038154669;0.038232509;0.00017147583;0.076559901;0.026685383;0.00025601729;0.031779822;0.71700883;0.12739621;
0.012108868;0.0032015394;7.2412753e-05;0.46303025;0.0073046326;0.11071097;0.0021049534;0.0016579158;0.3696309;0.045132104;
0.82399052;0.00017106542;0.054468829;0.034936376;0.77666974;0.25157952;0.81712204;0.00012147694;0.65177596;0.06968154;
0.37595069;0.0079249125;0.11567964;0.62617922;0.070608802;0.0065640551;0.0012237793;0.0036122957;0.00023688019;0.24770258;
0.11710511;0.05250176;0.2099835;0.195934;0.72029132;0.43664095;0.0020178463;0.0014514728;0.81662399;0.021702271;
0.027760254;0.16071884;0.0021304931;0.019406542;0.014395377;0.83871132;0.013020467;0.0038089959;0.51892388;0.31659552;
0.7935558;0.0055633872;0.070475623;0.13748492;0.87242717;0.081214242;0.84525889;0.0071788197;0.49488679;0.012049272;
0.023084963;0.029909579;0.029964846;0.052497067;0.1624812;0.0029504846;0.50156075;0.1010185;0.1652395;0.045747779;
0.047097236;0.04902982;0.0080078896;0.00018620693;0.016999658;0.054791767;0.0014402417;0.010995291;0.66141093;0.018997574;
0.058367137;0.00056173466;0.0069749667;0.051515672;7.3002549e-05;0.80009669;0.015291236;0.0083169639;0.23375265;0.077345975;
0.34244385;0.0015191199;0.043899745;0.015917594;0.81223363;0.62667483;0.76089001;5.2471656e-05;0.75213486;0.77955049;
0.037598044;0.0030933921;0.0049799155;0.0060625989;0.22390987;0.00046166644;0.51637989;0.030049935;0.62734681;0.076777197;
0.054179434;0.13041224;0.16395772;0.0090955542;0.093178779;0.0068544764;0.00024028578;0.00063847058;0.73581576;0.20043942;
0.32068416;0.036829706;0.03683608;0.083222978;0.038118098;0.16258213;0.011770758;0.049259312;0.070301384;0.0079086889;
0.69697142;0.00090845465;0.0079210643;0.011810768;0.84731913;0.24852273;0.85702318;0.0011898398;0.15127915;0.34253719;
0.66730982;0.0010593856;0.22578785;0.022079539;0.63631719;0.045784689;0.063654833;0.010411108;0.015020892;0.0080539314;
0.26533219;0.0043407832;0.0035323498;0.013343679;0.51879478;0.080516793;0.0058879871;0.009678416;0.73968488;0.47721705;
0.79129708;0.59741455;0.01355671;0.81307143;0.0044869878;0.067319326;0.028389869;0.034481078;0.044961996;0.062341545;
0.033831179;0.00021724832;0.012504651;0.026655352;0.78775537;0.20869868;0.85133892;0.0079178587;0.016869938;0.71111315;
0.21855859;0.011884422;0.0019943032;0.061894938;0.022448674;0.028383404;0.522331;0.072398737;0.27262375;0.094897665;
0.010162632;0.56942743;0.00054362073;0.0075286208;0.36960837;0.0037903998;0.0021548602;0.00093469908;0.11514691;0.29163772;
0.011963843;0.01561709;0.00046676825;0.0025818401;0.0020974753;0.44543657;0.0074825147;0.0044075372;0.68303239;0.0077946102;
0.70673221;0.47858569;0.050136693;0.030904455;0.67901975;0.64960921;0.067667797;0.001000216;0.62156218;0.05375085;
0.029011976;0.0025629231;0.32053575;0.06437882;0.81132609;0.0036727858;0.62541199;0.0071279686;0.63723111;0.016117288;
0.00022608988;0.0077622272;0.51394242;0.0015446834;0.11787507;0.8121931;8.5335327e-05;0.38093698;0.049092896;0.012289337;
0.0012205621;0.035894282;0.00061349495;0.016506435;0.0069520101;0.029374229;0.0036827037;0.0069907415;0.55695218;0.0057356264;
0.73193866;0.75077891;0.1682765;0.01579708;0.79508132;0.35252541;0.44354302;0.0048526917;0.76212585;0.035458781;
0.070663877;0.0057144654;0.084015056;0.048142038;0.61561698;0.029290808;0.032872941;0.0041094208;0.6048367;0.13204163;
0.00017677259;0.0081426222;0.84105808;0.0070576239;0.18518364;0.55798066;8.9612346e-05;0.037991606;0.048461117;0.034137174;
0.080609418;0.031532209;2.4266164e-05;0.72164989;0.00027974814;0.19143985;0.018388607;0.0016427061;0.41763234;0.20596629;
0.79934001;0.00055242016;0.26143304;0.0064163115;0.84572005;0.24943067;0.82231772;0.0019872687;0.53992587;0.13949738;
0.0051067541;0.0080355918;0.0089385146;0.3133615;0.020626774;0.0053026555;0.015265283;0.0013660297;0.032555204;0.27318868;
0.046336949;0.1244669;0.52698624;0.016240532;0.53268814;0.47325093;0.00045308773;0.019928336;0.68839306;0.020946691;
0.035138696;0.054614525;5.2649724e-05;0.72741628;0.033324212;0.0087747462;0.30601731;0.001904059;0.29391423;0.039898355;
0.34550008;0.006717057;0.068929017;0.0068634539;0.72822422;0.71479297;0.62248003;0.0076605254;0.37787715;0.013775988;
0.006134483;0.03016296;0.03884919;0.67950499;0.054755218;0.0074137733;0.00039357049;0.0099779563;0.26356584;0.71160114;
0.011508704;0.034218367;0.12688707;0.27054831;0.33620319;0.7351585;0.00074817654;0.026256396;0.74646717;0.03654049;
0.020399662;0.0019980422;0.0029848332;0.14744359;0.011199671;0.81658316;0.0055273487;0.0004629051;0.33383572;0.44147533;
0.83889925;0.00027715432;0.078956164;0.010897847;0.8098346;0.22609727;0.82310128;0.0012752538;0.78476053;0.18486921;
0.022614263;0.0038110479;0.034584753;0.077988848;0.084583327;0.0012062009;0.30891383;0.0096653188;0.11943719;0.1264341;
0.073006563;0.02041718;0.024885798;0.0061778952;0.077105649;0.088572897;0.00031734348;0.0048414059;0.83322537;0.033006478;
0.2039973;0.24255796;2.4287674e-05;0.66880524;0.006283124;0.0413743;0.035183989;0.0020981724;0.20196408;0.30569175;
0.6614275;0.00025961676;0.024352325;0.028746909;0.75150955;0.36606067;0.80212182;0.0036470878;0.71850741;0.047829337;
0.062548831;0.0036302304;0.054120354;0.76252031;0.0088371057;0.013557911;0.00030212998;0.012583952;0.026919795;0.52200252;
0.039550759;0.05770123;0.045548148;0.10770397;0.14192966;0.29150847;0.017053464;0.0011456546;0.81163996;0.055340014;
0.0090683997;0.0006229321;0.00035622041;0.059996355;0.0044126669;0.69581711;0.0040981988;0.0011669139;0.78073192;0.06262143;
0.86913329;0.0016783854;0.081499629;0.0076269242;0.7527948;0.050618835;0.631607;0.00013485926;0.6379844;0.012713958;
0.072915442;0.003194093;0.13684537;0.24399482;0.44298381;0.00051250076;0.21840549;0.011957355;0.0069639375;0.011335203;
0.05416742;0.024117289;0.146202;0.013527753;0.46950555;0.73304796;0.0012034765;0.1350991;0.72146058;0.013636371;
0.004007847;0.0075686988;0.0028193963;0.44779122;0.010714253;0.087361075;0.00040886985;0.020240121;0.58155608;0.027456395;
0.82532245;0.0015003242;0.011182609;0.0022835087;0.7957285;0.060290754;0.79183477;0.0073797228;0.74780047;0.0068378681;
0.53363729;0.0021293841;0.051179148;0.40844285;0.24032879;0.0076312847;0.010231239;0.000599747;0.018791109;0.028471204;
0.077647887;0.13988148;0.25535154;0.062132761;0.5919134;0.52546847;0.0023611097;0.022418225;0.72039932;0.083633035;
0.088281557;0.17580825;5.2940715e-05;0.56205374;0.038387854;0.042526133;0.056679338;0.0020193041;0.094626442;0.37319359;
0.68470502;0.00018667252;0.073946849;0.028029077;0.80846965;0.47217172;0.79485911;0.00024485774;0.6617521;0.028951706;
0.040712994;0.0019812165;0.1819019;0.70734662;0.0072977073;0.0064653028;0.00061482558;0.022314992;0.050651379;0.60147852;
0.010403778;0.045989688;0.044573803;0.06027323;0.07796181;0.55979067;0.010286509;0.02529289;0.70106685;0.053325273;
0.026400086;0.04800716;6.4772299e-05;0.66494662;0.0035553861;0.00037042829;0.13684715;0.024188822;0.39227059;0.16008733;
0.31356019;0.0011724932;0.18940149;0.0037669302;0.65521562;0.7131744;0.73021209;0.0014470672;0.16095823;0.06118397;
0.049662944;0.010952877;0.020193197;0.76943183;0.1408944;0.0034634944;0.00097853644;0.0011647692;0.041516226;0.47458032;
0.0063918158;0.042065132;0.12330779;0.031007795;0.61681437;0.78604448;0.0013330611;0.026878085;0.82183415;0.023792574;
0.40699175;0.26423392;0.00046739372;0.73869026;0.00098560844;0.013248757;0.61551589;0.0065736738;0.32009289;0.12221736;
0.13789581;0.00023016984;0.054475337;0.0069064177;0.50499707;0.73554248;0.7872625;0.0051175915;0.3671315;0.14256208;
0.0090065207;0.00096201594;0.0054231463;0.66840446;0.39962366;0.021367338;0.0080837468;0.00061250158;0.45417085;0.21577053;
0.023511449;0.2112394;0.18662353;0.012253051;0.51157969;0.29359347;0.0019488642;0.0027755734;0.77246219;0.073994912;
0.0037471864;0.015503306;0.0023730239;0.67972362;0.0015978534;0.65663159;0.025800293;0.010749819;0.73112935;0.26767334;
0.32094029;0.0014362565;0.25207955;0.0015510452;0.28739113;0.049755212;0.20778646;0.014651302;0.79916888;0.033250064;
0.013280959;0.01494099;0.011039508;0.77291006;0.12053525;0.0014311554;0.01130132;0.013238184;0.037036721;0.075258635;
0.30076051;0.39303115;0.62125093;0.036871646;0.11341624;0.29502976;0.019448461;0.056498591;0.78106153;0.22547093;
0.046632208;0.0047595822;0.0018477199;0.034337815;0.0065246182;0.79645032;0.0024744219;0.0010495603;0.64082122;0.082717784;
0.87134624;0.00018220136;0.19142109;0.0051760091;0.77044994;0.05221523;0.76450324;0.00013555045;0.65417397;0.016023207;
0.0334091;0.011630419;0.055564322;0.38060173;0.25850365;0.0080957627;0.49887252;0.0082931733;0.027455978;0.019682039;
0.04140215;0.024497686;0.013220762;0.011530091;0.22616687;0.50546312;0.00029529893;0.18322745;0.71618354;0.0064488226;
0.0090375207;0.0088463575;0.0088563301;0.15751749;0.020074949;0.57427979;0.00047671437;0.0071581076;0.53466576;0.087392285;
0.85284919;0.00045761318;0.07319282;0.0070812218;0.83973825;0.020694552;0.84637314;0.0019963628;0.7958988;0.0091861496;
0.16268931;0.025959834;0.052286025;0.45081794;0.094086781;0.039163571;0.096146248;0.0014704568;0.13898467;0.05450638;
0.043710515;0.062699534;0.027843466;0.053188585;0.27489784;0.17437997;0.00069123873;0.027309576;0.6998331;0.02195983;
0.059154209;0.0045554088;0.0051493333;0.40431222;0.0077864667;0.77145869;0.00061884202;0.021408631;0.28245029;0.0070322305;
0.86598015;0.0044934005;0.32583803;0.052216236;0.8619532;0.077329449;0.84921509;0.0026399854;0.33683994;0.022394242;
0.063203223;0.0026755698;0.0072390973;0.0010986147;0.53481299;0.0019847653;0.38731933;0.00083050388;0.062998943;0.0097563947;
0.051141907;0.010513959;0.18090415;0.0018914794;0.37799725;0.073908292;0.00056663412;0.036354613;0.77465647;0.069281995;
0.059690438;0.005188385;0.00035685202;0.62794948;0.063218743;0.10916343;0.0085334787;0.015194393;0.59103322;0.00099766545;
0.73752767;0.015504147;0.022593616;0.04542971;0.80449563;0.22670649;0.37574553;0.022671614;0.44155139;0.0047316239;
0.0037749456;0.015330886;0.19024113;0.068930015;0.064844951;0.017021138;0.0041177571;0.0073306672;0.10528033;0.65943193;
0.041139103;0.028283717;0.30278566;0.58338875;0.5897665;0.51825565;1.2296619e-05;0.06405738;0.80727744;0.076125309;
0.040174153;0.0025896351;0.014824563;0.079857394;0.055404603;0.81919229;0.00045134014;0.01322701;0.22640456;0.026878085;
0.87609094;0.0020954791;0.022412594;0.11500957;0.84558791;0.052917216;0.83576161;0.002365926;0.67568445;0.035033341;
0.15984258;0.0022761892;0.044258416;0.0024934972;0.48523515;0.0021217475;0.52639049;0.001803992;0.063109592;0.025451805;
0.084151238;0.0046909046;0.013823088;0.0061851414;0.074665323;0.039276641;0.00060438889;0.012054559;0.81181026;0.027429493;
0.036127802;0.0028336237;0.0088909343;0.18408942;0.029190078;0.74657118;8.4696891e-05;0.070347443;0.47014818;0.014940389;
0.84743947;0.0090315128;0.017587978;0.032259613;0.8049044;0.024961086;0.79382586;0.0016847228;0.72725093;0.0080564963;
0.720406;0.00044105673;0.042078555;0.0075726104;0.55610043;0.0081513934;0.14298636;0.0047398959;0.006200403;0.0036554849;
0.071418904;0.0053368341;0.063637808;0.0046283188;0.06272006;0.013159725;0.010747176;0.004220421;0.83942008;0.11373879;
0.093741335;0.0015128161;0.0071214279;0.065742172;0.0029126189;0.85052562;0.002348942;0.0021870858;0.63701302;0.07617788;
0.79749489;0.0010237215;0.03510011;0.009245865;0.79306513;0.30203402;0.79153472;0.00014698158;0.60198003;0.16016772;
0.10583664;0.00064621534;0.012997158;0.0097351279;0.54977334;0.0009483358;0.66143411;0.015046605;0.34854987;0.0032562942;
0.095395014;0.055707514;0.0096444124;0.00039758082;0.081890658;0.14397785;0.00076520431;0.027991328;0.72867352;0.028494772;
0.012474613;0.00084996619;0.0080007073;0.2151217;0.0028494988;0.82554758;0.0022392105;0.0092847953;0.49039823;0.022267442;
0.54432064;0.003129832;0.011620086;0.0077276002;0.83951283;0.18404119;0.84295946;0.0003770999;0.73184931;0.10216234;
0.37901801;0.00057069963;0.0022909867;0.0066837762;0.65870327;0.0025455588;0.66581935;0.004019069;0.62695432;0.00065652939;
0.03762589;0.11353139;0.0092611248;0.0003429385;0.022038246;0.012743635;0.0010811955;0.0074988026;0.72923881;0.18286301;
0.054725178;0.0034532596;0.0057083732;0.17606014;0.058386661;0.81154263;0.00078271027;0.041798394;0.25680232;0.026039502;
0.85709417;0.0019146741;0.23087358;0.049023446;0.8431257;0.0709012;0.77060169;0.00015563832;0.73340392;0.010183058;
0.47801176;0.00020650119;0.12326756;0.0060892748;0.27138615;0.0011387566;0.34466052;0.010878983;0.050142061;0.0074256361;
0.032291152;0.017488291;0.12977754;0.00090890389;0.053940609;0.033340987;0.0054422552;0.049535781;0.79105216;0.21847294;
0.015448036;0.0036809293;0.0034896042;0.14442715;0.0045259758;0.037734263;0.0043441178;0.20144479;0.77206248;0.0066362596;
0.54259443;0.57526749;0.04557633;0.00092456944;0.73182666;0.46703562;0.31302875;0.0018958205;0.18704782;0.018592359;
0.68832016;3.2408952e-05;0.015763797;0.010093904;0.84099495;0.010491851;0.26371038;0.00030266959;0.011571905;0.0026796258;
0.011415466;0.014522859;0.59471452;0.0015103235;0.72727895;0.50718248;4.7062709e-05;0.25885376;0.65530342;0.44559109;
0.41000906;0.047591116;0.00044025344;0.68054497;0.065937944;0.54146403;0.0045756726;0.02777235;0.43992031;0.0076955375;
0.82996726;0.00061851705;0.041732971;0.27705228;0.80230105;0.029825324;0.61818421;0.0024472028;0.75338012;0.039560154;
0.0069038523;9.6205105e-05;0.06234305;0.012587557;0.50296861;0.027411141;0.054996546;0.0015445239;0.042486209;0.048363145;
0.032725647;0.014669926;0.21150386;0.023891846;0.3576493;0.031684201;0.00049403118;0.0071086031;0.84972954;0.024301231;
0.006222398;0.0033367786;0.0038101503;0.77302307;0.007028447;0.54423004;0.00059381733;0.15834016;0.78087944;0.015947271;
0.35802707;0.0092768651;0.040370096;0.008095162;0.076968461;0.032493468;0.028268702;0.0014897018;0.77305865;0.0087580448;
0.043367948;0.011207361;0.0077914684;0.40555567;0.59685552;0.0063911746;0.027707282;0.0018481634;0.027318545;0.011854745;
0.079904959;0.34821713;0.7717548;0.43664095;0.037430957;0.20007646;0.01110463;0.13689004;0.78740269;0.55610949;
       };
      };
      float_Data @[10] {
       name="Agent_Code_act";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 10;4;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [2] ;;       };
       ar {
	name=;
	      [10 4 104] 0.8723138;0.027973184;0.0010009985;0.82085311;0.00064277527;0.00062482688;0.23158452;0.15202589;0.021075366;0.00031381144;
0.0022716895;2.8464608e-06;0.80854267;2.1001426e-05;0.0010776741;2.5713673e-05;0.064405859;0.82425714;2.9466138e-14;0.025379438;
0.00078029017;0.068198018;0.55485451;1.7865161e-05;0.6303581;5.3227363e-05;2.7271286e-08;0.076081753;0.00019578046;0.87216407;
3.9773258e-07;0.011061856;0.64583075;0.65381461;3.3035601e-06;0.036634099;0.052290387;0.67857099;0.40066695;0.87143672;
0.92098749;0.69196844;0.1704953;0.70307398;4.2392094e-05;1.3558251e-11;0.65640301;0.63897562;1.3353718e-10;0.00020152603;
0.1815196;5.7215604e-10;0.00033188247;0.16890354;0.8208462;0.78425616;0.60936844;0.78435141;1.4018758e-06;1.6879676e-06;
0.13122867;0.0071941456;0.00039721903;2.2140885e-06;9.3146774e-08;1.1277714e-07;2.2174875e-09;0.00075716141;6.068627e-05;0.24942745;
0.021070153;0.0033501189;0.019144394;0.79514539;2.0183741e-06;0.44414151;0.8754676;0.81052315;0.0040463218;0.015022093;
0.51428223;0.0019864447;0.31979606;0.8023513;0.0020382528;0.058641508;0.0033575336;0.79047632;0.36432937;0.70224428;
0.014499429;0.051499233;6.898601e-05;1.4583744e-06;0.0013786955;0.68008792;0.0015230906;0.6744557;3.2815025e-11;0.0017806388;
2.1630906e-06;3.8261769e-05;0.82400185;0.00022725387;0.66536725;2.2428587e-05;0.010116373;0.053743843;0.80760348;0.011736995;
0.00055221166;5.4397577e-07;0.88212168;0.014777703;0.0012820214;7.7330481e-13;0.0003453361;0.90218747;0.62227583;4.1237687e-05;
0.76224929;0.84332204;7.3612568e-08;0.001660419;0.84146994;2.0517641e-06;0.050144076;0.0048625669;0.33696443;0.47802401;
0.091435619;4.2243623e-13;7.9631127e-06;7.0688526e-05;0.89618665;0.57364321;0.030847752;0.00053741509;4.8160137e-10;0.0043431558;
0.042162098;0.005581791;0.47070742;0.0039295508;0.0016819343;0.022814054;0.84236318;0.19606782;0.0058785607;0.66052496;
3.6019839e-05;0.19999616;0.74472994;0.015386998;1.0647605e-06;0.14573662;0.68713111;0.22541739;0.084018059;0.0069277068;
0.13778417;0.14312302;0.004145395;0.0014105048;0.00012378093;0.00022992985;0.0038488817;0.82605004;0.0033813938;0.0011113818;
0.38298103;6.8862484e-08;0.0049464423;5.980682e-07;0.89559031;0.6275847;1.5432252e-06;0.028696856;0.0031620259;5.8008292e-05;
0.00046337114;0.049711592;0.00018829011;0.78399664;0.00019763566;0.79295564;0.0014619792;0.81473804;0.00014193681;0.20294589;
0.68523663;0.0011476545;0.68879545;0.00084228558;0.43921146;5.0282911e-06;0.10829913;0.90194917;0.016820095;0.015789751;
0.84831446;0.0002061508;5.1503635e-11;0.0049218182;0.063172676;0.0011482921;0.73287064;0.0033823443;0.0020381575;0.048200417;
0.24498841;0.00021093877;0.064226612;0.10040877;0.37943083;0.0069392496;0.0067266757;0.56780547;2.7654675e-11;0.53992814;
0.00083169219;1.2547223e-07;2.8158829e-07;0.23507281;0.7784549;0.018579431;5.3064984e-09;4.5536487e-12;1.1901963e-09;0.013819003;
0.68514222;3.2927659e-07;0.013136054;0.84894925;0.86893719;0.57665384;0.69339597;0.75988233;0.63418019;0.87403703;
0.92554069;0.2529211;0.68248093;0.77340394;1.0871494e-05;0.36697137;0.45344239;0.53052926;0.14740875;0.034974627;
0.0014926582;3.3701863e-07;0.00012876089;0.31001496;0.001441488;0.36639592;0.0034951812;0.00057989766;1.2271502e-07;0.020028232;
2.2335284e-05;0.06969706;0.0001748598;9.3831972e-07;0.019630319;0.12467083;7.9959278e-08;0.00020993798;0.02298882;0.0035708176;
0.4606339;0.013613662;0.14466831;0.10592127;0.81620115;0.0086928019;0.82568532;0.074829549;0.63315529;0.70478797;
0.90286171;0.23501284;2.5410388e-06;0.0013391911;0.8161484;0.050723851;0.0020738053;0.33353171;0.18916658;0.3775444;
0.72123528;0.011118808;0.00087497884;0.38358399;3.6967338e-06;0.0067764362;0.45497781;0.77589124;5.5517731e-14;8.8095149e-09;
0.76463825;1.2999185e-07;0.028980069;0.0049163033;0.83566791;0.20399195;0.48963541;2.3517125e-05;0.0036862844;4.7852078e-09;
0.11591479;1.8673228e-10;0.64499813;0.59089053;0.039105527;0.00010662344;0.80021185;0.53732979;0.023944609;0.0013611461;
0.8929258;0.8895613;5.3757908e-06;0.83898014;0.81233257;3.0614088e-11;0.7476058;0.0038241935;0.69594961;0.012242357;
0.80746317;6.6029537e-10;0.00013715844;6.3338655e-07;0.63831151;0.85400534;0.00019336368;0.075130954;8.8807949e-14;0.59831655;
1.0231369e-07;4.3213714e-07;3.2695743e-06;0.0011401332;7.9861542e-07;0.57333511;2.9422142e-06;0.19879486;6.9334332e-05;0.1372259;
4.7966921e-07;4.9557147e-13;0.81648564;0.042366765;0.0001744062;0.047189169;0.0044687763;0.86742067;3.2261434e-07;0.25853574;
0.85804176;0.7130304;0.20342663;0.82893467;0.0004875251;0.01239339;0.65630698;0.73990887;1.1161696e-06;0.0071856813;
0.84041989;0.0026062389;0.00018661493;1.1714198e-08;0.0066706948;0.83129853;0.11841612;1.2391041e-07;2.8524848e-06;0.090766236;
1.8192159e-05;1.4841047e-06;3.238784e-12;0.00072500436;2.1584208e-05;6.4030104e-07;0.011366683;7.3789715e-06;5.9935971e-08;3.640605e-08;
0.0055414564;7.0702825e-08;0.79785663;0.82710278;0.16844085;2.8874901e-08;0.90878999;0.33007506;0.68098885;0.82893652;
0.90338165;0.072097331;0.024897059;0.55655575;0.19010358;1.2399114e-06;6.6430914e-07;0.00011726497;0.00055481162;6.247996e-10;
0.00029609608;0.30504063;0.0007652333;0.0026441999;0.44113442;0.39950109;1.8277233e-06;0.00089616567;4.8074845e-08;0.0010314746;
0.00096169714;0.20199834;0.66153848;0.70794278;0.084574811;0.078176603;0.041507501;0.020429902;0.7508136;0.81728244;
0.70813489;1.2316495e-10;0.82947922;0.82554698;3.929891e-05;1.2402969e-06;0.65476191;0.84184581;1.6307385e-07;0.0060620857;
0.69196683;0.76115894;0.0010483719;0.013144585;0.29637745;0.0075269532;0.3132107;0.041818526;0.011435051;0.10368977;
0.077714972;2.4636762e-05;0.00011509058;0.0057386402;0.018210921;0.87639165;0.85486388;6.024327e-05;0.24401301;0.014914076;
0.60586751;5.8256443e-08;0.010639999;1.6785255e-10;0.52475488;0.00040744722;0.70006657;2.641018e-06;0.00094346656;0.0013284673;
2.2106295e-09;0.045966204;0.88208085;0.075420849;0.58705634;1.8840676e-06;0.69971216;0.074698366;0.76578826;0.00067806576;
0.17436479;0.0031180128;0.55258912;0.0006149789;5.4338494e-07;0.38022894;0.12169921;0.82273722;0.034667291;0.0090166135;
9.2753929e-05;6.6595167e-06;0.61157489;0.15355511;0.00072654046;0.70654672;0.017245956;0.051900178;9.1744121e-15;0.00048313459;
0.77810752;0.041283041;5.3800657e-05;0.00074990105;2.8368001e-07;7.831216e-06;0.0061103078;0.0049058511;0.052500084;0.00051849172;
2.7584096e-05;3.6939747e-14;0.86228549;0.53107065;0.72247517;5.0608553e-09;0.86770177;0.88966936;0.69966912;0.83767408;
0.40810511;0.0074027437;4.0701853e-08;0.0011429157;0.007475974;0.001601882;6.3982712e-05;0.0049670264;1.1460589e-07;0.86907822;
0.73559314;4.8295355e-08;0.75938636;0.0017751571;0.028625948;0.0099196825;0.8855927;0.021037826;6.5009331e-13;1.215362e-07;
0.015077364;3.0752641e-08;0.83854657;2.073733e-07;0.87626803;0.0020448435;0.3374767;0.83640176;0.0033500872;0.72984946;
0.0001583767;5.4825426e-07;0.12697794;1.0200351e-05;0.60166484;4.9014171e-14;0.066911772;0.91250455;0.070574254;0.00098949217;
0.88658029;0.8361119;0.62018245;5.387362e-05;0.099910729;0.23123869;0.00014736077;2.343254e-05;0.0012557046;1.0458933e-06;
9.9550685e-05;0.0079665929;0.055649437;1.2907002e-07;0.26139233;0.79667902;0.014054262;0.023049092;3.4109382e-11;1.3178219e-06;
0.17706861;0.53233248;0.82537085;0.00033085843;0.035544671;0.44773236;0.054250531;0.0022539133;0.00021913472;0.36283073;
0.052465189;4.6046986e-12;0.68965662;0.52110994;0.00055658992;0.011629938;0.67584842;0.44830877;0.77760732;0.73636639;
0.89048445;0.20447162;2.8511566e-09;0.77309316;0.0035117851;2.6570138e-10;0.5005036;0.042637527;2.8044041e-13;2.5574735e-05;
0.79005378;8.3517007e-06;0.34547505;0.00039804683;0.26887983;0.85498053;0.00027211994;1.9464394e-05;0.00016911904;0.65875959;
0.3294048;4.1784857e-12;1.0789751e-06;5.2662112e-13;0.085206673;3.7713995e-11;1.0640259e-09;0.0018859342;4.2183623e-05;9.7658747e-12;
0.5986377;2.0471777e-14;0.14590456;0.86489856;0.84163618;0.76375091;0.90857744;0.7483151;0.1801842;0.7823559;
0.81982684;0.82158762;0.64818186;0.0034047787;2.8273601e-07;0.0013904773;0.003527882;0.0032297405;0.00013550965;0.019791318;
0.81233984;1.9897776e-05;0.75782722;0.00012981929;0.52672797;0.70165968;0.82236803;0.0022165861;3.2275883e-13;0.00020351082;
0.34380832;0.036557939;2.2849177e-05;0.13544209;3.0654284e-08;1.6615689e-06;3.4013815e-06;0.42033941;0.72382981;0.85587335;
1.2371974e-07;0.18882535;0.2600829;0.0010083604;0.01331364;0.00021793232;0.0073980624;0.19869636;0.048610758;0.85912615;
0.89133435;0.82401818;0.012189009;0.17038007;0.02818403;2.0805533e-06;0.074241243;0.56669319;2.7517734e-07;0.58163536;
0.21702109;0.056026448;1.6761949e-06;1.017826e-05;0.00095552363;0.22454692;0.3451573;0.3700237;1.1179947e-06;1.8744771e-07;
0.0081790285;0.4785955;0.048462123;7.0169939e-11;0.83909357;0.00051485543;0.043787684;2.2252186e-06;0.14029415;0.0099291746;
9.8689927e-09;9.1909932e-08;0.63505042;0.85739255;0.0081959702;0.6950835;0.89899528;0.034893095;0.37055409;6.9470705e-05;
0.41733712;0.84055305;0.018655343;0.89464355;1.0245959e-07;0.60113156;0.00059239467;0.054273061;1.9525843e-10;0.65405476;
0.0073211128;0.0019739284;0.34631568;0.020031778;0.89618492;0.47899529;3.5438208e-09;0.021891844;8.7209585e-08;2.4156003e-05;
0.20516756;0.2196539;0.6649847;7.4256345e-06;0.006832161;1.8536669e-08;0.7192927;2.4719263e-08;0.4742026;0.087526165;
0.006930849;5.8322734e-05;0.82417291;0.38549793;0.56468379;0.83195823;3.0415259e-10;0.005026598;1.626513e-08;0.04621885;
0.46226743;0.0011018898;0.00019182768;0.092993572;0.87294775;0.22003613;0.070116632;0.72429109;2.2628555e-12;0.20340414;
0.88581944;0.19310525;0.037176967;0.32973751;0.00024174977;0.3178499;0.88067043;0.67997861;0.0089458441;8.8464861e-07;
0.8716563;0.018878283;0.25357422;2.1305486e-06;0.81609815;0.0028850513;0.024018435;0.00035816425;0.0066135596;2.1919634e-05;
8.2697934e-06;1.9739263e-10;0.0014069978;0.19063327;1.2630968e-06;1.9209192e-05;0.24908483;0.0094819656;0.54901218;0.0052544978;
0.87207747;0.010928726;1.9914343e-05;0.8293277;0.019527711;3.976102e-05;0.29947025;0.03234148;0.00055409415;0.0067191087;
0.15541214;1.891476e-08;0.77725995;0.00035455253;4.1283725e-05;0.0007360325;0.11308745;0.85811979;1.1758666e-10;0.0042447243;
0.022471197;0.25069299;0.13665511;5.2669106e-06;0.89165044;0.0016616548;2.4932659e-05;0.12346803;0.0024965391;0.28719723;
1.4332431e-05;0.0059798779;0.23677734;0.70971322;2.6322068e-06;0.038017105;0.18872978;0.76320362;0.73142534;0.50949544;
0.89629787;0.88897091;2.6258958e-05;0.80131644;0.83897769;2.2135025e-11;0.82044435;0.00027226709;0.61712557;0.019262018;
0.79445761;1.4861374e-11;6.2563631e-06;4.8457252e-07;0.7011016;0.87041509;0.00017821018;0.022960667;5.9438272e-13;0.46462944;
3.7520593e-07;4.7050671e-06;2.7127305e-08;0.00077291386;1.2974979e-07;0.53479034;1.8382879e-06;0.38396928;1.3282552e-05;0.21218589;
2.6139105e-07;2.7886653e-13;0.84609592;0.040407337;4.7816698e-06;0.081054024;0.021438036;0.83536541;5.4014337e-05;0.18822421;
0.87014496;0.033697646;0.00023198663;0.81332362;0.009713741;0.0010424593;0.348037;0.080505773;0.015527217;0.00021796832;
0.0079048406;6.8403247e-06;0.61083937;0.00011466818;6.6072636e-05;2.0125946e-05;0.092825711;0.81096113;3.3942599e-12;0.035189021;
0.002714101;0.060254205;0.30632132;9.4861889e-06;0.80434155;4.056551e-06;1.1755539e-09;0.09157227;0.00012156094;0.81566346;
1.8228885e-08;0.0057737809;0.61316079;0.75163889;7.3903002e-06;0.070568249;0.24121852;0.67473722;0.73155469;0.86963427;
0.2429691;0.013188682;1.9919661e-07;0.0009262939;0.0097080935;0.0077417074;0.00092248264;0.014690472;0.00014839516;0.80046326;
0.49984872;1.1261686e-06;0.61279601;3.5525591e-05;0.027479753;0.00068594923;0.86544055;0.00081962062;1.1884168e-12;1.0259208e-06;
0.2233424;2.1274017e-11;0.89331084;2.4505673e-05;0.72831219;0.0046940469;0.10808756;0.88995093;0.091470301;0.8666144;
6.6135173e-05;0.00071207777;0.65664482;0.00070348417;0.48583853;8.9587636e-16;0.013037649;0.87301475;0.080965899;0.049644824;
0.39895317;0.00038550689;0.027085384;0.70440048;0.0076701441;0.08726535;0.0037078315;0.48180619;0.029024698;0.82101285;
0.088863537;0.025411764;0.00048865337;1.1260111e-05;1.5986442e-06;0.69285113;0.0076227561;0.75578147;1.4895284e-06;1.8542991e-05;
0.00043421343;0.0010642404;0.70950127;0.00013257447;0.89663392;0.012168103;0.0094568534;0.094102733;0.86591274;5.7033947e-07;
0.00032055666;1.3247673e-05;0.81885272;0.0077957003;3.0714258e-05;3.3019995e-13;0.00012073775;0.88240564;0.81081355;1.8155111e-11;
0.89442819;0.028016772;0.010134516;0.31686604;0.2313115;5.9576598e-07;7.6291894e-06;1.2759748e-06;0.00053013029;1.6059358e-10;
0.0011448866;0.17808332;0.00016241588;0.0018952501;0.65640968;0.31520712;1.9764498e-06;0.00013332086;1.0740698e-07;0.00070793316;
0.031781163;0.24039303;0.39052176;0.76146555;0.019063685;0.1420556;0.12859763;0.32251781;0.76130545;0.795044;
0.75981748;2.0636925e-08;0.84689152;0.82326919;1.330854e-06;7.3205306e-06;0.68699533;0.77981943;5.7907228e-06;0.0044226064;
0.44964796;0.0018313377;0.17646568;0.75362146;0.0036457253;0.10626394;0.0092912829;0.737701;0.35310835;0.71819276;
0.036822662;0.065780729;6.1934486e-05;8.1362778e-06;0.00023985618;0.58107352;0.0069605387;0.73437989;3.4981524e-09;0.0011617549;
3.6075431e-05;0.00011875056;0.79096133;0.00030704172;0.74843639;1.4110654e-05;0.0090992786;0.070621818;0.82536584;0.0070657036;
0.00013616725;8.7817108e-07;0.87356502;0.027366512;0.0010013608;3.0114528e-12;0.00023975298;0.89441514;0.68790948;2.4256864e-05;
0.87631309;0.16658024;2.9812749e-12;0.096567988;0.0076367995;7.027131e-11;0.76768219;0.00019701406;4.4948882e-07;6.8646071e-13;
0.45154884;2.0350819e-06;0.015909063;3.3347071e-05;0.63461828;0.84786165;2.4065924e-08;4.7833134e-07;1.8250292e-05;0.82623243;
0.72438574;2.3883155e-09;7.047116e-06;1.5499903e-07;0.0010911659;2.47245e-08;8.127351e-10;0.013378884;0.0010794566;2.0116677e-09;
0.78901732;7.8026785e-16;0.52778363;0.87766737;0.8003189;0.83126837;0.90936011;0.34914282;0.23269375;0.84711838;
0.38432205;0.4422774;0.0015247283;0.0014987302;0.041439727;1.9121687e-07;0.0071362411;0.75620735;1.5386669e-05;0.015390723;
0.78693289;1.3107751e-10;0.0012390246;0.000280159;0.63163871;0.75031632;0.00047810635;0.024603212;0.0022152553;7.0230307e-08;
0.00015323354;0.18700227;2.4313835e-05;0.68406576;0.58775234;0.75122422;9.9181088e-05;0.80592304;8.2415871e-05;0.034077115;
0.56093466;8.2609578e-05;0.63388878;0.0027257616;0.22028454;4.3455128e-09;0.78224605;0.904755;0.69507521;0.00025014282;
0.082510002;0.0011547554;0.15101475;7.7800041e-07;9.3219633e-06;0.10187239;0.36234537;0.68863982;0.049759571;0.00052516337;
0.00027746704;4.697245e-06;0.29128343;0.27086428;0.0011015419;0.75364679;0.0012697325;0.012747239;5.6294665e-15;5.7818062e-05;
0.84913319;0.03706893;2.3519158e-05;0.0048067141;2.652485e-07;0.00010293706;0.0011930569;0.019219473;0.066758059;1.3714479e-05;
6.8951695e-06;7.959307e-14;0.84982324;0.6483801;0.70504963;9.1505825e-09;0.90184152;0.87345231;0.81187999;0.87295389;
0.31184143;0.62365562;0.0003501068;0.0012555161;0.045560226;1.5389583e-06;0.043342788;0.76798671;3.8271322e-05;0.0010191422;
0.67899495;4.9338219e-08;1.0797084e-05;4.6625788e-05;0.83436555;0.83881342;5.6519025e-06;0.015430734;0.0015786374;5.1583111e-08;
1.6256336e-05;0.1658746;4.3405744e-06;0.79049253;0.37497744;0.74904573;1.0490544e-08;0.74084216;2.2862549e-05;0.0042552408;
0.56742716;0.00018541013;0.57558692;0.00043784358;0.30632612;4.6227187e-09;0.81529278;0.90526938;0.63708836;0.0043061557;
0.88345289;0.88246638;0.023545234;0.013679625;0.0071267504;2.3883425e-08;0.27893379;0.022199038;2.7092292e-05;0.17085974;
0.0018118504;0.0090604695;5.2723795e-08;1.3758733e-08;0.069820225;0.35394898;0.012468966;0.44581184;1.7629601e-10;2.4458293e-05;
0.014223558;0.79000109;0.3379387;4.0022083e-08;0.58138162;0.0062954361;0.13586549;1.5809584e-07;0.098996483;0.13499995;
1.8705472e-05;4.7415658e-09;0.85455483;0.88681829;0.0011889269;0.76656568;0.88201046;5.2951138e-05;0.22226958;0.00057912502;
0.91670287;0.32049027;0.22280706;0.78148007;0.00046139662;0.49488923;0.28551438;0.069461741;0.0035679657;0.57835513;
0.019894134;5.7107346e-09;0.018237198;0.77890694;1.6720236e-05;0.34931797;0.057092398;0.00047659787;1.6583816e-06;0.00027517366;
0.00020027804;0.28428635;0.00052223227;2.5122786e-08;0.47393769;0.80502689;6.7190558e-05;0.0060125813;0.49316248;2.666822e-06;
0.32538798;0.4193987;0.0051640817;0.049839761;0.65184927;8.0751583e-05;0.74176478;0.044347327;0.5391081;0.017844079;
0.87518358;0.84408897;0.13909274;5.4311329e-07;0.34159884;0.22900417;0.010036231;1.1413783e-09;0.016701013;1.0257731e-07;
0.00051508233;0.0040707537;1.2718082e-05;1.8457385e-08;0.75761896;0.8358264;8.6064974e-05;0.029650142;3.1537314e-11;5.8691694e-07;
0.7034151;0.65888214;0.74360734;0.00025879507;0.0014598635;0.43379083;0.060260713;0.021814054;0.00045182454;0.049206302;
0.056494586;1.4398227e-11;0.60473555;0.61581916;0.00026267665;0.29381847;0.7345652;0.050684258;0.84608555;0.65939552;
0.87155074;0.018961703;0.4963609;0.35709137;0.00019995164;0.63087946;0.80245191;0.013140379;0.0017601375;0.18456909;
0.0069181523;4.8921571e-05;0.00076418987;0.72449243;0.00015190875;0.73176932;0.048516814;4.7702888e-05;7.7394179e-06;0.0051658773;
1.6090545e-06;0.026127718;0.00091081677;6.8377171e-06;0.029519172;0.6690917;4.518367e-09;0.00021284196;0.14653964;2.3218934e-06;
0.16396396;0.026548991;0.18809916;0.17117684;0.74049419;0.0053570336;0.81242663;0.076322079;0.76600063;0.75739712;
0.16421853;0.0024861142;5.5452787e-05;0.0154198;0.8222096;0.30976841;0.26229385;0.70801896;5.507942e-07;0.012268671;
0.79707319;0.29670542;0.013283362;0.033912711;0.0005221403;0.1232412;0.80927098;0.66535068;0.0020788435;0.00010203947;
0.88844013;6.4212036e-05;0.75743377;0.0033190025;0.74489391;0.0025553182;0.00060871808;0.010707164;0.14793131;0.0047047557;
6.2073627e-06;3.45264e-09;0.054875884;0.54861122;0.00052822934;1.41334e-06;0.028534604;0.0062786997;0.57976192;0.40578586;
0.18685578;0.012168223;0.66663581;0.000354761;7.3699186e-05;0.04297271;0.075588584;0.75984257;0.0042009912;0.0086638452;
0.0030778975;8.1519424e-08;0.61862427;0.43025148;0.00052441529;0.76361275;0.028046595;0.024591742;1.8618353e-12;1.6373261e-07;
0.76436406;0.33041975;7.1389136e-06;0.0018389743;2.4542587e-05;4.6046384e-06;0.011498251;0.0027987999;0.014794163;2.0643329e-05;
2.1586533e-05;1.0036597e-17;0.84241742;0.61422336;0.66355389;4.0745934e-10;0.89036;0.89077359;0.84549665;0.77288181;
0.06292484;0.83332032;0.012507174;0.0013752464;1.2428e-05;1.2054838e-09;0.85543978;0.0027578922;0.49412888;2.0943961e-08;
2.1508811e-06;5.2262717e-06;0.10245922;0.089464247;0.89603835;0.37575555;6.14988e-10;0.022854721;0.00015754871;0.83799762;
0.0012515164;0.0035087115;0.00011419539;0.74952298;3.6832749e-13;0.02982595;0.04273751;2.0313061e-08;0.5025124;1.8747327e-05;
0.79803991;0.002939933;0.022479748;0.71003991;0.21331011;0.36555028;0.39760715;0.06298843;0.011638709;0.88397968;
0.0027953142;0.00041740559;0.52489763;0.0006935139;7.1935006e-05;0.70215487;0.69943064;0.25102279;0.001058661;0.17821105;
0.0014434299;4.3570824e-05;0.42723712;0.57059634;9.0008347e-05;0.84559137;0.084185287;0.047969583;3.984086e-13;0.00017359501;
0.56643492;0.027108533;3.919033e-05;0.00013880483;6.6913468e-05;0.0012788912;0.00021716193;0.00095694384;0.2626825;8.3641076e-09;
1.0947319e-06;4.8295233e-13;0.85066664;0.61921501;0.63541919;3.0373801e-08;0.86785603;0.880193;0.83273739;0.80389386;
0.91522807;0.84879881;6.3777588e-09;0.67290562;0.0022476709;5.3156633e-13;0.43159071;0.85736221;0.0073413122;2.4803782e-08;
0.00018537893;0.12959303;0.080761626;0.071843483;0.012836633;0.19473803;6.7998386e-05;0.67367071;2.1965466e-15;0.0010868908;
1.2840351e-07;1.4324934e-08;0.70024872;0.14854853;4.9941722e-08;0.00067919609;0.0013975927;0.019877242;0.00060996291;0.81606895;
0.11474598;0.00034787477;0.83601505;0.84029162;0.072896414;6.9527171e-09;0.0014026792;0.71395701;0.00017633339;0.76231313;
0.87235439;0.77583057;0.32739878;0.00057580764;0.27521861;0.12468956;1.5557433e-06;6.3988696e-06;2.4745059e-06;0.0016842792;
0.028750453;0.0018537403;0.29811776;6.6879591e-05;0.011951707;0.79543167;0.1733072;0.060567632;2.469346e-08;2.0723772e-09;
0.15448406;0.65086406;0.80394173;3.0319034e-05;0.78757536;0.7717663;0.18825726;0.0085047623;0.012392188;0.0015415821;
0.041035093;1.1829951e-09;0.1221369;0.26687142;0.0007862607;0.00021828752;0.50502896;0.73593313;0.79127842;0.047541462;
0.92550951;0.87368476;0.5011732;0.72808021;4.325117e-05;0.00077137776;0.047035165;0.86528206;6.570173e-05;0.78953636;
9.0519541e-05;0.059302911;0.21065374;2.2899172e-05;0.17064625;0.0008726457;0.0047600311;0.016497884;1.5384412e-08;0.017400283;
2.1884174e-05;0.2727865;0.0090897866;0.0071717659;0.00048358223;0.0085692843;0.022757746;0.0035605193;0.00061097468;0.074798502;
0.0029554279;5.5139817e-06;0.75742328;0.56627858;0.046995908;0.0010575596;0.0036967411;0.35794953;0.042268455;0.46052599;
0.88289005;0.85353971;0.62441093;6.8248548e-05;0.19149256;0.23964676;0.00078201463;3.6739866e-06;0.00012320252;6.0400623e-07;
8.3862134e-05;0.044182587;0.028631788;1.0353821e-05;0.077605329;0.79530919;0.029889351;0.033996589;1.8363975e-09;3.6177281e-07;
0.091048561;0.68115443;0.82143921;0.00014788397;0.24892317;0.34680605;0.0093596503;0.00038343426;7.5001262e-05;0.097363614;
0.006018545;2.6129283e-13;0.53425801;0.54740828;0.0012141279;0.0080125062;0.7003746;0.50492102;0.83521134;0.72088861;
0.6891101;0.0077985222;1.8052579e-11;0.65442568;9.0433139e-05;0.00069842656;0.87653691;0.0017931234;8.2745595e-07;0.013994907;
0.28678069;1.0946608e-09;9.2431358e-12;0.00089800614;0.24413614;0.88447994;0.037249438;5.1755906e-05;1.8088071e-11;0.8071534;
0.0013676818;0.00035601808;0.022053678;0.048654038;3.2005518e-10;0.73190397;0.001508744;0.00019861964;0.00016604706;3.9404492e-07;
0.49536261;0.0016225616;0.90357804;0.84308922;0.0028810587;0.8347196;0.45491159;0.021123959;0.78948361;0.0015745217;
0.92214614;0.82841647;0.30958888;0.57524031;3.8094993e-05;2.6075056e-10;0.426379;0.41251096;9.9092254e-08;0.002436873;
0.021936473;1.0513834e-11;0.012431718;0.25678197;0.81999475;0.6781702;0.66856015;0.67030561;1.775543e-06;5.1932623e-09;
0.08157523;0.015330406;0.0047012931;0.00031688358;1.2921261e-07;2.1211577e-05;5.5999925e-09;0.0056051966;0.00034090879;0.77152777;
0.0020587223;0.012048671;0.047531731;0.72259116;4.0950376e-09;0.091269143;0.83248395;0.8183471;0.012705547;0.0071141818;
0.89827704;0.88762403;2.3190917e-06;0.8633076;0.8536191;3.9930902e-11;0.76240414;0.0077513261;0.43515456;0.12049155;
0.8514874;2.0090341e-10;7.4662494e-05;5.2644511e-05;0.59674054;0.87479883;0.0015625806;0.084707499;1.2265274e-10;0.1105327;
1.9448425e-08;5.9694626e-06;2.4855359e-10;0.00052473415;0.0018362809;0.49100405;1.4145799e-08;0.12749264;6.0542949e-05;0.0015665079;
5.1147064e-09;2.4430585e-13;0.57113326;0.0059215245;0.00018687172;0.0077104787;0.029863698;0.89394009;0.00011487219;0.046643279;
0.9179846;0.76876944;0.50156564;0.6345489;5.4219646e-07;2.8442986e-09;0.29582688;0.6399014;6.1651967e-08;0.00012061054;
0.014755114;3.6166878e-09;0.030627988;0.23992515;0.66732138;0.44134781;0.73830229;0.81110549;3.1998613e-07;3.3970798e-07;
0.013171379;0.024188822;0.0537869;0.00038656159;7.7236837e-06;7.4633963e-06;2.3262441e-11;0.00031178788;0.0012504151;0.78624749;
0.0081307264;0.00064578612;0.14445305;0.76705539;5.879017e-07;0.077223308;0.79545194;0.84215456;0.0074082585;0.032303568;
0.56013501;0.27709058;2.6857929e-06;0.0062980652;0.0061675711;0.0032378524;7.002402e-05;0.026138563;4.496927e-06;0.87488127;
0.51989347;5.8348735e-07;0.81323683;0.0013818402;0.32745382;0.012331871;0.8549372;0.012282729;2.6107714e-14;7.3347294e-08;
0.0079990402;7.1961225e-08;0.83784324;3.3024811e-05;0.74891502;0.0024982502;0.15386327;0.86104226;0.0033645998;0.84732848;
7.6160627e-06;0.00013026809;0.37597069;2.006578e-05;0.35759926;2.265231e-15;0.039373271;0.88751101;0.030659191;0.0085257897;
0.89064342;0.79451358;0.00012645451;0.86139858;0.8343479;2.2885175e-11;0.88749981;0.0090100057;0.18380448;0.077399544;
0.84520465;6.7427763e-10;4.5771307e-07;2.3128712e-06;0.51178128;0.88321483;0.0030959272;0.037325602;1.6584907e-10;0.44093573;
4.0933887e-07;2.3899056e-05;2.3687469e-11;7.3114497e-06;1.5624522e-06;0.37604326;4.2164181e-08;0.049999803;3.4911389e-07;0.0095156087;
5.6791498e-07;9.6711145e-17;0.81733084;0.093827352;0.00021866671;0.26377138;0.093083747;0.8524043;0.00010704344;0.30052352;
0.2418952;0.009606204;4.0161038e-07;0.012914373;0.0090333149;0.11070612;2.2918937e-05;0.0073741442;6.8439208e-06;0.87180829;
0.62603647;9.9543524e-07;0.69592148;0.0024339261;0.0067626494;0.00032679905;0.89700645;0.024106445;2.3686154e-11;2.251053e-07;
0.019204665;9.7956931e-09;0.86551148;5.1918022e-08;0.84303939;0.0015163666;0.14814925;0.84241992;0.074464552;0.81529117;
6.5767103e-06;3.0835869e-05;0.29287294;4.6837733e-05;0.55077004;8.3400452e-16;0.0050539793;0.89909029;0.043999396;0.00066797953;
0.23596576;0.80348921;5.7077422e-13;7.0288086e-05;0.89041573;1.4672939e-06;0.0026152064;5.3411486e-07;0.30296043;0.78541034;
0.053201605;1.3117451e-11;8.4570071e-05;0.0049188687;0.83765334;0.31105867;0.1602892;0.00041426602;9.7500015e-07;0.00035328319;
0.12015928;0.00073274289;0.82495207;0.0053401687;0.10534553;0.75767654;0.89121008;0.50362355;0.3222138;0.20589349;
3.804427e-09;0.78964019;0.19468129;0.0078752795;5.4460054e-07;0.002736852;0.033129275;0.40732452;0.0077965981;5.0654239e-06;
0.90529478;0.079483882;0.0086596394;0.77607125;0.57109016;1.7598358e-08;1.0152278e-06;0.00018067737;1.6587928e-06;3.0965808e-08;
0.011547273;0.31007481;0.00018007976;0.029685179;0.2040669;0.68896437;1.7330049e-05;0.00082563463;3.0817537e-06;1.4779763e-05;
6.6156892e-05;0.35584792;0.25814816;0.68479943;0.82748699;0.080728076;0.0023055628;0.0069933706;0.72367644;0.068596058;
0.54856366;2.4855196e-11;0.54571837;0.79761654;6.6795335e-05;3.0035255e-07;0.78894824;0.89422446;0.00016071909;1.7242559e-05;
0.2652556;0.76706588;5.7712879e-09;7.6388997e-06;0.8680495;0.00058642827;0.09431915;1.0376783e-05;0.46953255;0.69838732;
0.055672966;5.2366113e-06;1.8296798e-05;0.00025896064;0.8141436;0.62704551;0.074613251;0.0041589253;7.5325365e-06;0.031826459;
0.058099773;0.001430199;0.83854806;0.10804594;0.034915239;0.48472989;0.84878796;0.1589565;0.47600293;0.26911202;
1.5306352e-07;0.42285129;0.56686759;0.01927432;0.00020194602;0.012577224;0.030558871;0.36919555;0.0098259635;0.0012280399;
0.8939693;0.37115955;3.5082057e-09;0.76263648;0.0048977071;5.9589611e-11;0.4345561;0.043281723;9.5829183e-15;2.1972778e-06;
0.77196723;4.0123239e-05;0.30214414;0.00011800657;0.39214048;0.86856562;3.6897152e-05;6.3755829e-06;0.00011784097;0.60145473;
0.23926453;2.3512199e-11;3.1766979e-06;1.4484984e-11;0.1488817;1.2058789e-10;1.5011228e-11;0.0019237999;2.2026888e-05;6.36517e-14;
0.52398694;9.4233754e-15;0.29266468;0.85257345;0.86530221;0.70912355;0.91377002;0.74278474;0.34636822;0.78521675;
0.9144513;0.013545536;0.069904342;0.72453505;0.20550162;2.3234946e-08;7.4631229e-05;6.1975312e-05;5.2719452e-07;4.1564485e-09;
0.0012437779;0.10258061;1.1982412e-05;0.0041625802;0.40558571;0.53074217;7.2939174e-06;0.00026905394;5.4339625e-06;5.4201093e-05;
0.0079130493;0.69729435;0.04167895;0.6275332;0.45719022;0.075355262;0.01377719;0.010545079;0.7302081;0.45209092;
0.81931615;4.3737115e-12;0.7685225;0.8440308;3.1487361e-06;3.6182271e-05;0.79320866;0.83329207;0.00013667364;5.8870839e-05;
0.88691795;0.55437422;4.7558023e-11;0.21890122;0.091711693;8.5270158e-10;0.8042118;5.9194726e-06;5.9601057e-08;8.0986056e-06;
0.68672538;1.5061592e-06;0.0069854194;4.6013115e-06;0.75837761;0.88050252;6.4594865e-08;1.1627511e-05;0.00014615119;0.62855214;
0.68311852;3.9911799e-07;1.660833e-05;2.6967641e-07;0.004537005;1.9379702e-06;7.6916801e-10;0.016331878;0.003295776;1.1102933e-09;
0.6944989;3.348006e-13;0.66656458;0.84976107;0.62732702;0.79139036;0.90651327;0.15880375;0.48621625;0.6206007;
0.86546934;0.0040446548;3.6807484e-09;0.018150233;0.071102977;0.0020794456;0.19223662;0.011606509;0.0016274019;0.13385572;
0.30599818;4.3236403e-05;0.68820757;0.33078122;0.1285352;0.00028308397;0.055396091;0.60760611;1.0511732e-07;0.15831962;
0.012145875;0.00031582889;6.794279e-05;0.41293627;0.85490608;0.34181666;5.7164852e-05;1.7514835e-06;0.00024238817;0.034035176;
0.61120218;0.00011408019;0.015881067;0.80747777;0.76359183;0.043351844;0.28731212;0.72578168;0.51411456;0.55991298;
0.076066732;0.001047372;0.54041517;0.00019947885;6.2778518e-06;0.078717344;0.4465673;0.74870306;0.0021938984;0.017042201;
0.0003317169;1.5558204e-06;0.17918825;0.20462687;0.0015196707;0.86010885;0.00069831067;0.079817839;1.1122751e-16;3.915663e-06;
0.75534517;0.21575661;4.0156286e-07;4.9335038e-05;5.6945196e-06;8.3383047e-06;0.0004002605;4.3715885e-05;0.01286547;6.2718497e-10;
4.4483759e-06;5.7435269e-18;0.84824294;0.55542535;0.80494982;4.9667128e-09;0.91320556;0.89629495;0.84556222;0.82457221;
0.83949459;0.0033937199;1.6414704e-10;0.0009755512;0.10942216;0.027199253;0.6956532;0.0041623879;0.057225082;0.0005480051;
0.037691653;0.0081718192;0.021900393;0.20081738;0.063349418;1.7649198e-05;0.0090176947;0.49432018;5.2476592e-09;0.75741386;
0.0075965929;1.9511822e-06;3.3846532e-05;0.37767449;0.77705067;0.0086773019;7.0708794e-10;1.4226952e-08;2.4857376e-05;0.094191521;
0.26370609;8.9693538e-07;0.068195514;0.86331314;0.85164374;0.33937019;0.51239747;0.66981208;0.60742569;0.871939;
0.8891356;0.8645643;0.03871062;0.22603945;0.0087307701;4.3018235e-06;0.054004196;0.53547901;4.4054891e-06;0.46317253;
0.047787394;0.0087300492;5.1407678e-06;3.4697125e-06;0.0026145093;0.2340503;0.14091942;0.32374823;2.9218587e-08;7.3108204e-06;
0.00053437363;0.46769786;0.035591979;5.092184e-09;0.86457962;0.0016508496;0.016593192;4.030841e-07;0.26915988;0.0055397251;
2.0482847e-08;1.2326215e-07;0.66428417;0.86760741;0.023642836;0.62619108;0.89511484;0.055400096;0.35145208;0.0001268193;
0.095716178;0.0002373914;0.34381551;6.1577325e-06;0.00012597931;0.11087537;0.6753301;0.51322883;0.0048557054;0.026170472;
0.00013189047;4.6960457e-07;0.1531067;0.19256355;0.026798626;0.87870842;0.0015377707;0.049474046;4.8696191e-15;1.0349751e-05;
0.77524978;0.29112068;3.0155462e-07;0.00094877055;3.4199861e-09;0.00049385335;0.0011854778;9.8276294e-05;0.0042419666;1.3988728e-08;
3.8339076e-05;1.0836681e-17;0.86219364;0.66220087;0.62347919;2.366075e-06;0.90477985;0.87015784;0.84318733;0.84561598;
0.82735056;0.83700109;0.02896109;0.0077454266;0.11859716;0.00056048983;0.68254715;0.00068305089;0.00051661534;0.70217967;
0.018674321;0.0067916983;2.9236912e-11;6.8839427e-07;0.088874638;0.44097006;0.091094337;0.26472896;4.7520898e-06;4.079388e-06;
0.032441799;0.75370145;0.16627565;3.0234921e-07;0.43434024;0.028150452;0.070540205;7.426566e-07;0.46830124;0.040511683;
3.2514069e-07;4.3650394e-07;0.85286301;0.85927474;0.00044279211;0.74147415;0.84320956;5.1519641e-05;0.41282868;2.9799594e-05;
0.84240216;0.53296673;5.056253e-06;5.0075978e-05;0.7623958;0.11199979;0.0001431368;0.0072938595;0.41615874;0.68100041;
0.13337605;0.0006213868;0.022465566;0.31356499;1.6497586e-05;0.00045993106;0.23831056;0.83570749;2.2591262e-13;6.5888081e-08;
0.76128554;9.0581892e-08;0.56106377;0.029560465;0.83958483;0.85716587;0.75147092;0.00028838203;0.34886262;1.0527815e-07;
0.02101155;6.1914488e-06;0.68942809;0.66301566;0.014906867;3.8149466e-07;0.033010501;0.2691144;0.00091664243;3.4855366e-06;
0.88102317;0.85019565;0.55603248;8.6410764e-05;0.24582568;0.34433734;0.0032300258;4.4816425e-06;0.00057339773;1.8192739e-05;
0.00019581646;0.0022336971;0.0077776816;2.7111473e-06;0.62778693;0.8323431;0.0063751433;0.0036960123;1.4387859e-09;1.9160089e-08;
0.26239771;0.61485374;0.44121781;0.0013189898;0.031358074;0.49930421;0.014684344;0.0029480765;0.00056795252;0.056455031;
0.016999658;2.3973215e-10;0.65623081;0.44469827;0.00010545705;0.01884992;0.80877137;0.34886011;0.84809941;0.62357831;
0.82022488;0.31132677;5.692077e-05;1.311542e-05;0.80963266;0.59866148;0.0014742971;0.014535595;0.69682896;0.55124128;
0.12047351;0.10976899;0.0033663108;0.49276513;1.0225535e-06;0.0048225531;0.38088694;0.85826331;1.4517088e-12;7.3599108e-06;
0.53983301;1.1522763e-07;0.62030536;0.076604463;0.80333751;0.64565825;0.52693641;4.5340062e-07;0.27311206;5.7981222e-08;
0.0084550194;2.7599758e-09;0.76661068;0.66950244;0.20481531;2.6743744e-06;0.063577726;0.54934973;0.0025826006;0.0015729856;
0.38986877;0.0072920644;7.5598007e-05;0.021530008;0.876495;0.39165512;0.19037691;0.68724537;4.3027275e-09;0.57953763;
0.84796572;0.12695228;0.10513189;0.47263038;0.00065355533;0.34045699;0.86690962;0.70132023;0.057537004;1.1191748e-09;
0.83036846;0.0069502788;0.35389394;0.0022218779;0.80410796;0.0062152161;0.00037442023;0.0004813195;0.04360684;1.9141467e-05;
4.58598e-08;8.781841e-09;0.0021286234;0.14381886;7.4210493e-06;2.6601118e-08;0.047842085;0.0074012689;0.6630637;0.034824651;
0.8439908;0.74993765;0.66685605;6.9328412e-06;0.1931984;0.48510024;0.024476204;7.3844303e-10;0.00031195345;2.647463e-05;
7.8967416e-05;0.00053218449;0.0006123237;1.1376586e-06;0.72288585;0.85127085;0.0033941953;0.0056258445;1.7219033e-10;4.621206e-07;
0.34408599;0.77369696;0.51283467;0.00043532331;0.0013956508;0.70163816;0.057093903;0.00051204086;0.00091622217;0.019520411;
0.13846928;1.5164151e-11;0.78946823;0.55518067;4.9645139e-05;0.18687989;0.75580555;0.1090566;0.84117353;0.59169137;
0.052223619;2.6433067e-05;0.0019939863;0.036094252;0.86089289;0.82093549;0.66614562;0.54969859;8.5828846e-09;0.57960784;
0.80766839;0.078003868;0.0071658022;0.43333462;8.2867864e-06;0.026065571;0.89667553;0.66700512;0.082409367;1.8905784e-08;
0.87775427;0.0038966546;0.27332273;7.9746576e-05;0.80057192;0.00074732152;6.2204635e-05;2.0483172e-05;0.29170474;6.4682827e-05;
4.9694684e-08;2.3637585e-12;0.0015896945;0.27059138;1.3039557e-05;8.4866224e-07;0.008624074;0.0013948247;0.6585874;0.019461391;
0.22712085;0.013802422;2.1181437e-08;0.0035202138;0.01497163;0.0010558206;1.4418758e-05;0.00038314608;4.2235092e-07;0.88488424;
0.69999206;6.8821031e-08;0.80652648;0.0071188631;0.042920705;0.001439749;0.88377661;0.046876129;1.1355722e-12;7.3473744e-10;
0.032858513;9.9191379e-07;0.85783011;3.3864853e-07;0.87541896;0.01113575;0.4508253;0.86516303;0.0022355665;0.72515368;
1.7920196e-06;2.0755815e-05;0.085187152;1.2849172e-05;0.40714687;5.5145011e-16;0.009688749;0.90934688;0.061943002;0.00014562078;
0.010415073;0.87648761;0.029391747;0.0063562905;0.00027084447;1.1368238e-05;0.46520832;0.00082179433;0.47334415;0.0070101074;
0.00015473593;1.8688032e-05;0.8145799;0.38482744;0.89667064;0.13607094;2.4544516e-07;0.012376448;0.001488586;0.54536045;
1.3183055e-07;0.00036295337;3.3578995e-05;0.87258977;1.3196153e-07;0.60795498;0.019394446;2.6341217e-05;0.77421701;1.1091193e-07;
0.074872606;0.46442342;0.0020204131;0.2397549;0.018043872;0.0097698523;0.080032632;0.31030941;0.017147729;0.81785786;
0.4179751;0.094961479;1.8926667e-05;0.011453554;0.005642517;0.031503692;5.8746624e-05;0.032769602;8.3867351e-05;0.85730147;
0.48478383;6.8513832e-06;0.71681017;0.0016282134;0.0421215;0.00086476223;0.86937606;0.02820551;3.6217904e-12;2.1787962e-06;
0.0063608433;1.918178e-08;0.86512595;3.4331228e-05;0.78110546;0.0015528421;0.029991331;0.81063753;0.021152321;0.85984945;
2.2246018e-06;2.0920332e-05;0.56252718;0.00053842692;0.44954005;6.9038193e-14;0.017010711;0.88679546;0.075870462;0.036458287;
0.91538942;0.82172912;2.5682902e-11;0.84240609;0.025737103;4.8544966e-12;0.75421816;0.85040474;2.4905627e-05;1.8940361e-07;
0.002924755;0.13158035;0.02035524;0.12162082;0.012584793;0.75882649;6.6829212e-05;0.72658032;3.1066122e-13;0.0041135889;
4.5779074e-09;2.3950957e-09;0.38518521;0.0079090092;1.2951486e-05;0.00023873539;0.00096787058;0.00019938045;7.0738039e-05;0.053413391;
0.14683352;5.3493161e-05;0.51472396;0.86208451;0.32765251;4.5110428e-06;0.011952188;0.83757496;0.00022650987;0.67344552;
0.00093374267;0.58566767;0.34783685;0.0035777569;1.1841149e-05;1.4255754e-06;0.88718325;0.00021580594;0.0073720277;0.0055638361;
1.222098e-06;7.5335687e-05;0.25794259;0.076119803;0.8784371;0.68856525;2.6978061e-05;0.0078273779;0.00085009664;0.85465539;
0.00018704213;0.0028368239;0.0001893149;0.64497435;1.2455889e-13;0.21476088;0.20718044;2.2563758e-09;0.42318407;4.4785213e-07;
0.76733691;0.0013186419;0.088512547;0.77266937;0.297943;0.5789215;0.029430121;0.028831581;0.00135861;0.85967249;
0.91259295;0.86715168;3.150963e-09;0.76232046;0.08735691;2.1849118e-09;0.78758061;0.62571728;0.0091803819;6.9893044e-06;
0.0005473796;0.025866613;0.0097185466;0.13262779;0.038372755;0.56223947;0.00076198712;0.72552299;6.277805e-14;0.0019339714;
1.9751647e-06;1.9178692e-06;0.40113983;0.035408787;4.0550179e-07;0.00027694582;0.0047307904;0.01702385;0.00041928198;0.72204989;
0.15406604;6.6574699e-05;0.75270283;0.85661012;0.0085796183;5.3671597e-06;0.0043038474;0.67515951;0.0029510234;0.52129799;
0.89919543;0.35349363;7.095484e-08;0.79309189;0.0015172506;1.5386175e-09;0.1818358;0.12574808;8.5447112e-14;2.6528403e-05;
0.7820242;1.911623e-06;0.5643757;0.00059650926;0.13784312;0.79120868;0.00066109601;5.0874249e-05;8.5253676e-05;0.62744993;
0.24562867;2.6980194e-09;8.4464837e-06;7.5676188e-11;0.27233887;2.3323206e-08;1.8290965e-08;0.0034551923;0.0011953322;8.4853277e-11;
0.56322718;2.6922754e-13;0.34479457;0.87370151;0.82699585;0.67812884;0.89853895;0.72918284;0.25467703;0.62056106;
0.93004853;0.88308185;0.38351643;0.78904241;0.00041801267;0.0027636592;0.067035936;0.85761923;4.2016847e-05;0.85720176;
0.00014322081;0.026620315;0.2870847;0.00044905901;0.13568595;0.0039706547;0.0072709671;0.030913178;9.1329639e-08;0.015673202;
4.4831709e-06;0.36262557;0.00086377678;0.00064018759;0.0013301339;0.0090823378;0.06451951;0.00059555884;0.00034147908;0.019954614;
0.00042984742;4.3677273e-06;0.50027305;0.5718196;0.023035327;0.0030828721;0.0048373016;0.4426772;0.024498312;0.18310866;
0.88335913;0.26046619;5.4576095e-09;0.72806287;0.0030961807;5.3146973e-11;0.46860293;0.020224687;1.3300168e-11;9.6255917e-07;
0.76779521;2.2600996e-06;0.20040409;0.00017648459;0.22420323;0.84261966;6.2961211e-05;2.0945328e-05;1.3106119e-05;0.75205088;
0.2931937;3.3503224e-12;5.1990291e-06;2.9871244e-12;0.20121032;2.3699737e-11;1.9501299e-10;0.0016005487;0.00016701185;2.2264286e-11;
0.61290902;3.8213674e-16;0.28124383;0.87060702;0.8584466;0.76936799;0.91252899;0.78656244;0.30999342;0.78900158;
0.47204909;0.00041980934;6.1759735e-08;0.77916962;1.7279473e-05;0.016792983;0.86567312;0.13794762;9.1721518e-12;0.29912794;
0.67521584;3.0410814e-07;4.6492539e-07;0.095999889;0.070483133;0.8996287;0.62661928;2.0737159e-06;2.679783e-08;0.59381056;
6.2053425e-07;6.5919949e-06;0.0059903301;0.016131043;3.5905507e-06;0.61717516;0.00021815792;1.9412089e-06;0.00016827905;1.7881704e-10;
0.085860565;0.0022560046;0.89571947;0.73598111;0.087823048;0.71288371;0.56425112;0.52720147;0.82636195;0.007997117;
0.9284516;0.86399311;0.40804255;0.86737013;7.3161507e-05;0.0056044911;0.40221062;0.85059512;1.0504688e-06;0.80742753;
8.8985951e-05;0.025709575;0.0063389768;8.1841999e-06;0.44063404;0.0067134658;0.0003937851;0.0013871297;1.7969208e-07;0.15678772;
7.530702e-05;0.70884866;5.295783e-07;0.0005654752;1.7614027e-05;0.014488615;0.050866783;7.4928998e-08;3.3740558e-05;1.739788e-06;
0.031605016;1.3673032e-06;0.65543091;0.77004606;0.012477016;0.44965777;0.0036055464;0.046491288;0.0036947448;0.15163107;
0.38134229;0.00051744317;1.9991633e-10;0.64212763;0.0010862532;0.005032626;0.90221453;1.5726455e-05;9.1956352e-08;0.65751588;
0.44296664;3.1783481e-10;5.2019511e-13;0.0020497234;0.23074511;0.9071511;0.17072307;4.3882661e-05;2.5913e-08;0.63476497;
0.0001898597;0.00069418055;0.038975347;0.016252836;1.8044709e-12;0.85413897;0.0070871855;6.2397298e-06;0.0004898982;1.3155507e-08;
0.21681017;0.019083081;0.90714896;0.76729506;0.00046612439;0.77729028;0.13115098;0.016612796;0.79647547;6.9552289e-06;
0.0063736686;0.24915336;0.064473949;0.072927959;1.6430103e-06;2.5870049e-05;0.24723148;0.23012839;0.020026147;0.004316608;
0.0024453017;1.9366591e-06;0.88712478;0.19166584;0.86621827;0.10901429;0.0011288008;0.092605822;0.0089013875;0.71863139;
0.00016406226;4.289416e-05;0.00127237;0.21878558;1.9051635e-08;0.11781403;0.77834088;0.0010541686;0.52350217;5.5912137e-06;
0.44677824;0.085068986;0.00047037387;0.38832259;0.78385961;0.044636544;0.016102988;0.76196051;3.7868282e-05;0.82781148;
0.014698522;0.80440807;0.029297482;0.011679442;1.5784588e-05;4.0702304e-07;0.076038696;0.061714694;0.37585312;0.0092261601;
0.0019053582;1.3314531e-07;0.89136428;0.21808;0.87698281;0.049715284;6.0249353e-05;0.066451639;0.00018223016;0.82595009;
3.7288331e-07;0.00012177694;0.00029618805;0.74136347;2.5017323e-08;0.13182175;0.77690941;0.00022419868;0.50600272;2.4023086e-06;
0.16120119;0.29914948;0.00093403249;0.3947925;0.26562902;0.1411186;0.0050538513;0.55754119;0.00013212087;0.80199283;
0.89856774;0.88374949;0.00051713042;0.86655688;0.7951892;2.8182296e-08;0.50481313;0.022301229;0.49898043;0.32655376;
0.82697952;8.1969431e-11;0.008634408;7.5804746e-05;0.51835304;0.80432618;0.017581724;0.12169157;5.4342131e-11;0.13250291;
6.9044739e-09;2.2632614e-06;8.9822542e-08;0.00025265693;0.00017717338;0.42371446;9.3335902e-06;0.34411711;0.00013802244;0.20030452;
2.8904348e-09;5.874471e-12;0.76939726;0.0077004111;6.2623309e-05;0.003290928;0.0059101102;0.88792735;7.0451388e-05;0.040538523;
0.72065264;0.8302446;0.77367389;0.00070104958;1.3917739e-06;0.015091062;0.015535747;4.6962818e-05;1.2007633e-06;0.14622881;
0.74095148;0.00043922942;0.81376076;0.00088002195;0.41129252;0.76039928;0.85950691;0.00058003259;2.7502629e-11;0.0003238557;
0.23028685;0.045724966;1.3750521e-05;0.19289003;1.0958887e-07;1.7827666e-05;8.6540176e-06;0.65466583;0.76009578;0.84490085;
6.2530665e-09;0.29227209;0.23553534;0.00020275482;0.0030923148;2.9744002e-05;0.00023963298;0.072294094;0.044728812;0.80518341;
0.8195256;0.74303406;0.33141318;0.82618523;0.00013114169;0.030818228;0.61909807;0.66050673;4.8104407e-06;0.0021711155;
0.80603093;0.00067506597;0.00019631805;4.4023256e-09;0.0033143128;0.8155669;0.15089327;1.2014848e-07;2.2856483e-08;0.13370119;
1.8386734e-06;1.6970213e-07;1.2127182e-11;0.0010817028;0.00057699723;2.2977827e-06;0.0030611351;2.2935505e-05;1.2295524e-06;1.2973867e-06;
0.0073940228;2.4451495e-08;0.84031236;0.81937087;0.12729356;3.909558e-09;0.91333985;0.53694695;0.77229792;0.83263677;
0.8618657;0.88445091;0.33248323;0.073176801;0.0069324523;0.00012039935;0.11800686;0.20419323;7.3547858e-06;0.58019459;
0.0032219456;0.04975152;0.0015177578;2.456177e-05;0.0085602729;0.13262293;0.47299829;0.24859554;9.8279848e-08;3.6772875e-07;
0.0001895141;0.53360331;0.34854239;3.9981748e-07;0.69139546;0.0017374813;0.029894982;7.8127841e-06;0.12743922;0.55130017;
4.3520592e-09;2.2634811e-07;0.84913075;0.82452947;0.0011872313;0.19265734;0.85670626;0.020254092;0.29082385;0.0043213535;
0.92549032;0.74604452;0.082765348;0.80162871;0.0001282497;0.0097382516;0.060799446;0.89103699;4.491802e-06;0.80945021;
0.0049540731;0.036964584;0.15852059;6.182678e-05;0.23161665;0.0072358269;0.0089983502;0.064267166;2.497712e-07;0.060278237;
0.00015617113;0.11156972;0.00041700088;3.4992029e-06;0.00014133922;0.00033061928;0.4232516;0.00018436374;2.481581e-05;0.00034110501;
0.0038368262;4.3662986e-08;0.2093914;0.63832337;0.59018475;0.054539926;0.011833357;0.75900233;0.0033977125;0.45551744;
0.93037271;0.87157613;0.29205424;0.81581426;0.00055108336;0.003338458;0.014286638;0.85957628;6.8282425e-05;0.87382323;
0.00032409484;0.0061309561;0.3057923;0.00018791572;0.12935719;0.0038123946;0.004788246;0.039971165;1.5060921e-08;0.050578907;
6.7824101e-07;0.31739986;0.00190051;9.6949101e-05;0.00066808099;0.01203221;0.35017863;0.00017895417;7.8259487e-05;0.0021504557;
0.00021856593;1.8519112e-06;0.47859797;0.6681875;0.063934214;0.027693726;0.00072884466;0.53092343;0.011916383;0.084666438;
0.89963973;0.1686731;0.46924311;0.72621232;0.17210312;1.53701e-05;3.1661085e-07;0.00023286743;1.6402341e-06;5.8686942e-07;
0.00031275061;0.47628009;0.015198478;0.0213957;0.22485207;0.34450731;0.00090074504;0.00023257703;4.3497453e-06;4.6104611e-05;
7.0499942e-07;0.34484962;0.5647155;0.71412098;0.46430078;0.02916985;0.0058688135;0.030048892;0.6565935;0.83458942;
0.40088713;2.6226235e-11;0.85754788;0.73068541;1.9760644e-06;1.5338413e-08;0.56721646;0.8656956;2.4392895e-05;0.00062193873;
0.43947142;0.87451905;0.48840412;0.88427013;1.4900388e-05;0.77658188;0.0062559992;0.0079163192;6.7961847e-10;0.83169913;
0.00022678346;0.0010006652;0.6927402;0.30418605;0.7750991;0.25896189;0.0007207148;0.00069468771;6.8150598e-06;5.6438353e-07;
0.026898105;0.17829323;0.24204831;0.00021837153;0.034639109;3.5420734e-07;0.27335623;0.00015853031;0.62731314;0.69634873;
0.00061764632;0.0049614473;0.76679593;0.064957611;0.05408781;0.025398416;1.230549e-07;0.025100606;1.832383e-05;0.039189741;
0.39891562;0.78931415;0.19017503;0.002972095;0.18864492;0.56887239;0.71499294;8.0035832e-05;0.014197725;0.3936041;
1.5026827e-05;0.00010109387;0.030049518;0.037466858;0.20582068;0.87744552;0.86249405;4.8147567e-06;0.095354088;0.17317589;
0.33175552;7.1366185e-07;0.0092452643;6.8820103e-05;0.00087271817;0.012854776;0.68220603;8.1827813e-05;0.028806971;0.077945791;
9.016243e-08;0.053144027;0.90022582;0.25730339;0.10008483;5.1147865e-05;0.052311525;0.0021611343;0.35630578;0.013182073;
0.39011896;0.0030947546;0.0034144432;0.035046093;0.85167384;0.54051489;0.027592788;0.6755901;2.5988307e-11;0.46635866;
0.79541868;0.12907626;0.60640675;0.59721833;0.00018779811;0.19881842;0.89536256;0.77011091;0.013194689;2.1292176e-07;
0.73973823;0.018158991;0.56269485;0.00019034211;0.82042736;0.0093889674;0.031111134;0.00015258555;0.011782412;0.00035282329;
4.6294915e-07;1.9601078e-11;0.0017251869;0.11185829;2.8158755e-05;8.2032976e-09;0.029163593;0.054025725;0.4357138;0.014530428;
0.91163874;0.72556967;1.6595844e-10;0.84884864;0.012352658;5.6977068e-10;0.70393515;0.84692997;4.8644481e-05;1.4065797e-06;
0.0055416487;0.10499385;0.063415505;0.16392019;0.01994231;0.63107771;0.00028602732;0.79279339;6.9930335e-13;0.0029080559;
5.7964641e-08;7.8080992e-10;0.37838253;0.0019115054;1.2844059e-06;6.3983585e-05;0.0089156851;0.0031915263;7.9953308e-05;0.16378354;
0.11977153;2.436935e-05;0.38197026;0.85572559;0.46185294;5.3801068e-06;0.0047593899;0.86355007;0.00010365466;0.71254373;
0.92536271;0.85652101;1.5676002e-10;0.81905454;0.022461604;5.8719305e-13;0.69000107;0.85277522;0.0004463364;5.1170279e-08;
0.00060388609;0.064391837;0.030028244;0.36164483;0.0017737311;0.57761663;0.00040111897;0.70810837;9.187724e-16;0.0033166576;
2.0052993e-10;2.2451465e-08;0.32354236;0.013864782;7.2664948e-06;3.3186374e-05;0.0015771157;0.0026000284;3.3527744e-05;0.45709702;
0.068870433;1.8395624e-05;0.56812483;0.87441313;0.086860947;7.1265058e-06;0.0072197313;0.84920079;0.0010870212;0.64069039;
0.89912361;0.86580199;7.1969948e-06;0.88534606;0.81635106;5.2868829e-12;0.82064873;0.049384464;0.13790564;0.061391253;
0.87020999;1.0596601e-09;2.7181526e-05;5.9190177e-07;0.57097465;0.89281821;0.0038319526;0.076891355;8.8219637e-10;0.2928873;
5.404226e-09;1.4866752e-06;1.6158599e-10;6.7566189e-06;4.7093978e-05;0.18620996;2.3894592e-07;0.032731351;5.5802754e-09;0.0017210043;
2.576453e-08;6.5393928e-17;0.66081643;0.02749164;0.0034060779;0.13778417;0.026317917;0.89173448;5.273474e-06;0.23247105;
0.81469667;0.85481775;0.25071013;0.0026273108;8.8400429e-06;0.00015216555;0.00062596129;0.0022622468;0.00016460946;0.083361663;
0.87021291;3.2357872e-07;0.74721378;0.00043824216;0.67221504;0.69942898;0.82150716;0.00080166536;7.5267002e-14;1.5425054e-06;
0.67152613;0.020207586;2.9903507e-07;0.092645355;2.0869081e-07;4.6591691e-07;0.00022355549;0.75620633;0.69208437;0.83275563;
5.5964855e-09;0.50137925;0.076725632;0.0004752856;0.0058439975;7.1322625e-05;0.028376939;0.13236627;0.074228726;0.8078298;
0.85336512;0.73255461;0.19897473;0.85307407;2.3871735e-05;0.0080071203;0.63456869;0.73170269;2.2518407e-08;0.0024004965;
0.82129395;0.0080423886;0.00035961141;2.5345072e-11;0.010328443;0.8638804;0.055942833;2.7409752e-07;1.5592648e-06;0.23063697;
1.7531543e-06;5.3853597e-07;1.2185459e-11;0.00054684002;1.6733316e-05;5.918746e-07;0.019582143;2.7448632e-06;1.9366844e-10;9.0007923e-10;
0.0072734682;1.1503696e-07;0.81277782;0.84524167;0.29889336;1.2351251e-07;0.90126979;0.31122863;0.62842923;0.85716707;
0.89193749;0.8460387;0.044809002;0.30797306;0.0028200618;1.2255927e-05;0.053483989;0.65973669;5.8092411e-09;0.40276605;
0.07651484;0.017957531;3.2231754e-05;1.2304778e-06;0.0042127259;0.27607322;0.31923112;0.22987999;2.5637911e-07;2.634325e-05;
0.000238265;0.50632155;0.041204192;1.0118174e-09;0.78761095;0.00029254565;0.063591748;2.4583883e-08;0.037194416;0.0027876461;
2.7603377e-08;1.5424055e-08;0.70256388;0.88681591;0.035085682;0.80882812;0.88254482;0.034445178;0.17929544;0.0010620375;
0.71004522;0.0015432776;1.8169144e-09;0.86244714;1.8992076e-06;0.0092533147;0.83192742;0.49645165;5.1749436e-13;0.16848284;
0.69039023;1.3865309e-07;4.9561841e-06;0.015110166;0.11286894;0.89796114;0.6028384;6.7541485e-05;4.2027404e-09;0.70697397;
1.9101064e-06;1.5249492e-06;0.0034554142;0.0016123016;7.7397715e-08;0.29515901;0.0035941075;1.0677165e-06;5.2091264e-07;8.930881e-10;
0.21534869;0.00069710787;0.86504793;0.80977052;0.20004541;0.80428964;0.55929232;0.57422769;0.68275416;0.01599377;
0.65767652;0.00085053139;1.8255438e-08;0.82959813;6.5258214e-06;0.0048422394;0.83279276;0.30884919;3.6571985e-13;0.27591762;
0.66229856;2.1852456e-07;4.9617342e-05;0.023358582;0.021900602;0.9017415;0.67541951;2.6930973e-05;9.1495437e-08;0.71369433;
2.274777e-06;8.0083373e-06;0.020155866;0.0032075599;2.2597912e-06;0.50895584;0.0068789078;1.3763512e-06;2.6235755e-06;3.8133114e-09;
0.14068538;0.0012315179;0.875853;0.81260425;0.080431677;0.77774757;0.34587786;0.52864903;0.6842314;0.0074037695;
0.9121927;0.032509573;0.015701318;0.81220686;0.42128763;5.1764291e-09;4.2372685e-06;0.00066260312;7.6591604e-09;1.9895212e-07;
0.025662858;0.33065197;0.00028830842;0.010020491;0.18471201;0.7454139;2.1659491e-05;0.0017960069;7.286365e-06;0.00015176235;
4.449852e-05;0.34854239;0.23179545;0.51360488;0.73767036;0.03545576;0.018098928;0.0045105214;0.44739878;0.084822655;
0.55507874;2.4688493e-12;0.60538185;0.85514295;0.00021136357;7.1917631e-05;0.79442114;0.88827521;6.9278743e-05;0.00017000463;
0.3795059;0.82231522;0.052959774;0.90356511;2.0429989e-06;0.64780915;0.00022620267;0.010296962;1.6225826e-10;0.80105692;
0.014757397;1.3728296e-06;0.80252647;0.10993755;0.85774773;0.12342364;2.9214452e-06;0.006126788;4.1967196e-06;8.3439118e-05;
0.18018064;0.26975358;0.044183593;4.2780372e-05;0.087144651;0.00013159048;0.81843513;0.0015293801;0.63064355;0.034991737;
0.0010021145;0.11908203;0.51241559;0.32073683;0.15865459;0.48667246;1.9209454e-08;0.011406334;1.2094597e-07;0.0051243887;
0.74069017;0.81994253;0.00099937548;0.01228369;0.47862002;0.010946388;0.29675567;0.014224759;0.024762545;0.028570058;
0.0073752343;2.6829099e-07;0.00022609707;0.01359672;0.31618381;0.88426179;0.82090908;4.1555413e-06;0.043228373;0.071083948;
0.45573083;1.213472e-07;0.0016668515;1.8901671e-08;0.023899978;8.1792197e-05;0.76848692;6.0476837e-06;1.5119427e-06;0.0022149067;
2.1560767e-09;0.020760246;0.89372653;0.30256784;0.50555879;0.00031684065;0.76120603;0.041705456;0.70451969;0.02776088;
0.13889535;0.0014724567;0.00047629126;0.013716753;0.80415338;0.34701371;0.0076364786;0.66810304;9.1479504e-14;0.65492749;
0.84672874;0.066810131;0.78200537;0.29628411;0.0021973522;0.14254242;0.8975324;0.75296813;0.017122911;3.2906164e-11;
0.8390975;0.0043461057;0.5158453;0.0021028938;0.83754534;0.011982107;0.22877719;0.0050893123;0.00052080961;7.6158278e-05;
2.4232346e-08;6.0786187e-10;0.0030982404;0.079850383;1.8586459e-06;1.8330606e-08;0.0021611659;0.027477043;0.53184766;0.0065661068;
       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
    SimpleMathSpec @[1] {name="thresh_smspec": opr=THRESH: arg=0.7: lw=0: hi=1: };
    DataTable @[2] {
     name="AveragedPatterns";
     desc=;
     data {
      name="data";
      el_typ=DataColTp;
      el_def=0;
      String_Data @[0] {
       name="trial_name_group";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [24] "Alf";"Andy";"Angela";"Art";"Charlot";"Christi";"Christo";"Chuck";"Colin";"Emilio";
"Francy";"Gina";"James";"Jenn";"Lucia";"Marco";"Marge";"Maria";"Penny";"Pierro";
"Rob";"Sophia";"Tomaso";"Vicky";       };
      };
      float_Data @[1] {
       name="Hidden_act_mean";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 10;4;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [2] ;;       };
       ar {
	name=;
	      [10 4 24] 0.081234716;0.039702822;0.0083279498;0.29529536;0.016576307;0.21573476;0.0042875535;0.021247126;0.36618599;0.04800003;
0.81099617;0.00085974357;0.034324475;0.088132374;0.77835512;0.20233026;0.78706878;0.002182913;0.52822393;0.096529819;
0.38302335;0.0041248235;0.18119012;0.36061087;0.29123461;0.014669414;0.058786936;0.0056034802;0.012105437;0.15009491;
0.10887086;0.052807491;0.12481872;0.16203557;0.52284515;0.47839743;0.0026275113;0.033905134;0.74939436;0.13978522;
0.019276615;0.073657043;0.0044599259;0.33590585;0.10270005;0.6005255;0.0028791677;0.081613496;0.169071;0.079149194;
0.78397632;0.014069883;0.33426994;0.04012654;0.8234483;0.14072332;0.64651912;0.0073878448;0.60807335;0.084737152;
0.10133024;0.021250252;0.31425312;0.0094973408;0.19291113;0.008635005;0.020185988;0.009216575;0.10462662;0.32149756;
0.0029405165;0.024258932;0.67715895;0.0070651406;0.016857412;0.30213302;0.0002970536;0.09144257;0.50781643;0.10585065;
0.037966982;0.15580903;0.076044679;0.6123274;0.0068594362;0.73012775;0.0087239891;0.086311251;0.48312253;0.26593304;
0.38127741;0.0019175605;0.13771611;0.11258443;0.22961;0.03442426;0.20755176;0.035627607;0.56031215;0.20691869;
0.034426212;0.051820427;0.035986237;0.43073678;0.12704957;0.0020745751;0.021462709;0.0056898589;0.046761326;0.10940561;
0.27041709;0.62761205;0.39960143;0.3813749;0.20224124;0.15892714;0.012926529;0.034762174;0.57022053;0.41710588;
0.19557154;0.16873543;0.005805756;0.47895989;0.0040491968;0.43889171;0.0066542248;0.010824631;0.17041668;0.09001261;
0.83015215;0.0013590454;0.34422708;0.10960176;0.86205161;0.18220091;0.84649968;0.0039792592;0.3709124;0.18624109;
0.027862696;0.0070837922;0.022417162;0.077758096;0.17499445;0.0096380189;0.14560698;0.0024187656;0.12790748;0.2128102;
0.070678294;0.068681136;0.29798222;0.01668171;0.45656353;0.21749246;0.00046154857;0.014612339;0.58561742;0.090298399;
0.15607649;0.13697769;0.0041355304;0.23211022;0.019460289;0.48092458;0.0024151411;0.0087137409;0.38867551;0.14036787;
0.82944357;0.00023503041;0.14402895;0.064319082;0.81574708;0.056993216;0.81575328;0.0013044019;0.61226451;0.025133034;
0.096296452;0.017895799;0.11887737;0.46138725;0.14073567;0.045802768;0.2127239;0.0061312183;0.056807626;0.19703051;
0.036648974;0.072534896;0.020398647;0.12303567;0.2392451;0.36079392;0.00069150625;0.046112493;0.66962856;0.028637273;
0.026255861;0.17007816;0.0018477272;0.14515138;0.16679013;0.83107805;0.0030180102;0.00594316;0.55365443;0.38343573;
0.73066109;0.012017155;0.11218532;0.21396481;0.73230636;0.01624183;0.68536729;0.0050956872;0.71159339;0.040827788;
0.20816597;0.02172114;0.057512101;0.32373166;0.051759407;0.012777956;0.27801046;0.26800486;0.10423438;0.1655627;
0.028191295;0.10182425;0.1562967;0.0044840486;0.028333362;0.034212895;0.00093225867;0.055374168;0.4685981;0.22066621;
0.02759443;0.050104883;0.0011910135;0.31845245;0.089122765;0.3562116;0.00059639168;0.0072485614;0.48141766;0.49016571;
0.77742499;0.00087242236;0.11677532;0.12929916;0.69463539;0.016175251;0.74865067;0.00016101162;0.75864553;0.0010690248;
0.20279799;0.028047156;0.071346462;0.63935095;0.016739741;0.0094123092;0.046817958;0.082177103;0.055302497;0.44067734;
0.0033036279;0.12752698;0.14791195;0.099435195;0.027708557;0.37335604;0.00091410044;0.09059795;0.61596102;0.23486009;
0.043802738;0.046604838;0.00014281287;0.63382989;0.056577593;0.050953042;0.12597175;0.0066167428;0.39076197;0.060595021;
0.61059964;0.0085752979;0.073163703;0.034830652;0.7834903;0.40057456;0.57134306;0.010300303;0.42784601;0.007323259;
0.0042433534;0.025694702;0.15089372;0.37131092;0.05281198;0.01442793;0.0015758536;0.014456397;0.19689333;0.71754098;
0.019876782;0.031126566;0.16532189;0.36844596;0.38300699;0.68273234;0.00028638821;0.038949043;0.75890219;0.040144153;
0.23787482;0.26186189;0.0008140711;0.018807173;0.018120928;0.1653205;0.12718922;0.0037430606;0.26743436;0.0097452942;
0.61946303;0.36716411;0.25157076;0.11095659;0.77670395;0.51676166;0.56467444;0.0020290825;0.41301838;0.29891983;
0.054832011;0.015866876;0.17601041;0.03403445;0.45694336;0.056946386;0.24098594;0.037060816;0.60874701;0.30061588;
0.004753347;0.0065780715;0.44520518;0.010228951;0.20435126;0.30228409;0.00022913038;0.08701887;0.10403106;0.067092523;
0.24425992;0.2685867;0.0077839098;0.24334703;0.058063656;0.39867997;0.015160594;0.017526459;0.094854534;0.16225384;
0.79132211;0.00071639539;0.23133437;0.13238654;0.82415295;0.26709282;0.73660129;0.001027972;0.5525195;0.10229117;
0.22715156;0.0059014587;0.36311018;0.16562095;0.060085416;0.0064168349;0.074809276;0.028013434;0.084825449;0.35553071;
0.023381628;0.049200144;0.10573484;0.055179413;0.072796494;0.32942548;0.0056149117;0.017535541;0.59501684;0.23628233;
0.025111569;0.30517125;0.013400745;0.50862223;0.023445699;0.31312397;0.10308617;0.031506374;0.55809057;0.38917744;
0.31626758;0.0046040593;0.29793328;0.015891107;0.57461202;0.013373787;0.36607695;0.016258057;0.77169341;0.032430232;
0.21278511;0.0037747386;0.040056482;0.33331084;0.017450027;0.19032338;0.036473423;0.023367114;0.017792536;0.036053751;
0.20199423;0.58470041;0.70302814;0.014224919;0.25464901;0.087844871;0.021827836;0.0096493596;0.26053089;0.45740688;
0.29078561;0.12792473;0.040391944;0.67914116;0.05023393;0.47796434;0.21054028;0.049836762;0.30775124;0.093668155;
0.54155672;0.00066599296;0.041388549;0.097631246;0.65284169;0.26829323;0.60848868;0.045254298;0.62605995;0.080325007;
0.010503067;0.00045316826;0.05186794;0.22949544;0.34299123;0.016671855;0.047768563;0.0028530124;0.18900602;0.092698872;
0.067678303;0.13399072;0.21505432;0.01283127;0.39843306;0.11356358;0.0015088095;0.0036208609;0.82275289;0.17579094;
0.12672794;0.078699172;0.0045229378;0.15112624;0.12624639;0.77770591;0.022365263;0.010531887;0.16072769;0.35860926;
0.69337881;0.00012846844;0.047167055;0.37217158;0.66786975;0.15078771;0.66725224;0.0015573514;0.78627604;0.36487228;
0.0064607202;0.0035939435;0.42243946;0.13612732;0.12497287;0.0066967844;0.27320355;0.014376171;0.40905911;0.27763346;
0.0094274245;0.073069051;0.023627728;0.061139934;0.053977646;0.13218391;0.00042579958;0.038549095;0.65546238;0.030572167;
0.28103635;0.30900896;0.02299073;0.39402911;0.01771548;0.43927988;0.0068227323;0.079471208;0.23052707;0.11205551;
0.68651646;0.0041725989;0.037210159;0.063101918;0.78631628;0.12304964;0.79087627;0.018143468;0.55736887;0.17738466;
0.3907429;0.0046540312;0.061541423;0.2318688;0.12464468;0.012459945;0.046919636;0.018600378;0.017227497;0.15069203;
0.10751484;0.11948638;0.09311536;0.043846872;0.16919982;0.062106781;0.010597728;0.0010279902;0.72958195;0.17508686;
0.24499315;0.30180702;0.0041468041;0.14268696;0.05552366;0.76230496;0.0046700048;0.013908995;0.36597544;0.13851735;
0.7649045;0.0048514982;0.048960306;0.18595275;0.85835886;0.064887986;0.77454853;0.017205397;0.38155267;0.17713255;
0.104678;0.015073496;0.10117155;0.016376227;0.2207137;0.0068799444;0.41700792;0.069528267;0.16554898;0.10297337;
0.053791564;0.078466758;0.016711283;0.007586861;0.11728868;0.051661752;0.001052056;0.011930264;0.55426514;0.061280146;
0.39878178;0.3216615;0.0028357222;0.61077875;0.046553962;0.21541236;0.0081495782;0.062657557;0.084998153;0.096183509;
0.59434044;0.00038313956;0.22520779;0.26141006;0.82551134;0.16637723;0.74079359;0.058090687;0.57218713;0.26797092;
0.14753011;0.018890774;0.1562079;0.22835493;0.029373862;0.042252451;0.044023566;0.016722798;0.052775986;0.42181152;
0.0060217394;0.064982288;0.12311312;0.069735952;0.14719374;0.083261922;0.0013027469;0.019114627;0.66718984;0.13466942;
0.027507601;0.0034895155;0.020151099;0.13414763;0.058401253;0.83632773;0.0020999387;0.0097975982;0.29355052;0.20966813;
0.84808838;0.0012773734;0.041605048;0.044452578;0.82403338;0.11658049;0.81969488;0.003715123;0.71584934;0.13607174;
0.075861648;0.002463453;0.035935797;0.030595196;0.26389623;0.0012826312;0.40539795;0.0085799098;0.085051939;0.074028052;
0.12783806;0.01868986;0.017964436;0.0061116759;0.10576306;0.05212158;0.00035746198;0.0058635361;0.82665086;0.045348193;
0.15456076;0.33674714;0.00016576066;0.7645483;0.032462824;0.041144904;0.25847945;0.023313163;0.31429228;0.12728724;
0.28080183;0.01428546;0.43774712;0.029225163;0.83065671;0.046673313;0.46565136;0.025991138;0.60701466;0.027243491;
0.090995461;0.0064904331;0.024513965;0.15102571;0.029569348;0.14898771;0.005068976;0.0062175067;0.027126363;0.18800245;
0.065958485;0.40865016;0.6986661;0.013071535;0.61451423;0.29443008;0.0015243951;0.026699778;0.27796865;0.16368315;
0.050158855;0.044008449;0.01215292;0.38753852;0.019222192;0.50157011;0.0018652715;0.0084450813;0.64361989;0.2217869;
0.82436371;0.001232024;0.11269669;0.024590014;0.83678246;0.095483065;0.81624669;0.0063140797;0.54842496;0.01722425;
0.034393884;0.024802729;0.12563196;0.3363243;0.081755355;0.038613595;0.13045542;0.016050322;0.020937324;0.23822308;
0.14149165;0.031322867;0.059739023;0.024765752;0.38479027;0.12125161;0.00026747439;0.0156004;0.73224831;0.04086969;
0.043400295;0.023397226;0.00050745334;0.10156079;0.022616245;0.70973659;0.064782262;0.0069196215;0.3680861;0.41679662;
0.34166706;0.00073163921;0.38039166;0.1804572;0.77347505;0.24195799;0.47777998;0.0076795998;0.6713171;0.34755373;
0.23622987;0.011808906;0.10800804;0.33969486;0.070525244;0.0060413517;0.25706065;0.042337622;0.22825132;0.23543376;
0.029539911;0.094862908;0.10769819;0.0016956008;0.29161429;0.16683078;0.00030167008;0.042238429;0.76952124;0.18701997;
0.0028924008;0.083843015;0.0053926371;0.49086472;0.012629836;0.41245002;0.00072388013;0.13344748;0.25219953;0.65173054;
0.51033592;5.5337259e-05;0.25107512;0.040946659;0.4710134;0.025423154;0.72065109;0.0002669993;0.77736068;0.015214615;
0.25853193;0.027547857;0.028414447;0.57672507;0.0073494622;0.015622849;0.024810961;0.0093184952;0.015940586;0.18249974;
0.0027269374;0.5685302;0.39101061;0.090790123;0.069179021;0.4849492;0.014788586;0.0098779229;0.68412375;0.21190506;
0.33818907;0.27328512;0.015984191;0.2955921;0.0038112246;0.55636555;0.010141296;0.039316736;0.28135392;0.051101912;
0.49915004;0.0013023071;0.028540505;0.13680099;0.80330986;0.30279461;0.81777489;0.006625948;0.42512727;0.42256495;
0.22276142;0.0060544363;0.025059465;0.018270371;0.30029282;0.0089635802;0.50443;0.026727144;0.45575926;0.088390805;
0.040874016;0.21206689;0.036797952;0.0098277628;0.1323161;0.039126053;0.001233443;0.0076916139;0.48604712;0.20043214;
0.016142949;0.18903659;0.0012456132;0.27585679;0.011691106;0.014016523;0.049235683;0.33133689;0.47919148;0.077850416;
0.5573833;0.19930387;0.1331006;0.016264746;0.7539072;0.40871513;0.60565853;0.0031798359;0.12798949;0.028603401;
0.29835224;0.0040670224;0.026267625;0.2740202;0.59464908;0.012632135;0.09182781;0.00055481604;0.030125944;0.16521335;
0.0060488186;0.031155562;0.29153726;0.011878595;0.48965836;0.71653837;0.0011183027;0.14726298;0.64379728;0.15660514;
0.0076015079;0.06606853;0.0050458619;0.80977499;0.025508208;0.23044531;0.012009006;0.032434002;0.51295525;0.25617689;
0.24692073;0.0012472747;0.033307344;0.1224072;0.62920642;0.12394746;0.13010429;0.0082672425;0.73690671;0.0040030116;
0.021789901;0.029975861;0.065067865;0.54571706;0.020459428;0.005770368;0.0055631488;0.065424912;0.10536361;0.3225022;
0.0089134797;0.37457144;0.49273056;0.43823916;0.10933152;0.68493384;0.0069547519;0.071059763;0.55706209;0.44021255;
       };
      };
      float_Data @[2] {
       name="Agent_Code_act_mean";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 10;4;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [2] ;;       };
       ar {
	name=;
	      [10 4 24] 0.92797452;0.8476761;0.33351037;0.8003872;0.00024275167;0.0044432478;0.11827356;0.86482191;3.6308655e-05;0.82748789;
0.0011201788;0.030945668;0.19367807;0.00014597698;0.22158802;0.0045209974;0.005242276;0.030607304;1.1024765e-07;0.060143676;
5.1704748e-05;0.35464606;0.0024543207;0.0016955754;0.00052815006;0.0089006135;0.18231486;0.00090389419;0.00021785393;0.019449284;
0.007809137;2.6289174e-06;0.52022332;0.64293104;0.14732544;0.10720637;0.0049403585;0.42740875;0.017155122;0.26708993;
0.27798256;0.40301868;0.0020067436;0.0013882504;0.029041246;7.7220015e-05;0.018109303;0.78341472;0.0011450173;0.0058404161;
0.61630297;3.9443929e-08;0.0020654215;0.00010912762;0.78719825;0.73890483;0.00016176717;0.022910267;0.0023186398;1.9376703e-05;
0.00021095367;0.13419616;7.2314841e-05;0.75285167;0.32097581;0.76440853;0.00052039028;0.78716773;8.2405073e-05;0.080426082;
0.60453284;0.00047189143;0.63275707;0.001335297;0.32194072;1.6790864e-06;0.56861269;0.90399122;0.44966123;0.0067820167;
0.26626545;0.0025789523;0.0010346;0.035800081;0.84806204;0.43832064;0.20402704;0.66882455;9.3951364e-08;0.41601741;
0.8301124;0.14844221;0.25852835;0.36051962;0.00063514709;0.19149576;0.8744036;0.70612228;0.030214777;1.7192851e-05;
0.84117579;0.0087157544;0.45279416;0.0013193323;0.80394077;0.005628997;0.04749202;0.0028015049;0.083693281;0.00087324687;
2.5099821e-06;2.1769502e-09;0.010804105;0.22422723;9.6661737e-05;3.5873882e-06;0.060901728;0.017676588;0.56966448;0.08107049;
0.89597261;0.86837023;0.00011412263;0.85281765;0.8251363;4.7171915e-09;0.757236;0.015423914;0.4281534;0.10289009;
0.83263373;4.4866122e-10;0.0014800208;2.2078666e-05;0.58954382;0.86326307;0.0044072932;0.069784611;2.0428725e-10;0.33996746;
1.531026e-07;6.4592768e-06;5.6449301e-07;0.00045075105;0.00034383984;0.43084952;2.401558e-06;0.1895175;4.6922833e-05;0.093753241;
2.2379082e-07;1.1488962e-12;0.7468766;0.03628584;0.00067557127;0.090133362;0.03018038;0.87146538;5.866291e-05;0.17782274;
0.91604233;0.82395405;1.9754247e-09;0.78910708;0.030031189;5.5213117e-10;0.67346519;0.80663788;0.0034083163;1.7322524e-06;
0.0019606098;0.091285132;0.040855832;0.17033142;0.017102046;0.54489964;0.00031679223;0.72533518;2.1517159e-13;0.0026718329;
4.3326227e-07;3.915643e-07;0.43769976;0.041528523;4.3915661e-06;0.00025840945;0.003517811;0.0085784057;0.0002426928;0.44248256;
0.1208575;0.00010214152;0.6107074;0.85782498;0.19156848;4.4783537e-06;0.0059275674;0.78788847;0.00090890855;0.66205817;
0.85109282;0.0025481752;1.2987997e-09;0.0080158673;0.081232607;0.01014233;0.54025352;0.0063837469;0.020296881;0.060868047;
0.19622609;0.0028086649;0.25811154;0.21066913;0.19043849;0.0024133278;0.023713488;0.55657727;3.6797545e-08;0.48522055;
0.0068580536;0.00010596852;3.4023637e-05;0.34189451;0.80347055;0.12302446;1.9056955e-05;5.8857171e-07;8.9082248e-05;0.04734857;
0.52001685;3.8435468e-05;0.032404214;0.83991337;0.82805765;0.31979197;0.49770185;0.71849203;0.58524013;0.76862973;
0.87151212;0.024199855;0.00041763319;0.82116812;0.0099614095;0.00056901574;0.29303059;0.088291049;0.01238556;0.0024169628;
0.055196222;3.2352334e-06;0.73221397;0.00016340739;0.00039501017;0.00026062405;0.090106338;0.83111274;4.0336796e-11;0.021604395;
0.0086551961;0.12638174;0.33261031;1.0872754e-05;0.77545011;0.00057297957;8.3203686e-06;0.097040683;0.00093796023;0.65834159;
4.9161308e-06;0.0076051718;0.49858963;0.70505559;4.4420226e-06;0.048406482;0.16074623;0.70550394;0.6212157;0.75018883;
0.78505874;0.83555001;0.557522;0.0022443798;3.5048511e-06;0.0055445684;0.0065631969;0.0018463167;0.00010043996;0.08312726;
0.8078348;0.00015315026;0.77293396;0.00048269448;0.53674519;0.72049606;0.83446074;0.001199428;9.3002186e-12;0.00017630302;
0.41520712;0.034163497;1.2299579e-05;0.14032583;1.1631132e-07;6.6517177e-06;7.8536963e-05;0.6104039;0.72533667;0.84450996;
4.5189765e-08;0.32749224;0.1907813;0.00056213362;0.0074166507;0.00010633298;0.012004878;0.13445225;0.055856101;0.82404649;
0.019069171;0.66980737;0.096701443;0.01918334;6.2508239e-05;7.8144185e-06;0.50622028;0.059127718;0.27414486;0.0052233464;
0.00090175372;2.026396e-05;0.59069413;0.19203147;0.88286942;0.27182427;0.00024325485;0.040423203;0.0023159699;0.75651902;
0.00032062511;0.001374632;0.00038112947;0.64544725;3.5206195e-08;0.22043553;0.36491254;0.0002609462;0.54588366;5.4599227e-06;
0.44964576;0.17058009;0.022883423;0.50111586;0.31575713;0.22799936;0.10564535;0.34432623;0.0060630077;0.83826286;
0.90489811;0.065721035;0.099756673;0.65207458;0.29856628;2.8752979e-06;1.4748973e-05;0.00020944403;0.00018146264;1.3695487e-07;
0.0067012738;0.28378525;0.0027677498;0.011633901;0.35279346;0.50405598;0.00015847212;0.00069212652;3.3845515e-06;0.00033437595;
0.0067945453;0.36482096;0.35806641;0.66824448;0.43171448;0.073490195;0.035025939;0.06584093;0.67833269;0.50873756;
0.63196635;3.469669e-09;0.74225688;0.81271529;5.3985579e-05;1.949607e-05;0.71425861;0.8505255;6.6169698e-05;0.0018921248;
0.85516298;0.35976881;2.1506021e-05;0.00046746084;0.79605901;0.25379506;0.0012304131;0.11845373;0.43405145;0.53659534;
0.3250283;0.040503062;0.0089022852;0.39663804;7.0722917e-06;0.0040196404;0.35805845;0.82328737;5.7771306e-13;2.478203e-06;
0.68858564;1.1193379e-07;0.40344974;0.03702708;0.82619679;0.56893873;0.5893476;0.00010411752;0.20855366;5.6014862e-08;
0.048460454;2.0647985e-06;0.7003457;0.64113623;0.086275905;3.655977e-05;0.29893339;0.45193133;0.0091479514;0.00097920583;
0.61052424;0.7901386;0.064074263;0.0094667906;0.32121414;0.19578192;0.4416531;0.018707775;0.01679844;0.17528799;
0.028368412;4.1999643e-05;0.010130236;0.018934073;0.18007182;0.87936634;0.84608907;2.3071188e-05;0.12753183;0.0863913;
0.46445128;2.9775518e-07;0.0071840389;2.2946391e-05;0.18317586;0.0044480055;0.71691984;3.0172172e-05;0.009917317;0.027163057;
3.1509714e-08;0.039956827;0.89201111;0.21176402;0.39756665;0.00012329087;0.50440991;0.039521653;0.60887122;0.013873673;
0.10305147;0.00302386;0.46322799;0.00031161139;4.7959453e-05;0.23613694;0.39682686;0.6306957;0.016122688;0.039938226;
0.00089252595;9.5057549e-06;0.38016912;0.30374295;0.0051268004;0.80136919;0.022163942;0.04441677;3.8000478e-13;0.00012149614;
0.74810576;0.15712626;2.0725365e-05;0.0014220834;1.6283822e-05;0.00031607598;0.003434086;0.0046705101;0.068973705;9.2145419e-05;
1.6657998e-05;9.9918629e-14;0.85260487;0.60508591;0.69248784;4.0267241e-07;0.89095747;0.88342351;0.81308883;0.82626534;
0.87417948;0.85642326;0.080116369;0.13316575;0.028731873;0.00011659189;0.21020287;0.33149737;9.2624818e-05;0.483468;
0.060838576;0.024719618;0.00025947654;6.6903958e-06;0.029172983;0.27703542;0.23031157;0.31379807;1.0423564e-06;1.0457821e-05;
0.0093010897;0.58832014;0.16300251;1.2472717e-07;0.69973361;0.0064402702;0.060045552;1.8944038e-06;0.19023091;0.12417807;
3.1821535e-06;1.4969829e-07;0.75974119;0.86373973;0.011623907;0.63846666;0.87643021;0.024182823;0.3045373;0.0010314343;
0.88837326;0.31842425;1.3803726e-08;0.56205893;0.018728569;4.7333804e-10;0.52623212;0.038682494;8.4850591e-08;1.0560263e-05;
0.70835245;9.3646504e-06;0.23921558;0.00022116594;0.40267712;0.84762311;0.00017219383;1.8294233e-05;9.1620219e-05;0.68241662;
0.41916603;6.7372568e-08;6.9261055e-06;7.0794854e-08;0.11887762;3.3103331e-07;3.5244865e-09;0.0064293733;0.00096696452;5.3981802e-10;
0.63037956;1.0584762e-13;0.37649268;0.86486816;0.80333781;0.75717163;0.90821481;0.58579862;0.30168882;0.74080908;
0.87367046;0.81828403;0.48899555;0.00013196943;0.22454081;0.27566946;0.0064455657;6.3314865e-06;0.0031612911;0.00028844984;
0.0049539553;0.010139926;0.065133616;1.3538291e-05;0.40987355;0.81781006;0.037851036;0.026097551;4.7010804e-09;4.5831081e-07;
0.28875002;0.65196395;0.69140196;0.00042036161;0.18437615;0.53350633;0.063984402;0.0060693803;0.0024370539;0.097819611;
0.051913723;2.4285929e-10;0.56608105;0.49184796;0.00049579289;0.086568169;0.6967324;0.366294;0.8232426;0.56324363;
0.84364414;0.72953975;0.24460486;0.8360647;0.00021417951;0.017072912;0.63665795;0.71070611;1.9830429e-06;0.0039190981;
0.82258165;0.0037745645;0.00024751481;5.3806231e-09;0.0067711505;0.83691525;0.10841741;1.7271881e-07;1.4782021e-06;0.15170148;
7.2613288e-06;7.3078098e-07;9.1838082e-12;0.00078451575;0.00020510492;1.1766529e-06;0.011336653;1.101978e-05;4.2989402e-07;4.4489761e-07;
0.0067363158;7.0063763e-08;0.81698227;0.83057183;0.19820926;5.209899e-08;0.9077999;0.39275023;0.69390535;0.83958018;
0.42115688;0.80462569;2.6461477e-08;0.00057944871;0.86664504;0.00019664911;0.049026147;0.0016244927;0.36981913;0.65394056;
0.066770062;1.7455417e-06;3.6943329e-05;0.001749506;0.84932792;0.50391579;0.088583402;0.0017035356;2.8360062e-06;0.0121743;
0.073473722;0.0025815777;0.71140254;0.039105222;0.047314238;0.42174017;0.86078709;0.28621596;0.26803178;0.37851018;
1.2058903e-05;0.47082922;0.50209296;0.014178867;6.7851797e-05;0.053683564;0.25027311;0.33397919;0.033880208;0.0027202708;
0.92037272;0.76305145;0.32721663;0.6376211;2.7009763e-05;1.0395358e-09;0.45953631;0.56379604;5.3625921e-08;0.00091966987;
0.072737068;1.399786e-09;0.014463863;0.22187023;0.76938742;0.6345914;0.67207694;0.75525421;1.1658017e-06;6.7762301e-07;
0.075325094;0.015571125;0.019628471;0.00023521976;2.6486812e-06;9.5959167e-06;2.6135809e-09;0.0022247154;0.00055067008;0.6024009;
0.010419867;0.0053481921;0.070376396;0.76159734;8.7012359e-07;0.20421132;0.83446783;0.82367492;0.0080533763;0.018146615;
0.90459812;0.1974577;0.46721631;0.63732517;0.00022407324;0.49758002;0.51380289;0.20437714;0.050912287;0.2659663;
0.0094349822;1.6421434e-05;0.0063767163;0.60447145;0.00053670572;0.48249441;0.036368132;0.00036806613;3.1735049e-06;0.0084897615;
7.474079e-05;0.12670371;0.00053596962;2.6003868e-06;0.17436241;0.53292984;2.2425014e-05;0.0021451204;0.22089699;0.0011919355;
0.31666195;0.15318713;0.11264385;0.10897928;0.73618162;0.0047101956;0.79329222;0.065166324;0.646088;0.49334306;
0.45429444;0.0014010965;0.17444906;0.75345773;0.0044513745;0.084056936;0.0054522157;0.66999453;0.24882081;0.74714994;
0.046728544;0.04756391;0.00020652462;6.9515877e-06;0.0005400501;0.65133756;0.0053687952;0.72153902;4.9768647e-07;0.00098697899;
0.000157484;0.00040708424;0.77482146;0.00022229002;0.77014589;0.0040682144;0.0095575023;0.072822802;0.83296072;0.0062677562;
0.00033631184;4.8899401e-06;0.85817981;0.016646639;0.00077136554;1.3716526e-12;0.0002352756;0.89300275;0.70699966;2.1831524e-05;
0.58204466;0.0022259168;1.6410011e-08;0.75355363;0.00024047818;0.0073239179;0.86182898;0.18901145;1.8388447e-07;0.28300783;
0.55153042;1.3253967e-07;1.1007693e-05;0.027483273;0.13602678;0.89819252;0.42256996;3.8436949e-05;2.9685419e-08;0.69127947;
0.0003124694;0.00021326479;0.018126128;0.017171556;1.1856123e-06;0.6014666;0.0038574205;4.1848933e-05;0.00016547377;8.2417131e-08;
0.23081349;0.0049780547;0.88946956;0.79374808;0.074329466;0.7813862;0.41109678;0.333563;0.75586134;0.0065952265;
0.41210482;0.84579581;0.18667309;0.89415967;5.681949e-06;0.67517424;0.0023581989;0.024162114;3.4571174e-10;0.76227033;
0.0074350978;0.00099198893;0.61386079;0.14471847;0.8430106;0.28712696;0.00024121327;0.0095711071;3.699663e-06;3.605317e-05;
0.13741544;0.2225669;0.31707221;8.9525849e-05;0.042871974;4.3987744e-05;0.60369468;0.00056264503;0.57738644;0.27295554;
0.0028502033;0.04136727;0.70112818;0.25706413;0.25914207;0.4480097;4.7522839e-08;0.013844512;6.1536807e-06;0.03017766;
0.34970006;0.069342017;3.7125251e-06;0.0060425694;0.0088331839;0.025974512;0.00019209563;0.01438716;4.0690054e-05;0.85973614;
0.59435797;1.6122652e-06;0.73411292;0.0023955875;0.079227403;0.004261469;0.87602162;0.022221377;5.051356e-12;6.0424009e-07;
0.050807141;1.8727107e-07;0.85969472;1.5409943e-05;0.80884314;0.0039070165;0.20473224;0.85093594;0.032672904;0.80734777;
4.0453546e-05;0.00015256769;0.35003012;0.00022197736;0.47542661;2.0433155e-14;0.025179356;0.89471048;0.060668703;0.016071999;
       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="cluster_data_src";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[1][2]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="datatable to cluster plot";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=$.projects[0].networks[0]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[0][0]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="ClusterPlotData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[2][0]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="Binarized_Data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[0].objs[0]$$;
     objs_ptr=1;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="thresh_smspec";
     var_type=T_Object;
     object_type=SimpleMathSpec;
     object_val=.projects[0].programs[0].objs[1]$$;
     objs_ptr=1;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="data_loop_order";
     var_type=T_HardEnum;
     int_val=0;
     hard_enum_type=DataLoop::Order;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="data_loop_index";
     var_type=T_Int;
     int_val=104;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="trial_name";
     var_type=T_String;
     string_val="Angela";
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[6] {
     name="AveragedPatterns";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[0].objs[2]$$;
     objs_ptr=1;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    ProgramCall @[0] {
     desc=;
     flags=;
     prog_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       expr {
	expr="network";
       };
      };
     };
     target=.projects[0].programs.gp[1][0]$$;
     targ_ld_init="*LeabraEpoch*";
    };
    IfElse @[1] {
     desc=;
     flags=;
     cond {
      expr="cluster_data_src.data.FindName(\"Hidden_act\")";
     };
     true_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      DataProcCall @[0] {
       desc=;
       flags=;
       result_var=NULL;
       object_type=taDataProc;
       method=taDataProc::CopyData;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="dest";
	 required=1;
	 def_val=;
	 expr {
	  expr="Binarized_Data";
	 };
	};
	ProgArg @[1] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="src";
	 required=1;
	 def_val=;
	 expr {
	  expr="cluster_data_src";
	 };
	};
       };
      };
      DataGenCall @[1] {
       desc=;
       flags=OFF;
       result_var=NULL;
       object_type=taDataGen;
       method=taDataGen::SimpleMath;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="data";
	 required=1;
	 def_val=;
	 expr {
	  expr="Binarized_Data";
	 };
	};
	ProgArg @[1] {
	 arg_type=const_taString_ref;
	 type="const taString&";
	 name="col_nm";
	 required=1;
	 def_val="\"\"";
	 expr {
	  expr="\"Agent_Code_act\"";
	 };
	};
	ProgArg @[2] {
	 arg_type=const_SimpleMathSpec_ref;
	 type="const SimpleMathSpec&";
	 name="math";
	 required=1;
	 def_val=;
	 expr {
	  expr="thresh_smspec";
	 };
	};
       };
      };
      DataLoop @[2] {
       desc=;
       flags=;
       loop_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	DataVarProg @[0] {
	 desc=;
	 flags=;
	 data_var=.projects[0].programs[0].vars[1]$$;
	 set_data=0;
	 row_spec=CUR_ROW;
	 row_var=NULL;
	 quiet=1;
	 var_1=.projects[0].programs[0].vars[5]$$;
	 var_2=NULL;
	 var_3=NULL;
	 var_4=NULL;
	};
	AssignExpr @[1] {
	 desc=;
	 flags=;
	 result_var=$.projects[0].programs[0].vars[5]$;
	 expr {
	  expr="trial_name.before(\".\")";
	 };
	};
	DataVarProg @[2] {
	 desc=;
	 flags=;
	 data_var=$.projects[0].programs[0].vars[1]$;
	 set_data=1;
	 row_spec=CUR_ROW;
	 row_var=NULL;
	 quiet=1;
	 var_1=$.projects[0].programs[0].vars[5]$;
	 var_2=NULL;
	 var_3=NULL;
	 var_4=NULL;
	};
       };
       data_var=$.projects[0].programs[0].vars[1]$;
       index_var=.projects[0].programs[0].vars[4]$$;
       order_var=.projects[0].programs[0].vars[3]$$;
       order=SEQUENTIAL;
       item_idx_list{ 0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;36;37;38;39;40;41;42;43;44;45;46;47;48;49;50;51;52;53;54;55;56;57;58;59;60;61;62;63;64;65;66;67;68;69;70;71;72;73;74;75;76;77;78;79;80;81;82;83;84;85;86;87;88;89;90;91;92;93;94;95;96;97;98;99;100;101;102;103;       };
      };
      DataGroupProg @[3] {
       desc=;
       flags=;
       src_data_var=$.projects[0].programs[0].vars[1]$;
       dest_data_var=.projects[0].programs[0].vars[6]$$;
       group_spec {
	name="group_spec";
	ops {
	 name=;
	 el_typ=DataGroupEl;
	 el_def=0;
	 DataGroupEl @[0] {
	  col_name="trial_name";
	  agg {name="Aggregate": op=GROUP: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	 };
	 DataGroupEl @[1] {
	  col_name="Hidden_act";
	  agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	 };
	 DataGroupEl @[2] {
	  col_name="Agent_Code_act";
	  agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	 };
	};
	append_agg_name=1;
       };
      };
      DataAnalCall @[4] {
       desc=;
       flags=;
       result_var=NULL;
       object_type=taDataAnal;
       method=taDataAnal::Cluster;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="clust_data";
	 required=1;
	 def_val=;
	 expr {
	  expr="ClusterPlotData";
	 };
	};
	ProgArg @[1] {
	 arg_type=bool;
	 type="bool";
	 name="view";
	 required=1;
	 def_val=;
	 expr {
	  expr="true";
	 };
	};
	ProgArg @[2] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="src_data";
	 required=1;
	 def_val=;
	 expr {
	  expr="AveragedPatterns";
	 };
	};
	ProgArg @[3] {
	 arg_type=const_taString_ref;
	 type="const taString&";
	 name="data_col_nm";
	 required=1;
	 def_val=;
	 expr {
	  expr="\"Hidden_act_mean\"";
	 };
	};
	ProgArg @[4] {
	 arg_type=const_taString_ref;
	 type="const taString&";
	 name="name_col_nm";
	 required=1;
	 def_val=;
	 expr {
	  expr="\"trial_name_group\"";
	 };
	};
	ProgArg @[5] {
	 arg_type=taMath::DistMetric;
	 type="taMath::DistMetric";
	 name="metric";
	 required=0;
	 def_val="taMath::EUCLIDIAN";
	 expr {
	  expr="taMath::EUCLIDIAN";
	 };
	};
	ProgArg @[6] {
	 arg_type=bool;
	 type="bool";
	 name="norm";
	 required=0;
	 def_val="false";
	 expr {
	  expr="false";
	 };
	};
	ProgArg @[7] {
	 arg_type=float;
	 type="float";
	 name="tol";
	 required=0;
	 def_val="0.0f";
	 expr {
	  expr="0.0";
	 };
	};
       };
      };
     };
     false_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      DataAnalCall @[0] {
       desc=;
       flags=OFF;
       result_var=NULL;
       object_type=taDataAnal;
       method=taDataAnal::Cluster;
       meth_args {
	name=;
	el_typ=ProgArg;
	el_def=0;
	ProgArg @[0] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="clust_data";
	 required=1;
	 def_val=;
	 expr {
	  expr="ClusterPlotData";
	 };
	};
	ProgArg @[1] {
	 arg_type=bool;
	 type="bool";
	 name="view";
	 required=1;
	 def_val=;
	 expr {
	  expr="true";
	 };
	};
	ProgArg @[2] {
	 arg_type=DataTable_ptr;
	 type="DataTable*";
	 name="src_data";
	 required=1;
	 def_val=;
	 expr {
	  expr="cluster_data_src";
	 };
	};
	ProgArg @[3] {
	 arg_type=const_taString_ref;
	 type="const taString&";
	 name="data_col_nm";
	 required=1;
	 def_val=;
	 expr {
	  expr="\"Input\"";
	 };
	};
	ProgArg @[4] {
	 arg_type=const_taString_ref;
	 type="const taString&";
	 name="name_col_nm";
	 required=1;
	 def_val=;
	 expr {
	  expr="\"Name\"";
	 };
	};
	ProgArg @[5] {
	 arg_type=taMath::DistMetric;
	 type="taMath::DistMetric";
	 name="metric";
	 required=0;
	 def_val="taMath::EUCLIDIAN";
	 expr {
	  expr="taMath::EUCLIDIAN";
	 };
	};
	ProgArg @[6] {
	 arg_type=bool;
	 type="bool";
	 name="norm";
	 required=0;
	 def_val="false";
	 expr {
	  expr="false";
	 };
	};
	ProgArg @[7] {
	 arg_type=float;
	 type="float";
	 name="tol";
	 required=0;
	 def_val="0.0f";
	 expr {
	  expr=".5f";
	 };
	};
       };
      };
     };
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program @[1] {
   name="SetLearnRule";
   short_nm="SLrRl";
   tags=;
   desc="sets the learning mix values between HEBB and ERR";
   flags=;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
    DynEnumType @[0] {
     name="LearnRule";
     desc=;
     enums {
      name=;
      el_typ=DynEnumItem;
      el_def=0;
      DynEnumItem @[0] {
       name="PURE_HEBB";
       value=0;
       desc=;
      };
      DynEnumItem @[1] {
       name="PURE_ERR";
       value=1;
       desc=;
      };
      DynEnumItem @[2] {
       name="HEBB_AND_ERR";
       value=2;
       desc=;
      };
     };
     bits=0;
    };
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=$.projects[0].networks[0]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$.projects[0].data.gp[0][0]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="learn_rule";
     var_type=T_DynEnum;
     dyn_enum_val {
      enum_type=.projects[0].programs[1].types[0]$$;
      value=2;
     };
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="ControlPanel";
     var_type=T_Object;
     object_type=SelectEdit;
     object_val=.projects[0].edits[0]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="con_spec";
     var_type=T_Object;
     object_type=LeabraConSpec;
     object_val=$.projects[0].networks[0].specs[1]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    AssignExpr @[0] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[1]$$;
     expr {
      expr="network.specs.ConSpec";
     };
    };
    IfElse @[1] {
     desc=;
     flags=;
     cond {
      expr="learn_rule==PURE_HEBB";
     };
     true_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      MemberAssign @[0] {
       desc="set Hebb to 100% ";
       flags=;
       obj=$.projects[0].programs[1].vars[1]$;
       path="lmix.hebb";
       expr {
	expr="1";
       };
       update_after=1;
      };
      MemberAssign @[1] {
       desc="bias weights learning rate needs to be 0 if Hebbian learning is used";
       flags=;
       obj=.projects[0].programs[1].args[0]$$;
       path="specs.ConSpec.BiasSpec.lrate";
       expr {
	expr="0";
       };
       update_after=0;
      };
     };
     false_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      IfElse @[0] {
       desc=;
       flags=;
       cond {
	expr="learn_rule==PURE_ERR";
       };
       true_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	MemberAssign @[0] {
	 desc="set Hebb to 0% ";
	 flags=;
	 obj=$.projects[0].programs[1].vars[1]$;
	 path="lmix.hebb";
	 expr {
	  expr="0";
	 };
	 update_after=1;
	};
	MemberAssign @[1] {
	 desc="bias weights learning rate needs to be 0.01 if ERR-learning is used";
	 flags=;
	 obj=$.projects[0].programs[1].args[0]$;
	 path="specs.ConSpec.BiasSpec.lrate";
	 expr {
	  expr="0.01";
	 };
	 update_after=0;
	};
       };
       false_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	MemberAssign @[0] {
	 desc="set Hebb to 1% ";
	 flags=;
	 obj=$.projects[0].programs[1].vars[1]$;
	 path="lmix.hebb";
	 expr {
	  expr="0.01";
	 };
	 update_after=1;
	};
	MemberAssign @[1] {
	 desc="bias weights learning rate needs to be 0.01 if ERR-learning is used";
	 flags=;
	 obj=$.projects[0].programs[1].args[0]$;
	 path="specs.ConSpec.BiasSpec.lrate";
	 expr {
	  expr="0.01";
	 };
	 update_after=0;
	};
       };
      };
     };
    };
    MethodCall @[2] {
     desc=;
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs[1].args[0]$;
     method=Network::UpdateAllSpecs;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=bool;
       type="bool";
       name="force";
       required=0;
       def_val="false";
       expr {
	expr=;
       };
      };
     };
    };
    MethodCall @[3] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[1].vars[0]$$;
     method=SelectEdit::UpdateAfterEdit;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
     };
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   Program @[0] {
    name="LeabraBatch";
    short_nm="Batch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
     DynEnumType @[0] {
      name="LearnRule";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="PURE_HEBB";
	value=0;
	desc=;
       };
       DynEnumItem @[1] {
	name="PURE_ERR";
	value=1;
	desc=;
       };
       DynEnumItem @[2] {
	name="HEBB_AND_ERR";
	value=2;
	desc=;
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=3;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="batch counter";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="max_batch";
      var_type=T_Int;
      int_val=3;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="maximum number of batch runs to perform";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="learn_rule";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects[0].programs.gp[0][0].types[0]$$;
       value=2;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=.projects[0].programs.gp[0][0].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[0][0].vars[0]$$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=$.projects[0].programs.gp[0][0].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][0].vars[0]$;
      counter=Network::batch;
      update_after=0;
     };
     WhileLoop @[1] {
      desc="the main loop over training runs";
      flags=;
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       IfElse @[0] {
	desc=;
	flags=NON_STD;
	cond {
	 expr="batch==0";
	};
	true_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[0][0].vars[2]$$;
	  expr {
	   expr="PURE_HEBB";
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 IfElse @[0] {
	  desc=;
	  flags=;
	  cond {
	   expr="batch==1";
	  };
	  true_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   AssignExpr @[0] {
	    desc=;
	    flags=;
	    result_var=$.projects[0].programs.gp[0][0].vars[2]$;
	    expr {
	     expr="PURE_ERR";
	    };
	   };
	  };
	  false_code {
	   name=;
	   el_typ=ProgEl;
	   el_def=0;
	   AssignExpr @[0] {
	    desc=;
	    flags=;
	    result_var=$.projects[0].programs.gp[0][0].vars[2]$;
	    expr {
	     expr="HEBB_AND_ERR";
	    };
	   };
	  };
	 };
	};
       };
       ProgramCall @[1] {
	desc=;
	flags=NON_STD;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=DynEnum;
	  type="LearnRule";
	  name="learn_rule";
	  required=1;
	  def_val=;
	  expr {
	   expr="learn_rule";
	  };
	 };
	};
	target=$.projects[0].programs[1]$;
	targ_ld_init="*SetLearnRule*";
       };
       ProgramCall @[2] {
	desc="run the training program -- sets the network and input_data args";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	};
	target=$.projects[0].programs.gp[0][1]$;
	targ_ld_init="*LeabraTrain*";
       };
       NetCounterIncr @[3] {
	desc="increment the local batch counter and copy to network";
	flags=;
	network_var=$.projects[0].programs.gp[0][0].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[0][0].vars[0]$;
	counter=Network::batch;
	update_after=0;
       };
      };
      test {
       expr="batch < max_batch";
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[1] {
    name="LeabraTrain";
    short_nm="Train";
    tags="Leabra, Std";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
    flags=;
    objs {
     name=;
     el_typ=RndSeed;
     el_def=0;
     RndSeed @[0] {
      name="rnd_seed";
      seed{ -1079806732;265210639;-928373779;-1680045335;1959236027;1406077031;519497284;1417624795;263826442;2107128315;300657068;1669004519;52878538;1275278783;1429791236;1518917896;-1352502883;268298956;-1385640306;917924175;1769722687;-795310709;-228952386;40304040;-537330848;1064839464;1485219042;1100056746;-1589940589;-1667942318;-332265554;663985248;1653346816;-1058233466;1434562715;-270330139;-735895838;1099470826;1067299549;-1644505512;1696775082;-1026585184;-1843127175;-1495658574;876437660;-382821959;-1682100080;-1667216439;1247447623;430048207;1067337693;15900516;-1027512664;1223427244;811167095;555605802;-547584566;395860358;-777123816;2025629154;-462885429;622712869;578098135;2125456146;1433321919;1855135287;-156249712;696932930;-1112478130;443068481;-1352183061;260138804;548703180;1755272133;-2062815074;1170041303;238569402;682415791;1037916761;-501397908;-1589169893;-1643397074;1974361518;565615966;-53123990;-36974910;1179966331;-1589321351;-1959474977;-446921590;1814862695;-728963687;-2119434210;95356777;1759780299;2121718545;1032846768;-2006825263;1517411489;643672963;944948755;-215133980;-612529527;-915307815;-993703318;-1954050858;-526121970;-12874100;-877476393;-500006639;1685950088;-2003858052;-1177730778;500365221;205914507;-46203062;1735903553;1840621237;-36890246;-1562653132;1301103046;-245402884;137090581;1701819332;-760653259;-40796725;-1221679002;138540019;-1120449953;-2111366094;1288949618;-642096158;1294192969;-1290200595;-1588518191;141207750;-1949266778;-855162563;-1233589248;1060693;-687199723;-1239260869;-165225205;1423342775;1918278238;-1050624244;-1630312323;1003303342;726448186;-1519273609;-1873753921;1685542952;912439749;2059450450;-1628298151;-1384510590;298715676;1618409897;1847814118;-1310483006;1316552032;-1896095514;-1963606378;-67279609;2032402232;358101794;1561812752;26188636;-2024765452;-79541577;-1777480274;-969461369;-941478464;1796106652;310358175;-1975597462;1875505080;-972778066;-1482448141;-698793272;-847053365;2130061469;-1088585150;-1055349769;-903724036;-2048832684;-1165115480;1797560525;415855928;1807628245;1152940898;-91903538;2134225825;1454407393;-1616384222;-434538397;873979556;-1710449799;-1433719987;1178492402;747052199;473214380;-1586654810;2124888703;934904450;-1399451625;-1302161897;432632856;1212393032;246197406;-1831687896;30029925;330911149;241711894;1549276804;1282478160;1217251789;360893013;-550219421;-925860933;-830584716;1004226256;-1508359954;-658249221;1665730488;-2097082914;1893282990;128741614;-839258934;1221655858;39399685;462357728;187223368;971802193;1181308895;916945281;-291505711;780989127;1660504177;-1355971297;1492978273;1325562065;-1940849918;-1891235853;-461890551;1722444519;-1464122444;1796742597;-1462918324;78130367;-1551573163;1850912078;-695818201;2081921841;363653870;-344715547;1896675262;-454298020;1753877373;-1090525969;-1963776123;-87631800;-398427747;500664925;597712057;1962055430;196695501;-1549496340;-126539790;2083503138;1937307101;-749749029;1416436296;907768030;-968075608;-1725123190;-1300142148;-1413178101;333104803;470981222;1220641110;2146473836;1525683227;-533735075;-1480191694;-391677683;-1589821020;953597341;-1015229167;1506063163;219857156;1945455543;-549108238;-1101426118;-1474385602;-1387404845;1716122013;1488768949;-1416542418;-241458809;-1234018752;-1688304841;-755752425;1058678547;-104884561;-1091797235;-1330239203;1740165486;1644693759;1626176363;1822649352;294220228;1165477772;1927753946;-933725535;385291557;2043618773;1657037281;1023114910;-1001553003;-820366994;264492610;-1178936500;758596873;436145873;1413853882;1396873229;-1258788349;-1463591763;2121677140;-1767498541;1252800704;-1718047119;-1749196884;1001185012;389057427;-170017457;-404923315;1591552536;2071461424;-1934195799;-299534644;-1794791423;-1371937402;-1354288532;169198783;-1776691275;648285070;1103728226;2053974380;-700993953;-456456277;13299368;1348473257;2062672042;995502042;-1824037786;1050681561;-659548157;1649506663;-1108968282;-585174499;328832320;20390827;444896995;1329857532;-2082277057;211352448;-1217217808;-85113621;-1143711494;-852765877;-1923881764;-1851385077;-465601277;1911640695;579907590;1769122263;-470120216;-410334926;-876373295;-440108969;-2060161374;591611551;-324078277;1456060569;1569140090;1611187722;-1547761957;-1862871518;-1529242586;-211427397;1240644896;736249998;1291624336;436637376;-1371860148;-909812397;-2030198242;1016459931;742042551;-1089753148;-149466960;-1354259662;870847364;-442672983;-265488728;-1268001266;-831791020;33493740;1597424822;1961004238;-2006624697;-2096564266;-1242153918;908330719;-402846053;2043550617;1010646170;701322341;1257200253;1899958417;-1582392714;1672938859;654368378;1740444107;-794615716;-1824023002;-237065760;-17267908;-1056866167;-1356361183;180774015;-1081696564;-625285384;-2043251270;-259790004;1075977952;1411619195;-377235239;-1777911366;1120223057;1642318922;-1052721582;1151037617;-1787713747;781721161;1782056332;-2048022687;1561069264;-2128901321;-674215252;2079203279;446286859;86795549;-865375432;-178199793;-301006459;-2040114776;-1145556003;579325895;-264799664;-761352307;-1183825195;-990875741;-336024591;-121742772;-845747714;28161957;1112785646;652661025;-2099106596;-1890548882;-921917579;1943419240;907860296;446776132;1434120113;1368769102;-113577462;1241993325;-505378691;705907096;254173915;-1660340917;589633714;2092433952;-1465679380;-24337714;-1607011894;-1719046702;-542333701;-970076220;1454733936;1496762755;-553511879;507184850;1269699787;-833335388;661966294;-65618590;-1174887878;2104490510;-1805078302;-367678888;-13374752;-1469831031;-922524718;91765873;-740338798;-1882483917;1600998740;500498825;-1717899762;366500030;-83184903;567699622;-64872061;-1478182522;1730205467;482855242;-24050117;-686592478;796990992;1769434716;-960933442;-1945737569;-1246002432;2032452570;927890040;-892826774;1872311168;-662151943;1784969911;-498478620;-104500934;1493970581;1556584061;-676676346;-1129889260;116710090;-80319025;1305444250;-1620816570;1556603380;477840586;1308114900;938290732;-780352128;377620948;761026250;-412722727;2121080618;1156075808;-1493586641;912878060;1455036488;1147774970;74554165;659856152;688458408;836574841;-488978193;-1538550961;-960473963;-281041053;-2008061162;-1523649253;-1939859947;475793484;-1160514506;-1061474625;-855634328;1906963828;-560171417;-70108237;-1112359248;-831487877;-898963046;39849120;788962660;-1785553223;-1259883251;-1497860046;141106488;-22838943;-663912460;-1334858306;1882007928;-1689116662;2059595126;1916625218;-669434689;-1130785667;1015582573;-560140972;5125287;-577165512;1510477725;315401955;1145197799;-941320425;-1013624514;118338668;-1662386952;-2088199425;-121533137;622674107;-179593433;-923005035;-454857072;233590114;1766980622;-1515881648;-528053312;-1405779626;-1935803252;-698440593;1212722438;410387758;1536666514;44916332;-85848310;712688124;      };
      mti=624;
     };
    };
    types {
     name=;
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to train";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="datatable with training patterns";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=100;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of epochs to run";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current epoch -- local copy, which is used to update network's epoch counter";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects[0].programs.gp[0][1].types[0]$$;
       value=0;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects[0].programs.gp[0][1].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="random seed that is used at start of training -- if OldSeed is called";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].train_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="records time used to train network (object lives on network -- this is a pointer to it)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][1].args[2]$$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      desc="check network to make sure it is ready to be run";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][1].args[0]$$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     AssignExpr @[2] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[6]$$;
      expr {
       expr="network.train_time";
      };
     };
     IfElse @[3] {
      desc="initialize random seed (either old or new)";
      flags=;
      cond {
       expr="rnd_init == OLD_SEED";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="restore previous random seed (all runs produce same results)";
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[0][1].vars[5]$$;
	method=RndSeed::OldSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="new random numbers each time";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][1].vars[5]$;
	method=RndSeed::NewSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     IfGuiPrompt @[4] {
      desc="don't initialize weights without checking";
      flags=;
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][1].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=$.projects[0].programs.gp[0][1].vars[6]$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      desc="start timer to keep track of how long it takes to run entire training run";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][1].vars[6]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MemberAssign @[2] {
      desc="set network's training mode to our local value";
      flags=;
      obj=$.projects[0].programs.gp[0][1].args[0]$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     IfElse @[3] {
      desc=;
      flags=;
      cond {
       expr="no_prompts";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][1].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     AssignExpr @[4] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[1]$$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[5] {
      desc="main loop over epochs of training";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the epoch program (one epoch), passes our network and input_data";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[0][2]$$;
	targ_ld_init="*LeabraEpoch*";
       };
       NetCounterIncr @[1] {
	desc="increment the epoch counter (locally and on network)";
	flags=;
	network_var=$.projects[0].programs.gp[0][1].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[0][1].vars[1]$;
	counter=Network::epoch;
	update_after=1;
       };
       IfBreak @[2] {
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
	flags=;
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     MethodCall @[6] {
      desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][1].vars[6]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[2] {
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][0]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].epoch_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=70;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[0][2].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[0][2].vars[1]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[3]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$.projects[0].programs.gp[0][2].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][2].vars[1]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$.projects[0].programs.gp[0][2].vars[3]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].vars[3]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].vars[2]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[4] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[0][3]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.projects[0].programs.gp[0][2].args[1]$$;
      index_var=.projects[0].programs.gp[0][2].vars[4]$$;
      order_var=.projects[0].programs.gp[0][2].vars[0]$$;
      order=PERMUTED;
      item_idx_list{ 7;19;6;68;71;38;26;4;58;37;14;34;54;86;30;1;48;11;45;95;23;99;12;82;42;96;17;20;55;35;60;25;57;10;92;32;52;65;16;59;81;87;36;75;69;21;97;29;18;88;63;74;3;76;89;70;80;46;44;64;85;84;78;91;28;98;15;39;67;2;50;5;41;40;90;8;83;66;27;72;53;9;73;94;62;22;0;13;51;43;79;56;47;31;49;61;77;33;24;93;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     IfElse @[5] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][2].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[6] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].args[0]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[7] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].vars[3]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[8] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs.gp[0][8]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[3] {
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[0][3].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[0][3].vars[0]$$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$.projects[0].programs.gp[0][3].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][3].vars[0]$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[2] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[0][4]$$;
	targ_ld_init="*LeabraSettle*";
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[0][3].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[0][3].vars[0]$;
	counter=LeabraNetwork::phase_no;
	update_after=0;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][3].args[0]$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[3] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[4] {
      desc=;
      flags=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][3].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     ProgramCall @[5] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs.gp[0][7]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[6] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$.projects[0].programs.gp[0][3].args[0]$;
      update_var=.projects[0].programs.gp[0][3].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[4] {
    name="LeabraSettle";
    short_nm="Settle";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[0][4].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[0][4].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$.projects[0].programs.gp[0][4].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][4].vars[0]$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][4].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects[0].programs.gp[0][6]$$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[0][4].vars[1]$$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$.projects[0].programs.gp[0][4].vars[1]$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[5] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.projects[0].programs.gp[0][5]$$;
	targ_ld_init="*LeabraCycle*";
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[0][4].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[0][4].vars[0]$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[6] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[7] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.phase == LeabraNetwork::MINUS_PHASE";
      };
      true_code {
       name=;
       el_typ=MethodCall;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][4].args[0]$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     IfElse @[8] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][4].args[0]$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[0][4].args[0]$;
      update_var=.projects[0].programs.gp[0][4].vars[2]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[5] {
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][5].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[0][5].args[0]$;
      update_var=$.projects[0].programs.gp[0][5].vars[0]$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[6] {
    name="ApplyInputs";
    short_nm="AplyIn";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$.projects[0].data.gp[0][0]$;
      network=$.projects[0].networks[0]$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="Agent";
	net_target=LAYER;
	layer_name="Agent";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="Relation";
	net_target=LAYER;
	layer_name="Relation";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	chan_name="Patient";
	net_target=LAYER;
	layer_name="Patient";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[3] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[0][6].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].vars[0]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][6].vars[0]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][6].vars[0]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[7] {
    name="LeabraTrialMonitor";
    short_nm="TrlMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=$.projects[0].data.gp[1][0]$;
      rmv_orphan_cols=0;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][7].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[8] {
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=.projects[0].data.gp[1][1]$$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][1]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][8].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects[0].networks[0].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[0][8].vars[2]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][8].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][8].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][8].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$.projects[0].programs.gp[0][8].vars[2]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][8].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][8].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][8].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[9] {
    name="SaveWeights";
    short_nm="SvWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="03";
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".03_0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     IfReturn @[0] {
      desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
      flags=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
     };
     MiscCall @[1] {
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[4]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      desc="get current epoch counter with leading zeros to length 4";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[3]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[5]$$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[2]$$;
      obj=.projects[0].programs.gp[0][9].args[0]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="save the weights to that file name";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][9].args[0]$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
  Program_Group @.gp[1] {
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   Program @[0] {
    name="LeabraEpochTest";
    short_nm="EpcTst";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[0][2]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=103;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][2]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects[0].networks[0].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=104;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[1][0].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[1][0].vars[2]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[1][0].vars[4]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$.projects[0].programs.gp[1][0].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[1][0].vars[2]$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[1] {
      desc="set to testing mode";
      flags=NEW_EL;
      obj=$.projects[0].programs.gp[1][0].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TEST";
      };
      update_after=0;
     };
     AssignExpr @[2] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$.projects[0].programs.gp[1][0].vars[4]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][0].vars[4]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[4] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][0].vars[3]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[5] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[1][1]$$;
	targ_ld_init="*LeabraTrial*";
       };
       IfElse @[1] {
	desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
	flags=;
	cond {
	 expr="network.Compute_Weights_Test(trial+1)";
	};
	true_code {
	 name=;
	 el_typ=MethodCall;
	 el_def=0;
	 MethodCall @[0] {
	  desc="update the weight values based on changes computed by trial program";
	  flags=;
	  result_var=NULL;
	  obj=$.projects[0].programs.gp[1][0].args[0]$;
	  method=Network::Compute_Weights;
	  meth_args {
	   name=;
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
	false_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	};
       };
      };
      data_var=.projects[0].programs.gp[1][0].vars[0]$$;
      index_var=.projects[0].programs.gp[1][0].vars[5]$$;
      order_var=.projects[0].programs.gp[1][0].vars[1]$$;
      order=SEQUENTIAL;
      item_idx_list{ 0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32;33;34;35;36;37;38;39;40;41;42;43;44;45;46;47;48;49;50;51;52;53;54;55;56;57;58;59;60;61;62;63;64;65;66;67;68;69;70;71;72;73;74;75;76;77;78;79;80;81;82;83;84;85;86;87;88;89;90;91;92;93;94;95;96;97;98;99;100;101;102;103;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     IfElse @[6] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][0].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[7] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][0].args[0]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][0].vars[4]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[9] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs.gp[1][6]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     MemberAssign @[10] {
      desc="set back to training mode";
      flags=NEW_EL;
      obj=$.projects[0].programs.gp[1][0].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[1] {
    name="LeabraTrialTest";
    short_nm="TrlTst";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][2]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[1][1].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[1][1].vars[0]$$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$.projects[0].programs.gp[1][1].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[1][1].vars[0]$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][1].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[2] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[1][2]$$;
	targ_ld_init="*LeabraSettle*";
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[1][1].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[1][1].vars[0]$;
	counter=LeabraNetwork::phase_no;
	update_after=0;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][1].args[0]$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[3] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][1].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[4] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs.gp[1][5]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[5] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$.projects[0].programs.gp[1][1].args[0]$;
      update_var=.projects[0].programs.gp[1][1].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[2] {
    name="LeabraSettleTest";
    short_nm="SttTst";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][2]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=51;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[1][2].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[1][2].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$.projects[0].programs.gp[1][2].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[1][2].vars[0]$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][2].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects[0].programs.gp[1][4]$$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[1][2].vars[1]$$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$.projects[0].programs.gp[1][2].vars[1]$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[5] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.projects[0].programs.gp[1][3]$$;
	targ_ld_init="*LeabraCycle*";
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[1][2].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[1][2].vars[0]$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[6] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[7] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.phase == LeabraNetwork::MINUS_PHASE";
      };
      true_code {
       name=;
       el_typ=MethodCall;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][2].args[0]$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     IfElse @[8] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][2].args[0]$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[1][2].args[0]$;
      update_var=.projects[0].programs.gp[1][2].vars[2]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[3] {
    name="LeabraCycleTest";
    short_nm="CycTst";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][3].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[1][3].args[0]$;
      update_var=.projects[0].programs.gp[1][3].vars[0]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[4] {
    name="ApplyInputsTest";
    short_nm="AplyInTst";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$.projects[0].data.gp[0][2]$;
      network=$.projects[0].networks[0]$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="Agent";
	net_target=LAYER;
	layer_name="Agent";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="Relation";
	net_target=LAYER;
	layer_name="Relation";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	chan_name="Patient";
	net_target=LAYER;
	layer_name="Patient";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[3] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][2]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[1][4].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][4].vars[0]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][4].vars[0]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][4].vars[0]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[5] {
    name="LeabraTrialMonitorTest";
    short_nm="TrlMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="cycle";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="Hidden_act";
	computed=0;
	object_type=Unit_Group;
	object=.projects[0].networks[0].layers[6].units$$;
	variable="act";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="Agent_Code_act";
	computed=0;
	object_type=Unit_Group;
	object=.projects[0].networks[0].layers[1].units$$;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=$.projects[0].data.gp[1][2]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][2]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[1][5].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][5].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][5].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][5].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][5].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][5].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][5].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][5].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[6] {
    name="LeabraEpochMonitorTest";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=.projects[0].data.gp[1][3]$$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][3]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[1][6].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects[0].networks[0].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[1][6].vars[2]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][6].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][6].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$.projects[0].programs.gp[1][6].vars[2]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
 };
 viewers {
  name=;
  el_typ=TopLevelViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="view_win_lft";
     value 6 0=0.003071252955123782;
     val_type_fixed=0;
    };
    UserDataItem @[1] {
     name="view_win_top";
     value 6 0=0;
     val_type_fixed=0;
    };
    UserDataItem @[2] {
     name="view_win_wd";
     value 6 0=0.9938575029373169;
     val_type_fixed=0;
    };
    UserDataItem @[3] {
     name="view_win_ht";
     value 6 0=0.7996109127998352;
     val_type_fixed=0;
    };
    UserDataItem @[4] {
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @[5] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAAAAAADAAAAyAAAAnkAAAMFAQAAAAYBAAAAAQ==";
     val_type_fixed=0;
    };
   };
   name="Browser3";
   m_data=.projects[0]$$;
   visible=1;
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name=;
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_win_visible";
       value 1 0=0;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name=;
    el_typ=FrameViewer;
    el_def=0;
    tabBrowseViewer @[0] {
     name="Tree";
     m_data=NULL;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects[0]$;
    };
    PanelViewer @[1] {
     name="Panels";
     m_data=NULL;
     visible=1;
    };
    T3DataViewer @[2] {
     name="T3Frames";
     m_data=NULL;
     visible=1;
     frames {
      name=;
      el_typ=T3DataViewFrame;
      el_def=0;
      T3DataViewFrame @[0] {
       name="family_trees";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 NetView @[0] {
	  name=;
	  m_data=$.projects[0].networks[0]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  display=1;
	  lay_mv=1;
	  net_text=1;
	  net_text_xform {scale={x=0.7167515: y=0.7167514: z=0.7167513: }: rotate={x=1: y=0: z=0: rot=1.570796: }: translate={x=-0.3397886: y=0.4960632: z=-1.000025: }: };
	  net_text_rot=-90;
	  cur_unit_vals{ act;	  };
	  unit_src_path=".layers[6].units[0]";
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NAMES;
	  max_size {x=34: y=5: z=2.333333: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.012;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs[0]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    name="r.pdw";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	   ScaleRange @[2] {
	    name="s.pdw";
	    auto_scale=1;
	    min=-0;
	    max=0;
	   };
	  };
	  lay_disp_modes{ Agent=0;Agent_Code=0;Relation=0;Relation_Code=0;Patient=0;Patient_Code=0;Hidden=0;	  };
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=0.4973773: y=0.5276151: z=1.475298: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.77513;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[1] {
       name="ft_1ufg_train";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GridTableView @[0] {
	  name=;
	  m_data=$.projects[0].data.gp[0][0]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="Name";
	    m_data=.projects[0].data.gp[0][0].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="Agent";
	    m_data=.projects[0].data.gp[0][0].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=6;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="Relation";
	    m_data=.projects[0].data.gp[0][0].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=6;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    name="Patient";
	    m_data=.projects[0].data.gp[0][0].data[3]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=6;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10;
	  view_range {min=0: max=9: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=0: max=3: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.04: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=1.5325: y=0.5174999: z=1.443747: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.453747;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[2] {
       name="EpochOutputData";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GraphTableView @[0] {
	  name=;
	  m_data=$.projects[0].data.gp[1][1]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="batch";
	    m_data=.projects[0].data.gp[1][1].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="epoch";
	    m_data=.projects[0].data.gp[1][1].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="avg_sse";
	    m_data=.projects[0].data.gp[1][1].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1.61291: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="cnt_err";
	    m_data=.projects[0].data.gp[1][1].data[3]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=100: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="avg_ext_rew";
	    m_data=.projects[0].data.gp[1][1].data[4]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="avg_cycles";
	    m_data=.projects[0].data.gp[1][1].data[5]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=52.07: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="epoch_time_tot";
	    m_data=.projects[0].data.gp[1][1].data[6]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="epoch_time_usr";
	    m_data=.projects[0].data.gp[1][1].data[7]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=99: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=99: };
	   range {min=0: max=99: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-07: max=6e-07: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="cnt_err";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=100: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=100: };
	   range {min=0: max=100: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="avg_cycles";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=52.07: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=50.19: max=53.96: };
	   range {min=50.19: max=53.96: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=VALUE_COLOR;
	  color_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=1.4275: y=0.445: z=1.624621: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.637121;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[3] {
       name="ClusterPlotData";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GraphTableView @[0] {
	  name=;
	  m_data=$.projects[0].data.gp[2][0]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="X";
	    m_data=.projects[0].data.gp[2][0].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="Y";
	    m_data=.projects[0].data.gp[2][0].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="Label";
	    m_data=.projects[0].data.gp[2][0].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=214: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="X";
	   fixed_range {fix_min=0: min=0: fix_max=1: max=11.69236: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=11.69236: };
	   range {min=0: max=11.69236: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Y";
	   fixed_range {fix_min=1: min=0.2: fix_max=1: max=23.8: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0.2: max=23.8: };
	   range {min=0.2: max=23.8: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="Label";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=COLOR_AXIS;
	  color_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="X";
	   fixed_range {fix_min=0: min=0: fix_max=1: max=8.37651: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=10.16727: };
	   range {min=0: max=8.37651: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=1.4275: y=0.4449999: z=1.624621: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.637121;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name=;
    el_typ=DockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_win_lft";
       value 6 0=0;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_win_top";
       value 6 0=0.008754863403737545;
       val_type_fixed=0;
      };
      UserDataItem @[2] {
       name="view_win_wd";
       value 6 0=0.05958230793476105;
       val_type_fixed=0;
      };
      UserDataItem @[3] {
       name="view_win_ht";
       value 6 0=0.7285992503166199;
       val_type_fixed=0;
      };
      UserDataItem @[4] {
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @[5] {
       name="view_visible";
       value 1 0=0;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     visible=0;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 last_change_desc=;
 networks {
  name=;
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="norm_err";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[1] {
     name="ext_rew";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[2] {
     name="maxda";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[3] {
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[4] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[5] {
     name="ct_cycle";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[6] {
     name="phase_no";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[7] {
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[8] {
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[9] {
     name="output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[10] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[11] {
     name="group_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[12] {
     name="time";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[13] {
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[14] {
     name="tick";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[15] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[16] {
     name="group";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[17] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[18] {
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="family_trees";
   desc=;
   specs {
    name=;
    el_typ=BaseSpec;
    el_def=0;
    LeabraLayerSpec @[0] {
     name="Hidden";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="Input_Output";
       desc=;
       unique{ kwta;compute_i;i_kwta_pt;inhib;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	fb_act_thr=0;
	ff_pct=0;
	fb_max_dt=0.1;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_PAT_K: k=1: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
       i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
       adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.2;
       };
      };
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.5;
      min_i=0;
      fb_act_thr=0;
      ff_pct=0;
      fb_max_dt=0.1;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=10: pct=0.05: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
     adapt_i {type=NONE: tol=0.02: p_dt=0.1: mx_d=0.9: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.2;
     };
    };
    LeabraConSpec @[1] {
     name="ConSpec";
     desc=" ";
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="BiasSpec";
       desc=;
       unique{ rnd;wt_limits;wt_scale;lrate;lmix;       };
       children {
	name=;
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0: var=0: par=0.25: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.01;
       cur_lrate=0.01;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
       };
       wt_sig {gain=6: off=1.25: };
       lmix {hebb=1: err=0: err_sb=1: };
       xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
       savg_cor {cor=0.4: thresh=0.01: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.1;
       };
       dwt_thresh=0.1;
      };
      LeabraConSpec @[1] {
       name="FmInput_Output";
       desc=;
       unique{ wt_scale;       };
       children {
	name=;
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=0.3: sem_extra=2: old=0: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.01;
       cur_lrate=0.01;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
       };
       wt_sig {gain=6: off=1.25: };
       lmix {hebb=0.01: err=0.99: err_sb=1: };
       xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
       savg_cor {cor=0.4: thresh=0.01: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.1;
       };
      };
     };
     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     learn_rule=LEABRA_CHL;
     inhib=0;
     wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
     wt_scale_init {init=0: abs=1: rel=1: };
     lrate=0.01;
     cur_lrate=0.01;
     lrs_value=EPOCH;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=0;
      cur_val=0;
     };
     wt_sig {gain=6: off=1.25: };
     lmix {hebb=0.01: err=0.99: err_sb=1: };
     xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
     savg_cor {cor=0.4: thresh=0.01: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.1;
     };
    };
    LeabraUnitSpec @[2] {
     name="UnitSpec";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[1].children[0]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {gelin=0: thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
     spike {rise=0: decay=0.05: g_gain=5: window=3: eq_gain=10: eq_dt=0.02: };
     spike_misc {
      exp_slope=0.02;
      spk_thr=1.2;
      clamp_max_p=0.11;
      clamp_type=REGULAR;
      vm_r=0.3;
      vm_dend=0.3;
      vm_dend_dt=0.16;
      vm_dend_time=6.25;
     };
     opt_thresh {send=0.1: delta=0.005: phase_dif=0: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
     dt {integ=1: vm=0.2: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=5: net_time=1.428571: };
     act_avg {l_gain=3: l_dt=0.005: ml_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=200: ml_time=2.5: m_time=10: s_time=5: ss_time=1: };
     g_bar {e=1: l=0.1: i=1: h=0.1: a=0.5: };
     e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
     hyst {on=0: b_inc_dt=0.01: b_dec_dt=0.05: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
     adapt {
      on=0;
      dt=0.007;
      vm_gain=0.04;
      spike_gain=0.00805;
      interval=10;
      dt_time=142.8571;
     };
     depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=2: };
     syn_delay {
      on=0;
      delay=4;
     };
     da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
     noise_type=NO_NOISE;
     noise {name="": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     noise_adapt {trial_fixed=0: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
    };
    FullPrjnSpec @[3] {
     name="FullPrjnSpec";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     add_rnd_wts=0;
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    max_size {x=34: y=5: z=3: };
    LeabraLayer @[0] {
     name="Agent";
     desc=;
     flags=;
     layer_type=INPUT;
     pos {x=1: y=0: z=0: };
     disp_scale=1;
     un_geom {x=6: y=4: n_not_xy=0: n=24: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=6: y=4: n_not_xy=0: n=24: };
     scaled_act_geom {x=6: y=4: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[1].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=6: y=4: n_not_xy=0: n=24: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[0].specs[2]$$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="Angela";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [6 4] "Christo";"Penny";"Andy";"Christi";"Marge";"Art";"Vicky";"James";"Jenn";"Chuck";
"Colin";"Charlot";"Rob";"Maria";"Pierro";"Francy";"Gina";"Emilio";"Lucia";"Marco";
"Angela";"Tomaso";"Alf";"Sophia";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.03958333: max=0.95: max_i=20: };
     acts_m {cmpt=1: avg=0.03958333: max=0.95: max_i=20: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.04166667: pct_c=0.9583333: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.04166667: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[0].children[0]$$: };
     hard_clamped=0;
     avg_l_avg=nan;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
    LeabraLayer @[1] {
     name="Agent_Code";
     desc=;
     flags=;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=1: };
     disp_scale=1;
     un_geom {x=10: y=4: n_not_xy=0: n=40: };
     unit_groups=0;
     gp_geom {x=3: y=3: n_not_xy=0: n=9: };
     gp_spc {x=0: y=0: };
     act_geom {x=10: y=4: n_not_xy=0: n=40: };
     scaled_act_geom {x=10: y=4: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Agent";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[0]$$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[0].specs[3]$$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[1].children[1]$$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_Hidden";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[6]$$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[0].specs[3]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[1]$: };
       recv_idx=1;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[6].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=10: y=4: n_not_xy=0: n=40: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[0].specs[2]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2384243: max=0.8975324: max_i=16: };
     acts_m {cmpt=1: avg=0.2384243: max=0.8975324: max_i=16: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=10: pct=0.25: pct_c=0.75: adth_k=5: k_ithr=3.393379: k1_ithr=2.785551: ithr_r=0.1973806: ithr_diff=0.1791219: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.5: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[0]$$: };
     hard_clamped=0;
     avg_l_avg=nan;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
    LeabraLayer @[2] {
     name="Relation";
     desc=;
     flags=;
     layer_type=INPUT;
     pos {x=11: y=1: z=0: };
     disp_scale=1;
     un_geom {x=6: y=2: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=6: y=2: n_not_xy=0: n=12: };
     scaled_act_geom {x=6: y=2: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[3].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=6: y=2: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[0].specs[2]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="Neice";
     sse=0;
     icon_value=0;
     unit_names {
      name=;
	  [6 2] "Fath";"Moth";"Husb";"Wife";"Son";"Daug";"Bro";"Sis";"Uncle";"Aunt";
"Nephew";"Neice";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.07916667: max=0.95: max_i=11: };
     acts_m {cmpt=1: avg=0.07916667: max=0.95: max_i=11: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.08333334: pct_c=0.9166667: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.08333334: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=$.projects[0].networks[0].specs[0].children[0]$: };
     hard_clamped=0;
     avg_l_avg=nan;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
    LeabraLayer @[3] {
     name="Relation_Code";
     desc=;
     flags=;
     layer_type=HIDDEN;
     pos {x=12: y=0: z=1: };
     disp_scale=1;
     un_geom {x=10: y=4: n_not_xy=0: n=40: };
     unit_groups=0;
     gp_geom {x=3: y=3: n_not_xy=0: n=9: };
     gp_spc {x=0: y=0: };
     act_geom {x=10: y=4: n_not_xy=0: n=40: };
     scaled_act_geom {x=10: y=4: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Relation";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[2]$$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[0].specs[3]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[1].children[1]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_Hidden";
       from_type=CUSTOM;
       from=$.projects[0].networks[0].layers[6]$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[0].specs[3]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[1]$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[6].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=10: y=4: n_not_xy=0: n=40: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[0].specs[2]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2183898: max=0.8967727: max_i=35: };
     acts_m {cmpt=1: avg=0.2183898: max=0.8967727: max_i=35: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=10: pct=0.25: pct_c=0.75: adth_k=5: k_ithr=3.433611: k1_ithr=2.878326: ithr_r=0.1764038: ithr_diff=0.1617205: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.5: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=$.projects[0].networks[0].specs[0]$: };
     hard_clamped=0;
     avg_l_avg=nan;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
    LeabraLayer @[4] {
     name="Patient";
     desc=;
     flags=;
     layer_type=TARGET;
     pos {x=21: y=0: z=0: };
     disp_scale=1;
     un_geom {x=6: y=4: n_not_xy=0: n=24: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=6: y=4: n_not_xy=0: n=24: };
     scaled_act_geom {x=6: y=4: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Patient_Code";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[5]$$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[0].specs[3]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[1]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[5].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=6: y=4: n_not_xy=0: n=24: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[0].specs[2]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name="Maria";
     sse=1.714157;
     icon_value=0;
     unit_names {
      name=;
	  [6 4] "Christo";"Penny";"Andy";"Christi";"Marge";"Art";"Vicky";"James";"Jenn";"Chuck";
"Colin";"Charlot";"Rob";"Maria";"Pierro";"Francy";"Gina";"Emilio";"Lucia";"Marco";
"Angela";"Tomaso";"Alf";"Sophia";     };
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.03871797: max=0.8450779: max_i=13: };
     acts_m {cmpt=1: avg=0.03871797: max=0.8450779: max_i=13: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=1: pct=0.04166667: pct_c=0.9583333: adth_k=1: k_ithr=5.149686: k1_ithr=4.398348: ithr_r=0.1577068: ithr_diff=0.1458998: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.04166667: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=$.projects[0].networks[0].specs[0].children[0]$: };
     hard_clamped=0;
     avg_l_avg=nan;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
    LeabraLayer @[5] {
     name="Patient_Code";
     desc=;
     flags=;
     layer_type=HIDDEN;
     pos {x=24: y=0: z=1: };
     disp_scale=1;
     un_geom {x=10: y=4: n_not_xy=0: n=40: };
     unit_groups=0;
     gp_geom {x=3: y=3: n_not_xy=0: n=9: };
     gp_spc {x=0: y=0: };
     act_geom {x=10: y=4: n_not_xy=0: n=40: };
     scaled_act_geom {x=10: y=4: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Patient";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[4]$$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[0].specs[3]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[1].children[1]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_Hidden";
       from_type=CUSTOM;
       from=$.projects[0].networks[0].layers[6]$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[0].specs[3]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[1]$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[4].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[6].projections[2];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=10: y=4: n_not_xy=0: n=40: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[0].specs[2]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2651691: max=0.8859449: max_i=12: };
     acts_m {cmpt=1: avg=0.2651691: max=0.8859449: max_i=12: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=10: pct=0.25: pct_c=0.75: adth_k=5: k_ithr=3.3698: k1_ithr=2.793161: ithr_r=0.1876793: ithr_diff=0.1711195: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.5: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=$.projects[0].networks[0].specs[0]$: };
     hard_clamped=0;
     avg_l_avg=nan;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
    LeabraLayer @[6] {
     name="Hidden";
     desc=;
     flags=;
     layer_type=HIDDEN;
     pos {x=11: y=1: z=2: };
     disp_scale=1;
     un_geom {x=10: y=4: n_not_xy=0: n=40: };
     unit_groups=0;
     gp_geom {x=4: y=2: n_not_xy=0: n=8: };
     gp_spc {x=0: y=0: };
     act_geom {x=10: y=4: n_not_xy=0: n=40: };
     scaled_act_geom {x=10: y=4: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Agent_Code";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[1]$$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[0].specs[3]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[1]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_Relation_Code";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[3]$$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[0].specs[3]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[1]$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_Patient_Code";
       from_type=CUSTOM;
       from=$.projects[0].networks[0].layers[5]$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[0].specs[3]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[1]$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[1].projections[1];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[3].projections[1];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[0].layers[5].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=10: y=4: n_not_xy=0: n=40: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[0].specs[2]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2033912: max=0.7874027: max_i=38: };
     acts_m {cmpt=1: avg=0.2033912: max=0.7874027: max_i=38: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=10: pct=0.25: pct_c=0.75: adth_k=5: k_ithr=3.792132: k1_ithr=3.345082: ithr_r=0.1254373: ithr_diff=0.117889: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.5: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=$.projects[0].networks[0].specs[0]$: };
     hard_clamped=0;
     avg_l_avg=nan;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=;
   auto_build=AUTO_BUILD;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   batch=0;
   epoch=0;
   group=0;
   trial=0;
   tick=0;
   cycle=0;
   time=0;
   group_name=;
   trial_name=;
   output_name=;
   sse_unit_avg=0;
   sse_sqrt=0;
   sse=0;
   sum_sse=0;
   avg_sse=0;
   cnt_err_tol=0;
   cnt_err=0;
   pct_err=0;
   pct_cor=0;
   cur_sum_sse=0;
   avg_sse_n=0;
   cur_cnt_err=0;
   train_time {name="": start={usr=125677: sys=97711: tot=1721673947: }: end={usr=132081: sys=30402: tot=11843084: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   epoch_time {name="": start={usr=135103: sys=104498: tot=1721765592: }: end={usr=135534: sys=104832: tot=1721766404: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   trial_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   settle_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   cycle_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   wt_sync_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   misc_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   threads {
    run_time {name="": s_used=0: n_used=0: };
    sync_time {name="": s_used=0: n_used=0: };
    total_time {name="": s_used=0: n_used=0: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=0;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=220;
   n_cons=12960;
   max_size {x=34: y=5: z=3: };
   learn_rule=LEABRA_CHL;
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase=MINUS_PHASE;
   nothing_phase=0;
   phase_no=0;
   phase_max=1;
   ct_cycle=51;
   time_inc=1;
   cycle_max=60;
   mid_minus_cycle=-1;
   min_cycles=15;
   min_cycles_phase2=35;
   ct_time {
    minus=50;
    plus=20;
    inhib=1;
    n_avg_only_epcs=1;
    total_cycles=71;
    inhib_start=70;
   };
   ct_sravg {
    start=30;
    end=1;
    interval=1;
    plus_s_st=19;
    force_con=0;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0.02;
    trough_i=0.02;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   sravg_vals {
    s_sum=0;
    s_nrm=0;
    m_sum=0;
    m_nrm=0;
    do_s=0;
   };
   ct_lrn_trig {
    plus_lrn_cyc=-1;
    davg_dt=0.1;
    davg_s_dt=0.05;
    davg_m_dt=0.03;
    davg_l_dt=0.0005;
    thr_min=0;
    thr_max=0.5;
    loc_max_cyc=8;
    loc_max_dec=0.01;
    lrn_delay=40;
    lrn_refract=100;
    davg_l_init=0;
    davg_max_init=0.001;
    davg_time=10;
    davg_s_time=20;
    davg_m_time=33.33334;
    davg_l_time=2000;
    lrn_delay_inc=0.025;
    lrn_refract_inc=0.01;
   };
   lrn_trig {
    davg=0;
    davg_s=0;
    davg_m=0;
    davg_smd=0;
    davg_l=0;
    davg_max=0.001;
    cyc_fm_inc=0;
    cyc_fm_dec=0;
    loc_max=0;
    lrn_max=0;
    lrn_trig=0;
    lrn=0;
    lrn_min=0;
    lrn_min_cyc=0;
    lrn_min_thr=0;
    lrn_min_sum=0;
    lrn_min_cyc_sum=0;
    lrn_min_thr_sum=0;
    lrn_plus=0;
    lrn_plus_cyc=0;
    lrn_plus_thr=0;
    lrn_plus_sum=0;
    lrn_plus_cyc_sum=0;
    lrn_plus_thr_sum=0;
    lrn_noth=0;
    lrn_noth_cyc=0;
    lrn_noth_thr=0;
    lrn_noth_sum=0;
    lrn_noth_cyc_sum=0;
    lrn_noth_thr_sum=0;
    lrn_stats_n=0;
   };
   minus_cycles=0;
   avg_cycles=0;
   avg_cycles_sum=0;
   avg_cycles_n=0;
   minus_output_name=;
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   send_pct=0;
   send_pct_n=0;
   send_pct_tot=0;
   avg_send_pct=0;
   avg_send_pct_sum=0;
   avg_send_pct_n=0;
   maxda_stopcrit=0.005;
   maxda=0;
   trg_max_act_stopcrit=1;
   trg_max_act=0;
   ext_rew=0;
   ext_rew_avail=0;
   norew_val=0.5;
   avg_ext_rew=0;
   pvlv_pvi=0;
   pvlv_pvr=0;
   pvlv_lve=0;
   pvlv_lvi=0;
   pv_detected=0;
   avg_ext_rew_sum=0;
   avg_ext_rew_n=0;
   off_errs=1;
   on_errs=1;
   norm_err=0;
   avg_norm_err=1;
   avg_norm_err_sum=0;
   avg_norm_err_n=0;
  };
 };
};
