// ta_Dump File v3.0 -- code v5.1.0.0
LeabraProject .projects[0] { 
  taBase_Group @.templates = [0] {
  };

  Doc_Group @.docs = [4] {
    taDoc @[0] { };
    taDoc @[1] { };
    taDoc @[2] { };
    taDoc @[3] { };
  };

  Wizard_Group @.wizards = [1] {
    LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };

      LayerWizElList @.layer_cfg = [3] {
	LayerWizEl @[0] { };
	LayerWizEl @[1] { };
	LayerWizEl @[2] { };
      };
    };
  };

  SelectEdit_Group @.edits = [2] {
    SelectEdit @[0] { 
      EditMbrItem_Group @.mbrs = [3] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
	EditMbrItem_Group @.gp[0] = [4] { 
	  EditMbrItem @[0] { };
	  EditMbrItem @[1] { };
	  EditMbrItem @[2] { };
	  EditMbrItem @[3] { };
	};
      };

      EditMthItem_Group @.mths = [8] {
	EditMthItem @[0] { };
	EditMthItem @[1] { };
	EditMthItem @[2] { };
	EditMthItem @[3] { };
	EditMthItem @[4] { };
	EditMthItem @[5] { };
	EditMthItem @[6] { };
	EditMthItem @[7] { };
      };
    };
    SelectEdit @[1] { 
      EditMbrItem_Group @.mbrs = [12] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
	EditMbrItem @[3] { };
	EditMbrItem @[4] { };
	EditMbrItem @[5] { };
	EditMbrItem @[6] { };
	EditMbrItem @[7] { };
	EditMbrItem @[8] { };
	EditMbrItem @[9] { };
	EditMbrItem @[10] { };
	EditMbrItem @[11] { };
      };

      EditMthItem_Group @.mths = [0] {
      };
    };
  };

  DataTable_Group @.data = [0] {
    DataTable_Group @.gp[0] = [6] { 
      DataTable @[0] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	};
      };
      DataTable @[2] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
      DataTable @[3] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	};
      };
      DataTable @[4] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	};
      };
      DataTable @[5] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	};
      };
    };
    DataTable_Group @.gp[1] = [6] { 
      DataTable @[0] { 
	DataTableCols @.data = [9] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  String_Data @[4] { };
	  int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [21] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  float_Data @[10] { };
	  float_Data @[11] { };
	  float_Data @[12] { };
	  float_Data @[13] { };
	  float_Data @[14] { };
	  float_Data @[15] { };
	  float_Data @[16] { };
	  float_Data @[17] { };
	  float_Data @[18] { };
	  float_Data @[19] { };
	  float_Data @[20] { };
	};
      };
      DataTable @[2] { 
	DataTableCols @.data = [11] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  String_Data @[3] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[4] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[7] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[8] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[9] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[10] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
      DataTable @[3] { 
	DataTableCols @.data = [11] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  String_Data @[3] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[4] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[7] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[8] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[9] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[10] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
      DataTable @[4] { 
	DataTableCols @.data = [5] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	};
      };
      DataTable @[5] { 
	DataTableCols @.data = [8] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	  float_Data @[7] { };
	};
      };
    };
    DataTable_Group @.gp[2] { 
    };
    DataTable_Group @.gp[3] = [11] { 
      DataTable @[0] { 
	DataTableCols @.data = [2] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  String_Data @[1] { };
	  float_Data @[2] { };
	};
      };
      DataTable @[2] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  String_Data @[1] { };
	  float_Data @[2] { };
	};
      };
      DataTable @[3] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  String_Data @[1] { };
	  float_Data @[2] { };
	};
      };
      DataTable @[4] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  String_Data @[1] { };
	  float_Data @[2] { };
	};
      };
      DataTable @[5] { 
	DataTableCols @.data = [2] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	};
      };
      DataTable @[6] { 
	DataTableCols @.data = [2] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	};
      };
      DataTable @[7] { 
	DataTableCols @.data = [2] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	};
      };
      DataTable @[8] { 
	DataTableCols @.data = [2] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	};
      };
      DataTable @[9] { 
	DataTableCols @.data = [2] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	};
      };
      DataTable @[10] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  String_Data @[1] { };
	  float_Data @[2] { };
	};
      };
    };
  };

  taBase_Group @.data_proc = [4] {
    taDataProc @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataAnal @[1] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataGen @[2] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taImageProc @[3] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
  };

  Program_Group @.programs = [2] {
    Program @[0] { 
      ProgObjList @.objs = [0] {
      };

      ProgType_List @.types = [0] {
      };

      ProgVar_List @.args = [0] {
      };

      ProgVar_List @.vars = [10] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [10] {
	AssignExpr @[0] { };
	AssignExpr @[1] { };
	AssignExpr @[2] { };
	AssignExpr @[3] { };
	Comment @[4] { };
	ForLoop @[5] { 
	  ProgEl_List @.loop_code = [2] {
	    AssignExpr @[0] { };
	    ForLoop @[1] { 
	      ProgEl_List @.loop_code = [2] {
		AssignExpr @[0] { };
		MethodCall @[1] { 
		  ProgArg_List @.meth_args = [2] {
		    ProgArg @[0] { };
		    ProgArg @[1] { };
		  };
		};
	      };
	    };
	  };
	};
	Comment @[6] { };
	ForLoop @[7] { 
	  ProgEl_List @.loop_code = [2] {
	    AssignExpr @[0] { };
	    ForLoop @[1] { 
	      ProgEl_List @.loop_code = [2] {
		AssignExpr @[0] { };
		MethodCall @[1] { 
		  ProgArg_List @.meth_args = [2] {
		    ProgArg @[0] { };
		    ProgArg @[1] { };
		  };
		};
	      };
	    };
	  };
	};
	AssignExpr @[8] { };
	AssignExpr @[9] { };
      };
    };
    Program @[1] { 
      ProgObjList @.objs = [0] {
      };

      ProgType_List @.types = [0] {
      };

      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [14] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
	ProgVar @[11] { };
	ProgVar @[12] { };
	ProgVar @[13] { };
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [10] {
	AssignExpr @[0] { };
	AssignExpr @[1] { };
	AssignExpr @[2] { };
	AssignExpr @[3] { };
	ForLoop @[4] { 
	  ProgEl_List @.loop_code = [2] {
	    AssignExpr @[0] { };
	    ForLoop @[1] { 
	      ProgEl_List @.loop_code = [4] {
		AssignExpr @[0] { };
		If @[1] { 
		  ProgEl_List @.true_code = [1] {
		    VarIncr @[0] { };
		  };
		};
		If @[2] { 
		  ProgEl_List @.true_code = [1] {
		    VarIncr @[0] { };
		  };
		};
		If @[3] { 
		  ProgEl_List @.true_code = [1] {
		    VarIncr @[0] { };
		  };
		};
	      };
	    };
	  };
	};
	AssignExpr @[5] { };
	IfReturn @[6] { };
	AssignExpr @[7] { };
	AssignExpr @[8] { };
	AssignExpr @[9] { };
      };
    };
    Program_Group @.gp[0] = [9] { 
      Program @[0] { 
	ProgObjList @.objs = [1] {
	  RndSeed @[0] { };
	};

	ProgType_List @.types = [1] {
	  DynEnumType @[0] { 
	    DynEnumItem_List @.enums = [2] {
	      DynEnumItem @[0] { };
	      DynEnumItem @[1] { };
	    };
	  };
	};

	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [7] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [5] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  IfGuiPrompt @[4] { 
	    ProgEl_List @.yes_code = [3] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	      ProgramCall @[1] { 
		ProgArg_List @.prog_args = [0] {
		};
	      };
	      PrintExpr @[2] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [8] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[2] { };
	  If @[3] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	      PrintExpr @[1] { };
	    };
	  };
	  ProgramCall @[4] { 
	    ProgArg_List @.prog_args = [0] {
	    };
	  };
	  AssignExpr @[5] { };
	  WhileLoop @[6] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfBreak @[2] { };
	    };
	  };
	  MethodCall @[7] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [5] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [13] {
	  MemberAssign @[0] { };
	  UserScript @[1] { };
	  NetCounterInit @[2] { };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetDataLoop @[6] { 
	    ProgEl_List @.loop_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  MethodCall @[8] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[9] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[10] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[11] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  ProgramCall @[12] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @[2] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [9] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  WhileLoop @[2] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  If @[5] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  ProgramCall @[6] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[7] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[8] { };
	};
      };
      Program @[3] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[4] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  If @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  If @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  NetUpdateView @[9] { };
	};
      };
      Program @[4] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetUpdateView @[1] { };
	};
      };
      Program @[5] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [3] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [9] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[7] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [16] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	      NetMonItem @[11] { };
	      NetMonItem @[12] { };
	      NetMonItem @[13] { };
	      NetMonItem @[14] { };
	      NetMonItem @[15] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @[8] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [6] {
	  IfReturn @[0] { };
	  MiscCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MiscCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
    };
    Program_Group @.gp[1] = [9] { 
      Program @[0] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [4] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[1] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  ProgramCall @[3] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [15] {
	  NetCounterInit @[0] { };
	  MemberAssign @[1] { };
	  UserScript @[2] { };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetDataLoop @[7] { 
	    ProgEl_List @.loop_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  IfElse @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  MethodCall @[9] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[10] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[11] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[12] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[13] { };
	  UserScript @[14] { };
	};
      };
      Program @[2] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [9] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  WhileLoop @[2] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  If @[5] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  ProgramCall @[6] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[7] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[8] { };
	};
      };
      Program @[3] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [11] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[4] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[7] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  If @[8] { 
	    ProgEl_List @.true_code = [0] {
	    };
	  };
	  If @[9] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  NetUpdateView @[10] { };
	};
      };
      Program @[4] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetUpdateView @[1] { };
	};
      };
      Program @[5] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [3] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  AssignExpr @[2] { };
	  MemberAssign @[3] { };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [11] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [8] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	  ProgVar @[7] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [11] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  OtherProgramVar @[3] { };
	  AssignExpr @[4] { };
	  Switch @[5] { 
	    ProgEl_List @.cases = [3] {
	      CaseBlock @[0] { 
		ProgEl_List @.prog_code = [1] {
		  AssignExpr @[0] { };
		};
	      };
	      CaseBlock @[1] { 
		ProgEl_List @.prog_code = [1] {
		  AssignExpr @[0] { };
		};
	      };
	      CaseBlock @[2] { 
		ProgEl_List @.prog_code = [1] {
		  AssignExpr @[0] { };
		};
	      };
	    };
	  };
	  DataVarProg @[6] { };
	  MethodCall @[7] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[8] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  AddNewDataRow @[9] { };
	  MethodCall @[10] { 
	    ProgArg_List @.meth_args = [3] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	    };
	  };
	};
      };
      Program @[7] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [5] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @[8] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [16] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	      NetMonItem @[11] { };
	      NetMonItem @[12] { };
	      NetMonItem @[13] { };
	      NetMonItem @[14] { };
	      NetMonItem @[15] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
    };
    Program_Group @.gp[2] = [1] { 
      Program @[0] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [0] {
	};

	ProgVar_List @.vars = [0] {
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [0] {
	};
      };
    };
    Program_Group @.gp[3] = [7] { 
      Program @[0] { 
	ProgObjList @.objs = [1] {
	  RndSeed @[0] { };
	};

	ProgType_List @.types = [1] {
	  DynEnumType @[0] { 
	    DynEnumItem_List @.enums = [2] {
	      DynEnumItem @[0] { };
	      DynEnumItem @[1] { };
	    };
	  };
	};

	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [7] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [5] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  IfGuiPrompt @[4] { 
	    ProgEl_List @.yes_code = [2] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	      PrintExpr @[1] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [7] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[2] { };
	  If @[3] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	      PrintExpr @[1] { };
	    };
	  };
	  AssignExpr @[4] { };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfBreak @[2] { };
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [5] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [9] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetDataLoop @[4] { 
	    ProgEl_List @.loop_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  IfElse @[5] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[7] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[8] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @[2] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [7] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  WhileLoop @[2] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  If @[4] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  ProgramCall @[5] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[6] { };
	};
      };
      Program @[3] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[4] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  If @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  If @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  NetUpdateView @[9] { };
	};
      };
      Program @[4] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetUpdateView @[1] { };
	};
      };
      Program @[5] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [3] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [8] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
    };
  };

  DataViewer_List @.viewers = [1] {
    MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
   };

      ToolBar_List @.toolbars = [1] {
	ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @[0] { };
     };
};
      };

      FrameViewer_List @.frames = [3] {
	tabBrowseViewer @[0] { };
	PanelViewer @[1] { };
	T3DataViewer @[2] { 
	  T3DataViewFrame_List @.frames = [5] {
	    T3DataViewFrame @[0] { 
	      T3DataView_List @.children = [1] {
		NetView @[0] { 
		  ScaleRange_List @.scale_ranges = [5] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		    ScaleRange @[2] { };
		    ScaleRange @[3] { };
		    ScaleRange @[4] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[1] { 
	      T3DataView_List @.children = [2] {
		GridTableView @[0] { 
		  T3DataView_List @.children = [11] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		    GridColView @[3] { };
		    GridColView @[4] { };
		    GridColView @[5] { };
		    GridColView @[6] { };
		    GridColView @[7] { };
		    GridColView @[8] { };
		    GridColView @[9] { };
		    GridColView @[10] { };
		  };
		};
		GridTableView @[1] { 
		  T3DataView_List @.children = [5] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		    GridColView @[3] { };
		    GridColView @[4] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[2] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [11] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[3] { 
	      T3DataView_List @.children = [2] {
		GridTableView @[0] { 
		  T3DataView_List @.children = [3] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		  };
		};
		GridTableView @[1] { 
		  T3DataView_List @.children = [3] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[4] { 
	      T3DataView_List @.children = [2] {
		NetView @[0] { 
		  ScaleRange_List @.scale_ranges = [4] {
		    ScaleRange @[0] { };
		    ScaleRange @[1] { };
		    ScaleRange @[2] { };
		    ScaleRange @[3] { };
		  };
		};
		GraphTableView @[1] { 
		  T3DataView_List @.children = [8] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	  };
	};
      };

      DockViewer_List @.docks = [1] {
	ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @[0] { };
	    UserDataItem @[1] { };
	    UserDataItem @[2] { };
	    UserDataItem @[3] { };
	    UserDataItem @[4] { };
	    UserDataItem @[5] { };
     };
};
      };
    };
  };

  Network_Group @.networks = [2] {
    LeabraNetwork @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
	UserDataItem @[6] { };
	UserDataItem @[7] { };
	UserDataItem @[8] { };
	UserDataItem @[9] { };
	UserDataItem @[10] { };
	UserDataItem @[11] { };
	UserDataItem @[12] { };
	UserDataItem @[13] { };
	UserDataItem @[14] { };
	UserDataItem @[15] { };
	UserDataItem @[16] { };
	UserDataItem @[17] { };
	UserDataItem @[18] { };
   };

      BaseSpec_Group @.specs = [4] {
	LeabraConSpec @[0] { 
	  BaseSpec_Group @.children = [5] {
	    LeabraConSpec @[0] { 
	      BaseSpec_Group @.children = [5] {
		LeabraConSpec @[0] { 
		  BaseSpec_Group @.children = [1] {
		    LeabraConSpec @[0] { 
		      BaseSpec_Group @.children = [0] {
		      };

		      Schedule @.lrate_sched = [0] {
		      };
		    };
		  };

		  Schedule @.lrate_sched = [0] {
		  };
		};
		LeabraConSpec @[1] { 
		  BaseSpec_Group @.children = [0] {
		  };

		  Schedule @.lrate_sched = [0] {
		  };
		};
		LeabraConSpec @[2] { 
		  BaseSpec_Group @.children = [0] {
		  };

		  Schedule @.lrate_sched = [0] {
		  };
		};
		LeabraConSpec @[3] { 
		  BaseSpec_Group @.children = [0] {
		  };

		  Schedule @.lrate_sched = [0] {
		  };
		};
		LeabraConSpec @[4] { 
		  BaseSpec_Group @.children = [0] {
		  };

		  Schedule @.lrate_sched = [0] {
		  };
		};
	      };

	      Schedule @.lrate_sched = [0] {
	      };
	    };
	    LeabraConSpec @[1] { 
	      BaseSpec_Group @.children = [0] {
	      };

	      Schedule @.lrate_sched = [0] {
	      };
	    };
	    LeabraConSpec @[2] { 
	      BaseSpec_Group @.children = [0] {
	      };

	      Schedule @.lrate_sched = [0] {
	      };
	    };
	    LeabraConSpec @[3] { 
	      BaseSpec_Group @.children = [0] {
	      };

	      Schedule @.lrate_sched = [0] {
	      };
	    };
	    LeabraConSpec @[4] { 
	      BaseSpec_Group @.children = [0] {
	      };

	      Schedule @.lrate_sched = [0] {
	      };
	    };
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	};
	LeabraBiasSpec @[1] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	};
	LeabraUnitSpec @[2] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	};
	LeabraLayerSpec @[3] { 
	  BaseSpec_Group @.children = [4] {
	    LeabraLayerSpec @[0] { 
	      BaseSpec_Group @.children = [0] {
	      };
	    };
	    LeabraLayerSpec @[1] { 
	      BaseSpec_Group @.children = [0] {
	      };
	    };
	    LeabraLayerSpec @[2] { 
	      BaseSpec_Group @.children = [0] {
	      };
	    };
	    LeabraLayerSpec @[3] { 
	      BaseSpec_Group @.children = [0] {
	      };
	    };
	  };
	};
	BaseSpec_Group @.gp[0] = [10] { 
	  FullPrjnSpec @[0] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  OneToOnePrjnSpec @[1] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  UniformRndPrjnSpec @[2] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  UniformRndPrjnSpec @[3] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  TesselPrjnSpec @[4] { 
	    BaseSpec_Group @.children = [0] {
	    };

	    TessEl_List @.send_offs = [16] {
	      TessEl @[0] { };
	      TessEl @[1] { };
	      TessEl @[2] { };
	      TessEl @[3] { };
	      TessEl @[4] { };
	      TessEl @[5] { };
	      TessEl @[6] { };
	      TessEl @[7] { };
	      TessEl @[8] { };
	      TessEl @[9] { };
	      TessEl @[10] { };
	      TessEl @[11] { };
	      TessEl @[12] { };
	      TessEl @[13] { };
	      TessEl @[14] { };
	      TessEl @[15] { };
	    };
	  };
	  SymmetricPrjnSpec @[5] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  GpOneToOnePrjnSpec @[6] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  PolarRndPrjnSpec @[7] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  UniformRndPrjnSpec @[8] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  UniformRndPrjnSpec @[9] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	};
      };

      Layer_Group @.layers = [6] {
	LeabraLayer @[0] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [0] {
	    LeabraUnit_Group @.gp[0] = [12] { 
	    };
	    LeabraUnit_Group @.gp[1] = [12] { 
	    };
	    LeabraUnit_Group @.gp[2] = [12] { 
	    };
	    LeabraUnit_Group @.gp[3] = [12] { 
	    };
	    LeabraUnit_Group @.gp[4] = [12] { 
	    };
	    LeabraUnit_Group @.gp[5] = [12] { 
	    };
	    LeabraUnit_Group @.gp[6] = [12] { 
	    };
	    LeabraUnit_Group @.gp[7] = [12] { 
	    };
	    LeabraUnit_Group @.gp[8] = [12] { 
	    };
	    LeabraUnit_Group @.gp[9] = [12] { 
	    };
	    LeabraUnit_Group @.gp[10] = [12] { 
	    };
	    LeabraUnit_Group @.gp[11] = [12] { 
	    };
	  };
	};
	LeabraLayer @[1] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [0] {
	    LeabraUnit_Group @.gp[0] = [12] { 
	    };
	    LeabraUnit_Group @.gp[1] = [12] { 
	    };
	    LeabraUnit_Group @.gp[2] = [12] { 
	    };
	    LeabraUnit_Group @.gp[3] = [12] { 
	    };
	    LeabraUnit_Group @.gp[4] = [12] { 
	    };
	    LeabraUnit_Group @.gp[5] = [12] { 
	    };
	    LeabraUnit_Group @.gp[6] = [12] { 
	    };
	    LeabraUnit_Group @.gp[7] = [12] { 
	    };
	    LeabraUnit_Group @.gp[8] = [12] { 
	    };
	    LeabraUnit_Group @.gp[9] = [12] { 
	    };
	    LeabraUnit_Group @.gp[10] = [12] { 
	    };
	    LeabraUnit_Group @.gp[11] = [12] { 
	    };
	  };
	};
	LeabraLayer @[2] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [625] {
	  };
	};
	LeabraLayer @[3] { 
	  Projection_Group @.projections = [3] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	    LeabraPrjn @[2] { };
	  };

	  Unit_Group @.units = [240] {
	  };
	};
	LeabraLayer @[4] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [0] {
	    LeabraUnit_Group @.gp[0] = [32] { 
	    };
	    LeabraUnit_Group @.gp[1] = [32] { 
	    };
	    LeabraUnit_Group @.gp[2] = [32] { 
	    };
	    LeabraUnit_Group @.gp[3] = [32] { 
	    };
	    LeabraUnit_Group @.gp[4] = [32] { 
	    };
	    LeabraUnit_Group @.gp[5] = [32] { 
	    };
	    LeabraUnit_Group @.gp[6] = [32] { 
	    };
	    LeabraUnit_Group @.gp[7] = [32] { 
	    };
	    LeabraUnit_Group @.gp[8] = [32] { 
	    };
	    LeabraUnit_Group @.gp[9] = [32] { 
	    };
	    LeabraUnit_Group @.gp[10] = [32] { 
	    };
	    LeabraUnit_Group @.gp[11] = [32] { 
	    };
	  };
	};
	LeabraLayer @[5] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [0] {
	    LeabraUnit_Group @.gp[0] = [12] { 
	    };
	    LeabraUnit_Group @.gp[1] = [12] { 
	    };
	    LeabraUnit_Group @.gp[2] = [12] { 
	    };
	    LeabraUnit_Group @.gp[3] = [12] { 
	    };
	    LeabraUnit_Group @.gp[4] = [12] { 
	    };
	    LeabraUnit_Group @.gp[5] = [12] { 
	    };
	    LeabraUnit_Group @.gp[6] = [12] { 
	    };
	    LeabraUnit_Group @.gp[7] = [12] { 
	    };
	    LeabraUnit_Group @.gp[8] = [12] { 
	    };
	    LeabraUnit_Group @.gp[9] = [12] { 
	    };
	    LeabraUnit_Group @.gp[10] = [12] { 
	    };
	    LeabraUnit_Group @.gp[11] = [12] { 
	    };
	  };
	};
      };

      NetViewObj_Group @.view_objs = [0] {
      };
    };
    LeabraNetwork @[1] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
	UserDataItem @[6] { };
	UserDataItem @[7] { };
	UserDataItem @[8] { };
	UserDataItem @[9] { };
	UserDataItem @[10] { };
	UserDataItem @[11] { };
	UserDataItem @[12] { };
	UserDataItem @[13] { };
	UserDataItem @[14] { };
	UserDataItem @[15] { };
	UserDataItem @[16] { };
	UserDataItem @[17] { };
	UserDataItem @[18] { };
   };

      BaseSpec_Group @.specs = [4] {
	LeabraConSpec @[0] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraConSpec @[0] { 
	      BaseSpec_Group @.children = [0] {
	      };

	      Schedule @.lrate_sched = [0] {
	      };
	    };
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	};
	LeabraBiasSpec @[1] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	};
	LeabraUnitSpec @[2] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	};
	LeabraLayerSpec @[3] { 
	  BaseSpec_Group @.children = [2] {
	    LeabraLayerSpec @[0] { 
	      BaseSpec_Group @.children = [0] {
	      };
	    };
	    LeabraLayerSpec @[1] { 
	      BaseSpec_Group @.children = [0] {
	      };
	    };
	  };
	};
	BaseSpec_Group @.gp[0] = [9] { 
	  FullPrjnSpec @[0] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  OneToOnePrjnSpec @[1] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  UniformRndPrjnSpec @[2] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  UniformRndPrjnSpec @[3] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  TesselPrjnSpec @[4] { 
	    BaseSpec_Group @.children = [0] {
	    };

	    TessEl_List @.send_offs = [16] {
	      TessEl @[0] { };
	      TessEl @[1] { };
	      TessEl @[2] { };
	      TessEl @[3] { };
	      TessEl @[4] { };
	      TessEl @[5] { };
	      TessEl @[6] { };
	      TessEl @[7] { };
	      TessEl @[8] { };
	      TessEl @[9] { };
	      TessEl @[10] { };
	      TessEl @[11] { };
	      TessEl @[12] { };
	      TessEl @[13] { };
	      TessEl @[14] { };
	      TessEl @[15] { };
	    };
	  };
	  SymmetricPrjnSpec @[5] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  GpOneToOnePrjnSpec @[6] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  PolarRndPrjnSpec @[7] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	  UniformRndPrjnSpec @[8] { 
	    BaseSpec_Group @.children = [0] {
	    };
	  };
	};
      };

      Layer_Group @.layers = [3] {
	LeabraLayer @[0] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [12] {
	    LeabraUnit @[0] { 
	      RecvCons_List @.recv = [0] {
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[1] { 
	      RecvCons_List @.recv = [0] {
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[2] { 
	      RecvCons_List @.recv = [0] {
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[3] { 
	      RecvCons_List @.recv = [0] {
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[4] { 
	      RecvCons_List @.recv = [0] {
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[5] { 
	      RecvCons_List @.recv = [0] {
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[6] { 
	      RecvCons_List @.recv = [0] {
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[7] { 
	      RecvCons_List @.recv = [0] {
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[8] { 
	      RecvCons_List @.recv = [0] {
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[9] { 
	      RecvCons_List @.recv = [0] {
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[10] { 
	      RecvCons_List @.recv = [0] {
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[11] { 
	      RecvCons_List @.recv = [0] {
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	  };
	};
	LeabraLayer @[1] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [32] {
	    LeabraUnit @[0] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[1] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[2] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[3] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[4] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[5] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[6] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[7] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[8] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[9] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[10] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[11] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[12] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[13] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[14] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[15] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[16] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[17] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[18] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[19] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[20] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[21] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[22] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[23] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[24] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[25] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[26] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[27] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[28] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[29] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[30] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	    LeabraUnit @[31] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [2] {
		LeabraRecvCons @[0] { 
	  [12]		};
		LeabraRecvCons @[1] { 
	  [12]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [12]		};
	      };
	    };
	  };
	};
	LeabraLayer @[2] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [12] {
	    LeabraUnit @[0] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [1] {
		LeabraRecvCons @[0] { 
	  [32]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[1] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [1] {
		LeabraRecvCons @[0] { 
	  [32]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[2] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [1] {
		LeabraRecvCons @[0] { 
	  [32]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[3] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [1] {
		LeabraRecvCons @[0] { 
	  [32]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[4] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [1] {
		LeabraRecvCons @[0] { 
	  [32]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[5] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [1] {
		LeabraRecvCons @[0] { 
	  [32]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[6] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [1] {
		LeabraRecvCons @[0] { 
	  [32]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[7] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [1] {
		LeabraRecvCons @[0] { 
	  [32]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[8] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [1] {
		LeabraRecvCons @[0] { 
	  [32]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[9] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [1] {
		LeabraRecvCons @[0] { 
	  [32]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[10] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [1] {
		LeabraRecvCons @[0] { 
	  [32]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	    LeabraUnit @[11] { 
       UserDataItem_List @*(.user_data_) {
       };

	      RecvCons_List @.recv = [1] {
		LeabraRecvCons @[0] { 
	  [32]		};
	      };

	      SendCons_List @.send = [1] {
		LeabraSendCons @[0] { 
	  [32]		};
	      };
	    };
	  };
	};
      };

      NetViewObj_Group @.view_objs = [0] {
      };
    };
  };
};
LeabraProject .projects[0] {
 name="Project_0";
 desc="


";
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 wiki_url {
  sync=0;
  wiki=;
  url=;
 };
 templates {
  name=;
  el_typ=taBase;
  el_def=0;
 };
 docs {
  name=;
  el_typ=taDoc;
  el_def=0;
  taDoc @[0] {
   name="ProjectDocs";
   desc=;
   auto_open=1;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head></head>
<body>
= Exploration of the Hippocampal Model =

* GENERAL USAGE NOTE: To start, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open this documentation in a separate window that you can more easily come back to.  Alternatively, you can just always return to this document by clicking on the <code>ProjectDocs</code> tab at the top of the middle panel.

In this exploration of the hippocampus model, we will use the same basic AB--AC paired associates list learning paradigm as we used in the standard cortical network previously (ab_ac_interference.proj).  The hippocampus should be able to learn the new paired associates (AC) without causing undue levels of interference to the original AB associations, and it should be able to do this much more rapidly than was possible in the cortical model.

You should recognize the overall network structure as that shown in Figure 9.12 in the text. 

* Click on the [[.T3Tab.InputData]] tab to see how the AB training and testing lists are configured -- the A pattern is the first three groups of units (at the bottom of each pattern, going left-right, bottom-top), and the B pattern is the next three, which you can see most easily in the Test_AB patterns where these are blank (to be filled in by hippocampal pattern completion).  The 2nd half of the pattern is the list context (as in the ab_ac_interference.proj project).

Let's observe the process of activation spreading through the network during training.  

* Do <code>Train: Init, Step Trial</code> in the control panel.

You will see an input pattern from the AB training set presented to the network.  As expected, during training, all three parts of the input pattern are presented (A,B,Context). You will see that activation flows from the <code>EC_in</code> layer through the DG, CA3 pathway and simultaneously to the CA1, so that the sparse CA3 representation can be associated with the invertible CA1 representation, which will give back this very <code>EC_in</code> pattern if later recalled by the CA3.

At the end of settling, you should notice that all of the active units in the network are outlined with a yellow line.  They will remain selected during the settling on the next pattern, allowing you to easily compare the representations for subsequent events.

* <code>Step Trial</code> through several more (but fewer than 10) training events, and observe the relative amount of pattern overlap between subsequent events on the <code>EC_in</code>, <code>DG</code>, <code>CA3</code>, and <code>CA1</code> layers.

You should have observed that the <code>EC_in</code> patterns overlap the most, with <code>CA1</code> overlapping the next most, then <code>CA3</code>, and finally <code>DG</code> overlaps the least (if you are having difficulty seeing the outline, you can increase the Bord Width value in the network control panel).

<hr>

'''Question 9.5''' <em>Using the explanation given earlier in the text about the pattern separation mechanism, and the relative levels of activity on these different layers, explain the overlap results.</em>

<hr>

Each epoch of training consists of the 10 list items, followed by testing on 3 sets of testing events.  The first testing set contains the AB list items, the second contains the AC list items, and the third contains a set of novel <em>lure</em> items to make sure the network is treating novel items as such.  The network automatically switches over to testing after each pass through the 10 training events.

* Now do <code>Step Epoch</code> -- this will step through the rest of the training epoch and then into the testing of the patterns.

You should observe that the input pattern presented to the network is missing the second associate as we saw earlier (the B or C item in the pair), and that as the activation proceeds through the network, it fills in this missing part in the EC layers (pattern completion) as a result of activation flowing up through the
<code>CA3</code>, and back via the <code>CA1</code> to the <code>EC_out</code>.

* Once testing has finished (we'll step through the testing process in greater detail in a moment), click on the [[.T3Tab.TrialTestOutputData]] view tab to see the overall results.

You should see in the bottom view a line for each testing trial (30 lines total, 10 for each type of test: AB, AC, lure), and in the top a display of the summary results for each type of test (3 lines).  The far right <code>rmbr</code> column indicates whether the network successfully remembered the missing item, according to criteria placed on the stim_err_on and stim_err_off data shown in the other two columns.  You should see mostly 1's for the AB items (total % correct shown in the epoch data at the top -- should be 80% or higher), and all 0's for the other two tests.  Thus, the network has successfully recalled most of the items after a single episode of learning!

The <code>stim_err_on</code> values indicate the proportion of units that were erroneously activated in just the B units of <code>EC_out</code>  (i.e., active but not supposed to be).  The <code>stim_err_off</code> shows the proportion of units that were erroneously </em>not</em> activated in <code>EC_out</code> (i.e., not active but should have been).  When both of these measures are near zero, then the network has correctly recalled the original pattern, which is what you should see for the AB items.  A large <code>stim_err_on</code> indicates that the network has <em>confabulated</em> or otherwise recalled a different pattern than the cued one.  A large <code>stim_err_off</code> indicates that the network has failed to recall much of  the probe pattern.  We set a threshold of .34 on both of these measures for the remember criterion (rmbr) -- if the err is below this value on both measures, the network is considered to have remembered enough to output the correct response (assuming a distributed representation of associate items, such that the entire pattern need not be recalled).

In general, you should see stim_err_off being larger than stim_err_on -- the hippocampal network is \"high threshold\", which accords with extensive data on recollection and recall (see Norman & O'Reilly, 2003 for more discussion). 

<hr>

'''Question 9.6''' <em>Report the total proportion of <code>rmbr</code> responses from your TrialTestOutputData view for the AB, AC, and Lure tests.</em>

<hr>

== Detailed Testing: Pattern Completion in Action ==

Now, we will go through the testing process in detail by stepping one cycle at a time.

* Click back on the [[.T3Tab.HippoNet]] view panel, then do <code>Test: Init, Step CycTst</code> -- continue to Step as you observe the network activations filling in from the partial input pattern (you can click the 5 or 10 step button to make each step click cover more cycles).

You will see the first testing event in the <code>EC_in</code> layer, which corresponds to a studied A stimulus, an empty gap where the B stimulus would be, and a list context representation for the AB list.  Since this was studied, it is likely that the network will be able to complete the pattern, which you should be able to see visually as the gap in the EC activation pattern gets filled in.  You should be able to see that the missing elements are filled in as a result of CA3 units getting activated.  Interestingly, you should also see that as these missing elements start to get filled in, the EC_out activation feeds back to EC_in and thus back through the DG and CA3 layers, which can result in a shifting of the overall activation pattern.  This is a \"whole loop\" pattern completion process that complements the much quicker (often hard to see) pattern completion within CA3 itself due to lateral excitatory connections among CA3 units.

== Testing Graph ==

Another way to visualize the testing data is in graphical form, showing individual test patterns plotted in stim_err_off and stim_err_on coordinates.

* Click on [[.T3Tab.TrialTestOutputDataGraph]], and then do [[Test: Init, Run]] -- you will see points get filled in on the display for each testing item.

When testing finishes, the AB items will be colored light blue, AC are darker grey, and lures are yellow.  You should see a clear distinction, with AB items located in the lower left-hand corner, and the other points on the right.  This graph also makes clear the asymmetry between stim_err_off (larger) and stim_err_on (smaller).

== AC Training and Interference ==

If your network got 90% or better on the first epoch of training on AB, then you can move on to training AC items.  If it did not, then do Train: Step until it does so (shouldn't take more than 3 epochs or so).  Make sure that the train step proc is still set to LeabraEpoch so that you are stepping by an entire training epoch at a time.

* Set <code>input_data</code> to <code>Train_AC</code> instead of <code>Train_AB</code>, then do Train: Step Epoch again, and look at the [[.T3Tab.TrialTestOutputData]] results for AC.  Do Step until your network reaches 90% or better on the AC items (2nd row in the view at the top) -- this should take from 1-3 further epochs.

<hr>

'''Question 9.7 (a)''' <em>Again report the total number of <code>rmbr</code> responses from your TrialTestOutputData for the AB, AC, and Lure tests, after each epoch of training on AC.</em> '''(b)''' <em>Do you find evidence of any interference from learning AC on the testing results for AB?</em> '''(c)''' <em>Compare and contrast the performance of this hippocampus model with that of the cortical model and the human data of this same basic task from section 9.2.2 (AB-AC List Learning), paying particular attention to both interference and number of epochs necessary to learn.</em>

<hr>

* When you are done with this simulation, you can either close this project in preparation for loading the next project, or you can quit completely from the simulator.

</body>
</html>
";
   html_text="<html><head></head><body>
<h1> Exploration of the Hippocampal Model </h1>
<p>
</p><ul><li> GENERAL USAGE NOTE: To start, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open this documentation in a separate window that you can more easily come back to.  Alternatively, you can just always return to this document by clicking on the <code>ProjectDocs</code> tab at the top of the middle panel.
</li></ul>
In this exploration of the hippocampus model, we will use the same basic AB--AC paired associates list learning paradigm as we used in the standard cortical network previously (ab_ac_interference.proj).  The hippocampus should be able to learn the new paired associates (AC) without causing undue levels of interference to the original AB associations, and it should be able to do this much more rapidly than was possible in the cortical model.
<p>
You should recognize the overall network structure as that shown in Figure 9.12 in the text. 
</p><p>
</p><ul><li> Click on the <a href=\"ta:.T3Tab.InputData\">InputData</a> tab to see how the AB training and testing lists are configured -- the A pattern is the first three groups of units (at the bottom of each pattern, going left-right, bottom-top), and the B pattern is the next three, which you can see most easily in the Test_AB patterns where these are blank (to be filled in by hippocampal pattern completion).  The 2nd half of the pattern is the list context (as in the ab_ac_interference.proj project).
</li></ul>
Let's observe the process of activation spreading through the network during training.  
<p>
</p><ul><li> Do <code>Train: Init, Step Trial</code> in the control panel.
</li></ul>
You will see an input pattern from the AB training set presented to the network.  As expected, during training, all three parts of the input pattern are presented (A,B,Context). You will see that activation flows from the <code>EC_in</code> layer through the DG, CA3 pathway and simultaneously to the CA1, so that the sparse CA3 representation can be associated with the invertible CA1 representation, which will give back this very <code>EC_in</code> pattern if later recalled by the CA3.
<p>
At the end of settling, you should notice that all of the active units in the network are outlined with a yellow line.  They will remain selected during the settling on the next pattern, allowing you to easily compare the representations for subsequent events.
</p><p>
</p><ul><li> <code>Step Trial</code> through several more (but fewer than 10) training events, and observe the relative amount of pattern overlap between subsequent events on the <code>EC_in</code>, <code>DG</code>, <code>CA3</code>, and <code>CA1</code> layers.
</li></ul>
You should have observed that the <code>EC_in</code> patterns overlap the most, with <code>CA1</code> overlapping the next most, then <code>CA3</code>, and finally <code>DG</code> overlaps the least (if you are having difficulty seeing the outline, you can increase the Bord Width value in the network control panel).
<p>
</p><hr>
<p>
 <b>Question 9.5</b>  <em>Using the explanation given earlier in the text about the pattern separation mechanism, and the relative levels of activity on these different layers, explain the overlap results.</em>
</p><p>
</p><hr>
<p>
Each epoch of training consists of the 10 list items, followed by testing on 3 sets of testing events.  The first testing set contains the AB list items, the second contains the AC list items, and the third contains a set of novel <em>lure</em> items to make sure the network is treating novel items as such.  The network automatically switches over to testing after each pass through the 10 training events.
</p><p>
</p><ul><li> Now do <code>Step Epoch</code> -- this will step through the rest of the training epoch and then into the testing of the patterns.
</li></ul>
You should observe that the input pattern presented to the network is missing the second associate as we saw earlier (the B or C item in the pair), and that as the activation proceeds through the network, it fills in this missing part in the EC layers (pattern completion) as a result of activation flowing up through the
<code>CA3</code>, and back via the <code>CA1</code> to the <code>EC_out</code>.
<p>
</p><ul><li> Once testing has finished (we'll step through the testing process in greater detail in a moment), click on the <a href=\"ta:.T3Tab.TrialTestOutputData\">TrialTestOutputData</a> view tab to see the overall results.
</li></ul>
You should see in the bottom view a line for each testing trial (30 lines total, 10 for each type of test: AB, AC, lure), and in the top a display of the summary results for each type of test (3 lines).  The far right <code>rmbr</code> column indicates whether the network successfully remembered the missing item, according to criteria placed on the stim_err_on and stim_err_off data shown in the other two columns.  You should see mostly 1's for the AB items (total % correct shown in the epoch data at the top -- should be 80% or higher), and all 0's for the other two tests.  Thus, the network has successfully recalled most of the items after a single episode of learning!
<p>
The <code>stim_err_on</code> values indicate the proportion of units that were erroneously activated in just the B units of <code>EC_out</code>  (i.e., active but not supposed to be).  The <code>stim_err_off</code> shows the proportion of units that were erroneously not activated in <code>EC_out</code> (i.e., not active but should have been).  When both of these measures are near zero, then the network has correctly recalled the original pattern, which is what you should see for the AB items.  A large <code>stim_err_on</code> indicates that the network has <em>confabulated</em> or otherwise recalled a different pattern than the cued one.  A large <code>stim_err_off</code> indicates that the network has failed to recall much of  the probe pattern.  We set a threshold of .34 on both of these measures for the remember criterion (rmbr) -- if the err is below this value on both measures, the network is considered to have remembered enough to output the correct response (assuming a distributed representation of associate items, such that the entire pattern need not be recalled).
</p><p>
In general, you should see stim_err_off being larger than stim_err_on -- the hippocampal network is \"high threshold\", which accords with extensive data on recollection and recall (see Norman &amp; O'Reilly, 2003 for more discussion). 
</p><p>
</p><hr>
<p>
 <b>Question 9.6</b>  <em>Report the total proportion of <code>rmbr</code> responses from your TrialTestOutputData view for the AB, AC, and Lure tests.</em>
</p><p>
</p><hr>
<p>
</p><h2> Detailed Testing: Pattern Completion in Action </h2>
<p>
Now, we will go through the testing process in detail by stepping one cycle at a time.
</p><p>
</p><ul><li> Click back on the <a href=\"ta:.T3Tab.HippoNet\">HippoNet</a> view panel, then do <code>Test: Init, Step CycTst</code> -- continue to Step as you observe the network activations filling in from the partial input pattern (you can click the 5 or 10 step button to make each step click cover more cycles).
</li></ul>
You will see the first testing event in the <code>EC_in</code> layer, which corresponds to a studied A stimulus, an empty gap where the B stimulus would be, and a list context representation for the AB list.  Since this was studied, it is likely that the network will be able to complete the pattern, which you should be able to see visually as the gap in the EC activation pattern gets filled in.  You should be able to see that the missing elements are filled in as a result of CA3 units getting activated.  Interestingly, you should also see that as these missing elements start to get filled in, the EC_out activation feeds back to EC_in and thus back through the DG and CA3 layers, which can result in a shifting of the overall activation pattern.  This is a \"whole loop\" pattern completion process that complements the much quicker (often hard to see) pattern completion within CA3 itself due to lateral excitatory connections among CA3 units.
<p>
</p><h2> Testing Graph </h2>
<p>
Another way to visualize the testing data is in graphical form, showing individual test patterns plotted in stim_err_off and stim_err_on coordinates.
</p><p>
</p><ul><li> Click on <a href=\"ta:.T3Tab.TrialTestOutputDataGraph\">TrialTestOutputDataGraph</a>, and then do <a href=\"Test: Init, Run\">Test: Init, Run</a> -- you will see points get filled in on the display for each testing item.
</li></ul>
When testing finishes, the AB items will be colored light blue, AC are darker grey, and lures are yellow.  You should see a clear distinction, with AB items located in the lower left-hand corner, and the other points on the right.  This graph also makes clear the asymmetry between stim_err_off (larger) and stim_err_on (smaller).
<p>
</p><h2> AC Training and Interference </h2>
<p>
If your network got 90% or better on the first epoch of training on AB, then you can move on to training AC items.  If it did not, then do Train: Step until it does so (shouldn't take more than 3 epochs or so).  Make sure that the train step proc is still set to LeabraEpoch so that you are stepping by an entire training epoch at a time.
</p><p>
</p><ul><li> Set <code>input_data</code> to <code>Train_AC</code> instead of <code>Train_AB</code>, then do Train: Step Epoch again, and look at the <a href=\"ta:.T3Tab.TrialTestOutputData\">TrialTestOutputData</a> results for AC.  Do Step until your network reaches 90% or better on the AC items (2nd row in the view at the top) -- this should take from 1-3 further epochs.
</li></ul>
<hr>
<p>
 <b>Question 9.7 (a)</b>  <em>Again report the total number of <code>rmbr</code> responses from your TrialTestOutputData for the AB, AC, and Lure tests, after each epoch of training on AC.</em>  <b>(b)</b>  <em>Do you find evidence of any interference from learning AC on the testing results for AB?</em>  <b>(c)</b>  <em>Compare and contrast the performance of this hippocampus model with that of the cortical model and the human data of this same basic task from section 9.2.2 (AB-AC List Learning), paying particular attention to both interference and number of epochs necessary to learn.</em>
</p><p>
</p><hr>
<p>
</p><ul><li> When you are done with this simulation, you can either close this project in preparation for loading the next project, or you can quit completely from the simulator.
</li></ul>


</body></html>";
  };
  taDoc @[1] {
   name="ParameterNotes";
   desc=;
   auto_open=0;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head></head>
<body>
== Parameter Tuning Notes for Hippo Model ==

* Measure avg_netin_rel on projections to determine actual relative netinput contributions, and avg_neti.max to dial netinputs into standard .5 range

* Needed to mess with abs and rel scales to get everything into a reasonable balance etc.

* Key param: CA1_EC_out_wt_scale.abs -- this is what sets the \"high threshold\" nature of the system.

* Also, testing EC_in_CA1_tst guy rel wt is .5 (1 is fine, 2 is not as good) -- allows some influence of raw input on CA1 -- in principle the competition between CA3 misfit with EC_in->CA1 actual would produce some negation effects for untrained stimuli.  Definitely need this \"switch\" for encoding vs. recall as in Hasselmo's work. 

* With Mossy strength of 10 (rel), gets about 80% of netiin -- can make stronger or not -- could also try modulating this with testing but probably not a great idea.

</body>
</html>
";
   html_text="<html>
<head></head>
<body>
<h2> Parameter Tuning Notes for Hippo Model </h2>
<P>
<ul><li> Measure avg_netin_rel on projections to determine actual relative netinput contributions, and avg_neti.max to dial netinputs into standard .5 range
</ul>
<ul><li> Needed to mess with abs and rel scales to get everything into a reasonable balance etc.
</ul>
<ul><li> Key param: CA1_EC_out_wt_scale.abs -- this is what sets the \"high threshold\" nature of the system.
</ul>
<ul><li> Also, testing EC_in_CA1_tst guy rel wt is .5 (1 is fine, 2 is not as good) -- allows some influence of raw input on CA1 -- in principle the competition between CA3 misfit with EC_in->CA1 actual would produce some negation effects for untrained stimuli.  Definitely need this \"switch\" for encoding vs. recall as in Hasselmo's work. 
</ul>
<ul><li> With Mossy strength of 10 (rel), gets about 80% of netiin -- can make stronger or not -- could also try modulating this with testing but probably not a great idea.
</ul>
</body>
</html>
";
  };
  taDoc @[2] {
   name="ProjectTodo";
   desc=;
   auto_open=0;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head></head>
<body>
== TODO list for hippocampus project ==

* Do GenBitPatternData programs as general resource for people to use
* Use this new version to make A the left hand 3 slots, B the right hand 3 slots, and the rest is context.  Could potentially increase A,B and decrease context now that model is working better.

</body>
</html>
";
   html_text="<html>
<head></head>
<body>
<h2> TODO list for hippocampus project </h2>
<P>
<ul><li> Do GenBitPatternData programs as general resource for people to use
<li> Use this new version to make A the left hand 3 slots, B the right hand 3 slots, and the rest is context.  Could potentially increase A,B and decrease context now that model is working better.
</ul>
</body>
</html>
";
  };
  taDoc @[3] {
   name="WikiDoc";
   desc=;
   auto_open=0;
   web_doc=1;
   wiki="CCN";
   url="CECN1_Hippocampus";
   full_url="http://grey.colorado.edu/CompCogNeuro/index.php/CECN1_Hippocampus";
   text_size=1;
   text="<html>
<head></head>
<body>
== Enter Title Here ==
</body>
</html>
";
   html_text="<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\" dir=\"ltr\"><head>
		<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">
		<meta http-equiv=\"Content-Style-Type\" content=\"text/css\">
		<meta name=\"generator\" content=\"MediaWiki 1.16alpha-wmf\">
		<meta name=\"keywords\" content=\"CECN1 Hippocampus,CECN1 Projects,Emergent,.T3Tab.InputData,.PanelTab.ControlPanel,.T3Tab.TrialTestOutputData,.T3Tab.HippoNet,.T3Tab.TrialTestOutputDataGraph,Test: Init, Run\">
		<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
		<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/CompCogNeuro/opensearch_desc.php\" title=\"Computational Cognitive Neuroscience Wiki (en)\">
		<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Computational Cognitive Neuroscience Wiki RSS Feed\" href=\"/CompCogNeuro/index.php?title=Special:RecentChanges&amp;feed=rss\">
		<link rel=\"alternate\" type=\"application/atom+xml\" title=\"Computational Cognitive Neuroscience Wiki Atom Feed\" href=\"/CompCogNeuro/index.php?title=Special:RecentChanges&amp;feed=atom\">
		<title>CECN1 Hippocampus - Computational Cognitive Neuroscience Wiki</title>
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/common/shared.css?233z\" type=\"text/css\" media=\"screen\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/common/commonPrint.css?233z\" type=\"text/css\" media=\"print\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/main.css?233z\" type=\"text/css\" media=\"screen\">
		<!--[if lt IE 5.5000]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE50Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<!--[if IE 5.5000]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE55Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<!--[if IE 6]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE60Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<!--[if IE 7]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE70Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000\" type=\"text/css\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000\" type=\"text/css\" media=\"print\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=MediaWiki:monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000\" type=\"text/css\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=-&amp;action=raw&amp;maxage=18000&amp;gen=css\" type=\"text/css\">
		<!--[if lt IE 7]><script type=\"text/javascript\" src=\"/CompCogNeuro/skins/common/IEFixes.js?233z\"></script>
		<meta http-equiv=\"imagetoolbar\" content=\"no\" /><![endif]-->

		<script type=\"text/javascript\">/*<![CDATA[*/
		var skin = \"monobook\";
		var stylepath = \"/CompCogNeuro/skins\";
		var wgArticlePath = \"/CompCogNeuro/index.php/$1\";
		var wgScriptPath = \"/CompCogNeuro\";
		var wgScript = \"/CompCogNeuro/index.php\";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = \"http://grey.colorado.edu\";
		var wgCanonicalNamespace = \"\";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = \"CECN1_Hippocampus\";
		var wgTitle = \"CECN1 Hippocampus\";
		var wgAction = \"view\";
		var wgArticleId = \"121\";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = \"en\";
		var wgContentLanguage = \"en\";
		var wgBreakFrames = false;
		var wgCurRevisionId = 395;
		var wgVersion = \"1.16alpha-wmf\";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = [\"\", \"\"];
		var wgDigitTransformTable = [\"\", \"\"];
		var wgMainPageTitle = \"Main Page\";
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		var wgFCKEditorDir = \"extensions/FCKeditor/fckeditor/\";
		var wgFCKEditorExtDir = \"extensions/FCKeditor\";
		var wgFCKEditorToolbarSet = \"Wiki\";
		var wgFCKEditorHeight = \"0\";
		/*]]>*/</script>

		<script type=\"text/javascript\" src=\"/CompCogNeuro/skins/common/wikibits.js?233z\"><!-- wikibits js --></script><style type=\"text/css\">@import \"/CompCogNeuro/skins/monobook/KHTMLFixes.css\";</style>
		<!-- Head Scripts -->
		<script type=\"text/javascript\" src=\"/CompCogNeuro/skins/common/ajax.js?233z\"></script>
		<script type=\"text/javascript\" src=\"/CompCogNeuro/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook\"><!-- site js --></script>
	<style type=\"text/css\">@import \"/CompCogNeuro/extensions/Collection/collection/Gadget-navpop.css?2\";</style></head><body class=\"mediawiki ltr ns-0 ns-subject page-CECN1_Hippocampus skin-monobook\">
	<div id=\"globalWrapper\">
		<div id=\"column-content\">
	<div id=\"content\">
		<a name=\"top\" id=\"top\"></a>
				<h1 id=\"firstHeading\" class=\"firstHeading\">CECN1 Hippocampus</h1>
		<div id=\"bodyContent\">
			<h3 id=\"siteSub\">From Computational Cognitive Neuroscience Wiki</h3>
			<div id=\"contentSub\"></div>
									<div id=\"jump-to-nav\">Jump to: <a href=\"#column-one\">navigation</a>, <a href=\"#searchInput\">search</a></div>			<!-- start content -->
			<table id=\"toc\" class=\"toc\" summary=\"Contents\"><tbody><tr><td><div id=\"toctitle\"><h2>Contents</h2> <span class=\"toctoggle\">[<a id=\"togglelink\" class=\"internal\" href=\"javascript:toggleToc()\">hide</a>]</span></div>
<ul>
<li class=\"toclevel-1\"><a href=\"#Hippocampus_and_the_AB-AC_Task\"><span class=\"tocnumber\">1</span> <span class=\"toctext\">Hippocampus and the AB-AC Task</span></a></li>
<li class=\"toclevel-1\"><a href=\"#Project_Documentation\"><span class=\"tocnumber\">2</span> <span class=\"toctext\">Project Documentation</span></a>
<ul>
<li class=\"toclevel-2\"><a href=\"#Detailed_Testing:_Pattern_Completion_in_Action\"><span class=\"tocnumber\">2.1</span> <span class=\"toctext\">Detailed Testing: Pattern Completion in Action</span></a></li>
<li class=\"toclevel-2\"><a href=\"#Testing_Graph\"><span class=\"tocnumber\">2.2</span> <span class=\"toctext\">Testing Graph</span></a></li>
<li class=\"toclevel-2\"><a href=\"#AC_Training_and_Interference\"><span class=\"tocnumber\">2.3</span> <span class=\"toctext\">AC Training and Interference</span></a></li>
</ul>
</li>
</ul>
</td></tr></tbody></table><script type=\"text/javascript\"> if (window.showTocToggle) { var tocShowText = \"show\"; var tocHideText = \"hide\"; showTocToggle(); } </script>
<a name=\"Hippocampus_and_the_AB-AC_Task\" id=\"Hippocampus_and_the_AB-AC_Task\"></a><h1> <span class=\"mw-headline\"> Hippocampus and the AB-AC Task </span></h1>
<ul><li> The project file: <a href=\"/mediawiki/sites/CompCogNeuro/images/b/b7/hip.proj\" class=\"internal\" title=\"hip.proj\">hip.proj</a> (click and Save As to download, then open in <a href=\"/CompCogNeuro/index.php/Emergent\" title=\"Emergent\">Emergent</a>
</li></ul>
<p>Back to <a href=\"/CompCogNeuro/index.php/CECN1_Projects\" title=\"CECN1 Projects\">CECN1 Projects</a>
</p>
<a name=\"Project_Documentation\" id=\"Project_Documentation\"></a><h1> <span class=\"mw-headline\"> Project Documentation </span></h1>
<p>(note: this is a literal copy from the simulation documentation -- it contains links that will not work within the wiki)
</p><p><br>
</p>
<ul><li> GENERAL USAGE NOTE: To start, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open this documentation in a separate window that you can more easily come back to.  Alternatively, you can just always return to this document by clicking on the <code>ProjectDocs</code> tab at the top of the middle panel.
</li></ul>
<p>In this exploration of the hippocampus model, we will use the same basic AB--AC paired associates list learning paradigm as we used in the standard cortical network previously (ab_ac_interference.proj).  The hippocampus should be able to learn the new paired associates (AC) without causing undue levels of interference to the original AB associations, and it should be able to do this much more rapidly than was possible in the cortical model.
</p><p>You should recognize the overall network structure as that shown in Figure 9.12 in the text. 
</p>
<ul><li> Click on the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.InputData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.InputData (page does not exist)\">.T3Tab.InputData</a> tab to see how the AB training and testing lists are configured -- the A pattern is the first three groups of units (at the bottom of each pattern, going left-right, bottom-top), and the B pattern is the next three, which you can see most easily in the Test_AB patterns where these are blank (to be filled in by hippocampal pattern completion).  The 2nd half of the pattern is the list context (as in the ab_ac_interference.proj project).
</li></ul>
<p>Let's observe the process of activation spreading through the network during training.  
</p>
<ul><li> Do <code>Train: Init, Step</code> in the control panel.
</li></ul>
<p>You will see an input pattern from the AB training set presented to the network.  As expected, during training, all three parts of the input pattern are presented (A,B,Context). You will see that activation flows from the <code>EC_in</code> layer through the DG, CA3 pathway and simultaneously to the CA1, so that the sparse CA3 representation can be associated with the invertible CA1 representation, which will give back this very <code>EC_in</code> pattern if later recalled by the CA3.
</p><p>At the end of settling, you should notice that all of the active units in the network are outlined with a yellow line.  They will remain selected during the settling on the next pattern, allowing you to easily compare the representations for subsequent events.
</p>
<ul><li> <code>Step</code> through several more (but fewer than 10) training events, and observe the relative amount of pattern overlap between subsequent events on the <code>EC_in</code>, <code>DG</code>, <code>CA3</code>, and <code>CA1</code> layers.
</li></ul>
<p>You should have observed that the <code>EC_in</code> patterns overlap the most, with <code>CA1</code> overlapping the next most, then <code>CA3</code>, and finally <code>DG</code> overlaps the least (if you are having difficulty seeing the outline, you can increase the Bord Width value in the network control panel).
</p>
<hr>
<p><b>Question 9.5</b> <em>Using the explanation given earlier in the text about the pattern separation mechanism, and the relative levels of activity on these different layers, explain the overlap results.</em>
</p>
<hr>
<p>Each epoch of training consists of the 10 list items, followed by testing on 3 sets of testing events.  The first testing set contains the AB list items, the second contains the AC list items, and the third contains a set of novel <em>lure</em> items to make sure the network is treating novel items as such.  The network automatically switches over to testing after each pass through the 10 training events.
</p>
<ul><li> Set <code>train step prog</code> in the master <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\">.PanelTab.ControlPanel</a> to <code>LeabraEpoch</code>, and then do Step again -- this will step through the rest of the training epoch and then into the testing of the patterns.
</li></ul>
<p>You should observe that the input pattern presented to the network is missing the second associate as we saw earlier (the B or C item in the pair), and that as the activation proceeds through the network, it fills in this missing part in the EC layers (pattern completion) as a result of activation flowing up through the
<code>CA3</code>, and back via the <code>CA1</code> to the <code>EC_out</code>.
</p>
<ul><li> Once testing has finished (we'll step through the testing process in greater detail in a moment), click on the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.TrialTestOutputData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.TrialTestOutputData (page does not exist)\">.T3Tab.TrialTestOutputData</a> view tab to see the overall results.
</li></ul>
<p>You should see in the bottom view a line for each testing trial (30 lines total, 10 for each type of test: AB, AC, lure), and in the top a display of the summary results for each type of test (3 lines).  The far right <code>rmbr</code> column indicates whether the network successfully remembered the missing item, according to criteria placed on the stim_err_on and stim_err_off data shown in the other two columns.  You should see mostly 1's for the AB items (total&nbsp;% correct shown in the epoch data at the top -- should be 80% or higher), and all 0's for the other two tests.  Thus, the network has successfully recalled most of the items after a single episode of learning!
</p><p>The <code>stim_err_on</code> values indicate the proportion of units that were erroneously activated in just the B units of <code>EC_out</code>  (i.e., active but not supposed to be).  The <code>stim_err_off</code> shows the proportion of units that were erroneously &lt;/em&gt;not&lt;/em&gt; activated in <code>EC_out</code> (i.e., not active but should have been).  When both of these measures are near zero, then the network has correctly recalled the original pattern, which is what you should see for the AB items.  A large <code>stim_err_on</code> indicates that the network has <em>confabulated</em> or otherwise recalled a different pattern than the cued one.  A large <code>stim_err_off</code> indicates that the network has failed to recall much of  the probe pattern.  We set a threshold of .34 on both of these measures for the remember criterion (rmbr) -- if the err is below this value on both measures, the network is considered to have remembered enough to output the correct response (assuming a distributed representation of associate items, such that the entire pattern need not be recalled).
</p><p>In general, you should see stim_err_off being larger than stim_err_on -- the hippocampal network is \"high threshold\", which accords with extensive data on recollection and recall (see Norman &amp; O'Reilly, 2003 for more discussion). 
</p>
<hr>
<p><b>Question 9.6</b> <em>Report the total proportion of <code>rmbr</code> responses from your TrialTestOutputData view for the AB, AC, and Lure tests.</em>
</p>
<hr>
<a name=\"Detailed_Testing:_Pattern_Completion_in_Action\" id=\"Detailed_Testing:_Pattern_Completion_in_Action\"></a><h2> <span class=\"mw-headline\"> Detailed Testing: Pattern Completion in Action </span></h2>
<p>Now, we will go through the testing process in detail by stepping one cycle at a time.
</p>
<ul><li> Click back on the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.HippoNet&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.HippoNet (page does not exist)\">.T3Tab.HippoNet</a> view panel, then set <code>test step prog</code> to <code>LeabraCycleTest</code>, and do <code>Test: Init, Step</code> -- continue to Step as you observe the network activations filling in from the partial input pattern.
</li></ul>
<p>You will see the first testing event in the <code>EC_in</code> layer, which corresponds to a studied A stimulus, an empty gap where the B stimulus would be, and a list context representation for the AB list.  Since this was studied, it is likely that the network will be able to complete the pattern, which you should be able to see visually as the gap in the EC activation pattern gets filled in.  You should be able to see that the missing elements are filled in as a result of CA3 units getting activated.  Interestingly, you should also see that as these missing elements start to get filled in, the EC_out activation feeds back to EC_in and thus back through the DG and CA3 layers, which can result in a shifting of the overall activation pattern.  This is a \"whole loop\" pattern completion process that complements the much quicker (often hard to see) pattern completion within CA3 itself due to lateral excitatory connections among CA3 units.
</p>
<a name=\"Testing_Graph\" id=\"Testing_Graph\"></a><h2> <span class=\"mw-headline\"> Testing Graph </span></h2>
<p>Another way to visualize the testing data is in graphical form, showing individual test patterns plotted in stim_err_off and stim_err_on coordinates.
</p>
<ul><li> Click on <a href=\"/CompCogNeuro/index.php?title=.T3Tab.TrialTestOutputDataGraph&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.TrialTestOutputDataGraph (page does not exist)\">.T3Tab.TrialTestOutputDataGraph</a>, and then do <a href=\"/CompCogNeuro/index.php?title=Test:_Init,_Run&amp;action=edit&amp;redlink=1\" class=\"new\" title=\"Test: Init, Run (page does not exist)\">Test: Init, Run</a> -- you will see points get filled in on the display for each testing item.
</li></ul>
<p>When testing finishes, the AB items will be colored light blue, AC are darker grey, and lures are yellow.  You should see a clear distinction, with AB items located in the lower left-hand corner, and the other points on the right.  This graph also makes clear the asymmetry between stim_err_off (larger) and stim_err_on (smaller).
</p>
<a name=\"AC_Training_and_Interference\" id=\"AC_Training_and_Interference\"></a><h2> <span class=\"mw-headline\"> AC Training and Interference </span></h2>
<p>If your network got 90% or better on the first epoch of training on AB, then you can move on to training AC items.  If it did not, then do Train: Step until it does so (shouldn't take more than 3 epochs or so).  Make sure that the train step proc is still set to LeabraEpoch so that you are stepping by an entire training epoch at a time.
</p>
<ul><li> Set <code>input_data</code> to <code>Train_AC</code> instead of <code>Train_AB</code>, then do Train: Step again, and look at the <a href=\"/CompCogNeuro/index.php?title=.T3Tab.TrialTestOutputData&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".T3Tab.TrialTestOutputData (page does not exist)\">.T3Tab.TrialTestOutputData</a> results for AC.  Do Step until your network reaches 90% or better on the AC items (2nd row in the view at the top) -- this should take from 1-3 further epochs.
</li></ul>
<hr>
<p><b>Question 9.7 (a)</b> <em>Again report the total number of <code>rmbr</code> responses from your TrialTestOutputData for the AB, AC, and Lure tests, after each epoch of training on AC.</em> <b>(b)</b> <em>Do you find evidence of any interference from learning AC on the testing results for AB?</em> <b>(c)</b> <em>Compare and contrast the performance of this hippocampus model with that of the cortical model and the human data of this same basic task from section 9.2.2 (AB-AC List Learning), paying particular attention to both interference and number of epochs necessary to learn.</em>
</p>
<hr>
<ul><li> When you are done with this simulation, you can either close this project in preparation for loading the next project, or you can quit completely from the simulator.
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 6/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key compcogneuro:pcache:idhash:121-0!1!0!!en!2!edit=0 and timestamp 20090904102909 -->
<div class=\"printfooter\">
Retrieved from \"<a href=\"http://grey.colorado.edu/CompCogNeuro/index.php/CECN1_Hippocampus\">http://grey.colorado.edu/CompCogNeuro/index.php/CECN1_Hippocampus</a>\"</div>
						<!-- end content -->
						<div class=\"visualClear\"></div>
		</div>
	</div>
		</div>
		<div id=\"column-one\">
	<div id=\"p-cactions\" class=\"portlet\">
		<h5>Views</h5>
		<div class=\"pBody\">
			<ul lang=\"en\" xml:lang=\"en\">
	
				 <li id=\"ca-nstab-main\" class=\"selected\"><a href=\"/CompCogNeuro/index.php/CECN1_Hippocampus\" title=\"View the content page [ctrl-alt-c]\" accesskey=\"c\">Page</a></li>
				 <li id=\"ca-talk\" class=\"new\"><a href=\"/CompCogNeuro/index.php?title=Talk:CECN1_Hippocampus&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [ctrl-alt-t]\" accesskey=\"t\">Discussion</a></li>
				 <li id=\"ca-viewsource\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Hippocampus&amp;action=edit\" title=\"This page is protected.
You can view its source [ctrl-alt-e]\" accesskey=\"e\">View source</a></li>
				 <li id=\"ca-history\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Hippocampus&amp;action=history\" title=\"Past revisions of this page [ctrl-alt-h]\" accesskey=\"h\">History</a></li>			</ul>
		</div>
	</div>
	<div class=\"portlet\" id=\"p-personal\">
		<h5>Personal tools</h5>
		<div class=\"pBody\">
			<ul lang=\"en\" xml:lang=\"en\">
				<li id=\"pt-login\"><a href=\"/CompCogNeuro/index.php?title=Special:UserLogin&amp;returnto=CECN1_Hippocampus\" title=\"You are encouraged to log in; however, it is not mandatory [ctrl-alt-o]\" accesskey=\"o\">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class=\"portlet\" id=\"p-logo\">
		<a style=\"background-image: url(/mediawiki/sites//CompCogNeuro/logo.png);\" href=\"/CompCogNeuro/index.php/Main_Page\" title=\"Visit the main page [ctrl-alt-z]\" accesskey=\"z\"></a>
	</div>
	<script type=\"text/javascript\"> if (window.isMSIE55) fixalpha(); </script>
	<div class=\"generated-sidebar portlet\" id=\"p-navigation\">
		<h5 lang=\"en\" xml:lang=\"en\">Navigation</h5>
		<div class=\"pBody\">
			<ul>
				<li id=\"n-mainpage-description\"><a href=\"/CompCogNeuro/index.php/Main_Page\">Main Page</a></li>
				<li id=\"n-portal\"><a href=\"/CompCogNeuro/index.php/Project:Community_Portal\" title=\"About the project, what you can do, where to find things\">Community portal</a></li>
				<li id=\"n-currentevents\"><a href=\"/CompCogNeuro/index.php/Project:Current_events\" title=\"Find background information on current events\">Current events</a></li>
				<li id=\"n-recentchanges\"><a href=\"/CompCogNeuro/index.php/Special:RecentChanges\" title=\"The list of recent changes in the wiki [ctrl-alt-r]\" accesskey=\"r\">Recent changes</a></li>
				<li id=\"n-randompage\"><a href=\"/CompCogNeuro/index.php/Special:Random\" title=\"Load a random page [ctrl-alt-x]\" accesskey=\"x\">Random page</a></li>
				<li id=\"n-help\"><a href=\"/CompCogNeuro/index.php/Help:Contents\" title=\"The place to find out\">Help</a></li>
			</ul>
		</div>
	</div>
	<div id=\"p-search\" class=\"portlet\">
		<h5 lang=\"en\" xml:lang=\"en\"><label for=\"searchInput\">Search</label></h5>
		<div id=\"searchBody\" class=\"pBody\">
			<form action=\"/CompCogNeuro/index.php\" id=\"searchform\"><div>
				<input type=\"hidden\" name=\"title\" value=\"Special:Search\">
				<input id=\"searchInput\" name=\"search\" type=\"text\" title=\"Search Computational Cognitive Neuroscience Wiki [ctrl-alt-f]\" accesskey=\"f\" value=\"\">
				<input type=\"submit\" name=\"go\" class=\"searchButton\" id=\"searchGoButton\" value=\"Go\" title=\"Go to a page with this exact name if exists\">&nbsp;
				<input type=\"submit\" name=\"fulltext\" class=\"searchButton\" id=\"mw-searchButton\" value=\"Search\" title=\"Search the pages for this text\">
			</div></form>
		</div>
	</div>
	<div class=\"portlet\" id=\"p-tb\">
		<h5 lang=\"en\" xml:lang=\"en\">Toolbox</h5>
		<div class=\"pBody\">
			<ul>
				<li id=\"t-whatlinkshere\"><a href=\"/CompCogNeuro/index.php/Special:WhatLinksHere/CECN1_Hippocampus\" title=\"List of all wiki pages that link here [ctrl-alt-j]\" accesskey=\"j\">What links here</a></li>
				<li id=\"t-recentchangeslinked\"><a href=\"/CompCogNeuro/index.php/Special:RecentChangesLinked/CECN1_Hippocampus\" title=\"Recent changes in pages linked from this page [ctrl-alt-k]\" accesskey=\"k\">Related changes</a></li>
<li id=\"t-upload\"><a href=\"/CompCogNeuro/index.php/Special:Upload\" title=\"Upload files [ctrl-alt-u]\" accesskey=\"u\">Upload file</a></li>
<li id=\"t-specialpages\"><a href=\"/CompCogNeuro/index.php/Special:SpecialPages\" title=\"List of all special pages [ctrl-alt-q]\" accesskey=\"q\">Special pages</a></li>
				<li id=\"t-print\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Hippocampus&amp;printable=yes\" rel=\"alternate\" title=\"Printable version of this page [ctrl-alt-p]\" accesskey=\"p\">Printable version</a></li>				<li id=\"t-permalink\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Hippocampus&amp;oldid=395\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-download-as-pdf\"><a href=\"/CompCogNeuro/index.php?title=Special:Book/render_article/&amp;arttitle=CECN1+Hippocampus&amp;oldid=395&amp;writer=rl\" rel=\"nofollow\">PDF version</a></li>			</ul>
		</div>
	</div>
	<div class=\"generated-sidebar portlet\" id=\"p-coll-create_a_book\">
		<h5 lang=\"en\" xml:lang=\"en\">Create a book</h5>
		<div class=\"pBody\">
<ul id=\"collectionPortletList\"><li id=\"coll-add_page\"><a href=\"/CompCogNeuro/index.php?title=Special:Book/add_article/&amp;arttitle=CECN1+Hippocampus&amp;oldid=0\" title=\"Add the current wiki page to your book\" onclick=\"collectionCall('AddArticle', ['removepage', wgNamespaceNumber, wgTitle, 0]); return false;\" rel=\"nofollow\">Add page to book</a></li><li id=\"coll-help_collections\"><a href=\"/CompCogNeuro/index.php/Help:Books\" title=\"Show help about the book tool\">Books help</a></li></ul><script type=\"text/javascript\">/*<![CDATA[*/
		var wgCollectionAddRemoveSate = \"addpage\";
		/*]]>*/</script>
<script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/portlet.js?2\"></script><script type=\"text/javascript\">/*<![CDATA[*/
		var wgCollectionNavPopupJSURL = \"/CompCogNeuro/extensions/Collection/collection/Gadget-popups.js?2\";
		var wgCollectionNavPopupCSSURL = \"/CompCogNeuro/extensions/Collection/collection/Gadget-navpop.css?2\";
		var wgCollectionAddPageText = \"Add linked wiki page to your book\";
		var wgCollectionAddCategoryText = \"Add wiki pages in linked category to your book\";
		var wgCollectionRemovePageText = \"Remove linked wiki page from your book\";
		var wgCollectionPopupHelpText = \"To deactivate this feature click \\\"Clear book\\\" in the \\\"Create a book\\\" box\";
		var wgCollectionArticleNamespaces = [0, 1, 2, 3, 4, 5, 8, 9, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111];
		/*]]>*/</script>
<script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/json2.js?2\"></script><script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/popupcheck.js?2\"></script><script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/popup.js\"></script><script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/Gadget-popups.js?2\"></script>		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class=\"visualClear\"></div>
			<div id=\"footer\">
				<div id=\"f-poweredbyico\"><a href=\"http://www.mediawiki.org/\"><img src=\"/CompCogNeuro/skins/common/images/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\"></a></div>
			<ul id=\"f-list\">
					<li id=\"lastmod\"> This page was last modified on 7 January 2009, at 09:06.</li>
					<li id=\"viewcount\">This page has been accessed 888 times.</li>
					<li id=\"privacy\"><a href=\"/CompCogNeuro/index.php/Project:Privacy_policy\" title=\"Project:Privacy policy\">Privacy policy</a></li>
					<li id=\"about\"><a href=\"/CompCogNeuro/index.php/Project:About\" title=\"Project:About\">About Computational Cognitive Neuroscience Wiki</a></li>
					<li id=\"disclaimer\"><a href=\"/CompCogNeuro/index.php/Project:General_disclaimer\" title=\"Project:General disclaimer\">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type=\"text/javascript\">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served in 0.223 secs. -->
</body></html>";
  };
 };
 wizards {
  name=;
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_1";
   auto_open=0;
   n_layers=3;
   layer_cfg {
    name=;
    el_typ=LayerWizEl;
    el_def=0;
    LayerWizEl @[0] {
     name="Input";
     n_units=25;
     io_type=INPUT;
    };
    LayerWizEl @[1] {
     name="Hidden";
     n_units=25;
     io_type=HIDDEN;
    };
    LayerWizEl @[2] {
     name="Output";
     n_units=25;
     io_type=OUTPUT;
    };
   };
   connectivity=BIDIRECTIONAL;
   default_net_type=LeabraNetwork;
  };
 };
 edits {
  name=;
  el_typ=SelectEdit;
  el_def=0;
  SelectEdit @[0] {
   name="ControlPanel";
   auto_edit=1;
   desc="Control panel for Hippocampus Simulation";
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="input_data";
     desc=" object pointer value -- this is not the object itself, just a pointer to it -- object must exist somewhere. if it is in this program's .objs, then the name will be automatically set";
     cust_desc=0;
     base=.projects[0].programs.gp[0][0].args[1]$$;
     mbr=ProgVar::object_val;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[1] {
     label="train cycle updt_view";
     desc=" boolean value";
     cust_desc=0;
     base=.projects[0].programs.gp[0][4].vars[0]$$;
     mbr=ProgVar::bool_val;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[2] {
     label="test cycle updt_view";
     desc=" boolean value";
     cust_desc=0;
     base=.projects[0].programs.gp[1][4].vars[0]$$;
     mbr=ProgVar::bool_val;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem_Group @.gp[0] {
     name="Net Data";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      label="HippoNet trial";
      desc=" trial counter: number of external input patterns that have been presented in the current epoch (updated by program)";
      cust_desc=0;
      base=.projects[0].networks[0]$$;
      mbr=Network::trial;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[1] {
      label="HippoNet trial name";
      desc=" name associated with the current trial (e.g., name of input pattern, typically set by a LayerWriter)";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=Network::trial_name;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[2] {
      label="HippoNet minus cycles";
      desc=" cycles to settle in the minus phase -- this is the typical settling time statistic to record";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=LeabraNetwork::minus_cycles;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[3] {
      label="HippoNet epoch";
      desc=" epoch counter: number of times a complete set of training patterns has been presented (updated by program)";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=Network::epoch;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Train: Init";
     desc=" set the program state back to the beginning";
     cust_desc=0;
     base=.projects[0].programs.gp[0][0]$$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects[0].programs.gp[0][0]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[2] {
     label="Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects[0].programs.gp[0][0]$;
     mth=Program::Step_Gui;
    };
    EditMthItem @[3] {
     label="Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects[0].programs.gp[0][0]$;
     mth=Program::Stop;
    };
    EditMthItem @[4] {
     label="Test: Init";
     desc=" set the program state back to the beginning";
     cust_desc=0;
     base=.projects[0].programs.gp[1][0]$$;
     mth=Program::Init;
    };
    EditMthItem @[5] {
     label="Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects[0].programs.gp[1][0]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[6] {
     label="Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects[0].programs.gp[1][0]$;
     mth=Program::Step_Gui;
    };
    EditMthItem @[7] {
     label="Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects[0].programs.gp[1][0]$;
     mth=Program::Stop;
    };
   };
  };
  SelectEdit @[1] {
   name="HippoParams";
   auto_edit=0;
   desc="special tuning parameters, mainly for balance of inputs into different layers";
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="EC_in_CA1 wt scale";
     desc=" scale effective weight values to control the overall strength of a projection -- relative shifts balance among different projections, while absolute is a direct multipler<br>  abs: [Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)<br>  rel:  [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)<br>  sem extra: [Default: 2]  standard-error-of-the-mean (SEM) extra value to add to the average expected number of active connections to receive, for purposes of computing scaling factors with partial connectivity -- for 25% layer activity, binomial SEM = sqrt(p(1-p)) = .43, so 3x = 1.3 so 2 is a reasonable default, but can use different value to make scaling work better<br>  old: [Default: false]  use old way of computing netinput scaling factors -- please convert projects to using the new way (as of version 5.1.0) -- only affects connections with < full connectivity: does a much better job of normalizing these cases, and you should be able to just have abs/rel = 1 with no diff_act_pct on layer and it should just work -- see wiki for full docs and equations";
     cust_desc=0;
     base=.projects[0].networks[0].specs[0].children[0].children[0]$$;
     mbr=LeabraConSpec::wt_scale;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[1] {
     label="EC_in_CA1_tst wt scale";
     desc=" scale effective weight values to control the overall strength of a projection -- relative shifts balance among different projections, while absolute is a direct multipler<br>  abs: [Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)<br>  rel:  [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)<br>  sem extra: [Default: 2]  standard-error-of-the-mean (SEM) extra value to add to the average expected number of active connections to receive, for purposes of computing scaling factors with partial connectivity -- for 25% layer activity, binomial SEM = sqrt(p(1-p)) = .43, so 3x = 1.3 so 2 is a reasonable default, but can use different value to make scaling work better<br>  old: [Default: false]  use old way of computing netinput scaling factors -- please convert projects to using the new way (as of version 5.1.0) -- only affects connections with < full connectivity: does a much better job of normalizing these cases, and you should be able to just have abs/rel = 1 with no diff_act_pct on layer and it should just work -- see wiki for full docs and equations";
     cust_desc=0;
     base=.projects[0].networks[0].specs[0].children[0].children[0].children[0]$$;
     mbr=LeabraConSpec::wt_scale;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[2] {
     label="CA1_EC_out wt scale";
     desc=" scale effective weight values to control the overall strength of a projection -- relative shifts balance among different projections, while absolute is a direct multipler<br>  abs: [Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)<br>  rel:  [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)<br>  sem extra: [Default: 2]  standard-error-of-the-mean (SEM) extra value to add to the average expected number of active connections to receive, for purposes of computing scaling factors with partial connectivity -- for 25% layer activity, binomial SEM = sqrt(p(1-p)) = .43, so 3x = 1.3 so 2 is a reasonable default, but can use different value to make scaling work better<br>  old: [Default: false]  use old way of computing netinput scaling factors -- please convert projects to using the new way (as of version 5.1.0) -- only affects connections with < full connectivity: does a much better job of normalizing these cases, and you should be able to just have abs/rel = 1 with no diff_act_pct on layer and it should just work -- see wiki for full docs and equations";
     cust_desc=0;
     base=.projects[0].networks[0].specs[0].children[0].children[1]$$;
     mbr=LeabraConSpec::wt_scale;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[3] {
     label="EC_out_EC_in wt scale";
     desc=" scale effective weight values to control the overall strength of a projection -- relative shifts balance among different projections, while absolute is a direct multipler<br>  abs: [Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)<br>  rel:  [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)<br>  sem extra: [Default: 2]  standard-error-of-the-mean (SEM) extra value to add to the average expected number of active connections to receive, for purposes of computing scaling factors with partial connectivity -- for 25% layer activity, binomial SEM = sqrt(p(1-p)) = .43, so 3x = 1.3 so 2 is a reasonable default, but can use different value to make scaling work better<br>  old: [Default: false]  use old way of computing netinput scaling factors -- please convert projects to using the new way (as of version 5.1.0) -- only affects connections with < full connectivity: does a much better job of normalizing these cases, and you should be able to just have abs/rel = 1 with no diff_act_pct on layer and it should just work -- see wiki for full docs and equations";
     cust_desc=0;
     base=.projects[0].networks[0].specs[0].children[0].children[3]$$;
     mbr=LeabraConSpec::wt_scale;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[4] {
     label="Input_EC_in wt scale";
     desc=" scale effective weight values to control the overall strength of a projection -- relative shifts balance among different projections, while absolute is a direct multipler<br>  abs: [Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)<br>  rel:  [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)<br>  sem extra: [Default: 2]  standard-error-of-the-mean (SEM) extra value to add to the average expected number of active connections to receive, for purposes of computing scaling factors with partial connectivity -- for 25% layer activity, binomial SEM = sqrt(p(1-p)) = .43, so 3x = 1.3 so 2 is a reasonable default, but can use different value to make scaling work better<br>  old: [Default: false]  use old way of computing netinput scaling factors -- please convert projects to using the new way (as of version 5.1.0) -- only affects connections with < full connectivity: does a much better job of normalizing these cases, and you should be able to just have abs/rel = 1 with no diff_act_pct on layer and it should just work -- see wiki for full docs and equations";
     cust_desc=0;
     base=.projects[0].networks[0].specs[0].children[0].children[4]$$;
     mbr=LeabraConSpec::wt_scale;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[5] {
     label="Mossy wt scale";
     desc=" scale effective weight values to control the overall strength of a projection -- relative shifts balance among different projections, while absolute is a direct multipler<br>  abs: [Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)<br>  rel:  [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)<br>  sem extra: [Default: 2]  standard-error-of-the-mean (SEM) extra value to add to the average expected number of active connections to receive, for purposes of computing scaling factors with partial connectivity -- for 25% layer activity, binomial SEM = sqrt(p(1-p)) = .43, so 3x = 1.3 so 2 is a reasonable default, but can use different value to make scaling work better<br>  old: [Default: false]  use old way of computing netinput scaling factors -- please convert projects to using the new way (as of version 5.1.0) -- only affects connections with < full connectivity: does a much better job of normalizing these cases, and you should be able to just have abs/rel = 1 with no diff_act_pct on layer and it should just work -- see wiki for full docs and equations";
     cust_desc=0;
     base=.projects[0].networks[0].specs[0].children[2]$$;
     mbr=LeabraConSpec::wt_scale;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[6] {
     label="CA3_CA3 wt scale";
     desc=" scale effective weight values to control the overall strength of a projection -- relative shifts balance among different projections, while absolute is a direct multipler<br>  abs: [Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)<br>  rel:  [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)<br>  sem extra: [Default: 2]  standard-error-of-the-mean (SEM) extra value to add to the average expected number of active connections to receive, for purposes of computing scaling factors with partial connectivity -- for 25% layer activity, binomial SEM = sqrt(p(1-p)) = .43, so 3x = 1.3 so 2 is a reasonable default, but can use different value to make scaling work better<br>  old: [Default: false]  use old way of computing netinput scaling factors -- please convert projects to using the new way (as of version 5.1.0) -- only affects connections with < full connectivity: does a much better job of normalizing these cases, and you should be able to just have abs/rel = 1 with no diff_act_pct on layer and it should just work -- see wiki for full docs and equations";
     cust_desc=0;
     base=.projects[0].networks[0].specs[0].children[3]$$;
     mbr=LeabraConSpec::wt_scale;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[7] {
     label="CA3_CA1 wt scale";
     desc=" scale effective weight values to control the overall strength of a projection -- relative shifts balance among different projections, while absolute is a direct multipler<br>  abs: [Default: 1]  absolute scaling (not subject to normalization: directly multiplies weight values)<br>  rel:  [Default: 1] relative scaling that shifts balance between different projections (subject to normalization across all other projections into unit)<br>  sem extra: [Default: 2]  standard-error-of-the-mean (SEM) extra value to add to the average expected number of active connections to receive, for purposes of computing scaling factors with partial connectivity -- for 25% layer activity, binomial SEM = sqrt(p(1-p)) = .43, so 3x = 1.3 so 2 is a reasonable default, but can use different value to make scaling work better<br>  old: [Default: false]  use old way of computing netinput scaling factors -- please convert projects to using the new way (as of version 5.1.0) -- only affects connections with < full connectivity: does a much better job of normalizing these cases, and you should be able to just have abs/rel = 1 with no diff_act_pct on layer and it should just work -- see wiki for full docs and equations";
     cust_desc=0;
     base=.projects[0].networks[0].specs[0].children[4]$$;
     mbr=LeabraConSpec::wt_scale;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[8] {
     label="UnitSpec_0 dt";
     desc=" time constants (rate of updating): membrane potential (vm) and net input (net)<br>  integ: [Default: 1;0.5;0.001;0.0005]  overall rate constant for numerical integration -- affected by the timescale of the parameters and numerical stability issues -- typically 1 cycle = 1 ms, and if using ms normed units, this should be 1, otherwise 0.001 (1 ms in seconds) or possibly .5 or .0005 if there are stability issues<br>  vm: [Default: 0.1:0.357]  membrane potential rate constant -- reflects the capacitance of the neuron in principle -- biological default for AeEx spiking model C = 281 pF = 2.81 normalized = .356 rate constant<br>  net: [Default: 0.7]  net input time constant -- how fast to update net input (damps oscillations) -- generally reflects time constants associated with synaptic channels which are not modeled in the most abstract rate code models (set to 1 for detailed spiking models with more realistic synaptic currents)<br>  midpoint: [Default: false]  use the midpoint method in computing the vm value -- better avoids oscillations and allows a larger dt.vm parameter to be used<br>  d vm max: [Default: 0.02;0.025;100]  maximum change in vm at any timestep (limits blowup) -- this is a crude but effective safety valve for numerical integration problems<br>  vm eq cyc: [Default: 0]  number of cycles to compute the vm as equilibirium potential given current inputs: set to 1 to quickly activate input layers; set to 100 to always use this computation<br>  vm eq dt: [Default: 1]  time constant for integrating the vm_eq values: how quickly to move toward the current eq value from previous vm value<br>  integ time:  1/integ rate constant = time constant for each cycle of updating for numerical integration<br>  vm time:  1/vm rate constant = time in cycles for vm to reach 1/e of asymptotic value<br>  net time:  1/net rate constant = time in cycles for net to reach 1/e of asymptotic value";
     cust_desc=0;
     base=.projects[0].networks[0].specs[2]$$;
     mbr=LeabraUnitSpec::dt;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[9] {
     label="ConSpec lrate";
     desc="[Default: 0.01;0.02]  [0.01 for std Leabra, .02 for CtLeabra] learning rate -- how fast do the weights change per experience";
     cust_desc=0;
     base=.projects[0].networks[0].specs[0]$$;
     mbr=LeabraConSpec::lrate;
     is_numeric=1;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[10] {
     label="ConSpec savg cor";
     desc=" for Hebbian and netinput computation: correction for sending average act levels (i.e., renormalization); also norm_con_n for normalizing netinput computation<br>  cor: [Default: 0.4:0.8]  proportion of correction to apply (0=none, 1=all, .5=half, etc)<br>  thresh: [Default: 0.001]  threshold of sending average activation below which learning does not occur (prevents learning when there is no input)<br>  norm con n: [Default: true]  WARNING: this is now obsolete and only used if wt_scale.old = true -- in normalizing netinput, divide by the actual number of connections (recv group n), not the overall number of units in the sending layer -- THIS SHOULD ALWAYS BE ON AND IS THE NEW DEFAULT";
     cust_desc=0;
     base=$.projects[0].networks[0].specs[0]$;
     mbr=LeabraConSpec::savg_cor;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[11] {
     label="HippoNet cycle max";
     desc="[Default: 60]  maximum number of cycles to settle for: note for CtLeabra_X/CAL this is overridden by phase specific settings by the settle process";
     cust_desc=0;
     base=$.projects[0].networks[0]$;
     mbr=LeabraNetwork::cycle_max;
     is_numeric=1;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
   };
  };
 };
 data {
  name=;
  el_typ=DataTable;
  el_def=0;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="Train_AB";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [10] "ab_0";"ab_1";"ab_2";"ab_3";"ab_4";"ab_5";"ab_6";"ab_7";"ab_8";"ab_9";
      };
     };
     float_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;3;2;6;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [4] ;;;;      };
      ar {
       name=;
	    [4 3 2 6 10] 0;0;0;1;0;0;1;0;1;0;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;1;0;0;0;
0;1;0;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;0;0;1;0;1;0;0;
1;0;0;0;0;0;1;0;0;1;
0;0;0;0;1;0;0;1;0;0;
0;1;0;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;1;0;0;0;0;1;1;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
1;0;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;1;0;0;0;
1;0;0;1;0;0;0;0;0;1;
0;1;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;1;
1;0;0;0;0;1;0;0;0;0;
1;0;0;0;1;0;1;0;0;0;
1;0;0;0;0;0;1;0;0;1;
0;0;0;1;0;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;0;0;1;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;0;1;0;0;0;0;
1;0;1;0;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;0;0;1;
1;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;1;0;1;0;0;
0;0;1;0;0;0;1;0;0;1;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
1;0;1;0;0;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
1;0;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;0;1;1;0;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
1;0;1;0;0;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;0;1;0;0;0;1;
0;0;1;0;0;0;1;0;1;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;1;0;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;0;1;0;
0;1;0;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
1;0;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;1;0;1;0;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;0;
0;0;0;1;0;0;1;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;1;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;0;0;0;1;
0;0;1;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;0;0;1;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;1;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;1;0;1;0;0;
0;0;0;1;0;0;0;1;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;1;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;1;0;0;0;1;0;0;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;1;0;0;1;0;0;0;0;
1;0;0;1;0;0;0;0;0;1;
1;0;0;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;0;1;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;1;
0;0;0;0;0;1;0;0;0;1;
0;0;1;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;1;0;0;0;1;0;1;
0;0;0;0;1;0;0;0;0;1;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;1;0;0;0;0;1;0;
0;0;0;1;0;1;0;0;0;1;
0;0;1;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;1;1;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;1;0;
0;0;1;0;0;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;1;0;
      };
     };
     float_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="EC_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;3;2;6;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [4] ;;;;      };
      ar {
       name=;
	    [4 3 2 6 10] 0;0;0;1;0;0;1;0;1;0;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;1;0;0;0;
0;1;0;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;0;0;1;0;1;0;0;
1;0;0;0;0;0;1;0;0;1;
0;0;0;0;1;0;0;1;0;0;
0;1;0;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;1;0;0;0;0;1;1;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
1;0;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;1;0;0;0;
1;0;0;1;0;0;0;0;0;1;
0;1;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;1;
1;0;0;0;0;1;0;0;0;0;
1;0;0;0;1;0;1;0;0;0;
1;0;0;0;0;0;1;0;0;1;
0;0;0;1;0;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;0;0;1;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;0;1;0;0;0;0;
1;0;1;0;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;0;0;1;
1;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;1;0;1;0;0;
0;0;1;0;0;0;1;0;0;1;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
1;0;1;0;0;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
1;0;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;0;1;1;0;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
1;0;1;0;0;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;0;1;0;0;0;1;
0;0;1;0;0;0;1;0;1;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;1;0;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;0;1;0;
0;1;0;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
1;0;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;1;0;1;0;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;0;
0;0;0;1;0;0;1;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;1;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;0;0;0;1;
0;0;1;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;0;0;1;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;1;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;1;0;1;0;0;
0;0;0;1;0;0;0;1;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;1;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;1;0;0;0;1;0;0;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;1;0;0;1;0;0;0;0;
1;0;0;1;0;0;0;0;0;1;
1;0;0;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;0;1;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;1;
0;0;0;0;0;1;0;0;0;1;
0;0;1;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;1;0;0;0;1;0;1;
0;0;0;0;1;0;0;0;0;1;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;1;0;0;0;0;1;0;
0;0;0;1;0;1;0;0;0;1;
0;0;1;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;1;1;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;1;0;
0;0;1;0;0;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;1;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="Train_AC";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [10] "ac_0";"ac_1";"ac_2";"ac_3";"ac_4";"ac_5";"ac_6";"ac_7";"ac_8";"ac_9";
      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;3;2;6;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [4] ;;;;      };
      ar {
       name=;
	    [4 3 2 6 10] 0;0;0;1;0;0;1;0;1;0;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;0;0;1;
1;0;0;0;0;1;0;0;0;0;
1;0;1;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;1;0;1;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;1;0;
1;0;0;0;0;1;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;1;0;0;
0;1;0;0;0;0;1;0;1;0;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;0;0;0;1;0;1;
0;0;0;0;0;1;1;0;0;0;
0;0;1;0;0;0;0;1;0;1;
0;0;0;0;1;0;0;0;1;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
1;0;0;0;0;0;0;1;0;0;
1;0;1;0;0;0;0;0;0;1;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;1;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;1;0;1;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;1;0;0;0;1;0;1;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
1;0;1;0;0;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;1;0;1;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;1;0;0;0;0;0;
1;0;0;0;0;1;0;1;0;0;
1;0;0;0;0;1;0;0;0;0;
0;1;0;0;1;0;1;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;1;1;0;0;0;0;1;0;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
1;0;1;0;0;0;1;0;0;0;
0;0;0;1;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;1;0;0;0;1;0;1;0;
0;0;0;0;1;0;1;0;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;1;0;0;0;0;0;1;1;0;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;0;
0;1;0;0;1;0;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;1;0;
0;0;1;0;0;1;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;0;1;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;1;1;0;
0;0;1;0;0;0;0;0;0;1;
0;1;0;0;0;0;1;0;1;0;
0;0;0;0;1;0;1;0;0;0;
0;0;0;1;0;0;0;1;0;0;
0;1;1;0;0;0;1;0;0;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;1;0;0;0;1;0;0;
0;0;1;0;1;0;0;0;0;1;
0;0;1;0;0;0;0;0;1;0;
1;0;0;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;1;0;1;0;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;0;1;0;1;0;0;0;0;
0;1;0;0;0;1;0;0;0;1;
1;0;0;0;0;0;1;0;0;0;
0;1;0;1;0;0;0;0;1;0;
1;0;0;0;0;0;0;1;0;0;
1;0;1;0;0;0;1;0;0;0;
0;0;0;1;0;0;1;0;1;0;
0;0;0;1;0;0;0;0;0;1;
0;1;0;0;1;0;0;0;0;1;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;1;0;0;1;0;0;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;1;0;0;1;0;0;0;
0;0;1;0;1;0;0;0;0;1;
0;0;0;0;0;1;0;1;0;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;0;1;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;1;0;0;0;0;0;1;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;1;0;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;1;0;0;0;1;0;1;0;
0;0;0;0;1;0;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;1;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;1;0;0;0;0;1;0;0;
      };
     };
     float_Data @[2] {
      name="EC_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;3;2;6;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [4] ;;;;      };
      ar {
       name=;
	    [4 3 2 6 10] 0;0;0;1;0;0;1;0;1;0;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;0;0;1;
1;0;0;0;0;1;0;0;0;0;
1;0;1;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;1;0;1;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;1;0;
1;0;0;0;0;1;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;1;0;0;
0;1;0;0;0;0;1;0;1;0;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;0;0;0;1;0;1;
0;0;0;0;0;1;1;0;0;0;
0;0;1;0;0;0;0;1;0;1;
0;0;0;0;1;0;0;0;1;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
1;0;0;0;0;0;0;1;0;0;
1;0;1;0;0;0;0;0;0;1;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;1;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;1;0;1;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;1;0;0;0;1;0;1;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
1;0;1;0;0;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;1;0;1;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;1;0;0;0;0;0;
1;0;0;0;0;1;0;1;0;0;
1;0;0;0;0;1;0;0;0;0;
0;1;0;0;1;0;1;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;1;1;0;0;0;0;1;0;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
1;0;1;0;0;0;1;0;0;0;
0;0;0;1;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;1;0;0;0;1;0;1;0;
0;0;0;0;1;0;1;0;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;1;0;0;0;0;0;1;1;0;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;0;
0;1;0;0;1;0;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;1;0;
0;0;1;0;0;1;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;0;1;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;1;1;0;
0;0;1;0;0;0;0;0;0;1;
0;1;0;0;0;0;1;0;1;0;
0;0;0;0;1;0;1;0;0;0;
0;0;0;1;0;0;0;1;0;0;
0;1;1;0;0;0;1;0;0;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;1;0;0;0;1;0;0;
0;0;1;0;1;0;0;0;0;1;
0;0;1;0;0;0;0;0;1;0;
1;0;0;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;1;0;1;0;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;0;1;0;1;0;0;0;0;
0;1;0;0;0;1;0;0;0;1;
1;0;0;0;0;0;1;0;0;0;
0;1;0;1;0;0;0;0;1;0;
1;0;0;0;0;0;0;1;0;0;
1;0;1;0;0;0;1;0;0;0;
0;0;0;1;0;0;1;0;1;0;
0;0;0;1;0;0;0;0;0;1;
0;1;0;0;1;0;0;0;0;1;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;1;0;0;1;0;0;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;1;0;0;1;0;0;0;
0;0;1;0;1;0;0;0;0;1;
0;0;0;0;0;1;0;1;0;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;0;1;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;1;0;0;0;0;0;1;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;1;0;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;1;0;0;0;1;0;1;0;
0;0;0;0;1;0;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;1;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;1;0;0;0;0;1;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[2] {
    name="Test_AB";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [10] "ab_0";"ab_1";"ab_2";"ab_3";"ab_4";"ab_5";"ab_6";"ab_7";"ab_8";"ab_9";
      };
     };
     float_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;3;2;6;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [4] ;;;;      };
      ar {
       name=;
	    [4 3 2 6 10] 0;0;0;1;0;0;1;0;1;0;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;1;0;0;
1;0;0;0;0;0;1;0;0;1;
0;0;0;0;1;0;0;1;0;0;
0;1;0;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;1;0;0;0;0;1;1;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;1;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;1;
1;0;0;0;0;1;0;0;0;0;
1;0;0;0;1;0;1;0;0;0;
1;0;0;0;0;0;1;0;0;1;
0;0;0;1;0;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;0;0;1;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;1;0;1;0;0;
0;0;1;0;0;0;1;0;0;1;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
1;0;1;0;0;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;0;1;1;0;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;1;0;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;0;1;0;
0;1;0;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;0;
0;0;0;1;0;0;1;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;1;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;1;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;1;0;1;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;1;0;0;0;1;0;0;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;1;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;1;
0;0;0;0;0;1;0;0;0;1;
0;0;1;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;1;0;0;0;1;0;1;
0;0;0;0;1;0;0;0;0;1;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;1;0;
0;0;1;0;0;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;1;0;
      };
     };
     float_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="EC_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;3;2;6;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [4] ;;;;      };
      ar {
       name=;
	    [4 3 2 6 10] 0;0;0;1;0;0;1;0;1;0;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;1;0;0;0;
0;1;0;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;0;0;1;0;1;0;0;
1;0;0;0;0;0;1;0;0;1;
0;0;0;0;1;0;0;1;0;0;
0;1;0;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;1;0;0;
0;0;1;0;0;1;0;0;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;1;0;0;0;0;1;1;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
1;0;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;1;0;0;0;
1;0;0;1;0;0;0;0;0;1;
0;1;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;1;
1;0;0;0;0;1;0;0;0;0;
1;0;0;0;1;0;1;0;0;0;
1;0;0;0;0;0;1;0;0;1;
0;0;0;1;0;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;0;0;1;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;0;1;0;0;0;0;
1;0;1;0;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;0;0;1;
1;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;1;0;1;0;0;
0;0;1;0;0;0;1;0;0;1;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
1;0;1;0;0;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
1;0;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;0;1;1;0;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
1;0;1;0;0;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;0;1;0;0;0;1;
0;0;1;0;0;0;1;0;1;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;1;0;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;0;1;0;
0;1;0;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
1;0;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;1;0;1;0;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;0;
0;0;0;1;0;0;1;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;1;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;0;0;0;1;
0;0;1;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;1;0;
0;1;0;0;1;0;0;0;1;0;
0;0;0;1;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;1;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;1;0;1;0;0;
0;0;0;1;0;0;0;1;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;1;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;1;0;0;0;1;0;0;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;1;0;0;1;0;0;0;0;
1;0;0;1;0;0;0;0;0;1;
1;0;0;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;0;1;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;1;
0;0;0;0;0;1;0;0;0;1;
0;0;1;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;1;0;0;0;1;0;1;
0;0;0;0;1;0;0;0;0;1;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;1;0;0;0;0;1;0;
0;0;0;1;0;1;0;0;0;1;
0;0;1;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;1;1;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;1;0;
0;0;1;0;0;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;1;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[3] {
    name="Test_AC";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [10] "ac_0";"ac_1";"ac_2";"ac_3";"ac_4";"ac_5";"ac_6";"ac_7";"ac_8";"ac_9";
      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;3;2;6;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [4] ;;;;      };
      ar {
       name=;
	    [4 3 2 6 10] 0;0;0;1;0;0;1;0;1;0;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;1;0;1;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;1;0;
1;0;0;0;0;1;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;1;0;1;
0;0;0;0;1;0;0;0;1;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
1;0;0;0;0;0;0;1;0;0;
1;0;1;0;0;0;0;0;0;1;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;1;0;1;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;1;0;0;0;1;0;1;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
1;0;1;0;0;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
1;0;0;0;0;1;0;1;0;0;
1;0;0;0;0;1;0;0;0;0;
0;1;0;0;1;0;1;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;1;1;0;0;0;0;1;0;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;1;0;1;0;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;1;0;0;0;0;0;1;1;0;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;1;0;
0;0;1;0;0;1;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;0;1;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;0;0;0;1;0;0;
0;1;1;0;0;0;1;0;0;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;1;0;0;0;1;0;0;
0;0;1;0;1;0;0;0;0;1;
0;0;1;0;0;0;0;0;1;0;
1;0;0;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;1;0;1;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;1;0;1;0;0;0;0;1;0;
1;0;0;0;0;0;0;1;0;0;
1;0;1;0;0;0;1;0;0;0;
0;0;0;1;0;0;1;0;1;0;
0;0;0;1;0;0;0;0;0;1;
0;1;0;0;1;0;0;0;0;1;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;1;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;1;0;1;0;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;0;1;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;1;0;0;0;0;0;1;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
0;0;0;0;1;0;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;1;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;1;0;0;0;0;1;0;0;
      };
     };
     float_Data @[2] {
      name="EC_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;3;2;6;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [4] ;;;;      };
      ar {
       name=;
	    [4 3 2 6 10] 0;0;0;1;0;0;1;0;1;0;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;0;0;1;
1;0;0;0;0;1;0;0;0;0;
1;0;1;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;1;0;0;
0;0;0;1;0;1;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;1;0;
1;0;0;0;0;1;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;1;0;0;
0;1;0;0;0;0;1;0;1;0;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;0;0;0;1;0;1;
0;0;0;0;0;1;1;0;0;0;
0;0;1;0;0;0;0;1;0;1;
0;0;0;0;1;0;0;0;1;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
1;0;0;0;0;0;0;1;0;0;
1;0;1;0;0;0;0;0;0;1;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;1;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;1;0;1;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;1;0;0;0;1;0;1;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
1;0;1;0;0;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;1;0;1;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;1;0;0;0;0;0;
1;0;0;0;0;1;0;1;0;0;
1;0;0;0;0;1;0;0;0;0;
0;1;0;0;1;0;1;0;0;0;
0;0;0;1;0;0;1;0;0;0;
0;1;1;0;0;0;0;1;0;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;1;0;0;1;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
1;0;1;0;0;0;1;0;0;0;
0;0;0;1;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;1;0;0;0;1;0;1;0;
0;0;0;0;1;0;1;0;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;1;0;0;0;0;0;1;1;0;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;0;
0;1;0;0;1;0;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;1;0;
0;0;1;0;0;1;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;0;1;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
0;1;1;0;0;0;0;0;0;1;
0;0;1;0;0;0;0;1;1;0;
0;0;1;0;0;0;0;0;0;1;
0;1;0;0;0;0;1;0;1;0;
0;0;0;0;1;0;1;0;0;0;
0;0;0;1;0;0;0;1;0;0;
0;1;1;0;0;0;1;0;0;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;1;0;0;0;1;0;0;
0;0;1;0;1;0;0;0;0;1;
0;0;1;0;0;0;0;0;1;0;
1;0;0;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;1;0;1;0;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;0;1;0;1;0;0;0;0;
0;1;0;0;0;1;0;0;0;1;
1;0;0;0;0;0;1;0;0;0;
0;1;0;1;0;0;0;0;1;0;
1;0;0;0;0;0;0;1;0;0;
1;0;1;0;0;0;1;0;0;0;
0;0;0;1;0;0;1;0;1;0;
0;0;0;1;0;0;0;0;0;1;
0;1;0;0;1;0;0;0;0;1;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;1;0;0;1;0;0;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;1;0;0;1;0;0;0;
0;0;1;0;1;0;0;0;0;1;
0;0;0;0;0;1;0;1;0;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;0;1;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;1;0;0;0;0;0;1;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;1;0;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;1;0;0;0;1;0;1;0;
0;0;0;0;1;0;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
0;0;0;0;0;1;0;0;0;1;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;1;0;0;0;0;1;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[4] {
    name="Lure";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [10] "lure_0";"lure_1";"lure_2";"lure_3";"lure_4";"lure_5";"lure_6";"lure_7";"lure_8";"lure_9";
      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;3;2;6;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [4] ;;;;      };
      ar {
       name=;
	    [4 3 2 6 10] 0;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;1;
1;0;0;0;1;0;0;0;0;0;
1;0;0;0;1;0;1;0;0;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;1;0;0;1;0;0;1;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;1;0;0;1;0;0;0;0;
0;1;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;0;0;
1;0;1;0;0;0;0;1;0;0;
0;0;0;1;0;0;1;0;1;0;
0;0;1;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;1;0;0;1;0;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;1;0;
0;0;0;0;1;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;1;0;0;0;
0;1;0;0;0;0;1;0;1;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;1;0;1;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;0;1;0;1;0;0;0;
0;0;1;0;0;1;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;0;0;1;0;0;1;0;1;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;1;0;0;0;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;0;0;1;0;0;
1;0;0;0;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;0;1;
0;0;1;0;0;0;0;1;0;1;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;1;
0;0;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;1;0;
1;0;0;0;0;1;0;0;0;0;
1;0;0;1;0;0;1;0;0;0;
0;0;0;1;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;1;0;0;0;
0;0;0;1;1;0;0;0;0;0;
1;0;0;1;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;1;1;0;0;0;1;0;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;1;0;0;1;
0;0;1;0;0;0;0;1;0;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;0;1;0;0;0;0;1;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;0;0;1;0;1;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;1;0;1;0;
0;0;1;0;0;0;0;0;1;0;
0;0;1;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;0;1;0;
1;0;0;0;0;1;0;0;0;0;
0;1;0;1;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;1;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;1;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;1;0;1;0;0;0;
0;1;0;0;0;0;1;0;0;1;
0;0;1;0;0;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;1;0;1;
0;0;1;0;0;0;1;0;0;0;
      };
     };
     float_Data @[2] {
      name="EC_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;3;2;6;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [4] ;;;;      };
      ar {
       name=;
	    [4 3 2 6 10] 0;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;0;0;1;0;0;1;0;
0;0;1;0;0;0;1;0;0;1;
0;0;0;1;0;0;0;0;0;1;
1;0;0;0;1;0;0;0;0;0;
1;0;0;0;1;0;1;0;0;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;1;0;0;1;0;0;1;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;1;0;0;1;0;0;0;0;
0;1;1;0;0;0;0;0;0;1;
0;1;0;0;0;1;0;0;1;0;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;0;0;
1;0;1;0;0;0;0;1;0;0;
0;0;0;1;0;0;1;0;1;0;
0;0;1;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;1;0;0;1;0;
0;0;1;0;1;0;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;1;0;0;0;0;1;0;1;0;
0;0;0;0;1;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;1;0;0;0;
0;1;0;0;0;0;1;0;1;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;0;0;1;0;0;0;
1;0;0;1;0;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;1;
0;0;0;1;0;0;0;0;0;1;
0;0;0;1;0;1;0;0;0;0;
1;0;0;0;0;1;0;1;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;0;1;0;1;0;0;0;
0;0;1;0;0;1;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;0;0;1;0;0;1;0;1;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;0;0;0;0;1;0;0;
1;0;0;1;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;1;0;1;0;0;0;0;1;
0;0;0;0;1;0;1;0;0;0;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;0;0;1;0;0;
1;0;0;0;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;0;1;
0;0;1;0;0;0;0;1;0;1;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;1;
0;0;1;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;0;0;1;0;0;1;
0;0;0;1;0;0;0;0;1;0;
1;0;0;0;0;1;0;0;0;0;
1;0;0;1;0;0;1;0;0;0;
0;0;0;1;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;1;0;0;0;
0;0;0;1;1;0;0;0;0;0;
1;0;0;1;0;0;0;0;0;1;
0;0;1;0;0;1;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;0;1;0;0;0;
1;0;1;0;0;0;1;0;0;0;
0;0;0;1;1;0;0;0;1;0;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;1;0;0;1;
0;0;1;0;0;0;0;1;0;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;0;1;0;0;0;0;1;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;0;0;1;0;1;0;0;
1;0;0;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;1;0;0;0;0;0;
1;0;0;1;0;0;0;0;0;1;
0;0;0;1;0;0;1;0;1;0;
0;0;1;0;0;0;0;0;1;0;
0;0;1;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;0;1;0;
1;0;0;0;0;1;0;0;0;0;
0;1;0;1;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;0;1;
0;0;0;0;0;1;0;0;0;1;
0;0;1;0;1;0;0;0;0;0;
0;1;0;1;0;0;1;0;0;0;
1;0;0;0;0;1;0;0;0;0;
1;0;0;1;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;1;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;1;0;1;0;0;0;
0;0;1;0;0;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;0;
0;1;0;0;0;0;0;1;0;1;
0;0;0;0;1;0;1;0;0;0;
0;1;0;0;0;0;1;0;0;1;
0;0;1;0;0;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;1;0;1;
0;0;1;0;0;0;1;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[5] {
    name="SlotTrain";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [64] "Feat_0_0_0";"Feat_0_0_1";"Feat_0_0_2";"Feat_0_0_3";"Feat_0_1_0";"Feat_0_1_1";"Feat_0_1_2";"Feat_0_1_3";"Feat_0_2_0";"Feat_0_2_1";
"Feat_0_2_2";"Feat_0_2_3";"Feat_0_3_0";"Feat_0_3_1";"Feat_0_3_2";"Feat_0_3_3";"Feat_1_0_0";"Feat_1_0_1";"Feat_1_0_2";"Feat_1_0_3";
"Feat_1_1_0";"Feat_1_1_1";"Feat_1_1_2";"Feat_1_1_3";"Feat_1_2_0";"Feat_1_2_1";"Feat_1_2_2";"Feat_1_2_3";"Feat_1_3_0";"Feat_1_3_1";
"Feat_1_3_2";"Feat_1_3_3";"Feat_2_0_0";"Feat_2_0_1";"Feat_2_0_2";"Feat_2_0_3";"Feat_2_1_0";"Feat_2_1_1";"Feat_2_1_2";"Feat_2_1_3";
"Feat_2_2_0";"Feat_2_2_1";"Feat_2_2_2";"Feat_2_2_3";"Feat_2_3_0";"Feat_2_3_1";"Feat_2_3_2";"Feat_2_3_3";"Feat_3_0_0";"Feat_3_0_1";
"Feat_3_0_2";"Feat_3_0_3";"Feat_3_1_0";"Feat_3_1_1";"Feat_3_1_2";"Feat_3_1_3";"Feat_3_2_0";"Feat_3_2_1";"Feat_3_2_2";"Feat_3_2_3";
"Feat_3_3_0";"Feat_3_3_1";"Feat_3_3_2";"Feat_3_3_3";      };
     };
     float_Data @[1] {
      name="EC_in";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;3;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [4 3 64] 1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;0;0;1;0;1;0;0;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;0;1;0;0;0;1;
0;0;1;0;0;0;0;1;0;0;
0;0;1;0;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
0;0;1;0;1;0;0;0;1;0;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;0;1;0;
0;0;0;1;1;0;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;0;1;0;1;0;0;1;0;
0;0;0;0;0;1;0;0;1;0;
1;0;0;0;0;0;0;1;0;0;
0;1;0;1;0;0;1;0;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;0;0;0;1;0;0;1;
0;0;1;0;0;0;0;0;0;1;
0;1;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;0;1;0;0;
0;1;0;0;0;0;0;1;0;1;
0;0;0;0;1;0;1;0;0;0;
0;1;0;0;0;0;1;0;0;1;
0;0;0;1;0;0;0;0;1;0;
0;0;1;0;0;1;0;0;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;0;1;0;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;1;0;0;0;0;0;1;
0;0;0;1;0;0;1;0;1;0;
0;0;1;0;0;0;0;0;1;0;
1;0;0;0;0;1;0;0;0;0;
1;0;1;0;0;0;0;0;1;0;
0;0;1;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;1;0;0;1;
0;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;0;0;0;
1;0;0;1;0;0;0;0;0;1;
0;0;1;0;0;0;1;0;1;0;
0;0;0;0;1;0;0;0;1;0;
0;1;0;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;1;0;0;
1;0;0;0;0;1;1;0;0;0;
0;0;1;0;0;0;0;1;0;1;
0;0;0;0;1;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;0;1;
1;0;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;0;1;1;0;0;0;0;0;
1;0;0;0;0;1;1;0;0;0;
0;0;0;1;0;0;0;1;0;1;
0;0;1;0;0;0;0;0;0;1;
0;1;0;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;0;1;0;
0;0;0;1;0;1;0;0;0;0;
0;1;0;0;0;1;0;0;1;0;
1;0;0;0;0;0;0;1;0;0;
1;0;0;1;0;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;1;1;0;
0;0;0;0;0;1;0;0;0;1;
0;1;0;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;1;      };
     };
     float_Data @[2] {
      name="EC_out";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;3;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [4 3 64] 1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;0;0;1;0;1;0;0;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;0;1;0;0;0;1;
0;0;1;0;0;0;0;1;0;0;
0;0;1;0;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
0;0;1;0;1;0;0;0;1;0;
0;0;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;0;1;0;
0;0;0;1;1;0;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;0;0;1;0;1;0;0;1;0;
0;0;0;0;0;1;0;0;1;0;
1;0;0;0;0;0;0;1;0;0;
0;1;0;1;0;0;1;0;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;0;0;0;1;0;0;1;
0;0;1;0;0;0;0;0;0;1;
0;1;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
0;1;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;0;1;0;0;
0;1;0;0;0;0;0;1;0;1;
0;0;0;0;1;0;1;0;0;0;
0;1;0;0;0;0;1;0;0;1;
0;0;0;1;0;0;0;0;1;0;
0;0;1;0;0;1;0;0;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;0;1;1;0;0;0;0;1;
0;0;0;0;0;1;0;1;0;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;1;0;0;0;0;0;1;
0;0;0;1;0;0;1;0;1;0;
0;0;1;0;0;0;0;0;1;0;
1;0;0;0;0;1;0;0;0;0;
1;0;1;0;0;0;0;0;1;0;
0;0;1;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;1;0;0;
1;0;0;0;0;0;1;0;0;1;
0;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;0;1;0;0;0;
1;0;0;1;0;0;0;0;0;1;
0;0;1;0;0;0;1;0;1;0;
0;0;0;0;1;0;0;0;1;0;
0;1;0;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;1;0;0;
1;0;0;0;0;1;1;0;0;0;
0;0;1;0;0;0;0;1;0;1;
0;0;0;0;1;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;0;1;0;0;0;1;
1;0;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;0;1;1;0;0;0;0;0;
1;0;0;0;0;1;1;0;0;0;
0;0;0;1;0;0;0;1;0;1;
0;0;1;0;0;0;0;0;0;1;
0;1;0;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;0;1;0;
0;0;0;1;0;1;0;0;0;0;
0;1;0;0;0;1;0;0;1;0;
1;0;0;0;0;0;0;1;0;0;
1;0;0;1;0;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;1;1;0;
0;0;0;0;0;1;0;0;0;1;
0;1;0;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;1;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[8] {
      name="CA3_Fm_EC_in_net_rel";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[9] {
      name="CA3_Fm_CA3_net_rel";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[10] {
      name="CA3_Fm_DG_net_rel";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[11] {
      name="CA1_Fm_EC_in_net_rel";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[12] {
      name="CA1_Fm_CA3_net_rel";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[13] {
      name="EC_in_Fm_Input_net_rel";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[14] {
      name="EC_in_Fm_EC_out_net_rel";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[15] {
      name="EC_out_Fm_CA1_net_rel";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[16] {
      name="EC_out_Fm_EC_in_net_rel";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[17] {
      name="CA3_net_max";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[18] {
      name="CA1_net_max";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[19] {
      name="EC_in_net_max";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[20] {
      name="EC_out_net_max";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[2] {
    name="TrialTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[3] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[4] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="stim_err_on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[8] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="stim_err_off";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[9] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="rmbr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[10] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="group_number";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[3] {
    name="LastTestOutputData";
    desc="just for the last test epoch";
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [10] 0;0;0;0;0;0;0;0;0;0;
      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [10] 0;0;0;0;0;0;0;0;0;0;
      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [10] 0;1;2;3;4;5;6;7;8;9;
      };
     };
     String_Data @[3] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [10] "lure_0";"lure_1";"lure_2";"lure_3";"lure_4";"lure_5";"lure_6";"lure_7";"lure_8";"lure_9";
      };
     };
     String_Data @[4] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [10] "lure";"lure";"lure";"lure";"lure";"lure";"lure";"lure";"lure";"lure";
      };
     };
     float_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [10] 60;60;60;60;60;60;60;60;60;60;
      };
     };
     float_Data @[6] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [10] 9.725832;15.71793;15.679178;11.616689;15.075867;11.706939;15.133323;14.241482;17.295671;16.62509;
      };
     };
     float_Data @[7] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="stim_err_on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [10] 0.55555558;0.77777779;0.77777779;0.55555558;0.77777779;0.66666669;0.77777779;0.66666669;1;0.8888889;
      };
     };
     float_Data @[8] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="stim_err_off";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [10] 0.55555558;0.77777779;0.77777779;0.55555558;0.77777779;0.66666669;0.77777779;0.66666669;1;0.8888889;
      };
     };
     float_Data @[9] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="rmbr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [10] 0;0;0;0;0;0;0;0;0;0;
      };
     };
     float_Data @[10] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1862197369337082;
	val_type_fixed=0;
       };
      };
      name="group_number";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [10] 2;2;2;2;2;2;2;2;2;2;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[4] {
    name="EpochTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1865671575069427;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1865671575069427;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[2] {
      name="avg_stim_err_on";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[3] {
      name="avg_stim_err_off";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[4] {
      name="avg_rmbr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[5] {
    name="SlotEpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [150] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [150] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
      };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [150] 2.609426;1.5287158;0.94249511;0.48676977;0.49306193;0.37589213;0.22162923;0.15045092;0.098839603;0.069785051;
0.040275149;0.12367451;0.14898865;0.090231419;0.051763557;0.01346948;0.025878498;0.062495299;0.025709555;0.024532722;
0.046221193;0.06486699;0.034697194;0.066911913;0.045079187;0.022268077;0.0090831276;0;0.058219515;0.020243179;
0;0;0;0.026876036;0.078507274;0.024057578;0.025878135;0.039981145;0;0.030203938;
0;0;0;0.048112631;0.035277847;0.060585894;0.027468793;0.059019186;0;0.026797961;
0.029995633;0;0.030120667;0;0;0;0.039029166;0.029313751;0.024244262;0.030620731;
0.030055888;0.028689075;0.030124823;0;0.029951459;0;0;0.0084460275;0.030114822;0;
0.055594206;0;0.025419526;0;0;0.059835032;0.029240351;0;0.030645989;0.044188287;
0.015625;0;0.029522544;0;0.058777574;0.015625;0.04689496;0;0.047569595;0.0576603;
0.075739093;0.058073852;0.028262205;0;0.0091422051;0.030090503;0.089898109;0.027465634;0;0.030228874;
0.050449409;0.0088469237;0.015625;0.0040623657;0.03002567;0.070793591;0;0.065503418;0;0.015625;
0.029735357;0;0.057514481;0.054229937;0.029810563;0;0.016069902;0;0.015625;0.029586993;
0;0;0.029640712;0;0.060021058;0.0063270549;0;0.0061437218;0.020969298;0.015625;
0.030226123;0.029247943;0;0.028826844;0;0.015625;0.044503827;0;0;0.030113773;
0.027190965;0.015625;0;0;0;0.015625;0.059461877;0.060366958;0.054282136;0;
      };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [150] 63;54;43;29;28;20;13;10;7;5;
2;6;8;6;3;2;3;4;2;3;
5;4;3;3;3;1;1;0;2;1;
0;0;0;1;3;1;1;2;0;1;
0;0;0;2;2;2;1;2;0;1;
1;0;1;0;0;0;2;1;1;1;
1;1;1;0;1;0;0;1;1;0;
2;0;1;0;0;2;1;0;1;2;
1;0;1;0;2;1;2;0;2;2;
4;2;1;0;1;1;4;1;0;1;
2;1;1;1;1;4;0;3;0;1;
1;0;2;2;1;0;1;0;1;1;
0;0;1;0;2;1;0;1;2;1;
1;1;0;1;0;1;2;0;0;1;
1;1;0;0;0;1;2;2;2;0;
      };
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [150] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [150] 33.15625;30.109375;30.359375;27.453125;26.921875;25;23.34375;22.875;21.296875;20.609375;
19.96875;19.984375;20.09375;19.46875;18.78125;18.6875;18.484375;18.609375;18.1875;18.65625;
18;18.1875;18.203125;17.640625;17.703125;17.6875;17.53125;17.5625;17.546875;17.296875;
17.234375;17.203125;17.4375;17.546875;17.8125;17.171875;17.5625;17.203125;16.921875;17.0625;
17;17.046875;17.25;17.765625;17.046875;17.046875;16.90625;17.09375;16.921875;16.84375;
16.90625;16.75;17.03125;16.921875;16.984375;17.46875;17.453125;17.09375;17.015625;16.90625;
16.75;16.9375;17.484375;16.796875;17.03125;16.828125;17.234375;18.140625;16.9375;16.84375;
16.921875;16.734375;17.015625;16.8125;16.78125;16.9375;16.953125;16.859375;17;17.25;
16.96875;16.8125;17.078125;17.0625;17.3125;17.296875;17.34375;17.03125;17.34375;17.25;
17.625;17.328125;17.109375;17.03125;17.1875;16.84375;17.65625;17.296875;17.09375;16.921875;
17.25;16.8125;16.921875;16.953125;16.84375;17.5625;16.703125;16.953125;16.859375;17.015625;
16.984375;16.640625;16.890625;17.40625;16.46875;16.546875;16.6875;16.40625;16.90625;16.765625;
16.5625;16.640625;16.734375;16.8125;16.96875;16.28125;16.296875;16.390625;16.890625;16.734375;
16.40625;16.96875;16.3125;16.625;16.359375;16.765625;16.8125;16.453125;16.40625;16.328125;
16.734375;16.796875;16.515625;16.46875;16.578125;16.5625;16.78125;16.8125;16.734375;16.546875;
      };
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [150] 0.54000002;0.38999999;0.40000001;0.38;0.49000001;0.36000001;0.34;0.33000001;0.31999999;0.31999999;
0.31;0.31;0.31;0.31;0.30000001;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;
0.28999999;0.30000001;0.30000001;0.28999999;0.28999999;0.28999999;0.28999999;0.28;0.40000001;0.28999999;
0.28999999;0.34999999;0.38999999;0.38999999;0.30000001;0.28999999;0.28999999;0.28999999;0.28999999;0.38999999;
0.28999999;0.38;0.30000001;0.36000001;0.28;0.28;0.28999999;0.28999999;0.28999999;0.28999999;
0.36000001;0.31;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;0.28;0.28;
0.28;0.28999999;0.28999999;0.28;0.28999999;0.28;0.28999999;0.30000001;0.28;0.28;
0.28;0.28;0.28999999;0.28999999;0.28999999;0.28;0.28999999;0.28;0.28;0.28;
0.28;0.28;0.28;0.28;0.28999999;0.28999999;0.28;0.28;0.28999999;0.28999999;
0.28999999;0.28999999;0.28999999;0.28;0.28;0.28999999;0.28999999;0.28;0.28;0.28;
0.28;0.28;0.28;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;0.28999999;0.28;
0.28;0.28;0.28999999;0.28999999;0.28;0.28;0.28;0.28;0.28999999;0.28;
0.28;0.28;0.28;0.28;0.28;0.28;0.28;0.28;0.28999999;0.28;
0.28;0.28;0.27000001;0.28;0.28;0.28;0.28;0.28;0.28;0.28;
0.28999999;0.28;0.28;0.28;0.28;0.28;0.28999999;0.30000001;13.1;0.38;
      };
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [150] 0.47;0.34999999;0.34999999;0.34;0.41999999;0.31;0.30000001;0.30000001;0.28;0.28;
0.28;0.27000001;0.27000001;0.27000001;0.25999999;0.25999999;0.25999999;0.25999999;0.25999999;0.25999999;
0.25;0.25999999;0.25999999;0.25;0.25999999;0.25;0.25;0.25999999;0.34;0.25;
0.25999999;0.30000001;0.31999999;0.34;0.25;0.25;0.25999999;0.25;0.25;0.34;
0.25;0.33000001;0.25999999;0.31;0.25999999;0.25;0.25;0.25;0.25;0.25;
0.30000001;0.28;0.25999999;0.25;0.25;0.25999999;0.25999999;0.25;0.25;0.25;
0.25;0.25;0.25999999;0.25;0.25;0.25;0.25;0.27000001;0.25;0.25;
0.25;0.25;0.25999999;0.25;0.25;0.25;0.25;0.25;0.25;0.25;
0.25;0.25;0.25;0.25999999;0.25999999;0.25999999;0.25999999;0.25;0.25;0.25;
0.25999999;0.25;0.25;0.25;0.25999999;0.25999999;0.25999999;0.25999999;0.25999999;0.25;
0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;
0.25;0.25;0.25;0.25;0.25;0.25;0.23999999;0.23999999;0.25;0.25;
0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.23999999;0.25;0.25;
0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;0.25;
0.25;0.25;0.23999999;0.25;0.25;0.25;0.25;0.25999999;1.95;0.33000001;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
  };
  DataTable_Group @.gp[3] {
   name="GenBitPatternData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="Vocab";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [4] "Feature_0";"Feature_1";"Feature_2";"Feature_3";      };
     };
     float_Data @[1] {
      name="Slot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [4 1 4] 1;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;1;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="Feature_0";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Group";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [3] "Dist_01";"Dist_01";"Dist_01";      };
     };
     String_Data @[1] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [3] "Feature_1";"Feature_2";"Feature_3";      };
     };
     float_Data @[2] {
      name="Slot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [4 1 3] 0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[2] {
    name="Feature_1";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Group";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [3] "Dist_01";"Dist_01";"Dist_01";      };
     };
     String_Data @[1] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [3] "Feature_0";"Feature_2";"Feature_3";      };
     };
     float_Data @[2] {
      name="Slot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [4 1 3] 0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[3] {
    name="Feature_2";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Group";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [3] "Dist_01";"Dist_01";"Dist_01";      };
     };
     String_Data @[1] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [3] "Feature_0";"Feature_1";"Feature_3";      };
     };
     float_Data @[2] {
      name="Slot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [4 1 3] 0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[4] {
    name="Feature_3";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Group";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [3] "Dist_01";"Dist_01";"Dist_01";      };
     };
     String_Data @[1] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [3] "Feature_0";"Feature_1";"Feature_2";      };
     };
     float_Data @[2] {
      name="Slot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [4 1 3] 0;0;0;0;0;0;0;0;0;0;
0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[5] {
    name="STIMULUS_ONE_Proto";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [1] "initial item";      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;9;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [4 9 1] 0;0;0;1;0;1;0;0;1;0;
0;0;1;0;0;0;0;0;0;1;
0;1;0;0;0;0;0;1;1;0;
0;0;0;0;1;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[6] {
    name="STIMULUS_ONE_Items";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [30] "i0";"i1";"i2";"i3";"i4";"i5";"i6";"i7";"i8";"i9";
"i10";"i11";"i12";"i13";"i14";"i15";"i16";"i17";"i18";"i19";
"i20";"i21";"i22";"i23";"i24";"i25";"i26";"i27";"i28";"i29";
      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;9;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [4 9 30] 0;0;0;1;0;0;1;0;1;0;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;0;0;1;
1;0;0;0;0;0;1;0;0;0;
1;0;0;0;1;0;0;1;0;0;
0;0;0;1;0;1;0;0;0;1;
0;0;0;0;1;0;1;0;0;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;0;
1;0;0;0;0;0;1;0;0;1;
0;0;0;1;0;0;0;1;0;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;0;1;0;1;0;0;0;
1;0;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;1;
1;0;0;0;0;1;0;0;0;0;
1;0;0;0;0;1;0;0;1;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;1;0;0;1;0;0;0;
0;0;0;1;1;0;0;0;0;0;
1;0;0;1;0;0;0;0;0;1;
0;0;0;1;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;1;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;0;0;1;
0;1;0;0;0;0;0;1;0;0;
1;0;0;1;0;0;1;0;0;0;
0;1;0;0;0;0;0;1;1;0;
0;0;1;0;0;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;1;
0;0;0;0;0;1;0;0;1;0;
0;0;1;0;0;0;1;0;0;1;
0;0;0;0;0;1;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;0;1;0;0;0;1;0;1;
0;0;1;0;0;0;1;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;1;0;0;0;1;0;0;1;0;
1;0;0;0;0;1;0;0;0;0;
1;0;1;0;0;0;0;1;0;0;
0;0;1;0;1;0;0;0;0;1;
0;0;0;0;0;1;0;1;0;0;
0;1;0;0;0;0;1;0;0;0;
0;1;1;0;0;0;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
1;0;1;0;0;0;1;0;0;0;
1;0;0;0;0;0;1;0;0;0;
1;0;0;0;1;0;1;0;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;0;1;0;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;0;0;0;1;0;
0;0;1;0;0;1;0;0;0;1;
0;0;0;0;1;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;0;1;0;0;0;0;1;
0;0;0;1;0;1;0;0;1;0;
0;0;0;0;0;1;1;0;0;0;
0;0;0;1;0;0;1;0;0;1;
0;0;1;0;0;0;0;0;0;1;
1;0;0;0;0;0;0;1;1;0;
0;0;0;0;1;0;1;0;0;0;
0;0;1;0;1;0;0;0;0;1;
0;0;0;0;0;1;0;1;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;1;0;0;0;0;1;0;0;
0;1;0;0;0;0;1;0;0;0;
0;1;0;0;1;0;1;0;0;0;
0;0;0;1;0;0;1;0;0;1;
0;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;1;0;0;1;0;0;1;0;0;
0;0;0;1;1;0;0;0;0;0;
0;1;0;1;0;0;0;0;1;0;
0;1;0;0;1;0;0;0;0;1;
0;0;1;0;0;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;1;0;0;
0;0;1;0;1;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;1;0;0;0;0;0;
0;1;0;0;1;0;1;0;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;0;0;0;1;0;0;1;0;
0;1;0;0;0;1;0;0;0;1;
0;0;0;0;1;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;1;
0;0;1;0;0;0;0;1;0;0;
0;1;0;0;0;0;1;0;1;0;
0;0;0;0;0;1;1;0;0;0;
0;0;1;0;0;1;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;1;0;1;0;0;0;0;0;
1;0;1;0;0;0;0;0;0;1;
0;1;0;0;1;0;0;0;1;0;
0;0;0;0;1;0;1;0;0;0;
0;1;0;0;0;0;0;1;0;1;
0;0;1;0;0;0;0;1;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;1;0;0;0;0;0;1;0;
0;0;1;0;0;1;0;0;0;1;
0;0;0;1;0;0;0;0;1;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[7] {
    name="STIMULUS_TWO_Proto";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [1] "initial item";      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;9;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [4 9 1] 0;1;0;0;0;0;0;1;0;1;
0;0;0;0;1;0;0;0;0;1;
0;1;0;0;1;0;0;0;0;0;
1;0;0;0;0;1;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[8] {
    name="STIMULUS_TWO_Items";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [30] "i0";"i1";"i2";"i3";"i4";"i5";"i6";"i7";"i8";"i9";
"i10";"i11";"i12";"i13";"i14";"i15";"i16";"i17";"i18";"i19";
"i20";"i21";"i22";"i23";"i24";"i25";"i26";"i27";"i28";"i29";
      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;9;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [4 9 30] 1;0;0;0;0;1;0;0;0;0;
0;1;0;0;0;1;0;0;1;0;
0;1;0;0;1;0;0;0;0;0;
1;0;1;0;0;0;0;0;1;0;
0;0;0;1;0;0;1;0;1;0;
0;0;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;1;0;0;1;
0;0;0;1;0;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;0;0;0;1;
0;1;0;0;0;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;0;0;1;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;1;0;0;1;0;0;0;1;
0;0;0;0;1;0;1;0;0;0;
1;0;0;0;0;1;0;0;0;0;
1;0;1;0;0;0;0;0;1;0;
1;0;0;0;0;0;0;1;0;0;
1;0;0;0;1;0;0;1;0;0;
1;0;0;0;1;0;0;0;0;1;
0;0;0;0;0;1;0;0;0;1;
1;0;0;0;1;0;0;0;0;0;
0;1;0;0;0;1;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
1;0;0;1;0;0;0;0;0;1;
1;0;0;0;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;1;0;
0;0;0;1;0;1;0;0;0;0;
1;0;0;0;0;1;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;0;1;1;0;0;0;0;1;
0;0;0;0;1;0;1;0;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;1;0;0;0;0;1;0;0;
0;0;1;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;0;1;0;1;0;0;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;1;0;0;0;
0;1;0;0;0;1;1;0;0;0;
1;0;0;0;1;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;0;1;0;1;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;1;0;0;0;1;0;
0;0;0;0;0;1;0;1;0;0;
0;0;0;1;1;0;0;0;1;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;1;0;0;1;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;1;0;0;0;1;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;1;1;0;0;0;1;0;
0;0;0;0;0;1;0;1;0;0;
0;0;1;0;1;0;0;0;0;0;
1;0;0;0;1;0;0;0;1;0;
0;0;0;1;0;1;0;0;0;0;
0;1;0;1;0;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
1;0;0;0;0;1;0;1;0;0;
0;0;0;1;0;0;0;1;1;0;
0;0;0;1;0;0;1;0;0;0;
0;0;1;0;0;0;1;0;0;0;
1;0;0;0;1;0;1;0;0;0;
0;0;0;1;1;0;0;0;1;0;
0;0;0;0;1;0;0;0;1;0;
0;0;1;0;0;0;0;1;0;0;
0;1;1;0;0;0;0;0;0;1;
0;0;1;0;0;0;1;0;0;0;
1;0;0;1;0;0;0;1;0;0;
0;1;0;0;1;0;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
1;0;0;0;0;0;0;1;1;0;
0;0;1;0;0;0;0;0;0;1;
1;0;0;0;1;0;0;0;1;0;
0;0;0;0;1;0;0;0;0;1;
0;0;1;0;0;0;0;1;0;0;
1;0;0;1;0;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;1;
0;0;0;1;0;0;0;0;0;1;
0;0;0;1;0;1;0;0;0;1;
0;0;0;0;1;0;0;0;0;1;
0;0;0;1;0;0;1;0;0;0;
1;0;0;0;1;0;1;0;0;0;
0;1;0;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;0;0;1;
1;0;0;0;0;1;0;0;0;0;
1;0;0;1;0;0;0;0;1;0;
0;1;0;0;0;1;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;0;1;0;0;0;1;0;1;0;
0;0;0;1;0;0;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
1;0;1;0;0;0;0;0;1;0;
0;1;0;0;0;0;0;1;0;1;
0;0;0;0;0;1;0;0;0;1;
0;0;1;0;1;0;0;0;0;0;
0;1;0;1;0;0;1;0;0;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;0;1;0;0;0;0;1;
0;0;1;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;0;0;1;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[9] {
    name="CONTEXT_Proto";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [3] "c0";"c1";"c2";      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;18;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [4 18 3] 1;0;0;0;0;1;0;0;1;0;
0;0;0;0;0;1;0;1;0;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;0;1;0;0;0;1;0;
1;0;0;0;1;0;0;0;0;0;
1;0;0;1;0;0;0;1;0;0;
0;0;0;1;0;0;1;0;0;0;
1;0;1;0;0;0;0;0;1;0;
0;0;0;1;0;1;0;0;1;0;
0;0;1;0;0;0;1;0;0;0;
0;0;1;0;1;0;0;0;0;1;
0;0;0;0;1;0;0;0;1;0;
1;0;0;0;0;1;0;0;0;0;
0;1;0;0;1;0;1;0;0;0;
0;1;0;0;0;1;0;0;0;0;
1;0;1;0;0;0;1;0;0;0;
0;0;1;0;0;1;0;0;1;0;
0;0;0;1;0;0;0;1;0;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;0;1;0;0;0;1;0;
1;0;0;0;0;1;0;0;1;0;
0;0;1;0;0;0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[10] {
    name="CONTEXT_Items";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Group";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [30] "c0_r";"c0_r";"c0_r";"c0_r";"c0_r";"c0_r";"c0_r";"c0_r";"c0_r";"c0_r";
"c1_r";"c1_r";"c1_r";"c1_r";"c1_r";"c1_r";"c1_r";"c1_r";"c1_r";"c1_r";
"c2_r";"c2_r";"c2_r";"c2_r";"c2_r";"c2_r";"c2_r";"c2_r";"c2_r";"c2_r";
      };
     };
     String_Data @[1] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [30] "c0i0";"c0i1";"c0i2";"c0i3";"c0i4";"c0i5";"c0i6";"c0i7";"c0i8";"c0i9";
"c1i0";"c1i1";"c1i2";"c1i3";"c1i4";"c1i5";"c1i6";"c1i7";"c1i8";"c1i9";
"c2i0";"c2i1";"c2i2";"c2i3";"c2i4";"c2i5";"c2i6";"c2i7";"c2i8";"c2i9";
      };
     };
     float_Data @[2] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 4;18;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [4 18 30] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
 };
 data_proc {
  name=;
  el_typ=taDataProc;
  el_def=0;
  taDataProc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_base";
  };
  taDataAnal @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_anal";
  };
  taDataGen @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_gen";
  };
  taImageProc @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="image_proc";
  };
 };
 programs {
  name=;
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  Program @[0] {
   name="SlotToHippo";
   short_nm="SlTHpp";
   tags=;
   desc="copy slot network weights to hippocampus network";
   flags=NO_STOP_STEP;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="HippoNet";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=$.projects[0].networks[0]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="CA1_EC_SlotNet";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=.projects[0].networks[1]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="CA1";
     var_type=T_Object;
     object_type=LeabraLayer;
     object_val=.projects[0].networks[0].layers[4]$$;
     objs_ptr=0;
     flags=USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="EC_out";
     var_type=T_Object;
     object_type=LeabraLayer;
     object_val=.projects[0].networks[0].layers[5]$$;
     objs_ptr=0;
     flags=USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="Fm_EC_in";
     var_type=T_Object;
     object_type=LeabraPrjn;
     object_val=.projects[0].networks[0].layers[4].projections[0]$$;
     objs_ptr=0;
     flags=USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="Fm_CA1";
     var_type=T_Object;
     object_type=LeabraPrjn;
     object_val=.projects[0].networks[0].layers[5].projections[0]$$;
     objs_ptr=0;
     flags=USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[6] {
     name="ugi";
     var_type=T_Int;
     int_val=12;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[7] {
     name="i";
     var_type=T_Int;
     int_val=12;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[8] {
     name="ug";
     var_type=T_Object;
     object_type=LeabraUnit_Group;
     object_val=NULL;
     objs_ptr=0;
     flags=USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[9] {
     name="un";
     var_type=T_Object;
     object_type=LeabraUnit;
     object_val=NULL;
     objs_ptr=0;
     flags=USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    AssignExpr @[0] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[2]$$;
     expr {
      expr="HippoNet.layers.CA1";
     };
    };
    AssignExpr @[1] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[3]$$;
     expr {
      expr="HippoNet.layers.EC_out";
     };
    };
    AssignExpr @[2] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[4]$$;
     expr {
      expr="CA1.projections.Fm_EC_in";
     };
    };
    AssignExpr @[3] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[5]$$;
     expr {
      expr="EC_out.projections.Fm_CA1";
     };
    };
    Comment @[4] {
     desc="copy weights for EC_in -> CA1 projection";
     flags=;
    };
    ForLoop @[5] {
     desc=;
     flags=;
     loop_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=;
       result_var=.projects[0].programs[0].vars[8]$$;
       expr {
	expr="CA1.units.gp[ugi]";
       };
      };
      ForLoop @[1] {
       desc=;
       flags=;
       loop_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=;
	 result_var=.projects[0].programs[0].vars[9]$$;
	 expr {
	  expr="ug[i]";
	 };
	};
	MethodCall @[1] {
	 desc=;
	 flags=;
	 result_var=NULL;
	 obj=$.projects[0].programs[0].vars[9]$;
	 method=Unit::Copy_Weights;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_Unit_ptr;
	   type="const Unit*";
	   name="src";
	   required=1;
	   def_val=;
	   expr {
	    expr="CA1_EC_SlotNet.layers.CA1.units[i]";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=Projection_ptr;
	   type="Projection*";
	   name="prjn";
	   required=0;
	   def_val="NULL";
	   expr {
	    expr="Fm_EC_in";
	   };
	  };
	 };
	};
       };
       init {
	expr="i = 0";
       };
       test {
	expr="i < ug.size";
       };
       iter {
	expr="i++";
       };
      };
     };
     init {
      expr="ugi = 0";
     };
     test {
      expr="ugi < CA1.units.gp.size";
     };
     iter {
      expr="ugi++";
     };
    };
    Comment @[6] {
     desc="copy weights for CA1->EC_out projection";
     flags=;
    };
    ForLoop @[7] {
     desc=;
     flags=;
     loop_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=;
       result_var=$.projects[0].programs[0].vars[8]$;
       expr {
	expr="EC_out.units.gp[ugi]";
       };
      };
      ForLoop @[1] {
       desc=;
       flags=;
       loop_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=;
	 result_var=$.projects[0].programs[0].vars[9]$;
	 expr {
	  expr="ug[i]";
	 };
	};
	MethodCall @[1] {
	 desc=;
	 flags=;
	 result_var=NULL;
	 obj=$.projects[0].programs[0].vars[9]$;
	 method=Unit::Copy_Weights;
	 meth_args {
	  name=;
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_Unit_ptr;
	   type="const Unit*";
	   name="src";
	   required=1;
	   def_val=;
	   expr {
	    expr="CA1_EC_SlotNet.layers.EC_out.units[i]";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=Projection_ptr;
	   type="Projection*";
	   name="prjn";
	   required=0;
	   def_val="NULL";
	   expr {
	    expr="Fm_CA1";
	   };
	  };
	 };
	};
       };
       init {
	expr="i = 0";
       };
       test {
	expr="i < ug.size";
       };
       iter {
	expr="i++";
       };
      };
     };
     init {
      expr="ugi = 0";
     };
     test {
      expr="ugi < EC_out.units.gp.size";
     };
     iter {
      expr="ugi++";
     };
    };
    AssignExpr @[8] {
     desc="reset to prevent err msgs for loading later";
     flags=;
     result_var=$.projects[0].programs[0].vars[8]$;
     expr {
      expr="NULL";
     };
    };
    AssignExpr @[9] {
     desc=;
     flags=;
     result_var=$.projects[0].programs[0].vars[9]$;
     expr {
      expr="NULL";
     };
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program @[1] {
   name="StimErrOnOff";
   short_nm="Stmrrn";
   tags=;
   desc="report separately the stim_err_on and stim_err_off for EC_out";
   flags=NO_STOP_STEP;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=$.projects[0].networks[0]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="network to train";
     init_from=NULL;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="unit_gp_st";
     var_type=T_Int;
     int_val=3;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="unit group number to start calculating at";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="unit_gp_n";
     var_type=T_Int;
     int_val=3;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="number of unit groups from start to continue with";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="act_thresh";
     var_type=T_Real;
     real_val=0.5;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="activation threshold for whether a unit is considered active or not";
     init_from=NULL;
    };
    ProgVar @[3] {
     name="rmbr_err_on_thr";
     var_type=T_Real;
     real_val=0.34;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="threshold for stim_err_on, below which network has remembered";
     init_from=NULL;
    };
    ProgVar @[4] {
     name="rmbr_err_off_thr";
     var_type=T_Real;
     real_val=0.34;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="threshold for stim_err_off, below which network has remembered";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="stim_err_on";
     var_type=T_Real;
     real_val=0.8888888888888888;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="number of units erroneously on (error of commission, confabulation)";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="stim_err_off";
     var_type=T_Real;
     real_val=0.8888888888888888;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="number of units erroneously off (error of omission, forgetting)";
     init_from=NULL;
    };
    ProgVar @[7] {
     name="rmbr";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="whether the network remembered or not, according to thresholds";
     init_from=NULL;
    };
    ProgVar @[8] {
     name="total_trg_act";
     var_type=T_Real;
     real_val=9;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="total target activation (to normalize values)";
     init_from=NULL;
    };
    ProgVar @[9] {
     name="EC_out";
     var_type=T_Object;
     object_type=LeabraLayer;
     object_val=$.projects[0].networks[0].layers[5]$;
     objs_ptr=0;
     flags=USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[10] {
     name="ugi";
     var_type=T_Int;
     int_val=6;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[11] {
     name="i";
     var_type=T_Int;
     int_val=12;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[12] {
     name="ug";
     var_type=T_Object;
     object_type=LeabraUnit_Group;
     object_val=.projects[0].networks[0].layers[5].units.gp[5]$$;
     objs_ptr=0;
     flags=USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[13] {
     name="un";
     var_type=T_Object;
     object_type=LeabraUnit;
     object_val=NULL;
     objs_ptr=0;
     flags=USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    AssignExpr @[0] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[5]$$;
     expr {
      expr="0.0";
     };
    };
    AssignExpr @[1] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[6]$$;
     expr {
      expr="0.0";
     };
    };
    AssignExpr @[2] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[8]$$;
     expr {
      expr="0.0";
     };
    };
    AssignExpr @[3] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[9]$$;
     expr {
      expr="network.layers.EC_out";
     };
    };
    ForLoop @[4] {
     desc=;
     flags=;
     loop_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=;
       result_var=.projects[0].programs[1].vars[12]$$;
       expr {
	expr="EC_out.units.gp[ugi]";
       };
      };
      ForLoop @[1] {
       desc=;
       flags=;
       loop_code {
	name=;
	el_typ=ProgEl;
	el_def=0;
	AssignExpr @[0] {
	 desc=;
	 flags=;
	 result_var=.projects[0].programs[1].vars[13]$$;
	 expr {
	  expr="ug[i]";
	 };
	};
	If @[1] {
	 desc="on but should not be";
	 flags=;
	 cond {
	  expr="un->act_eq > act_thresh && un->targ < act_thresh";
	 };
	 true_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  VarIncr @[0] {
	   desc=;
	   flags=;
	   var=$.projects[0].programs[1].vars[5]$;
	   expr {
	    expr="1.0";
	   };
	  };
	 };
	};
	If @[2] {
	 desc="on but should not be";
	 flags=;
	 cond {
	  expr="un->act_eq < act_thresh && un->targ > act_thresh";
	 };
	 true_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  VarIncr @[0] {
	   desc=;
	   flags=;
	   var=$.projects[0].programs[1].vars[6]$;
	   expr {
	    expr="1.0";
	   };
	  };
	 };
	};
	If @[3] {
	 desc="on but should not be";
	 flags=;
	 cond {
	  expr="un->targ > act_thresh";
	 };
	 true_code {
	  name=;
	  el_typ=ProgEl;
	  el_def=0;
	  VarIncr @[0] {
	   desc=;
	   flags=;
	   var=$.projects[0].programs[1].vars[8]$;
	   expr {
	    expr="1.0";
	   };
	  };
	 };
	};
       };
       init {
	expr="i = 0";
       };
       test {
	expr="i < ug.size";
       };
       iter {
	expr="i++";
       };
      };
     };
     init {
      expr="ugi = unit_gp_st";
     };
     test {
      expr="ugi < unit_gp_st + unit_gp_n";
     };
     iter {
      expr="ugi++";
     };
    };
    AssignExpr @[5] {
     desc="reset to prevent load err msgs";
     flags=;
     result_var=$.projects[0].programs[1].vars[13]$;
     expr {
      expr="NULL";
     };
    };
    IfReturn @[6] {
     desc=;
     flags=;
     cond {
      expr="total_trg_act == 0.0";
     };
    };
    AssignExpr @[7] {
     desc=;
     flags=;
     result_var=$.projects[0].programs[1].vars[5]$;
     expr {
      expr="stim_err_on /  total_trg_act";
     };
    };
    AssignExpr @[8] {
     desc=;
     flags=;
     result_var=$.projects[0].programs[1].vars[6]$;
     expr {
      expr="stim_err_off /  total_trg_act";
     };
    };
    AssignExpr @[9] {
     desc=;
     flags=;
     result_var=.projects[0].programs[1].vars[7]$$;
     expr {
      expr="(stim_err_on <= rmbr_err_on_thr && stim_err_off <= rmbr_err_off_thr) ? 1.0 : 0.0";
     };
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   Program @[0] {
    name="LeabraTrain";
    short_nm="Train";
    tags="Leabra, Std";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
    flags=;
    objs {
     name=;
     el_typ=RndSeed;
     el_def=0;
     RndSeed @[0] {
      name="rnd_seed";
      seed{ 897248114;-1259630319;-1954705695;-2086433643;-1705562578;-246166775;142172280;-1066196830;649876912;-363601797;-1551220787;-201998924;984813377;-1929982005;1866720504;1737535582;-2064818913;-596409631;-537210356;-394821123;-1176302275;-1088439095;390472553;1002483428;-644065336;-93234492;-249392311;1955837623;486322880;268723693;-1316990013;-1148081097;1053267338;-194887551;722894185;-1796145741;-419870710;-744395548;-2126350183;-1623934615;-1975558537;-1109580724;1457379925;952758326;-932820647;-793678521;622734178;-1116891631;992844023;348717466;1162608598;-2078137647;-402129645;-523610230;-892508948;-545793120;1897913877;280270467;-1694155315;294983543;-1251003482;-1650029695;-1335161250;-843867016;1576969605;-260969840;-224140684;1265137246;954732510;2064975050;-1145863940;-1435022393;-1859029257;1513712809;985631399;417291160;-2038587757;-1933156114;888379733;1446724555;-464909414;-1706911051;-1159096460;-1791674743;-147343083;960690226;682596297;1099430942;359127508;311504974;93962501;-1671326033;632618192;-885562045;1179982281;-1505675969;1344906533;-1418551925;1622092278;1701084792;242471559;-1984251903;-1568971862;-1063520265;1591722069;-1959097976;-1601150455;-874166212;-889564662;717605003;-1582378599;-1301052667;1211123575;485189748;-182999148;374766658;1150697026;-738165078;-390496439;960351772;-332421139;71115877;-1747551486;-288197538;2067393244;-402841323;168191432;698976579;-691346957;454158309;419567441;-1655444926;1843518827;-1387150657;-1775972895;1209349907;1737084105;-273997764;2063222132;-629133755;1321145195;-340980602;-64855207;836106865;-384606302;857100345;-616134379;-1192753754;-1534913223;1646103447;-337508797;-104008340;1371554336;1910014402;1731164243;157488784;-1230766726;1651230814;-1801393009;1853249886;-1909629469;-2064890998;-586605120;1029458265;-1567764431;-569878997;-1071722633;1842759325;1870815306;1275367738;-2047480342;699437794;-2078020834;2120915280;1609487567;715455530;-1961002406;-1366381474;1214551640;1682680277;1866914062;-1438763676;1522254727;410589237;1882867230;-2066414372;335577213;-1969515802;-2079897542;1101145964;-914546306;-578950040;-399253994;-1096753521;-660660212;-1198578643;1339175923;-781551297;-1839371394;1105332893;-1928816742;-400816250;1655921312;-452260989;2002840327;447789431;319958765;-658015714;-2019202134;-1586612048;-137582258;706769011;1101838665;827045450;599553857;-2145445088;244597783;1487421271;1630555190;-344172316;-1830139429;-1553867370;-156727033;-755056810;-2131860048;-494346652;1852068823;91308896;725609566;-1111505690;-982815291;1292267944;1836226774;-810066908;-496780978;202956912;603675823;637918661;-10943404;552199869;1297990249;-1519144401;-1727998742;1493519921;-1227758025;-860568373;2118867559;1126222143;-1549971275;-1469719981;-370967157;-1094842937;2081077388;-1045858167;-179155018;-384518151;905350287;-1851803717;571620219;760498291;-480881197;-973785647;838212682;340510526;510321855;-801267485;-852016520;1774211485;39420368;537777206;2107097314;1618664461;210916571;-423959548;631482818;-1040919263;-279241335;-892903760;497369428;1334556795;-290177741;-620998078;1723791759;253979182;2098469877;2033083432;2025527244;-556275368;-1153759308;1554310973;-2109179006;1594713042;-1652347925;-1896234258;1399293819;-1212915145;264979477;2035769098;-26264659;816116738;-1472777223;-1886895409;579752040;1987550252;850378084;-592526232;228677599;-1282752773;-3264037;1636907752;554996081;10747923;1856021975;150743074;1441285143;-284865308;64061770;547700487;2007963302;-518601320;717968026;-1887063740;-1161755710;654757340;624448862;1095845326;1219653475;1112960789;540367258;1430941426;-1573264900;842324047;-1866598839;672477326;-834606497;456739053;2014938441;1820294365;-1127769538;237909957;778195458;-320898672;-493131725;374332760;1492882317;244532839;1469335464;813662131;1904048850;1828753335;1969748325;1462812563;773013089;1263710334;6222118;1806899780;-1306665146;695150693;1034369820;-410885147;-2065109159;-21981403;1688153775;-1834763828;-2034905187;-868895926;-2040902706;760295113;705437415;-801989522;-327259983;340256932;1639347777;676478214;-868392127;-2126595595;1085040460;-101711712;1181203896;-1177629723;1052562025;-385800214;-2127578499;-247860261;-210619237;-1285411717;-1501642238;-1370695642;-901640534;-1139102088;-1435816006;2062624444;733280257;-325264040;815916517;1806401640;106587238;222094010;-1348528385;297616670;-861761020;117428779;2046490308;1520601476;1774880419;2117307057;709856479;658783300;-1019651996;1857641166;-1623434894;-1466106812;1764750271;337867896;1769011978;1878580541;-337505063;55931846;657238908;1968152816;-169076117;-975001150;-619957198;463669432;-1908341507;-643594058;-2026430605;1348524010;-730896925;454931916;416148985;-1578791134;-739712940;-1725329931;204101311;-1062609662;-1691773722;860783264;946450304;1161241387;207536058;3478215;923381087;-305329130;-1353819564;48467194;-497866365;-1191262819;1442954968;-408984143;934531440;1843513070;-1086308879;585900848;-1977125474;-643228730;1005419111;430194483;1169789286;892875109;-1732318651;-897476207;416658129;2090816327;-186559977;-187909452;1699611428;132945605;1386154990;-1021089733;1553010825;1685237703;1771892687;-1665309430;-1471203233;408978895;-1985168698;-1461014828;-475885929;-149644797;184461852;-1631733780;-113049057;1929365839;-1841043271;755994780;1384891379;-572376242;-1822728640;527993133;536302677;-728200547;-1916517795;401821920;777687226;634513383;938837982;-1741204308;-712292839;-888158003;-989731250;1070351745;-997999887;-1220926516;-477621207;-668502217;432615022;341097247;-1817216444;-1580909839;1073812924;-1037427637;-421491456;-2071807233;419582815;835099779;-300811050;1008848942;-622226245;1119083448;2015783992;374250496;417956216;70961961;-1285132279;1021911943;1585993281;1118486430;-946608452;-1704284523;1344252873;908115709;2135579935;636192621;-776174384;533471998;586778067;-154978136;1359740759;1629951629;-1733015859;2121954041;2104107711;-295897115;1345244080;-1738577645;-559564224;1033955967;-1763695458;250221436;-693902564;1091788545;927707887;-712040796;1439001997;1595609215;1364606826;661845780;-755815374;-2034931863;1346096804;-2074100882;-1065691144;654888208;1007146357;778226326;1410374083;1808044267;239070962;-300943249;1387420801;914251343;580430497;1404608152;117575915;1513662704;256310634;-569005681;-1678005121;-1445134348;2053633677;2025466731;-1577911340;-1278866808;-623511374;-1672074119;45321757;1247003680;1061170196;1198754894;-104913407;2054118989;-1781862918;1530368638;-226966082;-707276305;1591871350;331461390;608113940;235882513;-2046843672;-1075932011;-1894925926;1648301914;1170547429;1665497643;-1251944432;-1796010764;-73953480;788544378;1090859788;-1128050928;-145143834;594707390;-728801566;-252193318;1890915838;-834826210;602694736;1275821290;-2078563303;-1397408457;-343458496;1558647263;      };
      mti=156;
     };
    };
    types {
     name=;
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to train";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[0][0]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="datatable with training patterns";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=100;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of epochs to run";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current epoch -- local copy, which is used to update network's epoch counter";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects[0].programs.gp[0][0].types[0]$$;
       value=0;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=-1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects[0].programs.gp[0][0].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="random seed that is used at start of training -- if OldSeed is called";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].train_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="records time used to train network (object lives on network -- this is a pointer to it)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][0].args[2]$$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      desc="check network to make sure it is ready to be run";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][0].args[0]$$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     AssignExpr @[2] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[6]$$;
      expr {
       expr="network.train_time";
      };
     };
     IfElse @[3] {
      desc="initialize random seed (either old or new)";
      flags=;
      cond {
       expr="rnd_init == OLD_SEED";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="restore previous random seed (all runs produce same results)";
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[0][0].vars[5]$$;
	method=RndSeed::OldSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="new random numbers each time";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][0].vars[5]$;
	method=RndSeed::NewSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     IfGuiPrompt @[4] {
      desc="don't initialize weights without checking";
      flags=;
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][0].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       ProgramCall @[1] {
	desc=;
	flags=OFF|NON_STD;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
	target=.projects[0].programs[0]$$;
	targ_ld_init="*SlotToHippo*";
       };
       PrintExpr @[2] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=$.projects[0].programs.gp[0][0].vars[6]$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      desc="start timer to keep track of how long it takes to run entire training run";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][0].vars[6]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MemberAssign @[2] {
      desc="set network's training mode to our local value";
      flags=;
      obj=$.projects[0].programs.gp[0][0].args[0]$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     If @[3] {
      desc=;
      flags=;
      cond {
       expr="no_prompts";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][0].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
     ProgramCall @[4] {
      desc=;
      flags=NON_STD;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
      target=$.projects[0].programs[0]$;
      targ_ld_init="*SlotToHippo*";
     };
     AssignExpr @[5] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=;
      result_var=.projects[0].programs.gp[0][0].vars[1]$$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[6] {
      desc="main loop over epochs of training";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the epoch program (one epoch), passes our network and input_data";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[0][1]$$;
	targ_ld_init="*LeabraEpoch*";
       };
       NetCounterIncr @[1] {
	desc="increment the epoch counter (locally and on network)";
	flags=;
	network_var=$.projects[0].programs.gp[0][0].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[0][0].vars[1]$;
	counter=Network::epoch;
	update_after=1;
       };
       IfBreak @[2] {
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
	flags=;
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     MethodCall @[7] {
      desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][0].vars[6]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=$.projects[0].programs.gp[0][1]$;
    step_n=1;
   };
   Program @[1] {
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][0]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].epoch_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[0][1].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[0][1].vars[1]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[3]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     MemberAssign @[0] {
      desc="set back to training mode";
      flags=NEW_EL;
      obj=$.projects[0].programs.gp[0][1].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
     UserScript @[1] {
      desc="set EC_in -> CA1 to use training spec";
      flags=NON_STD;
      script {
       expr="network.layers.CA1.projections.Fm_EC_in.SetConSpec(network.specs.ConSpec.children.EC_CA1.children.EC_in_CA1);";
      };
     };
     NetCounterInit @[2] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$.projects[0].programs.gp[0][1].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][1].vars[1]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[3] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$.projects[0].programs.gp[0][1].vars[3]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[4] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][1].vars[3]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][1].vars[2]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[6] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[0][2]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.projects[0].programs.gp[0][1].args[1]$$;
      index_var=.projects[0].programs.gp[0][1].vars[4]$$;
      order_var=.projects[0].programs.gp[0][1].vars[0]$$;
      order=PERMUTED;
      item_idx_list{ 4;5;3;1;9;2;8;0;6;7;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     IfElse @[7] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][1].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][1].args[0]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[9] {
      desc=;
      flags=NON_STD;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][1].args[0]$;
      method=LeabraNetwork::Compute_AvgAbsRelNetin;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[10] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][1].vars[3]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[11] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs.gp[0][7]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     ProgramCall @[12] {
      desc=;
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=$.projects[0].programs.gp[1][0]$;
      targ_ld_init="*TestAll*";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[2] {
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[0][2].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[0][2].vars[0]$$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$.projects[0].programs.gp[0][2].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][2].vars[0]$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[2] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[0][3]$$;
	targ_ld_init="*LeabraSettle*";
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[0][2].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[0][2].vars[0]$;
	counter=LeabraNetwork::phase_no;
	update_after=0;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][2].args[0]$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[3] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[4] {
      desc="special for adapting netin";
      flags=NON_STD;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].args[0]$;
      method=LeabraNetwork::Compute_AbsRelNetin;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][2].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     ProgramCall @[6] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs.gp[0][6]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     MethodCall @[7] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].args[0]$;
      method=Network::SnapThresh;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=float;
	type="float";
	name="thresh_val";
	required=0;
	def_val="0.5f";
	expr {
	 expr="0.5";
	};
       };
      };
     };
     NetUpdateView @[8] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$.projects[0].programs.gp[0][2].args[0]$;
      update_var=.projects[0].programs.gp[0][2].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[3] {
    name="LeabraSettle";
    short_nm="Settle";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[0][3].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[0][3].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$.projects[0].programs.gp[0][3].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][3].vars[0]$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][3].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects[0].programs.gp[0][5]$$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[0][3].vars[1]$$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$.projects[0].programs.gp[0][3].vars[1]$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[5] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.projects[0].programs.gp[0][4]$$;
	targ_ld_init="*LeabraCycle*";
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[0][3].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[0][3].vars[0]$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[6] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[7] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.phase == LeabraNetwork::MINUS_PHASE";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][3].args[0]$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[8] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][3].args[0]$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[0][3].args[0]$;
      update_var=.projects[0].programs.gp[0][3].vars[2]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[4] {
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][4].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[0][4].args[0]$;
      update_var=$.projects[0].programs.gp[0][4].vars[0]$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[5] {
    name="ApplyInputs";
    short_nm="AplyIn";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$.projects[0].data.gp[0][0]$;
      network=$.projects[0].networks[0]$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="EC_out";
	net_target=LAYER;
	layer_name="EC_out";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=COMP;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[0][5].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][5].vars[0]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][5].vars[0]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][5].vars[0]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][5].vars[0]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[6] {
    name="LeabraTrialMonitor";
    short_nm="TrlMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=$.projects[0].data.gp[1][0]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][6].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][6].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][6].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][6].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][6].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[3] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[7] {
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="CA3_net_rel";
	computed=0;
	object_type=LeabraLayer;
	object=.projects[0].networks[0].layers[3]$$;
	variable="prjns.avg_netin_rel";
	var_label="net_rel";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="CA1_net_rel";
	computed=0;
	object_type=LeabraLayer;
	object=$.projects[0].networks[0].layers[4]$;
	variable="prjns.avg_netin_rel";
	var_label="net_rel";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="EC_in_net_rel";
	computed=0;
	object_type=LeabraLayer;
	object=.projects[0].networks[0].layers[1]$$;
	variable="prjns.avg_netin_rel";
	var_label="net_rel";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="EC_out_net_rel";
	computed=0;
	object_type=LeabraLayer;
	object=$.projects[0].networks[0].layers[5]$;
	variable="prjns.avg_netin_rel";
	var_label="net_rel";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="CA3_net_max";
	computed=0;
	object_type=LeabraLayer;
	object=$.projects[0].networks[0].layers[3]$;
	variable="avg_netin.max";
	var_label="net_max";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="CA1_net_max";
	computed=0;
	object_type=LeabraLayer;
	object=$.projects[0].networks[0].layers[4]$;
	variable="avg_netin.max";
	var_label="net_max";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="EC_in_net_max";
	computed=0;
	object_type=LeabraLayer;
	object=$.projects[0].networks[0].layers[1]$;
	variable="avg_netin.max";
	var_label="net_max";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="EC_out_net_max";
	computed=0;
	object_type=LeabraLayer;
	object=$.projects[0].networks[0].layers[5]$;
	variable="avg_netin.max";
	var_label="net_max";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=.projects[0].data.gp[1][1]$$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][1]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][7].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects[0].networks[0].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[0][7].vars[2]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$.projects[0].programs.gp[0][7].vars[2]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[8] {
    name="SaveWeights";
    short_nm="SvWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="03";
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".03_0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     IfReturn @[0] {
      desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
      flags=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
     };
     MiscCall @[1] {
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=;
      result_var=.projects[0].programs.gp[0][8].vars[4]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      desc="get current epoch counter with leading zeros to length 4";
      flags=;
      result_var=.projects[0].programs.gp[0][8].vars[3]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][8].vars[5]$$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][8].vars[2]$$;
      obj=.projects[0].programs.gp[0][8].args[0]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="save the weights to that file name";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][8].args[0]$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
  Program_Group @.gp[1] {
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   Program @[0] {
    name="TestAll";
    short_nm="TstAll";
    tags=;
    desc="test all testing cases";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taNBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="Test_AB";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[0][2]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="Test_AC";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[0][3]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[2] {
      name="Lure";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[0][4]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[3] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][2]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     MethodCall @[0] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][0].vars[3]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[1] {
      desc=;
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="Test_AB";
	};
       };
      };
      target=.projects[0].programs.gp[1][1]$$;
      targ_ld_init="*LeabraEpochTest*";
     };
     ProgramCall @[2] {
      desc=;
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="Test_AC";
	};
       };
      };
      target=$.projects[0].programs.gp[1][1]$;
      targ_ld_init="*LeabraEpochTest*";
     };
     ProgramCall @[3] {
      desc=;
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="Lure";
	};
       };
      };
      target=$.projects[0].programs.gp[1][1]$;
      targ_ld_init="*LeabraEpochTest*";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[1] {
    name="LeabraEpochTest";
    short_nm="EpcTst";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][2]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][2]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="last_trial_mon";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][3]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects[0].networks[0].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[1][1].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[1][1].vars[1]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[1][1].vars[4]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$.projects[0].programs.gp[1][1].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[1][1].vars[1]$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[1] {
      desc="set to testing mode";
      flags=NEW_EL;
      obj=$.projects[0].programs.gp[1][1].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TEST";
      };
      update_after=0;
     };
     UserScript @[2] {
      desc="set EC_in -> CA1 to use testing spec";
      flags=NON_STD;
      script {
       expr="network.layers.CA1.projections.Fm_EC_in.SetConSpec(network.specs.ConSpec.children.EC_CA1.children.EC_in_CA1.EC_in_CA1_tst);";
      };
     };
     AssignExpr @[3] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$.projects[0].programs.gp[1][1].vars[4]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[4] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][1].vars[4]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=OFF;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][1].vars[2]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[6] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][1].vars[3]$$;
      method=DataTable::Copy_NoData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_DataTable_ref;
	type="const DataTable&";
	name="cp";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
      };
     };
     NetDataLoop @[7] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[1][2]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.projects[0].programs.gp[1][1].args[1]$$;
      index_var=.projects[0].programs.gp[1][1].vars[5]$$;
      order_var=.projects[0].programs.gp[1][1].vars[0]$$;
      order=SEQUENTIAL;
      item_idx_list{ 0;1;2;3;4;5;6;7;8;9;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     IfElse @[8] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][1].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[9] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][1].args[0]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[10] {
      desc=;
      flags=NON_STD;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][1].args[0]$;
      method=LeabraNetwork::Compute_AvgAbsRelNetin;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[11] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][1].vars[4]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[12] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs.gp[1][7]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     MemberAssign @[13] {
      desc="set back to training mode";
      flags=NEW_EL;
      obj=$.projects[0].programs.gp[1][1].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
     UserScript @[14] {
      desc="set EC_in -> CA1 to use training spec";
      flags=NON_STD;
      script {
       expr="network.layers.CA1.projections.Fm_EC_in.SetConSpec(network.specs.ConSpec.children.EC_CA1.children.EC_in_CA1);";
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[2] {
    name="LeabraTrialTest";
    short_nm="TrlTst";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][2]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[1][2].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[1][2].vars[0]$$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$.projects[0].programs.gp[1][2].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[1][2].vars[0]$;
      counter=LeabraNetwork::phase_no;
      update_after=1;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[2] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[1][3]$$;
	targ_ld_init="*LeabraSettle*";
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[1][2].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[1][2].vars[0]$;
	counter=LeabraNetwork::phase_no;
	update_after=1;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][2].args[0]$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[3] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[4] {
      desc="special for adapting netin";
      flags=NON_STD;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Compute_AbsRelNetin;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[5] {
      desc=;
      flags=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][2].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     ProgramCall @[6] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs.gp[1][6]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     MethodCall @[7] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][2].args[0]$;
      method=Network::SnapThresh;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=float;
	type="float";
	name="thresh_val";
	required=0;
	def_val="0.5f";
	expr {
	 expr="0.5";
	};
       };
      };
     };
     NetUpdateView @[8] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$.projects[0].programs.gp[1][2].args[0]$;
      update_var=.projects[0].programs.gp[1][2].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[3] {
    name="LeabraSettleTest";
    short_nm="SttTst";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][2]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[1][3].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[1][3].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$.projects[0].programs.gp[1][3].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[1][3].vars[0]$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][3].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects[0].programs.gp[1][5]$$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][3].args[0]$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[1][3].vars[1]$$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$.projects[0].programs.gp[1][3].vars[1]$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[5] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.projects[0].programs.gp[1][4]$$;
	targ_ld_init="*LeabraCycle*";
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[1][3].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[1][3].vars[0]$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[6] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][3].args[0]$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[7] {
      desc="compute trial-level statistics";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][3].args[0]$;
      method=LeabraNetwork::Compute_TrialStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[8] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=OFF;
      cond {
       expr="network.phase == LeabraNetwork::MINUS_PHASE";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     If @[9] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][3].args[0]$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     NetUpdateView @[10] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[1][3].args[0]$;
      update_var=.projects[0].programs.gp[1][3].vars[2]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[4] {
    name="LeabraCycleTest";
    short_nm="CycTst";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][4].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[1][4].args[0]$;
      update_var=$.projects[0].programs.gp[1][4].vars[0]$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[5] {
    name="ApplyInputsTest";
    short_nm="AplyIn";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$.projects[0].data.gp[0][2]$;
      network=$.projects[0].networks[0]$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="EC_out";
	net_target=LAYER;
	layer_name="EC_out";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=COMP;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][2]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[1][5].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="group_name";
      var_type=T_String;
      string_val="lure";
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][5].vars[0]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][5].vars[0]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][5].vars[0]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][5].vars[0]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[1][5].vars[1]$$;
      expr {
       expr="network.trial_name.before(\"_\")";
      };
     };
     MemberAssign @[3] {
      desc=;
      flags=;
      obj=.projects[0].programs.gp[1][5].args[0]$$;
      path="group_name";
      expr {
       expr="group_name";
      };
      update_after=0;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[6] {
    name="LeabraTrialMonitorTest";
    short_nm="TrlMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="stim_err_on";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="ext_rew";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="stim_err_off";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="ext_rew";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="rmbr";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="ext_rew";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="group_number";
	computed=1;
	object_type=LeabraNetwork;
	object=NULL;
	variable="ext_rew";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=$.projects[0].data.gp[1][2]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][2]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="last_trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][3]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="just the last epoch of data";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[1][6].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="stim_err_on";
      var_type=T_Real;
      real_val=0.8888888888888888;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[4] {
      name="stim_err_off";
      var_type=T_Real;
      real_val=0.8888888888888888;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[5] {
      name="rmbr";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[6] {
      name="group_number";
      var_type=T_Real;
      real_val=2;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[7] {
      name="group_name";
      var_type=T_String;
      string_val="lure";
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][6].vars[2]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[2]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[2]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][6].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[2]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="get stim_err_on, off, rmbr stats";
      flags=NON_STD;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=LeabraNetwork;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs[1]$$;
      targ_ld_init="*StimErrOnOff*";
     };
     OtherProgramVar @[3] {
      desc=;
      flags=NON_STD;
      other_prog=$.projects[0].programs[1]$;
      set_other=0;
      var_1=.projects[0].programs.gp[1][6].vars[3]$$;
      var_2=.projects[0].programs.gp[1][6].vars[4]$$;
      var_3=.projects[0].programs.gp[1][6].vars[5]$$;
      var_4=NULL;
     };
     AssignExpr @[4] {
      desc=;
      flags=NON_STD;
      result_var=.projects[0].programs.gp[1][6].vars[7]$$;
      expr {
       expr="network.group_name";
      };
     };
     Switch @[5] {
      desc=;
      flags=NON_STD;
      switch_var=$.projects[0].programs.gp[1][6].vars[7]$;
      cases {
       name=;
       el_typ=CaseBlock;
       el_def=0;
       CaseBlock @[0] {
	desc=;
	flags=;
	prog_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=.projects[0].programs.gp[1][6].vars[6]$$;
	  expr {
	   expr="0";
	  };
	 };
	};
	case_val {
	 expr="\"ab\"";
	};
       };
       CaseBlock @[1] {
	desc=;
	flags=;
	prog_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=$.projects[0].programs.gp[1][6].vars[6]$;
	  expr {
	   expr="1";
	  };
	 };
	};
	case_val {
	 expr="\"ac\"";
	};
       };
       CaseBlock @[2] {
	desc=;
	flags=;
	prog_code {
	 name=;
	 el_typ=ProgEl;
	 el_def=0;
	 AssignExpr @[0] {
	  desc=;
	  flags=;
	  result_var=$.projects[0].programs.gp[1][6].vars[6]$;
	  expr {
	   expr="2";
	  };
	 };
	};
	case_val {
	 expr="\"lure\"";
	};
       };
      };
     };
     DataVarProg @[6] {
      desc=;
      flags=NON_STD;
      data_var=$.projects[0].programs.gp[1][6].vars[0]$;
      set_data=1;
      row_spec=CUR_ROW;
      row_var=NULL;
      quiet=0;
      var_1=$.projects[0].programs.gp[1][6].vars[3]$;
      var_2=$.projects[0].programs.gp[1][6].vars[4]$;
      var_3=$.projects[0].programs.gp[1][6].vars[5]$;
      var_4=$.projects[0].programs.gp[1][6].vars[6]$;
     };
     MethodCall @[7] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][6].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
     AddNewDataRow @[9] {
      desc=;
      flags=;
      data_var=.projects[0].programs.gp[1][6].vars[1]$$;
     };
     MethodCall @[10] {
      desc=;
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[1]$;
      method=DataTable::CopyFromRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="dest_row";
	required=1;
	def_val=;
	expr {
	 expr="last_trial_mon_data.rows-1";
	};
       };
       ProgArg @[1] {
	arg_type=const_DataTable_ref;
	type="const DataTable&";
	name="cp";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="src_row";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data.rows-1";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[7] {
    name="LeabraEpochMonitorTest";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_stim_err_on";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$.projects[0].data.gp[1][3]$;
	agg_col {
	 col_name="stim_err_on";
	};
	agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="avg_stim_err_off";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$.projects[0].data.gp[1][3]$;
	agg_col {
	 col_name="stim_err_off";
	};
	agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_rmbr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$.projects[0].data.gp[1][3]$;
	agg_col {
	 col_name="rmbr";
	};
	agg {name="Aggregate": op=MEAN: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=.projects[0].data.gp[1][4]$$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][4]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[1][7].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][7].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][7].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][7].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][7].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][7].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][7].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[8] {
    name="LeabraEpochMonitorTest_Tune";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="tuning version with detailed recording of netin measures";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="CA3_net_rel";
	computed=0;
	object_type=LeabraLayer;
	object=$.projects[0].networks[0].layers[3]$;
	variable="prjns.avg_netin_rel";
	var_label="net_rel";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="CA1_net_rel";
	computed=0;
	object_type=LeabraLayer;
	object=$.projects[0].networks[0].layers[4]$;
	variable="prjns.avg_netin_rel";
	var_label="net_rel";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="EC_in_net_rel";
	computed=0;
	object_type=LeabraLayer;
	object=$.projects[0].networks[0].layers[1]$;
	variable="prjns.avg_netin_rel";
	var_label="net_rel";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="EC_out_net_rel";
	computed=0;
	object_type=LeabraLayer;
	object=$.projects[0].networks[0].layers[5]$;
	variable="prjns.avg_netin_rel";
	var_label="net_rel";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="CA3_net_max";
	computed=0;
	object_type=LeabraLayer;
	object=$.projects[0].networks[0].layers[3]$;
	variable="avg_netin.max";
	var_label="net_max";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="CA1_net_max";
	computed=0;
	object_type=LeabraLayer;
	object=$.projects[0].networks[0].layers[4]$;
	variable="avg_netin.max";
	var_label="net_max";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[14] {
	name="EC_in_net_max";
	computed=0;
	object_type=LeabraLayer;
	object=$.projects[0].networks[0].layers[1]$;
	variable="avg_netin.max";
	var_label="net_max";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[15] {
	name="EC_out_net_max";
	computed=0;
	object_type=LeabraLayer;
	object=$.projects[0].networks[0].layers[5]$;
	variable="avg_netin.max";
	var_label="net_max";
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=$.projects[0].data.gp[1][4]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][4]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[1][8].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects[0].networks[0].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[1][8].vars[2]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][8].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][8].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][8].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][8].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][8].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$.projects[0].programs.gp[1][8].vars[2]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][8].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][8].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][8].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
  Program_Group @.gp[2] {
   name="GenBitPatternsAll";
   el_typ=Program;
   el_def=0;
   tags=;
   desc=;
   Program @[0] {
    name="GenBitPatterns";
    short_nm="GBPttr";
    tags=;
    desc=;
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=DataTable;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    step_prog=NULL;
    step_n=1;
   };
  };
  Program_Group @.gp[3] {
   name="SlotTrain";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   Program @[0] {
    name="LeabraTrainSlot";
    short_nm="TrnSlt";
    tags="Leabra, Std";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
    flags=;
    objs {
     name=;
     el_typ=RndSeed;
     el_def=0;
     RndSeed @[0] {
      name="rnd_seed";
      seed{ 897248114;-1259630319;-1954705695;-2086433643;-1705562578;-246166775;142172280;-1066196830;649876912;-363601797;-1551220787;-201998924;984813377;-1929982005;1866720504;1737535582;-2064818913;-596409631;-537210356;-394821123;-1176302275;-1088439095;390472553;1002483428;-644065336;-93234492;-249392311;1955837623;486322880;268723693;-1316990013;-1148081097;1053267338;-194887551;722894185;-1796145741;-419870710;-744395548;-2126350183;-1623934615;-1975558537;-1109580724;1457379925;952758326;-932820647;-793678521;622734178;-1116891631;992844023;348717466;1162608598;-2078137647;-402129645;-523610230;-892508948;-545793120;1897913877;280270467;-1694155315;294983543;-1251003482;-1650029695;-1335161250;-843867016;1576969605;-260969840;-224140684;1265137246;954732510;2064975050;-1145863940;-1435022393;-1859029257;1513712809;985631399;417291160;-2038587757;-1933156114;888379733;1446724555;-464909414;-1706911051;-1159096460;-1791674743;-147343083;960690226;682596297;1099430942;359127508;311504974;93962501;-1671326033;632618192;-885562045;1179982281;-1505675969;1344906533;-1418551925;1622092278;1701084792;242471559;-1984251903;-1568971862;-1063520265;1591722069;-1959097976;-1601150455;-874166212;-889564662;717605003;-1582378599;-1301052667;1211123575;485189748;-182999148;374766658;1150697026;-738165078;-390496439;960351772;-332421139;71115877;-1747551486;-288197538;2067393244;-402841323;168191432;698976579;-691346957;454158309;419567441;-1655444926;1843518827;-1387150657;-1775972895;1209349907;1737084105;-273997764;2063222132;-629133755;1321145195;-340980602;-64855207;836106865;-384606302;857100345;-616134379;-1192753754;-1534913223;1646103447;-337508797;-104008340;1371554336;1910014402;1731164243;157488784;-1230766726;1651230814;-1801393009;1853249886;-1909629469;-2064890998;-586605120;1029458265;-1567764431;-569878997;-1071722633;1842759325;1870815306;1275367738;-2047480342;699437794;-2078020834;2120915280;1609487567;715455530;-1961002406;-1366381474;1214551640;1682680277;1866914062;-1438763676;1522254727;410589237;1882867230;-2066414372;335577213;-1969515802;-2079897542;1101145964;-914546306;-578950040;-399253994;-1096753521;-660660212;-1198578643;1339175923;-781551297;-1839371394;1105332893;-1928816742;-400816250;1655921312;-452260989;2002840327;447789431;319958765;-658015714;-2019202134;-1586612048;-137582258;706769011;1101838665;827045450;599553857;-2145445088;244597783;1487421271;1630555190;-344172316;-1830139429;-1553867370;-156727033;-755056810;-2131860048;-494346652;1852068823;91308896;725609566;-1111505690;-982815291;1292267944;1836226774;-810066908;-496780978;202956912;603675823;637918661;-10943404;552199869;1297990249;-1519144401;-1727998742;1493519921;-1227758025;-860568373;2118867559;1126222143;-1549971275;-1469719981;-370967157;-1094842937;2081077388;-1045858167;-179155018;-384518151;905350287;-1851803717;571620219;760498291;-480881197;-973785647;838212682;340510526;510321855;-801267485;-852016520;1774211485;39420368;537777206;2107097314;1618664461;210916571;-423959548;631482818;-1040919263;-279241335;-892903760;497369428;1334556795;-290177741;-620998078;1723791759;253979182;2098469877;2033083432;2025527244;-556275368;-1153759308;1554310973;-2109179006;1594713042;-1652347925;-1896234258;1399293819;-1212915145;264979477;2035769098;-26264659;816116738;-1472777223;-1886895409;579752040;1987550252;850378084;-592526232;228677599;-1282752773;-3264037;1636907752;554996081;10747923;1856021975;150743074;1441285143;-284865308;64061770;547700487;2007963302;-518601320;717968026;-1887063740;-1161755710;654757340;624448862;1095845326;1219653475;1112960789;540367258;1430941426;-1573264900;842324047;-1866598839;672477326;-834606497;456739053;2014938441;1820294365;-1127769538;237909957;778195458;-320898672;-493131725;374332760;1492882317;244532839;1469335464;813662131;1904048850;1828753335;1969748325;1462812563;773013089;1263710334;6222118;1806899780;-1306665146;695150693;1034369820;-410885147;-2065109159;-21981403;1688153775;-1834763828;-2034905187;-868895926;-2040902706;760295113;705437415;-801989522;-327259983;340256932;1639347777;676478214;-868392127;-2126595595;1085040460;-101711712;1181203896;-1177629723;1052562025;-385800214;-2127578499;-247860261;-210619237;-1285411717;-1501642238;-1370695642;-901640534;-1139102088;-1435816006;2062624444;733280257;-325264040;815916517;1806401640;106587238;222094010;-1348528385;297616670;-861761020;117428779;2046490308;1520601476;1774880419;2117307057;709856479;658783300;-1019651996;1857641166;-1623434894;-1466106812;1764750271;337867896;1769011978;1878580541;-337505063;55931846;657238908;1968152816;-169076117;-975001150;-619957198;463669432;-1908341507;-643594058;-2026430605;1348524010;-730896925;454931916;416148985;-1578791134;-739712940;-1725329931;204101311;-1062609662;-1691773722;860783264;946450304;1161241387;207536058;3478215;923381087;-305329130;-1353819564;48467194;-497866365;-1191262819;1442954968;-408984143;934531440;1843513070;-1086308879;585900848;-1977125474;-643228730;1005419111;430194483;1169789286;892875109;-1732318651;-897476207;416658129;2090816327;-186559977;-187909452;1699611428;132945605;1386154990;-1021089733;1553010825;1685237703;1771892687;-1665309430;-1471203233;408978895;-1985168698;-1461014828;-475885929;-149644797;184461852;-1631733780;-113049057;1929365839;-1841043271;755994780;1384891379;-572376242;-1822728640;527993133;536302677;-728200547;-1916517795;401821920;777687226;634513383;938837982;-1741204308;-712292839;-888158003;-989731250;1070351745;-997999887;-1220926516;-477621207;-668502217;432615022;341097247;-1817216444;-1580909839;1073812924;-1037427637;-421491456;-2071807233;419582815;835099779;-300811050;1008848942;-622226245;1119083448;2015783992;374250496;417956216;70961961;-1285132279;1021911943;1585993281;1118486430;-946608452;-1704284523;1344252873;908115709;2135579935;636192621;-776174384;533471998;586778067;-154978136;1359740759;1629951629;-1733015859;2121954041;2104107711;-295897115;1345244080;-1738577645;-559564224;1033955967;-1763695458;250221436;-693902564;1091788545;927707887;-712040796;1439001997;1595609215;1364606826;661845780;-755815374;-2034931863;1346096804;-2074100882;-1065691144;654888208;1007146357;778226326;1410374083;1808044267;239070962;-300943249;1387420801;914251343;580430497;1404608152;117575915;1513662704;256310634;-569005681;-1678005121;-1445134348;2053633677;2025466731;-1577911340;-1278866808;-623511374;-1672074119;45321757;1247003680;1061170196;1198754894;-104913407;2054118989;-1781862918;1530368638;-226966082;-707276305;1591871350;331461390;608113940;235882513;-2046843672;-1075932011;-1894925926;1648301914;1170547429;1665497643;-1251944432;-1796010764;-73953480;788544378;1090859788;-1128050928;-145143834;594707390;-728801566;-252193318;1890915838;-834826210;602694736;1275821290;-2078563303;-1397408457;-343458496;1558647263;      };
      mti=156;
     };
    };
    types {
     name=;
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[1]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to train";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[0][5]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="datatable with training patterns";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=200;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of epochs to run";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=150;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current epoch -- local copy, which is used to update network's epoch counter";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects[0].programs.gp[3][0].types[0]$$;
       value=0;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects[0].programs.gp[3][0].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="random seed that is used at start of training -- if OldSeed is called";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[1].train_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="records time used to train network (object lives on network -- this is a pointer to it)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[3][0].args[2]$$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      desc="check network to make sure it is ready to be run";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[3][0].args[0]$$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     AssignExpr @[2] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=.projects[0].programs.gp[3][0].vars[6]$$;
      expr {
       expr="network.train_time";
      };
     };
     IfElse @[3] {
      desc="initialize random seed (either old or new)";
      flags=;
      cond {
       expr="rnd_init == OLD_SEED";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="restore previous random seed (all runs produce same results)";
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[3][0].vars[5]$$;
	method=RndSeed::OldSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="new random numbers each time";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[3][0].vars[5]$;
	method=RndSeed::NewSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     IfGuiPrompt @[4] {
      desc="don't initialize weights without checking";
      flags=;
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[3][0].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=$.projects[0].programs.gp[3][0].vars[6]$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      desc="start timer to keep track of how long it takes to run entire training run";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][0].vars[6]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MemberAssign @[2] {
      desc="set network's training mode to our local value";
      flags=;
      obj=$.projects[0].programs.gp[3][0].args[0]$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     If @[3] {
      desc=;
      flags=;
      cond {
       expr="no_prompts";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[3][0].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
     AssignExpr @[4] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=;
      result_var=.projects[0].programs.gp[3][0].vars[1]$$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[5] {
      desc="main loop over epochs of training";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the epoch program (one epoch), passes our network and input_data";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[3][1]$$;
	targ_ld_init="*LeabraEpoch*";
       };
       NetCounterIncr @[1] {
	desc="increment the epoch counter (locally and on network)";
	flags=;
	network_var=$.projects[0].programs.gp[3][0].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[3][0].vars[1]$;
	counter=Network::epoch;
	update_after=0;
       };
       IfBreak @[2] {
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
	flags=;
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     MethodCall @[6] {
      desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][0].vars[6]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=$.projects[0].programs.gp[3][1]$;
    step_n=1;
   };
   Program @[1] {
    name="LeabraEpochSlot";
    short_nm="pchSlt";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[1]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][5]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=63;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=NULL;
      objs_ptr=0;
      flags=USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[1].epoch_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=64;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[3][1].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[3][1].vars[1]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[3][1].vars[3]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$.projects[0].programs.gp[3][1].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[3][1].vars[1]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$.projects[0].programs.gp[3][1].vars[3]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[2] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][1].vars[3]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=OFF;
      result_var=NULL;
      obj=.projects[0].programs.gp[3][1].vars[2]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[4] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[3][2]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.projects[0].programs.gp[3][1].args[1]$$;
      index_var=.projects[0].programs.gp[3][1].vars[4]$$;
      order_var=.projects[0].programs.gp[3][1].vars[0]$$;
      order=PERMUTED;
      item_idx_list{ 19;44;50;41;57;47;33;61;37;21;52;34;59;48;13;7;8;0;55;36;6;35;22;26;9;24;5;39;10;58;40;2;38;15;17;54;18;62;45;53;16;20;23;14;3;51;29;60;1;11;4;12;32;27;28;56;49;25;42;63;43;46;31;30;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     IfElse @[5] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[3][1].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[6] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][1].args[0]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[7] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][1].vars[3]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[8] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs.gp[3][6]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[2] {
    name="LeabraTrialSlot";
    short_nm="TrlSlt";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[1]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][5]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=2;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[3][2].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[3][2].vars[0]$$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$.projects[0].programs.gp[3][2].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[3][2].vars[0]$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][2].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[2] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[3][3]$$;
	targ_ld_init="*LeabraSettle*";
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[3][2].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[3][2].vars[0]$;
	counter=LeabraNetwork::phase_no;
	update_after=0;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[3][2].args[0]$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[3] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][2].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[4] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[3][2].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     ProgramCall @[5] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=OFF;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="Network*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=NULL;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[6] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$.projects[0].programs.gp[3][2].args[0]$;
      update_var=.projects[0].programs.gp[3][2].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[3] {
    name="LeabraSettleSlot";
    short_nm="SttSlt";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[1]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][5]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[3][3].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[3][3].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$.projects[0].programs.gp[3][3].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[3][3].vars[0]$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][3].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects[0].programs.gp[3][5]$$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][3].args[0]$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[3][3].vars[1]$$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$.projects[0].programs.gp[3][3].vars[1]$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[5] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.projects[0].programs.gp[3][4]$$;
	targ_ld_init="*LeabraCycle*";
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[3][3].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[3][3].vars[0]$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[6] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][3].args[0]$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[7] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.phase == LeabraNetwork::MINUS_PHASE";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[3][3].args[0]$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[8] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[3][3].args[0]$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[3][3].args[0]$;
      update_var=.projects[0].programs.gp[3][3].vars[2]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[4] {
    name="LeabraCycleSlot";
    short_nm="CycSlt";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[1]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[3][4].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[3][4].args[0]$;
      update_var=.projects[0].programs.gp[3][4].vars[0]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[5] {
    name="ApplyInputsSlot";
    short_nm="AplyIn";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$.projects[0].data.gp[0][5]$;
      network=$.projects[0].networks[1]$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="EC_in";
	net_target=LAYER;
	layer_name="EC_in";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="EC_out";
	net_target=LAYER;
	layer_name="EC_out";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[1]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][5]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[3][5].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[3][5].vars[0]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][5].vars[0]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][5].vars[0]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][5].vars[0]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[6] {
    name="LeabraEpochMonitorSlot";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[1]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[1]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[1]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[1]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[1]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[1]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[1]$;
      data=.projects[0].data.gp[1][5]$$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[1]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][5]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[3][6].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects[0].networks[1].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[3][6].vars[2]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[3][6].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][6].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][6].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[3][6].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][6].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$.projects[0].programs.gp[3][6].vars[2]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][6].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][6].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[3][6].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
 };
 viewers {
  name=;
  el_typ=TopLevelViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="view_win_lft";
     value 6 0=-0.001843884470872581;
     val_type_fixed=0;
    };
    UserDataItem @[1] {
     name="view_win_top";
     value 6 0=0;
     val_type_fixed=0;
    };
    UserDataItem @[2] {
     name="view_win_wd";
     value 6 0=1.001843929290771;
     val_type_fixed=0;
    };
    UserDataItem @[3] {
     name="view_win_ht";
     value 6 0=0.7996109127998352;
     val_type_fixed=0;
    };
    UserDataItem @[4] {
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @[5] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAAAAAADAAAAtwAAAm0AAAMuAQAAAAYBAAAAAQ==";
     val_type_fixed=0;
    };
   };
   name="Browser3";
   m_data=.projects[0]$$;
   visible=1;
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name=;
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_win_visible";
       value 1 0=0;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     visible=0;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name=;
    el_typ=FrameViewer;
    el_def=0;
    tabBrowseViewer @[0] {
     name="Tree";
     m_data=NULL;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects[0]$;
    };
    PanelViewer @[1] {
     name="Panels";
     m_data=NULL;
     visible=1;
    };
    T3DataViewer @[2] {
     name="T3Frames";
     m_data=NULL;
     visible=1;
     frames {
      name=;
      el_typ=T3DataViewFrame;
      el_def=0;
      T3DataViewFrame @[0] {
       name="HippoNet";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 NetView @[0] {
	  name=;
	  m_data=$.projects[0].networks[0]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  display=1;
	  lay_mv=0;
	  net_text=0;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  cur_unit_vals{ act;	  };
	  unit_src_path=".layers[4].units.gp[1][11]";
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=31: y=33: z=3.25: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=1;
	  snap_bord_width=0;
	  scale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs[0]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    name="net";
	    auto_scale=1;
	    min=-1.516336;
	    max=1.516336;
	   };
	   ScaleRange @[3] {
	    name="s.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    name="targ";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=0;EC_in=0;DG=0;CA3=0;CA1=0;EC_out=0;	  };
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=0.464: y=0.7827264: z=1.475611: };
	 orient {x=-0.9999995: y=0: z=0: rot=0.1660001: };
	 focal_dist=1.827656;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[1] {
       name="TrialTestOutputData";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GridTableView @[0] {
	  name=;
	  m_data=$.projects[0].data.gp[1][2]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="batch";
	    m_data=.projects[0].data.gp[1][2].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="epoch";
	    m_data=.projects[0].data.gp[1][2].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="trial";
	    m_data=.projects[0].data.gp[1][2].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    name="trial_name";
	    m_data=.projects[0].data.gp[1][2].data[3]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    name="group_name";
	    m_data=.projects[0].data.gp[1][2].data[4]$$;
	    m_transform=NULL;
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[5] {
	    name="minus_cycles";
	    m_data=.projects[0].data.gp[1][2].data[5]$$;
	    m_transform=NULL;
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[6] {
	    name="sse";
	    m_data=.projects[0].data.gp[1][2].data[6]$$;
	    m_transform=NULL;
	    visible=0;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[7] {
	    name="stim_err_on";
	    m_data=.projects[0].data.gp[1][2].data[7]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[8] {
	    name="stim_err_off";
	    m_data=.projects[0].data.gp[1][2].data[8]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[9] {
	    name="rmbr";
	    m_data=.projects[0].data.gp[1][2].data[9]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[10] {
	    name="group_number";
	    m_data=.projects[0].data.gp[1][2].data[10]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=30;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=4;
	  col_range {min=3: max=6: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.01: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	 };
	 GridTableView @[1] {
	  name=;
	  m_data=$.projects[0].data.gp[1][4]$;
FloatTransform @*(.m_transform) {scale={x=0.1772741: y=0.1772741: z=0.1772741: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.9675541: y=1.13664: z=2.113272e-08: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="batch";
	    m_data=.projects[0].data.gp[1][4].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="epoch";
	    m_data=.projects[0].data.gp[1][4].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="avg_stim_err_on";
	    m_data=.projects[0].data.gp[1][4].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    name="avg_stim_err_off";
	    m_data=.projects[0].data.gp[1][4].data[3]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    name="avg_rmbr";
	    m_data=.projects[0].data.gp[1][4].data[4]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=0.1772741: y=0.1772741: z=0.1772741: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0.9675541: y=1.13664: z=2.113272e-08: }: };
	  view_rows=3;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=1: max=4: };
	  width=6;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.2: max=0.4: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=1.551759: y=0.6333208: z=1.762548: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.772548;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[2] {
       name="TrialTestOutputDataGraph";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GraphTableView @[0] {
	  name=;
	  m_data=$.projects[0].data.gp[1][2]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="batch";
	    m_data=$.projects[0].data.gp[1][2].data[0]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="epoch";
	    m_data=$.projects[0].data.gp[1][2].data[1]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="trial";
	    m_data=$.projects[0].data.gp[1][2].data[2]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=9: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="trial_name";
	    m_data=$.projects[0].data.gp[1][2].data[3]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="group_name";
	    m_data=$.projects[0].data.gp[1][2].data[4]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="minus_cycles";
	    m_data=$.projects[0].data.gp[1][2].data[5]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="sse";
	    m_data=$.projects[0].data.gp[1][2].data[6]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="stim_err_on";
	    m_data=$.projects[0].data.gp[1][2].data[7]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="stim_err_off";
	    m_data=$.projects[0].data.gp[1][2].data[8]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="rmbr";
	    m_data=$.projects[0].data.gp[1][2].data[9]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    name="group_number";
	    m_data=$.projects[0].data.gp[1][2].data[10]$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=2: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=POINTS;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=LARGE;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="stim_err_off";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="epoch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=2: max=2: };
	   range {min=1.99988: max=2.0001: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="stim_err_on";
	   fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=COLOR_AXIS;
	  color_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="group_number";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-19: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=131;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=.colorspecs[7]$$<ColorScaleSpec,C_BlueGreenRed>;
	   auto_scale=0;
	  };
	  raster_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=1.4275: y=0.445: z=1.732823: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.745323;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[3] {
       name="InputData";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GridTableView @[0] {
	  name=;
	  m_data=$.projects[0].data.gp[0][0]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="Name";
	    m_data=.projects[0].data.gp[0][0].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="Input";
	    m_data=.projects[0].data.gp[0][0].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="EC_out";
	    m_data=.projects[0].data.gp[0][0].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=2;
	  view_range {min=0: max=1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=0: max=2: };
	  width=0.5;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	 };
	 GridTableView @[1] {
	  name=;
	  m_data=$.projects[0].data.gp[0][2]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1.608834: y=-0.001248327: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="Name";
	    m_data=.projects[0].data.gp[0][2].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="Input";
	    m_data=.projects[0].data.gp[0][2].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="EC_out";
	    m_data=.projects[0].data.gp[0][2].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=4;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1.608834: y=-0.001248327: z=0: }: };
	  view_rows=2;
	  view_range {min=0: max=1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=0: max=2: };
	  width=0.5;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=1.558167: y=0.5168759: z=1.491767: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.501767;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[4] {
       name="CA1_EC_SlotNet";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 NetView @[0] {
	  name=;
	  m_data=$.projects[0].networks[1]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  display=0;
	  lay_mv=0;
	  net_text=1;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  cur_unit_vals{ act;	  };
	  unit_src_path=".layers[2].units[0]";
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=7: y=1: z=1.5: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    name="s.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    name="vcb.hyst";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ EC_in=0;CA1=0;EC_out=0;	  };
	 };
	 GraphTableView @[1] {
	  name=;
	  m_data=$.projects[0].data.gp[1][5]$;
FloatTransform @*(.m_transform) {scale={x=0.6202043: y=0.6202041: z=0.6202044: }: rotate={x=0.9993241: y=0.03728713: z=-0.002604953: rot=0.1395914: }: translate={x=0.1735592: y=1.195037: z=-0.05375261: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="batch";
	    m_data=.projects[0].data.gp[1][5].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="epoch";
	    m_data=.projects[0].data.gp[1][5].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=91: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="avg_sse";
	    m_data=.projects[0].data.gp[1][5].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="cnt_err";
	    m_data=.projects[0].data.gp[1][5].data[3]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="avg_ext_rew";
	    m_data=.projects[0].data.gp[1][5].data[4]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="avg_cycles";
	    m_data=.projects[0].data.gp[1][5].data[5]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="epoch_time_tot";
	    m_data=.projects[0].data.gp[1][5].data[6]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="epoch_time_usr";
	    m_data=.projects[0].data.gp[1][5].data[7]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=0.6202043: y=0.6202041: z=0.6202044: }: rotate={x=0.9993241: y=0.03728713: z=-0.002604953: rot=0.1395914: }: translate={x=0.1735592: y=1.195037: z=-0.05375261: }: };
	  view_rows=10000;
	  view_range {min=0: max=149: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=149: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=149: };
	   range {min=0: max=149: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-07: max=6e-07: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="cnt_err";
	   fixed_range {fix_min=1: min=0: fix_max=0: max=63: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=63: };
	   range {min=0: max=63: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="avg_sse";
	   fixed_range {fix_min=1: min=0: fix_max=0: max=1: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=1;
	  };
	  plot_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=1;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=VALUE_COLOR;
	  color_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=0.496475: y=0.7632815: z=2.609632: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.81183;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name=;
    el_typ=DockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_win_lft";
       value 6 0=0;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_win_top";
       value 6 0=0.008754863403737545;
       val_type_fixed=0;
      };
      UserDataItem @[2] {
       name="view_win_wd";
       value 6 0=0.05961893126368523;
       val_type_fixed=0;
      };
      UserDataItem @[3] {
       name="view_win_ht";
       value 6 0=0.7285992503166199;
       val_type_fixed=0;
      };
      UserDataItem @[4] {
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @[5] {
       name="view_visible";
       value 1 0=0;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     visible=0;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 last_change_desc=;
 networks {
  name=;
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="norm_err";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[1] {
     name="ext_rew";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[2] {
     name="maxda";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[3] {
     name="minus_output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[4] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[5] {
     name="ct_cycle";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[6] {
     name="phase_no";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[7] {
     name="phase";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[8] {
     name="sse";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[9] {
     name="output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[10] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[11] {
     name="group_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[12] {
     name="time";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[13] {
     name="cycle";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[14] {
     name="tick";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[15] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[16] {
     name="group";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[17] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[18] {
     name="batch";
     value 1 0=0;
     val_type_fixed=1;
    };
   };
   name="HippoNet";
   desc=;
   specs {
    name=;
    el_typ=BaseSpec;
    el_def=0;
    LeabraConSpec @[0] {
     name="ConSpec";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraConSpec @[0] {
       name="EC_CA1";
       desc=;
       unique{ rnd;lrate;       };
       children {
	name=;
	el_typ=LeabraConSpec;
	el_def=0;
	LeabraConSpec @[0] {
	 name="EC_in_CA1";
	 desc="training version: CA1 driven strongly by inputs";
	 unique{ rnd;wt_scale;wt_sig;lrate;	 };
	 children {
	  name=;
	  el_typ=LeabraConSpec;
	  el_def=0;
	  LeabraConSpec @[0] {
	   name="EC_in_CA1_tst";
	   desc="testing version: CA1 driven by CA3";
	   unique{ wt_scale;	   };
	   children {
	    name=;
	    el_typ=LeabraConSpec;
	    el_def=0;
	   };
	   rnd {name="": type=NONE: mean=0.9: var=0.01: par=1: };
	   wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	   learn_rule=LEABRA_CHL;
	   inhib=0;
	   wt_scale {abs=1: rel=0.5: sem_extra=2: old=0: };
	   wt_scale_init {init=0: abs=1: rel=1: };
	   lrate=0;
	   cur_lrate=0;
	   lrs_value=EPOCH;
	   lrate_sched {
	    name=;
	    el_typ=SchedItem;
	    el_def=0;
	    last_ctr=-1;
	    default_val=1;
	    interpolate=0;
	    cur_val=0;
	   };
	   wt_sig {gain=6: off=1.25: };
	   lmix {hebb=1: err=0: err_sb=1: };
	   xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
	   savg_cor {cor=1: thresh=0.001: norm_con_n=1: };
	   rel_net_adapt {
	    on=0;
	    trg_fm_input=0.85;
	    trg_fm_output=0.15;
	    trg_lateral=0;
	    trg_sum=1;
	    tol_lg=0.05;
	    tol_sm=0.2;
	    rel_lrate=0.1;
	   };
	  };
	 };
	 rnd {name="": type=NONE: mean=0.9: var=0.01: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	 learn_rule=LEABRA_CHL;
	 inhib=0;
	 wt_scale {abs=1: rel=4: sem_extra=2: old=0: };
	 wt_scale_init {init=0: abs=1: rel=1: };
	 lrate=0;
	 cur_lrate=0;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=-1;
	  default_val=1;
	  interpolate=0;
	  cur_val=0;
	 };
	 wt_sig {gain=6: off=1.25: };
	 lmix {hebb=1: err=0: err_sb=1: };
	 xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
	 savg_cor {cor=1: thresh=0.001: norm_con_n=1: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.1;
	 };
	};
	LeabraConSpec @[1] {
	 name="CA1_EC_out";
	 desc=;
	 unique{ rnd;wt_scale;wt_sig;lrate;	 };
	 children {
	  name=;
	  el_typ=LeabraConSpec;
	  el_def=0;
	 };
	 rnd {name="": type=NONE: mean=0.5: var=0.25: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	 learn_rule=LEABRA_CHL;
	 inhib=0;
	 wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
	 wt_scale_init {init=0: abs=1: rel=1: };
	 lrate=0;
	 cur_lrate=0;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=-1;
	  default_val=1;
	  interpolate=0;
	  cur_val=0;
	 };
	 wt_sig {gain=6: off=1.25: };
	 lmix {hebb=1: err=0: err_sb=1: };
	 xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
	 savg_cor {cor=1: thresh=0.001: norm_con_n=1: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.1;
	 };
	};
	LeabraConSpec @[2] {
	 name="EC_in_EC_out";
	 desc=;
	 unique{ wt_scale;	 };
	 children {
	  name=;
	  el_typ=LeabraConSpec;
	  el_def=0;
	 };
	 rnd {name="": type=UNIFORM: mean=0.9: var=0.01: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	 learn_rule=LEABRA_CHL;
	 inhib=0;
	 wt_scale {abs=1: rel=0: sem_extra=2: old=0: };
	 wt_scale_init {init=0: abs=1: rel=1: };
	 lrate=0;
	 cur_lrate=0;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=-1;
	  default_val=1;
	  interpolate=0;
	  cur_val=0;
	 };
	 wt_sig {gain=1: off=1: };
	 lmix {hebb=1: err=0: err_sb=1: };
	 xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
	 savg_cor {cor=1: thresh=0.001: norm_con_n=1: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.1;
	 };
	};
	LeabraConSpec @[3] {
	 name="EC_out_EC_in";
	 desc=;
	 unique{ wt_scale;	 };
	 children {
	  name=;
	  el_typ=LeabraConSpec;
	  el_def=0;
	 };
	 rnd {name="": type=UNIFORM: mean=0.9: var=0.01: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	 learn_rule=LEABRA_CHL;
	 inhib=0;
	 wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
	 wt_scale_init {init=0: abs=1: rel=1: };
	 lrate=0;
	 cur_lrate=0;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=-1;
	  default_val=1;
	  interpolate=0;
	  cur_val=0;
	 };
	 wt_sig {gain=1: off=1: };
	 lmix {hebb=1: err=0: err_sb=1: };
	 xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
	 savg_cor {cor=1: thresh=0.001: norm_con_n=1: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.1;
	 };
	};
	LeabraConSpec @[4] {
	 name="Input_EC_in";
	 desc=;
	 unique{ wt_scale;savg_cor;	 };
	 children {
	  name=;
	  el_typ=LeabraConSpec;
	  el_def=0;
	 };
	 rnd {name="": type=UNIFORM: mean=0.9: var=0.01: par=1: };
	 wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
	 learn_rule=LEABRA_CHL;
	 inhib=0;
	 wt_scale {abs=0.5: rel=1: sem_extra=2: old=0: };
	 wt_scale_init {init=0: abs=1: rel=1: };
	 lrate=0;
	 cur_lrate=0;
	 lrs_value=EPOCH;
	 lrate_sched {
	  name=;
	  el_typ=SchedItem;
	  el_def=0;
	  last_ctr=-1;
	  default_val=1;
	  interpolate=0;
	  cur_val=0;
	 };
	 wt_sig {gain=1: off=1: };
	 lmix {hebb=1: err=0: err_sb=1: };
	 xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
	 savg_cor {cor=1: thresh=0.001: norm_con_n=1: };
	 rel_net_adapt {
	  on=0;
	  trg_fm_input=0.85;
	  trg_fm_output=0.15;
	  trg_lateral=0;
	  trg_sum=1;
	  tol_lg=0.05;
	  tol_sm=0.2;
	  rel_lrate=0.1;
	 };
	};
       };
       rnd {name="": type=UNIFORM: mean=0.9: var=0.01: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0;
       cur_lrate=0.01;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
       };
       wt_sig {gain=1: off=1: };
       lmix {hebb=1: err=0: err_sb=1: };
       xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
       savg_cor {cor=1: thresh=0.001: norm_con_n=1: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.1;
       };
      };
      LeabraConSpec @[1] {
       name="PerfPath";
       desc=;
       unique{        };
       children {
	name=;
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.1;
       cur_lrate=0.1;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
       };
       wt_sig {gain=1: off=1: };
       lmix {hebb=1: err=0: err_sb=1: };
       xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
       savg_cor {cor=1: thresh=0.001: norm_con_n=1: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.1;
       };
      };
      LeabraConSpec @[2] {
       name="Mossy";
       desc=;
       unique{ rnd;wt_scale;lrate;       };
       children {
	name=;
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0.9: var=0.01: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=10: sem_extra=2: old=0: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0;
       cur_lrate=0;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
       };
       wt_sig {gain=1: off=1: };
       lmix {hebb=1: err=0: err_sb=1: };
       xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
       savg_cor {cor=1: thresh=0.001: norm_con_n=1: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.1;
       };
      };
      LeabraConSpec @[3] {
       name="CA3_CA3";
       desc=;
       unique{ wt_scale;       };
       children {
	name=;
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.1;
       cur_lrate=0.1;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
       };
       wt_sig {gain=1: off=1: };
       lmix {hebb=1: err=0: err_sb=1: };
       xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
       savg_cor {cor=1: thresh=0.001: norm_con_n=1: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.1;
       };
      };
      LeabraConSpec @[4] {
       name="CA3_CA1";
       desc=;
       unique{ wt_scale;       };
       children {
	name=;
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=0.3: sem_extra=2: old=0: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.1;
       cur_lrate=0.1;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
       };
       wt_sig {gain=1: off=1: };
       lmix {hebb=1: err=0: err_sb=1: };
       xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
       savg_cor {cor=1: thresh=0.001: norm_con_n=1: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.1;
       };
      };
     };
     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     learn_rule=LEABRA_CHL;
     inhib=0;
     wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
     wt_scale_init {init=0: abs=1: rel=1: };
     lrate=0.1;
     cur_lrate=0.01;
     lrs_value=EPOCH;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=0;
      cur_val=0;
     };
     wt_sig {gain=1: off=1: };
     lmix {hebb=1: err=0: err_sb=1: };
     xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
     savg_cor {cor=1: thresh=0.001: norm_con_n=1: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.1;
     };
    };
    LeabraBiasSpec @[1] {
     name="BiasSpec";
     desc=;
     unique{ rnd;wt_limits;lrate;wt_scale_init;     };
     children {
      name=;
      el_typ=LeabraBiasSpec;
      el_def=0;
     };
     rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
     wt_limits {type=NONE: min=-1: max=5: sym=0: };
     learn_rule=LEABRA_CHL;
     inhib=0;
     wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
     wt_scale_init {init=0: abs=1: rel=1: };
     lrate=0;
     cur_lrate=0;
     lrs_value=EPOCH;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=0;
      cur_val=0;
     };
     wt_sig {gain=6: off=1.25: };
     lmix {hebb=0.01: err=0.99: err_sb=1: };
     xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
     savg_cor {cor=1: thresh=0.01: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.1;
     };
     dwt_thresh=0.1;
    };
    LeabraUnitSpec @[2] {
     name="UnitSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[1]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {gelin=0: thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
     spike {rise=0: decay=0.05: g_gain=5: window=3: eq_gain=10: eq_dt=0.02: };
     spike_misc {
      exp_slope=0.02;
      spk_thr=1.2;
      clamp_max_p=0.11;
      clamp_type=REGULAR;
      vm_r=0.3;
      vm_dend=0.3;
      vm_dend_dt=0.16;
      vm_dend_time=6.25;
     };
     opt_thresh {send=0.1: delta=0.005: phase_dif=0: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
     dt {integ=1: vm=0.2: net=0.7: midpoint=0: d_vm_max=0.02: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=5: net_time=1.428571: };
     act_avg {l_gain=3: l_dt=0.005: ml_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=200: ml_time=2.5: m_time=10: s_time=5: ss_time=1: };
     g_bar {e=1: l=0.1: i=1: h=0.1: a=0.1: };
     e_rev {e=1: l=0.15: i=0.15: h=0.7: a=0: };
     hyst {on=0: b_inc_dt=0.01: b_dec_dt=0.05: a_thr=0: d_thr=0: g_dt=0.1: init=1: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
     adapt {
      on=0;
      dt=0.007;
      vm_gain=0.04;
      spike_gain=0.00805;
      interval=10;
      dt_time=142.8571;
     };
     depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=2: };
     syn_delay {
      on=0;
      delay=4;
     };
     da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
     noise_type=NO_NOISE;
     noise {name="": type=GAUSSIAN: mean=0: var=0.002: par=1: };
     noise_adapt {trial_fixed=0: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
    };
    LeabraLayerSpec @[3] {
     name="LayerSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="Input_Output";
       desc=;
       unique{ inhib_group;gp_kwta;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=UNIT_GROUPS;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	fb_act_thr=0;
	ff_pct=0;
	fb_max_dt=0.1;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_K: k=36: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
       i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
       adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.1;
       };
      };
      LeabraLayerSpec @[1] {
       name="DG";
       desc=;
       unique{ kwta;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	fb_act_thr=0;
	ff_pct=0;
	fb_max_dt=0.1;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_K: k=6: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
       i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
       adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.1;
       };
      };
      LeabraLayerSpec @[2] {
       name="CA3";
       desc=;
       unique{ kwta;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	fb_act_thr=0;
	ff_pct=0;
	fb_max_dt=0.1;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_K: k=12: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
       i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
       adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.1;
       };
      };
      LeabraLayerSpec @[3] {
       name="CA1";
       desc=;
       unique{ kwta;gp_kwta;inhib_group;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=UNIT_GROUPS;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	fb_act_thr=0;
	ff_pct=0;
	fb_max_dt=0.1;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_K: k=36: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
       i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
       adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.1;
       };
      };
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_INHIB;
      kwta_pt=0.25;
      min_i=0;
      fb_act_thr=0;
      ff_pct=0;
      fb_max_dt=0.1;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=36: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    BaseSpec_Group @.gp[0] {
     name="LeabraPrjns";
     el_typ=BaseSpec;
     el_def=0;
     FullPrjnSpec @[0] {
      name="FullPrjnSpec_0";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=FullPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
     };
     OneToOnePrjnSpec @[1] {
      name="OneToOnePrjn_0";
      desc=;
      unique{ self_con;      };
      children {
       name=;
       el_typ=OneToOnePrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      n_conns=-1;
      recv_start=0;
      send_start=0;
     };
     UniformRndPrjnSpec @[2] {
      name="RandomPerfPath";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=UniformRndPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      p_con=0.25;
      sym_self=1;
      same_seed=1;
      rndm_seed {
       name=;
       seed{ 1700665929;1915283049;440962826;1416808693;763354184;-968069011;-1621804692;1918731885;1758057636;-957337054;1384017935;775664529;1167946049;-780603827;-933248300;1424879074;459429279;-654909748;575385277;-1953884764;-1835376494;-662361883;-709478188;389053418;869735786;411194603;-515226671;324412405;300764357;1175959254;202715633;632139060;2074225060;1321646906;1899458921;1349019179;453167286;1786549747;-519853408;725126518;-146934346;-941437550;125088607;1621203878;1369425935;377187251;1631144141;287499435;-741295449;-1883805979;499005525;-293292356;-1285468017;-1990509354;509113306;1910202169;-1945532080;-1283584109;-536363665;1163954135;111222186;1578544719;-295927036;365916418;-1923110902;-270429335;466150164;491997991;-1490713177;1238763358;-218382399;-1388348975;-1425933433;-2080020286;-663677942;1083488472;-1417146647;152479236;-287071262;2041188628;1456470681;-2024720823;-114979095;95591589;-1177609619;-1327246048;-488617792;-893251514;1730697361;1983906089;-805905118;547546976;-508057284;-1950253768;-1812958656;47212137;-1142581043;-2113597172;1635924200;53749072;-256210700;-1079691048;-1919805336;1822055481;-1714922880;906577843;-1024649975;-1827559587;539090919;1635841424;1581415331;2110945625;-1201539032;-1382325501;-951019305;1650573335;-1460236510;96376853;1210596799;-652408211;-468976674;-2121358422;-864847422;905859744;703478172;1796552457;2064252582;1321850722;-1046809201;375311549;-467473389;-427052333;1535040660;-517225394;476882919;1745477034;-2026768385;-1739047846;428009282;1228246933;-385623568;2009925740;878815375;-576387078;120547021;2136097906;-1522823951;1838262130;1161337843;-160954097;859242066;789199089;1108897965;-861634443;283104552;628719971;484640683;1046055444;-1161548158;-238495457;-1607359316;-1384573113;-48423973;1397396699;-804559706;-1981939010;-1758351150;-739634505;1380431276;-901823766;-970778729;142770703;360732567;1134779968;481032531;764135790;-1326164202;1686900629;2091145750;1269750470;1585565751;991824899;-10659611;716253557;625473761;-205743490;226547979;-615938798;-1414620815;-500820452;1236685305;-2070671465;-741088375;1747165235;-1608059268;-289755527;1415323878;-263873816;1808458365;-1683769421;-1229180259;1169166468;1190179395;-2077645099;-1298603361;-1243451970;1060300794;-49262479;-577060918;1227832350;-542617587;1755386969;702029708;402284305;941529995;1780335022;-366145053;2138631737;632943858;823207509;1905958245;234265937;-172791085;-1616743185;438695777;1376027430;-804741563;-1945900927;-192030829;155327669;761606479;-1116161006;1102496568;505644902;-1555824088;-1776069251;254456583;-1361550928;-1954230744;2027934081;837494896;-444930783;-368469668;-1099539858;-2079753840;348789135;1649581409;-831490089;1498135452;529730282;708872524;100915191;-1982307217;-350685954;-1965093425;83765216;-1833132960;1925719467;616879892;709791719;525493799;-1287770776;-205806120;-2117622930;304891556;-71195715;-1774696192;978641109;1906422293;-1415317775;-1149404691;1212875610;635504375;-1019023484;1548271701;166516279;-1198197817;1335597774;1038474177;-594477764;494117363;1911484664;1963545687;-1054192375;741392398;-1369095005;-871023197;297529663;-1074141701;-814154402;-1008878637;-760387021;328111636;-1877087479;-270295171;-107324451;1075973566;2063836292;387847843;-1687082374;-1398277500;1694600715;-924424928;385524478;-821150362;-1724102902;134434650;305887669;-1249123683;-1026522896;2078927893;-148055781;-1803059280;-1297505165;1896176335;-665382271;1288691846;-1529031296;-403648632;-1310702058;-1920443612;1436372287;974629048;-777516581;158890876;-419293903;-309846016;-1276428938;2111722508;1812799338;-1494570623;1440808186;402858835;577330188;-1977106934;1486373495;148725726;1052156391;1543733365;-1605647593;-86166115;2051651243;1752960104;1047795652;450971052;-1596093899;31455245;-579415172;1401514359;685818603;-513168619;1893287693;-837651172;1976487324;32187731;-1576786398;-1360385020;270308803;63009365;-36398608;-1528247993;1081104034;-1390122311;-1684459470;-276188068;896795112;421652982;1045427581;-766066495;-2035294213;1846452143;83566361;-1067014319;55109327;-219097055;-40011551;-83909470;1113398782;1774407189;-782072993;-1146220344;-533808337;583951834;-253371775;-567490358;-392312370;937055331;-218019950;-1346054471;1924123724;1707856103;-92372411;-1618289370;2115863741;2127690678;2123251646;1618304743;2120321099;7364800;-178459313;364596364;-156229427;1655517400;2137483312;535123433;-170682494;-921317253;1433630959;952636798;954395215;-1659651643;-1885025250;1107526824;-637482678;-1157202837;-184399860;786396811;-161011336;1917006377;1232221035;930612342;66513459;-1624984891;1150814506;-787438945;-1529240267;1003069277;341812828;-1773674504;1494100303;-1076688012;-1214272195;913248907;277591432;-1577293734;-153861013;-1187862852;-479627093;1455850494;-1460761518;-446419640;-36699312;-1877099399;-789171902;-163301023;-1790044313;-233354857;1822178595;2051625514;-552374344;1536371081;1694575723;1763787158;-983977640;432647597;-700572664;735048991;1527926276;-132352317;1577556875;-1543292610;1334489721;478323494;-1495026227;13337467;-1241205672;987059028;386782711;-1917347001;-2039795442;-857880686;608392972;-914700908;1280230764;-1531561253;-1454220680;-784400898;-240018514;-1524825569;-178365360;-672671329;87119981;-607831581;1441314627;1236312302;-749181136;125830149;-1345633056;1564287250;1800812904;1537005911;1317717721;-787346140;-180743856;1349730989;-824484917;-484360232;-1975032232;-2006479500;-506923135;1028405822;-1175442837;1464987235;680755361;1651436157;-358424347;-353905992;1683568834;669565419;-1073199436;1411176241;-1059481617;1067073052;635141901;1542592291;-825076627;-550752406;1236068210;1899552101;1470488187;-438955478;139205942;-1776062888;780055949;-1711204435;-773586664;1061741749;-1759896968;-959594958;1766540390;622730677;-289761412;-1020674513;426874225;-1797230421;964027844;-1143632788;-1570158721;456530795;-1796073902;-1381785684;-675012669;-207730466;209454672;947867568;-642801007;-364296260;814188414;-1989352230;-531242147;1478624316;-748989640;1831824239;-868924785;-210489498;569819652;1917497792;1491037266;-1688000019;1494840442;-641873481;-323098059;951996288;1746984883;-494107282;919796534;807863428;-1335136693;-395930107;955017367;-1990257459;-95486234;-1680466027;-1551677488;1392032280;2053623580;-1097450063;-869260064;418450129;1301946296;47679297;-1791940630;571992270;-2069423731;-914121037;-2018914887;-382451695;1348791141;1501914304;-506262670;91881187;784207070;670032870;1709507087;-1210757160;-707121835;-1498354878;-529395051;1661836676;-934390576;1209099415;-976554105;472206702;-1758892863;199312971;-829693708;-1286278447;-566510946;-88496303;1896343483;-1590232892;1530666625;9079524;1463341657;-1302063330;1671371891;1394425186;-501729928;-2104955151;-729066678;2106126137;-107783291;1539822668;1888418256;       };
       mti=624;
      };
     };
     UniformRndPrjnSpec @[3] {
      name="RandomEC_CA1";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=UniformRndPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      p_con=0.1;
      sym_self=1;
      same_seed=0;
      rndm_seed {
       name=;
       seed{ 1704848366;-501613492;1450168877;1087076191;1589208602;-981025876;-27151599;584992801;-1691148787;-1129717004;1446392088;-413745176;358316739;18795004;-1054765958;163065036;-1355360116;1315532311;-1508100928;-357916003;11187818;1407103463;693781972;-121110341;-732774224;-693448264;-1145122335;-1311749718;-2110785692;-736349861;1055887318;1062684045;344057281;1333456454;-1661664987;-2041031802;1042716472;-290545347;803326876;458215603;-1240325689;-1851998238;346461066;-1955393635;421150951;778582608;1854132670;1970927498;124062983;1309139700;-1840994341;-1780983344;-215297522;346608726;-1768436700;1127080245;655011260;777267045;759827;1702505146;2033053443;-988455417;1926904786;-1058896514;-1254518895;1049645120;463595906;-949636467;-510693302;-1632805358;-1272140650;638012075;377682111;1510169252;1700270179;-416225035;-1984852134;1680582149;455910370;1870568057;-1763366488;123431523;2142565473;1741408819;-1577482226;966072593;1572076811;1840459593;-688443456;-1435880632;-1335961972;471770209;-390741087;-959061689;-1060420558;1627857076;1497613513;1032039241;916170031;790057710;-1139337654;-1946135859;1733393;-2089124068;-1892862658;1928797461;-711316146;-2127751988;-1869777998;612881629;680280223;-431778262;1797599133;1231701245;146543582;1273472265;-856857444;-1193620944;-1545304016;-949322191;904563762;-1209134541;604006095;-1898555610;-1590778448;770810295;266386609;1568418644;1619039753;1564309929;-487331894;868484048;756011412;1769071593;-1472326898;771944515;-1886280201;2079954738;566751913;1130245688;1249099273;-493600331;1336038236;-852317888;-161045761;-392484355;480411592;553022075;-371458533;292427789;-274107721;1328059803;38301786;-1255506405;904798583;-719527026;1057438781;516057518;2030293060;-1764157224;1474918562;-1323248656;1459495196;1975948820;-1271041043;-19749648;1241915269;132387771;-1717052305;1999326378;1825162017;-1159324597;1944795769;-681555451;247753484;-300177301;954276280;999988809;1655997567;1402057833;-1059072580;1307282448;-866493333;1643257279;782396078;-1544735393;1336922987;141042573;-2131264419;-842274504;-1780443131;1864940162;74887535;-170825588;1014745133;-1875832956;424924834;308175023;969067729;-819091396;1506154659;1925474995;1735744260;941987524;333406240;-2106454675;-1304906599;-45927178;-1316093319;28823128;-816217718;190934240;450090292;-1223167399;295850429;-890018456;1027229455;-1653731132;13669624;-1530167629;233616817;-814323534;-1063974989;834222415;-1561861109;1724172654;830005421;1437088292;92257917;2042760502;1931650713;-1510272289;-1724795111;1901572496;-1399412705;-1942824612;536154370;282577079;-796057567;114155609;-1967643379;-1645959460;-527129464;1249922762;-631850485;66956829;1410217831;1359704629;688776060;698096869;1548809299;82724693;1166123653;-306593007;556570904;1143881591;711929998;2059151111;-1236820896;-610327123;1085668522;-122604676;-286176991;-1119679119;1875630695;873972039;-2134949619;1085190902;460573567;-250658520;823245317;179180040;1015768632;-398766807;802614436;-1930747449;1983496397;-494256751;-1568969296;1078233681;-1858116952;-1535842261;394037831;-1508667874;-1350037976;728240559;558801449;-202576820;-786922677;-1813687159;126205689;-809067936;1051649331;470661444;711687418;622860745;1408614005;-938723091;1842074896;1709713888;-2077691919;540325644;-65690390;-668351972;70594155;-2017487768;-605533948;82481142;793736002;768920639;536562961;1641710060;339220665;-1200897226;-1268328258;1941184359;-290981254;-224422918;922002299;-161590330;342784761;-1741371778;141470766;-1424978583;1529024379;-1670158745;-468290529;-37565357;-1285460776;-626614965;450860722;2025437061;-1189671840;174478839;1814174401;-1526378737;-1748949391;-840124496;1989690865;1896941827;-795303650;-1640294714;1541071018;-1471993906;2036261076;-1433161118;-1218789062;-792906637;1254465932;709374718;-558363244;1896099058;-1856452545;282764914;1316269660;1709412628;-822117459;767421195;-1073504323;941405533;-1309846503;-446586096;961512169;164386904;-1018301404;-428133424;1276927661;1552901963;1306549154;268657600;-604496846;22043080;1496806748;1379603494;271111129;-1872120044;-699792602;-656077806;-1505108689;716986684;1756647976;1513839786;179311605;1507393064;-775997267;176716839;190503909;-1177989156;-549694950;627754594;-1409763280;353464129;456240941;395588426;1005639612;-1080247625;-273446923;626084763;-1345992523;-495771454;1161442997;-433460587;-282209088;-112833150;-2101502343;1207720732;756906247;-711557030;-578861643;796846183;1984024893;-376133049;245469808;2116859853;-862670566;-1390460548;-103594410;1766932010;-562066535;-750944411;-1002775838;-763247254;834082067;789019942;66566054;797789223;-376378355;283287857;100913921;-1670067694;-2136585730;353832475;1868694871;-740220257;-711187138;-1758242876;262445266;125218447;-1893308639;-1655870074;767810252;-370114507;1241087240;-359192760;683058515;1473095292;-72968689;-1722179461;-427027843;-1801798793;-342846485;982090827;-233154981;419506813;1654499863;919855733;-1828981007;422935208;-883601902;770041728;2031605580;-407164882;-1433276273;1965710960;660127077;-853489750;979843199;1735279342;2027639071;-322826069;-1743619042;410645731;1650465383;-19594729;112363454;222707153;-1333641647;251790236;-386012566;-2088849844;1482982566;-1086933308;1070601216;332129763;-89313421;549890325;-1167068113;554855592;-1056782288;-1600042744;-419549988;1986268390;246528015;1141286616;-2116487541;-532179204;-2130310261;1078845438;-1080960883;-514328226;162736293;1827821582;1764083425;-1552590761;-1880860543;-1475737432;-1623300340;-232314751;1907265350;595363840;1558817278;-299726182;-973368995;1587390999;-1563172176;-322456515;1609649274;-142737012;1920280177;651828279;111645371;884996304;429161498;-357244339;2124089554;749234252;-1470770166;-2071137993;-1390180103;-164601832;155279289;1293141776;-1681087287;561686828;169954418;2764049;171500237;694956538;340034492;-1817471161;1435082069;566822977;-1887302461;-60206268;772791331;1912968944;-963475401;1814008487;-1736854622;-1299939259;-857891543;1890614713;-118418496;151333144;-1850797918;509030731;-1630234685;22882898;631608968;-174379561;-1567913260;-499888481;855146942;-844373975;-118756154;204265710;608892444;-99870909;-1040814472;1354132416;-706097569;-114186105;794960464;-431727667;-658802556;354930306;600182154;-1322765389;2120032279;-645697295;1458246590;914949024;1885278310;471439850;-1226967654;-987218111;-443987628;-1127579490;788282328;1215444613;-505927582;-829761132;1918544355;-1612907909;965252367;839964734;-703561526;-1695718750;1540328310;1321580362;-1977256465;-1034002982;1281567223;575551081;752397001;476050602;-193952912;-1025414722;615505649;1548284022;951554133;1794928876;1619158245;-844376999;-538643480;-1421213410;109997684;-998659539;-1353399152;-2120109563;2135031343;-514725741;-692726978;-2039284096;       };
       mti=624;
      };
     };
     TesselPrjnSpec @[4] {
      name="TesselEC_CA1";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=TesselPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      recv_off {x=0: y=0: };
      recv_n {x=-1: y=-1: };
      recv_skip {x=1: y=1: };
      recv_group {x=4: y=8: };
      wrap=1;
      send_scale {x=1: y=0.5: };
      send_off {x=0: y=0: };
      send_offs {
       name=;
       el_typ=TessEl;
       el_def=0;
       TessEl @[0] {
	send_off {x=0: y=0: };
	wt_val=1;
       };
       TessEl @[1] {
	send_off {x=1: y=0: };
	wt_val=1;
       };
       TessEl @[2] {
	send_off {x=2: y=0: };
	wt_val=1;
       };
       TessEl @[3] {
	send_off {x=3: y=0: };
	wt_val=1;
       };
       TessEl @[4] {
	send_off {x=4: y=0: };
	wt_val=1;
       };
       TessEl @[5] {
	send_off {x=5: y=0: };
	wt_val=1;
       };
       TessEl @[6] {
	send_off {x=6: y=0: };
	wt_val=1;
       };
       TessEl @[7] {
	send_off {x=7: y=0: };
	wt_val=1;
       };
       TessEl @[8] {
	send_off {x=0: y=1: };
	wt_val=1;
       };
       TessEl @[9] {
	send_off {x=1: y=1: };
	wt_val=1;
       };
       TessEl @[10] {
	send_off {x=2: y=1: };
	wt_val=1;
       };
       TessEl @[11] {
	send_off {x=3: y=1: };
	wt_val=1;
       };
       TessEl @[12] {
	send_off {x=4: y=1: };
	wt_val=1;
       };
       TessEl @[13] {
	send_off {x=5: y=1: };
	wt_val=1;
       };
       TessEl @[14] {
	send_off {x=6: y=1: };
	wt_val=1;
       };
       TessEl @[15] {
	send_off {x=7: y=1: };
	wt_val=1;
       };
      };
      last_make_cmd=;
      last_weights_cmd=;
     };
     SymmetricPrjnSpec @[5] {
      name="SymmetricPrjn";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=SymmetricPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
     };
     GpOneToOnePrjnSpec @[6] {
      name="GpOneToOne";
      desc=;
      unique{ self_con;      };
      children {
       name=;
       el_typ=GpOneToOnePrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      n_conns=-1;
      recv_start=0;
      send_start=0;
     };
     PolarRndPrjnSpec @[7] {
      name="PolarRndMossy";
      desc="topographic random projection -- not working as of 4.0.14";
      unique{       };
      children {
       name=;
       el_typ=PolarRndPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      p_con=0.04;
      rnd_dist {name="": type=GAUSSIAN: mean=0: var=0.25: par=1: };
      rnd_angle {name="": type=UNIFORM: mean=0.5: var=0.5: par=1: };
      dist_type=XY_DIST_CENTER_NORM;
      wrap=1;
      max_retries=1000;
      same_seed=0;
      rndm_seed {
       name=;
       seed{ 1727484609;1042048449;-403739097;-698107849;-329809784;974985692;89518034;1056767969;703028429;1586254314;-962587455;1905394325;1946695792;1686748578;1414073437;2129861723;-292791918;-666570938;-568241333;531587963;-120843621;10399245;1746575415;2075663205;1174885004;1240204986;-1932150047;-779405654;-154402359;-805843249;1644413594;1692252742;-2145682141;-1732901082;194975062;-1786220271;517785507;-1922695564;463768244;-1324282581;-1545330091;1673730940;1109048699;172559181;-252138867;-1220327373;-192629629;1819522735;489435350;-966014305;1379429310;673495438;2024551226;234342780;-268838366;1177925692;947213641;837662470;1927637912;-1740155752;-2002728194;-789253719;-644001200;1348789758;-1797442341;444398302;-643708968;1271205034;-718110021;1474955997;187303186;-1614241183;-1648096169;1531271890;-1615019895;-263235038;-1452197807;-15424500;2136588601;794309479;-1122015501;-401500570;-1322294485;1172443264;1821150265;-2147136915;871679265;-856199332;1741801427;1215379507;-853807596;353386094;500400066;1243494887;137555484;-800526997;-1851108760;-1758249421;1926677175;1474836529;-1107305644;699174739;-1190332635;678584778;268152602;-1061748821;-727988814;1377286208;-1967293679;-2061256212;588953940;-1476062573;-1360597851;-2108572332;-1645430432;1732810269;-2101594752;-1687048513;-1383590393;10247536;-1178481240;1479286411;1938155244;-1998327556;-1126694222;1836662765;1669301402;-2088549210;855759156;-43809275;1831278304;-2016317368;-188815434;1799636974;-1476900655;632465094;-1843019098;1619758909;22716214;711898841;-1988672215;406801796;1074870690;-703006498;-552373055;1970725659;623281108;1334474551;-2048463134;1913790197;2086849242;-511296514;804982889;146057990;1408741368;-1984713000;1013753502;844778227;-1067410051;282628437;1619711017;258415721;1421960975;-1445583063;-761235557;1584891805;-1040253646;-1754259972;-1187331106;-1308360075;-1507350371;2000395878;-1155817905;1773644302;-102686823;-453975439;-2057938518;614746105;1663280879;703085209;-165019631;823765455;329827937;1818701308;-96695671;567051051;-2112961615;343081306;-1634815170;584831849;2025626155;-2146480815;-676336257;216272557;-2070978557;318269992;870926988;1841518081;823586502;-1287771419;-1664250645;65030582;1525250968;-1099848408;811574366;1799628771;980004600;52215975;1442996659;-115945973;2088342010;217246682;-2029733930;1107884921;1550217006;607323490;330338946;480206883;-95901271;-48436499;715394754;-571628185;1912653138;-852736610;-956072751;1676321211;-533440188;-580962074;1984364605;-87608175;-1816665984;-1438702031;-2050990585;1700316642;-1423864199;1121585778;-591221941;1433345109;1632313874;-1973052050;-649467764;-142194596;-1823578771;-1405129538;794460960;885120149;1939522751;-125088275;623648222;-1082812529;408567963;275476770;1776080230;1009078688;1858589982;-1916949190;-904900584;134942376;1573695818;162535066;-1530440250;-1209615527;-1949786387;-1346528174;-727352168;1094065456;676314719;-588254330;1486897541;887455265;233925907;-1289472882;-1925470132;666707415;-1547633179;1213582390;1034158535;387527576;582333454;-1016231779;480605550;1998664575;1427750864;-981039216;-1515837157;-230975238;-1322279845;887312700;214706636;-2088850787;1755408605;1456479215;-896572406;794446258;468538976;-461605625;-1563078724;-1140382433;1098459803;-825214483;78199314;-1789555641;-1531689625;-167416056;-1512131705;-1550712406;-1760194438;-1189463925;1733861441;-1787200907;-2001206999;-1788511698;647938196;-440586339;-680437616;404987450;1632663582;-773784456;4092101;-1268847624;-510532382;1077065478;1831204357;-893504297;-1457763096;-1346792553;-1991968753;1431294824;1954585269;-193765811;-1424100336;-823333275;-69687926;-1613848230;709214470;-788832595;-140936714;-2088485894;-351575510;-836457344;-262198269;-132620971;-1058416060;772021850;676603098;-354339493;-976345838;-1952335344;1373637750;-1085170864;-24171848;460779558;360388190;-1659231625;1156789899;300572629;-107754131;-1774064693;-844130125;-1949471017;-63981455;732350563;-1195439239;1424055282;516117323;-1783627516;-836329780;-1411223526;788206312;1250205433;1479373130;-660875510;-1999722239;1964001956;-1914519153;451269400;-2142494224;1641146355;1552877044;-1806665692;-451559814;1171384378;515191749;-1667966152;-425555614;-1488183866;1028760534;-1531106575;-347931037;539999589;150194015;-2055700222;-1399593336;-1031811077;1921042018;1202602394;-1206331725;2005429858;-191133283;693426917;1340205801;-1221601511;632967737;-468585712;1068438291;1523364628;539747807;-1938880110;-690170008;-61455920;-2012814119;19824386;-1436668058;440481809;-147637933;1108438575;-803661882;1241632602;975930249;-1588709456;495467742;-513486021;1213746878;-2009839102;-1103416408;-576234053;876049218;1163709621;-1877665616;-412614169;843564194;-151435367;-991909006;1148853830;642970293;-2121293796;53230474;-988391129;1468100842;99373422;1876033566;-1799117580;-1355694904;506304365;1845564605;-609629207;-746344688;-1188413634;-1272573844;1288788775;-563458624;132319922;2784254;1494211323;340209768;1272300239;-1942480114;636492165;1141194819;1061400021;-896691243;13818683;220205845;-1183791592;-432532462;-1890318970;1505088230;-353708554;-1864791939;-547892496;1714374325;2087271131;-101129254;-1743779978;-1233385826;1555831143;-107504358;1938972090;1627721637;-1713770093;473557269;1546138666;1895078361;-876786661;-468721828;-1469712032;744413072;-407429705;705695212;557632517;1447963875;1963632917;-247698736;1908806188;1578779311;1758293653;-1085942188;-90466337;447457214;548396521;1619214305;-1877535403;2095578185;-1283386785;-1588918871;340705648;-1297661142;-1257903933;1579884321;-1802802787;769639609;1184800764;-601979439;1852190683;-2065527548;235133793;-2087487415;-1029989732;1534859713;905833159;-1891425909;690851350;-895691080;-1578644270;1186930716;1315058302;1866261801;-1648307497;230305049;-733663762;39450003;-856780782;-1582370359;-1443362260;2073076796;1637905192;-737320379;180960695;-680703411;1795428577;1539476092;-716666258;-1129450465;1896863376;520766037;1759423146;1474026137;1809881115;-508039578;-1662509826;972705170;-1975402815;911974423;-1888257476;-458462560;730615674;-382097586;-312330098;1071564495;787626202;-1410131406;-415430879;1842545820;-1643914972;1589904434;-352717484;-498443127;-761110871;1298027850;-85341232;-1290381447;-453093182;1327452001;-1535855843;1337934969;1365392791;-1512991634;856775901;915860083;975637666;-2020036562;-1766256735;-1311348587;2008093914;-217878609;1423056165;-461781634;1898303900;-664552899;-38425917;-62054386;753900656;2085661312;1285115958;-1444210939;1849939734;1686121831;-2069397101;-1318864501;962692708;-1323201588;-1867552609;209407307;-1441815566;846667788;-1720052967;-887095547;-1002187331;-1135082410;-145314939;799433792;-1777610845;506271209;-303933358;-1849216165;293660036;-649448580;1817070212;-966289949;1328743371;-559047906;1011595742;225060100;-875839229;       };
       mti=624;
      };
     };
     UniformRndPrjnSpec @[8] {
      name="UniformRndMossy";
      desc="PolarRndMossy is not working!  use this instead.";
      unique{       };
      children {
       name=;
       el_typ=UniformRndPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      p_con=0.04;
      sym_self=1;
      same_seed=1;
      rndm_seed {
       name="RndSeed_11";
       seed{ 1700665929;1915283049;440962826;1416808693;763354184;-968069011;-1621804692;1918731885;1758057636;-957337054;1384017935;775664529;1167946049;-780603827;-933248300;1424879074;459429279;-654909748;575385277;-1953884764;-1835376494;-662361883;-709478188;389053418;869735786;411194603;-515226671;324412405;300764357;1175959254;202715633;632139060;2074225060;1321646906;1899458921;1349019179;453167286;1786549747;-519853408;725126518;-146934346;-941437550;125088607;1621203878;1369425935;377187251;1631144141;287499435;-741295449;-1883805979;499005525;-293292356;-1285468017;-1990509354;509113306;1910202169;-1945532080;-1283584109;-536363665;1163954135;111222186;1578544719;-295927036;365916418;-1923110902;-270429335;466150164;491997991;-1490713177;1238763358;-218382399;-1388348975;-1425933433;-2080020286;-663677942;1083488472;-1417146647;152479236;-287071262;2041188628;1456470681;-2024720823;-114979095;95591589;-1177609619;-1327246048;-488617792;-893251514;1730697361;1983906089;-805905118;547546976;-508057284;-1950253768;-1812958656;47212137;-1142581043;-2113597172;1635924200;53749072;-256210700;-1079691048;-1919805336;1822055481;-1714922880;906577843;-1024649975;-1827559587;539090919;1635841424;1581415331;2110945625;-1201539032;-1382325501;-951019305;1650573335;-1460236510;96376853;1210596799;-652408211;-468976674;-2121358422;-864847422;905859744;703478172;1796552457;2064252582;1321850722;-1046809201;375311549;-467473389;-427052333;1535040660;-517225394;476882919;1745477034;-2026768385;-1739047846;428009282;1228246933;-385623568;2009925740;878815375;-576387078;120547021;2136097906;-1522823951;1838262130;1161337843;-160954097;859242066;789199089;1108897965;-861634443;283104552;628719971;484640683;1046055444;-1161548158;-238495457;-1607359316;-1384573113;-48423973;1397396699;-804559706;-1981939010;-1758351150;-739634505;1380431276;-901823766;-970778729;142770703;360732567;1134779968;481032531;764135790;-1326164202;1686900629;2091145750;1269750470;1585565751;991824899;-10659611;716253557;625473761;-205743490;226547979;-615938798;-1414620815;-500820452;1236685305;-2070671465;-741088375;1747165235;-1608059268;-289755527;1415323878;-263873816;1808458365;-1683769421;-1229180259;1169166468;1190179395;-2077645099;-1298603361;-1243451970;1060300794;-49262479;-577060918;1227832350;-542617587;1755386969;702029708;402284305;941529995;1780335022;-366145053;2138631737;632943858;823207509;1905958245;234265937;-172791085;-1616743185;438695777;1376027430;-804741563;-1945900927;-192030829;155327669;761606479;-1116161006;1102496568;505644902;-1555824088;-1776069251;254456583;-1361550928;-1954230744;2027934081;837494896;-444930783;-368469668;-1099539858;-2079753840;348789135;1649581409;-831490089;1498135452;529730282;708872524;100915191;-1982307217;-350685954;-1965093425;83765216;-1833132960;1925719467;616879892;709791719;525493799;-1287770776;-205806120;-2117622930;304891556;-71195715;-1774696192;978641109;1906422293;-1415317775;-1149404691;1212875610;635504375;-1019023484;1548271701;166516279;-1198197817;1335597774;1038474177;-594477764;494117363;1911484664;1963545687;-1054192375;741392398;-1369095005;-871023197;297529663;-1074141701;-814154402;-1008878637;-760387021;328111636;-1877087479;-270295171;-107324451;1075973566;2063836292;387847843;-1687082374;-1398277500;1694600715;-924424928;385524478;-821150362;-1724102902;134434650;305887669;-1249123683;-1026522896;2078927893;-148055781;-1803059280;-1297505165;1896176335;-665382271;1288691846;-1529031296;-403648632;-1310702058;-1920443612;1436372287;974629048;-777516581;158890876;-419293903;-309846016;-1276428938;2111722508;1812799338;-1494570623;1440808186;402858835;577330188;-1977106934;1486373495;148725726;1052156391;1543733365;-1605647593;-86166115;2051651243;1752960104;1047795652;450971052;-1596093899;31455245;-579415172;1401514359;685818603;-513168619;1893287693;-837651172;1976487324;32187731;-1576786398;-1360385020;270308803;63009365;-36398608;-1528247993;1081104034;-1390122311;-1684459470;-276188068;896795112;421652982;1045427581;-766066495;-2035294213;1846452143;83566361;-1067014319;55109327;-219097055;-40011551;-83909470;1113398782;1774407189;-782072993;-1146220344;-533808337;583951834;-253371775;-567490358;-392312370;937055331;-218019950;-1346054471;1924123724;1707856103;-92372411;-1618289370;2115863741;2127690678;2123251646;1618304743;2120321099;7364800;-178459313;364596364;-156229427;1655517400;2137483312;535123433;-170682494;-921317253;1433630959;952636798;954395215;-1659651643;-1885025250;1107526824;-637482678;-1157202837;-184399860;786396811;-161011336;1917006377;1232221035;930612342;66513459;-1624984891;1150814506;-787438945;-1529240267;1003069277;341812828;-1773674504;1494100303;-1076688012;-1214272195;913248907;277591432;-1577293734;-153861013;-1187862852;-479627093;1455850494;-1460761518;-446419640;-36699312;-1877099399;-789171902;-163301023;-1790044313;-233354857;1822178595;2051625514;-552374344;1536371081;1694575723;1763787158;-983977640;432647597;-700572664;735048991;1527926276;-132352317;1577556875;-1543292610;1334489721;478323494;-1495026227;13337467;-1241205672;987059028;386782711;-1917347001;-2039795442;-857880686;608392972;-914700908;1280230764;-1531561253;-1454220680;-784400898;-240018514;-1524825569;-178365360;-672671329;87119981;-607831581;1441314627;1236312302;-749181136;125830149;-1345633056;1564287250;1800812904;1537005911;1317717721;-787346140;-180743856;1349730989;-824484917;-484360232;-1975032232;-2006479500;-506923135;1028405822;-1175442837;1464987235;680755361;1651436157;-358424347;-353905992;1683568834;669565419;-1073199436;1411176241;-1059481617;1067073052;635141901;1542592291;-825076627;-550752406;1236068210;1899552101;1470488187;-438955478;139205942;-1776062888;780055949;-1711204435;-773586664;1061741749;-1759896968;-959594958;1766540390;622730677;-289761412;-1020674513;426874225;-1797230421;964027844;-1143632788;-1570158721;456530795;-1796073902;-1381785684;-675012669;-207730466;209454672;947867568;-642801007;-364296260;814188414;-1989352230;-531242147;1478624316;-748989640;1831824239;-868924785;-210489498;569819652;1917497792;1491037266;-1688000019;1494840442;-641873481;-323098059;951996288;1746984883;-494107282;919796534;807863428;-1335136693;-395930107;955017367;-1990257459;-95486234;-1680466027;-1551677488;1392032280;2053623580;-1097450063;-869260064;418450129;1301946296;47679297;-1791940630;571992270;-2069423731;-914121037;-2018914887;-382451695;1348791141;1501914304;-506262670;91881187;784207070;670032870;1709507087;-1210757160;-707121835;-1498354878;-529395051;1661836676;-934390576;1209099415;-976554105;472206702;-1758892863;199312971;-829693708;-1286278447;-566510946;-88496303;1896343483;-1590232892;1530666625;9079524;1463341657;-1302063330;1671371891;1394425186;-501729928;-2104955151;-729066678;2106126137;-107783291;1539822668;1888418256;       };
       mti=624;
      };
     };
     UniformRndPrjnSpec @[9] {
      name="RandomSchaffer";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=UniformRndPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      p_con=0.75;
      sym_self=1;
      same_seed=0;
      rndm_seed {
       name=;
       seed{ 1731730900;1844298250;-1913491111;1020095466;-1758343850;1523840553;-546077234;533298920;-1212073584;302569635;-1981697191;2055501298;-150563861;-434666859;910347068;96553659;-1520595241;321672986;-1529788588;1092102913;-896796908;1175767848;-1593042877;411523772;-400988092;-121298148;-1351912875;-1980388498;647851448;467386805;1079003527;-508577795;1136428374;-165860748;310145045;-811174548;193838063;1611074672;-1417190981;-674984156;-1355196021;290038838;-2140622984;-208960179;1300518386;1155134476;-168608177;-111001557;-1724860424;42164179;-287196815;896150573;365069045;-1635399714;1774228994;660064870;297627766;1009157319;-307109443;1294908977;-360138452;-1756088632;2098313200;-2029745324;-894042322;1436008962;-1916262799;-1649428830;-1116820124;-1119879293;1384306475;753556953;1100949477;1465893181;1339316470;-987477826;-345450531;-1963656989;-1510106605;-1762139644;-303340882;-2073590894;-80807902;-247951784;-1208230597;2018560210;891102869;2016998944;-1860713379;1762676948;1082450275;314072581;-1154431659;221932208;-1510717490;979402715;-1887722297;1683517210;1477855497;219682955;1601245755;569588551;580936297;2060453076;-998578831;-1486583709;2118956975;1347589649;-1118583620;260590947;-203062403;-849522907;657821806;2104416727;204044256;-995939373;-645752444;-614411848;-41102787;1287921901;-1250735724;-1812509017;2083214483;358121493;621331909;-760253386;-1914947993;-373259432;985433703;824124964;1202671798;-2091006026;1774919304;305749394;179506464;-427143641;1264457916;-2138576870;-377787902;2071092208;384384929;-2038807534;421096158;357169189;1627239465;-694584231;747649556;-897081737;-1065772968;-1862348932;1711557452;387508984;2136697968;-818855378;-434884261;231182419;842882139;-1826675836;905296508;874704779;1959191927;-1853968849;-244593309;235956099;1819472467;-2059043585;-348605065;212249451;57337055;-473914460;-534384499;949348017;-2039497343;1226170460;-381793697;870486779;-1578544969;1311814938;1105192793;1133272683;298711686;-1560310381;478966763;-1126203538;726798932;-209965091;2091823440;-1291366736;-908243210;-1740356506;-1438351310;-1762638929;-155367167;2077089931;1630105908;-144570452;429043663;-1180818320;-201104448;336508854;-1743199850;-308988883;1779184880;2109529312;-1545695599;-1423971380;-211073260;402611170;-82234630;-33071602;949489907;-1347044430;-168542908;1595419864;980996979;116979766;-1903635418;1920923405;-274668394;-1059001180;1676918207;937855699;1040494877;242050640;-921031056;592764736;1991595298;-133213518;2316729;2030397410;1055881333;-1557912560;1225645570;-1805831400;-959179732;1371676278;757380319;2053092328;-1234653989;1102795660;-210146159;-1711277941;1438474239;-200815063;-812723834;672913262;88595804;1750372931;1131480834;-1922211800;-1379701876;-74813951;747272646;-1976106469;-1836960293;-2128650084;141012310;-771462673;-1377757410;-2131748081;-1768971739;662886760;1859153678;-1592534798;1518143416;-561705466;2099394051;-9149995;102768762;-144434385;2067613034;1933551430;261291795;-855322992;527903761;-1861190456;-1345366330;1637359721;-1389071842;1434845731;-604960126;2050961150;-401800523;1586460905;1151786148;107764534;-871767188;-693755158;-661030899;-970072921;-207105578;-1990998228;-572050358;-2127449358;-1242691114;-554150453;-1772494576;711356227;-624311911;-1922380563;1633141367;2011881403;-1753559152;-1048115255;200748514;-1723789989;809363023;-925555362;-1902017563;-996103592;-1693783523;2104620658;-1140930665;-714703870;-640518497;-1614395193;1066345461;90852838;803918588;-1485694293;652736237;958677442;-1764965172;1572725897;988803820;-568384415;-1552953872;166773697;-1962506899;-788263660;-1321502115;764223430;-451379094;1312938938;78628117;694419352;-177983416;1684812264;784622399;-682565586;1478199317;-1489279687;1815643293;1636290275;679056002;-521379677;1633140858;-2063743774;681217468;-352876407;528529872;636067951;856732715;657398104;2072844570;1423399946;-511298373;-583973379;-1260942180;865929661;1733688825;1537141825;-1478396246;51100083;300290059;1118255300;1925043239;-1334375827;1888847419;-1821835181;-2016445849;-1843505076;895260218;763514967;-1748417847;246611598;1958374782;1688152980;-298717117;1158023867;976602846;-692697837;-464596786;1920014176;1002972101;-948073670;-1097306113;-1845652140;-1420758414;-910321739;-67681708;1064221914;1807166858;1769036896;-1227858737;-1485221012;-1333409294;57285949;-1423036513;-906047616;-14025921;1369914429;-1411718850;1753741887;37939722;1374400903;-693649036;-185006966;-714400603;1445012759;59140424;-1823010045;-1416820223;-1290432564;135855076;-1545312621;-571010603;-1881173745;-617664317;267713891;418837683;927422276;263508858;937016009;1968915445;-267688723;-133942896;1999911850;-1053356253;-1682892467;949175513;-1881060276;1406851702;1635967396;1256674507;-483750043;1515334386;1275854484;1040985983;-525158958;1854248493;-1018835691;1222947176;1258959144;-1284286487;301692020;-927791230;-1641217884;-1985734338;534975085;-1771201597;-1344291352;156117270;-412287629;-810488074;-2057149072;641337794;1080864083;-388020956;-1272370898;-881210328;779981252;921200674;978929977;-638032307;-1579017065;-2087451237;-745269200;-406464269;-2135488379;-344482279;881019929;-1674221387;1193099532;-105537285;-1097516109;1537820593;-151618995;-1764491100;42408285;963299473;1953348630;-2120972811;2030766934;-1379005897;2033411534;1869345681;601827767;-329292261;971907425;544675375;-115086986;1095612949;-490004527;-1528237624;-1915584351;-480707265;-1908078947;1411364269;-1334854961;-22582827;1015695715;-1450577659;1083824314;-1563715905;153657226;-282210964;1376482758;-1392641921;-1315377074;-1945928710;511681239;2120306643;-1227234853;1992441247;619568985;-2050047711;2078470100;-1112236529;1328697896;-1208918731;2107455420;-200924005;-1339438589;-811713167;1584284167;-1728101268;1062657909;-217135047;-1080947981;-1257223129;-651109972;-1668445409;-1927976570;-1316600022;-1205437217;-435385783;2029661003;48476236;-549372905;309291520;-877734883;1615839220;1222892232;2038031469;-146215747;933828376;884602523;1955872843;1324022103;-75667692;-632947398;-1968215387;-170298100;-438749163;-1101993767;612766611;-1234934228;-477302700;2040161154;-1782620193;1507400034;384958785;82659800;319470700;-117037871;585034512;992890759;1116053883;-1535573669;988097367;-1006851442;-1345339171;-448302792;-1385873019;1471486850;-1966999569;1336911810;1265208625;1501783603;-2048518658;-546403663;833879168;-710729529;725668764;1528167125;-21795858;1896246220;1976844077;1556052649;1254575766;64082658;-405723270;-2081204722;-1302241010;883865615;-1512593601;624927334;953002644;-1820753221;-722168235;1296914503;-710194184;-266645662;1877490849;-1754165891;-151073671;-582354815;-2017812566;-1448482903;1454369753;-343497061;-1452338084;-2125768325;-739569629;1480490759;1137464774;1710643436;2051206379;1066841277;1784247805;1599302361;1274986918;280348754;       };
       mti=624;
      };
     };
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    max_size {x=31: y=33: z=4: };
    LeabraLayer @[0] {
     name="Input";
     desc=;
     flags=;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     disp_scale=1;
     un_geom {x=4: y=3: n_not_xy=0: n=12: };
     unit_groups=1;
     gp_geom {x=2: y=6: n_not_xy=0: n=12: };
     gp_spc {x=1: y=1: };
     act_geom {x=9: y=23: n_not_xy=0: n=1: };
     scaled_act_geom {x=9: y=23: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[1].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=16: y=8: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
      LeabraUnit_Group @.gp[0] {
       name="stim0";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2375: max=0.95: max_i=1: };
       acts_m {cmpt=1: avg=0.2375: max=0.95: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[1] {
       name="stim1";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2375: max=0.95: max_i=2: };
       acts_m {cmpt=1: avg=0.2375: max=0.95: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[2] {
       name="stim2";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=4: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2375: max=0.95: max_i=1: };
       acts_m {cmpt=1: avg=0.2375: max=0.95: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[3] {
       name="stim3";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=4: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[4] {
       name="stim4";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=8: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[5] {
       name="stim5";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=8: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0: max=0: max_i=0: };
       acts_m {cmpt=1: avg=0: max=0: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[6] {
       name="bkgd0";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=12: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2375: max=0.95: max_i=1: };
       acts_m {cmpt=1: avg=0.2375: max=0.95: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[7] {
       name="bkgd1";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=12: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2375: max=0.95: max_i=1: };
       acts_m {cmpt=1: avg=0.2375: max=0.95: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[8] {
       name="bkgd2";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=16: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2375: max=0.95: max_i=0: };
       acts_m {cmpt=1: avg=0.2375: max=0.95: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[9] {
       name="elab0";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=16: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2375: max=0.95: max_i=1: };
       acts_m {cmpt=1: avg=0.2375: max=0.95: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[10] {
       name="elab1";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=20: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2375: max=0.95: max_i=2: };
       acts_m {cmpt=1: avg=0.2375: max=0.95: max_i=2: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[11] {
       name="elab2";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=20: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2375: max=0.95: max_i=1: };
       acts_m {cmpt=1: avg=0.2375: max=0.95: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[0].specs[2]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.178125: max=0.95: max_i=0: };
     acts_m {cmpt=1: avg=0.178125: max=0.95: max_i=0: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=36: pct=0.25: pct_c=0.75: adth_k=18: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[3].children[0]$$: };
     hard_clamped=0;
     avg_l_avg=nan;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
    LeabraLayer @[1] {
     name="EC_in";
     desc=;
     flags=;
     layer_type=INPUT;
     pos {x=11: y=0: z=0: };
     disp_scale=1;
     un_geom {x=4: y=3: n_not_xy=0: n=12: };
     unit_groups=1;
     gp_geom {x=2: y=6: n_not_xy=0: n=12: };
     gp_spc {x=1: y=1: };
     act_geom {x=9: y=23: n_not_xy=0: n=1: };
     scaled_act_geom {x=9: y=23: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Input";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[0]$$;
       spec {type=OneToOnePrjnSpec: spec=.projects[0].networks[0].specs.gp[0][1]$$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[0].children[0].children[4]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_EC_out";
       from_type=CUSTOM;
       from=$.projects[0].networks[0].layers[5]$;
       spec {type=OneToOnePrjnSpec: spec=$.projects[0].networks[0].specs.gp[0][1]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[0].children[0].children[3]$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[2].projections[0];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[3].projections[0];
	    Projection_Group @. = [2] = LeabraPrjn .projects[0].networks[0].layers[4].projections[0];
	    Projection_Group @. = [3] = LeabraPrjn .projects[0].networks[0].layers[5].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=16: y=8: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
      LeabraUnit_Group @.gp[0] {
       name="stim0";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2479052: max=0.9917022: max_i=4: };
       acts_m {cmpt=1: avg=0.2479052: max=0.9917022: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=4.685852: k1_ithr=-0.1: ithr_r=0: ithr_diff=1.021341: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[1] {
       name="stim1";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2479188: max=0.991751: max_i=6: };
       acts_m {cmpt=1: avg=0.2479188: max=0.991751: max_i=6: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=4.70867: k1_ithr=-0.1: ithr_r=0: ithr_diff=1.021237: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[2] {
       name="stim2";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=4: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2479992: max=0.9922383: max_i=10: };
       acts_m {cmpt=1: avg=0.2479992: max=0.9922383: max_i=10: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=4.375755: k1_ithr=-0.1: ithr_r=0: ithr_diff=1.022853: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[3] {
       name="stim3";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=4: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2478857: max=0.9917271: max_i=3: };
       acts_m {cmpt=1: avg=0.2478857: max=0.9917271: max_i=3: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=3.200029: k1_ithr=-0.1: ithr_r=0: ithr_diff=1.03125: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[4] {
       name="stim4";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=8: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2478941: max=0.991659: max_i=7: };
       acts_m {cmpt=1: avg=0.2478941: max=0.991659: max_i=7: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=3.195897: k1_ithr=-0.1: ithr_r=0: ithr_diff=1.03129: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[5] {
       name="stim5";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=8: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2437495: max=0.9939933: max_i=0: };
       acts_m {cmpt=1: avg=0.2437495: max=0.9939933: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=2.821174: k1_ithr=-0.09999974: ithr_r=0: ithr_diff=1.035446: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[6] {
       name="bkgd0";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=12: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2478963: max=0.9916327: max_i=1: };
       acts_m {cmpt=1: avg=0.2478963: max=0.9916327: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=4.797188: k1_ithr=-0.1: ithr_r=0: ithr_diff=1.020846: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[7] {
       name="bkgd1";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=12: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2479838: max=0.992386: max_i=9: };
       acts_m {cmpt=1: avg=0.2479838: max=0.992386: max_i=9: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=4.339293: k1_ithr=-0.1: ithr_r=0: ithr_diff=1.023045: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[8] {
       name="bkgd2";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=16: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2431701: max=0.9908555: max_i=0: };
       acts_m {cmpt=1: avg=0.2431701: max=0.9908555: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=1.505662: k1_ithr=1.003439: ithr_r=0.4057997: ithr_diff=0.3335564: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[9] {
       name="elab0";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=16: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2478896: max=0.9915724: max_i=7: };
       acts_m {cmpt=1: avg=0.2478896: max=0.9915724: max_i=7: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=4.752509: k1_ithr=-0.1: ithr_r=0: ithr_diff=1.021042: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[10] {
       name="elab1";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=20: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2479001: max=0.9916412: max_i=7: };
       acts_m {cmpt=1: avg=0.2479001: max=0.9916412: max_i=7: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=4.781092: k1_ithr=-0.1: ithr_r=0: ithr_diff=1.020916: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[11] {
       name="elab2";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=20: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2479218: max=0.9917827: max_i=8: };
       acts_m {cmpt=1: avg=0.2479218: max=0.9917827: max_i=8: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=4.667471: k1_ithr=-0.1: ithr_r=0: ithr_diff=1.021425: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[0].specs[2]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2471762: max=0.9939933: max_i=5: };
     acts_m {cmpt=1: avg=0.2471762: max=0.9939933: max_i=5: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=36: pct=0.25: pct_c=0.75: adth_k=18: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=$.projects[0].networks[0].specs[3].children[0]$: };
     hard_clamped=0;
     avg_l_avg=nan;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
    LeabraLayer @[2] {
     name="DG";
     desc=;
     flags=;
     layer_type=HIDDEN;
     pos {x=0: y=0: z=2: };
     disp_scale=1;
     un_geom {x=25: y=25: n_not_xy=0: n=625: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=25: y=25: n_not_xy=0: n=625: };
     scaled_act_geom {x=25: y=25: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_EC_in";
       from_type=CUSTOM;
       from=$.projects[0].networks[0].layers[1]$;
       spec {type=UniformRndPrjnSpec: spec=.projects[0].networks[0].specs.gp[0][2]$$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[0].children[1]$$: };
       recv_idx=0;
       send_idx=3;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[3].projections[2];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=25: y=25: n_not_xy=0: n=625: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[0].specs[2]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.007829073: max=0.9374519: max_i=242: };
     acts_m {cmpt=1: avg=0.007829073: max=0.9374519: max_i=242: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=6: pct=0.0096: pct_c=0.9904: adth_k=3: k_ithr=5.509718: k1_ithr=5.33335: ithr_r=0.03253388: ithr_diff=0.03201031: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.0096: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[3].children[1]$$: };
     hard_clamped=0;
     avg_l_avg=nan;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
    LeabraLayer @[3] {
     name="CA3";
     desc=;
     flags=;
     layer_type=HIDDEN;
     pos {x=0: y=4: z=3: };
     disp_scale=1;
     un_geom {x=10: y=24: n_not_xy=0: n=240: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=10: y=24: n_not_xy=0: n=240: };
     scaled_act_geom {x=10: y=24: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_EC_in";
       from_type=CUSTOM;
       from=$.projects[0].networks[0].layers[1]$;
       spec {type=UniformRndPrjnSpec: spec=$.projects[0].networks[0].specs.gp[0][2]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[0].children[1]$: };
       recv_idx=0;
       send_idx=2;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_CA3";
       from_type=SELF;
       from=$.projects[0].networks[0].layers[3]$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[0].specs.gp[0][0]$$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[0].children[3]$: };
       recv_idx=1;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[2] {
       name="Fm_DG";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[2]$$;
       spec {type=UniformRndPrjnSpec: spec=.projects[0].networks[0].specs.gp[0][8]$$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[0].children[2]$: };
       recv_idx=2;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[3].projections[1];
	    Projection_Group @. = [1] = LeabraPrjn .projects[0].networks[0].layers[4].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=10: y=24: n_not_xy=0: n=240: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[0].specs[2]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.04039257: max=0.9719656: max_i=48: };
     acts_m {cmpt=1: avg=0.04039257: max=0.9719656: max_i=48: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=12: pct=0.05: pct_c=0.95: adth_k=6: k_ithr=2.254072: k1_ithr=2.174705: ithr_r=0.03584515: ithr_diff=0.03521036: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.05: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[3].children[2]$$: };
     hard_clamped=0;
     avg_l_avg=nan;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
    LeabraLayer @[4] {
     name="CA1";
     desc=;
     flags=;
     layer_type=HIDDEN;
     pos {x=12: y=4: z=3: };
     disp_scale=1;
     un_geom {x=8: y=4: n_not_xy=0: n=32: };
     unit_groups=1;
     gp_geom {x=2: y=6: n_not_xy=0: n=12: };
     gp_spc {x=1: y=1: };
     act_geom {x=17: y=29: n_not_xy=0: n=1: };
     scaled_act_geom {x=17: y=29: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_EC_in";
       from_type=CUSTOM;
       from=$.projects[0].networks[0].layers[1]$;
       spec {type=GpOneToOnePrjnSpec: spec=.projects[0].networks[0].specs.gp[0][6]$$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[0].children[0].children[0]$: };
       recv_idx=0;
       send_idx=1;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_CA3";
       from_type=CUSTOM;
       from=$.projects[0].networks[0].layers[3]$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[0].specs.gp[0][0]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[0].children[4]$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[5].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=16: y=16: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
      LeabraUnit_Group @.gp[0] {
       name="stim0";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       unique_geom=0;
       geom {x=8: y=4: n_not_xy=0: n=32: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.06680892: max=0.6897287: max_i=6: };
       acts_m {cmpt=1: avg=0.06680892: max=0.6897287: max_i=6: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.09375: pct_c=0.90625: adth_k=1: k_ithr=3.042: k1_ithr=2.853422: ithr_r=0.06399595: ithr_diff=0.06199119: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.09375: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[1] {
       name="stim1";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=9: y=0: z=0: };
       unique_geom=0;
       geom {x=8: y=4: n_not_xy=0: n=32: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.08199251: max=0.9563069: max_i=24: };
       acts_m {cmpt=1: avg=0.08199251: max=0.9563069: max_i=24: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.09375: pct_c=0.90625: adth_k=1: k_ithr=3.130347: k1_ithr=2.80014: ithr_r=0.1114744: ithr_diff=0.1054857: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.09375: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[2] {
       name="stim2";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=5: z=0: };
       unique_geom=0;
       geom {x=8: y=4: n_not_xy=0: n=32: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.08730286: max=0.9479666: max_i=30: };
       acts_m {cmpt=1: avg=0.08730286: max=0.9479666: max_i=30: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.09375: pct_c=0.90625: adth_k=1: k_ithr=2.740334: k1_ithr=2.569074: ithr_r=0.06453433: ithr_diff=0.06249607: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.09375: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[3] {
       name="stim3";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=9: y=5: z=0: };
       unique_geom=0;
       geom {x=8: y=4: n_not_xy=0: n=32: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.08157421: max=0.9680144: max_i=19: };
       acts_m {cmpt=1: avg=0.08157421: max=0.9680144: max_i=19: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.09375: pct_c=0.90625: adth_k=1: k_ithr=2.541872: k1_ithr=2.533884: ithr_r=0.003147412: ithr_diff=0.003142463: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.09375: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[4] {
       name="stim4";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=10: z=0: };
       unique_geom=0;
       geom {x=8: y=4: n_not_xy=0: n=32: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.08734293: max=0.9350216: max_i=0: };
       acts_m {cmpt=1: avg=0.08734293: max=0.9350216: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.09375: pct_c=0.90625: adth_k=1: k_ithr=3.270192: k1_ithr=2.500886: ithr_r=0.2682035: ithr_diff=0.2352479: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.09375: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[5] {
       name="stim5";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=9: y=10: z=0: };
       unique_geom=0;
       geom {x=8: y=4: n_not_xy=0: n=32: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.08728799: max=0.949083: max_i=17: };
       acts_m {cmpt=1: avg=0.08728799: max=0.949083: max_i=17: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.09375: pct_c=0.90625: adth_k=1: k_ithr=2.744414: k1_ithr=2.399339: ithr_r=0.1343743: ithr_diff=0.1257373: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.09375: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[6] {
       name="bkgd0";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=15: z=0: };
       unique_geom=0;
       geom {x=8: y=4: n_not_xy=0: n=32: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.08106907: max=0.9426517: max_i=15: };
       acts_m {cmpt=1: avg=0.08106907: max=0.9426517: max_i=15: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.09375: pct_c=0.90625: adth_k=1: k_ithr=2.841445: k1_ithr=2.644175: ithr_r=0.07195392: ithr_diff=0.06942624: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.09375: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[7] {
       name="bkgd1";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=9: y=15: z=0: };
       unique_geom=0;
       geom {x=8: y=4: n_not_xy=0: n=32: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.08763807: max=0.961247: max_i=14: };
       acts_m {cmpt=1: avg=0.08763807: max=0.961247: max_i=14: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.09375: pct_c=0.90625: adth_k=1: k_ithr=2.886191: k1_ithr=2.467163: ithr_r=0.1568688: ithr_diff=0.1451838: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.09375: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[8] {
       name="bkgd2";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=20: z=0: };
       unique_geom=0;
       geom {x=8: y=4: n_not_xy=0: n=32: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.06687427: max=0.6247792: max_i=28: };
       acts_m {cmpt=1: avg=0.06687427: max=0.6247792: max_i=28: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.09375: pct_c=0.90625: adth_k=1: k_ithr=2.740323: k1_ithr=2.709223: ithr_r=0.01141387: ithr_diff=0.01134904: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.09375: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[9] {
       name="elab0";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=9: y=20: z=0: };
       unique_geom=0;
       geom {x=8: y=4: n_not_xy=0: n=32: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.08450545: max=0.9323456: max_i=16: };
       acts_m {cmpt=1: avg=0.08450545: max=0.9323456: max_i=16: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.09375: pct_c=0.90625: adth_k=1: k_ithr=2.914026: k1_ithr=2.512226: ithr_r=0.1483661: ithr_diff=0.1378846: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.09375: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[10] {
       name="elab1";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=25: z=0: };
       unique_geom=0;
       geom {x=8: y=4: n_not_xy=0: n=32: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.06617273: max=0.9432221: max_i=0: };
       acts_m {cmpt=1: avg=0.06617273: max=0.9432221: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.09375: pct_c=0.90625: adth_k=1: k_ithr=2.79003: k1_ithr=2.715179: ithr_r=0.02719448: ithr_diff=0.02682804: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.09375: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[11] {
       name="elab2";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=9: y=25: z=0: };
       unique_geom=0;
       geom {x=8: y=4: n_not_xy=0: n=32: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.05414389: max=0.4963881: max_i=8: };
       acts_m {cmpt=1: avg=0.05414389: max=0.4963881: max_i=8: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.09375: pct_c=0.90625: adth_k=1: k_ithr=2.796067: k1_ithr=2.780786: ithr_r=0.005480266: ithr_diff=0.005465333: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.09375: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[0].specs[2]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.07772607: max=0.9680144: max_i=3: };
     acts_m {cmpt=1: avg=0.07772607: max=0.9680144: max_i=3: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=36: pct=0.09375: pct_c=0.90625: adth_k=18: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.09375: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[3].children[3]$$: };
     hard_clamped=0;
     avg_l_avg=-1.701412e+38;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
    LeabraLayer @[5] {
     name="EC_out";
     desc=;
     flags=;
     layer_type=OUTPUT;
     pos {x=22: y=0: z=0: };
     disp_scale=1;
     un_geom {x=4: y=3: n_not_xy=0: n=12: };
     unit_groups=1;
     gp_geom {x=2: y=6: n_not_xy=0: n=12: };
     gp_spc {x=1: y=1: };
     act_geom {x=9: y=23: n_not_xy=0: n=1: };
     scaled_act_geom {x=9: y=23: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_CA1";
       from_type=CUSTOM;
       from=$.projects[0].networks[0].layers[4]$;
       spec {type=GpOneToOnePrjnSpec: spec=$.projects[0].networks[0].specs.gp[0][6]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[0].children[0].children[1]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_EC_in";
       from_type=CUSTOM;
       from=$.projects[0].networks[0].layers[1]$;
       spec {type=OneToOnePrjnSpec: spec=$.projects[0].networks[0].specs.gp[0][1]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[0].children[0].children[2]$$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[1].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=3: n_not_xy=0: n=1: };
      units_lesioned=0;
      output_name=;
      LeabraUnit_Group @.gp[0] {
       name="stim0";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2378361: max=0.9699043: max_i=4: };
       acts_m {cmpt=1: avg=0.2378361: max=0.9699043: max_i=4: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=1.416627: k1_ithr=0.9378453: ithr_r=0.4124488: ithr_diff=0.3379729: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[1] {
       name="stim1";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=0: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2415435: max=0.9806853: max_i=6: };
       acts_m {cmpt=1: avg=0.2415435: max=0.9806853: max_i=6: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=1.636984: k1_ithr=1.069402: ithr_r=0.4257555: ithr_diff=0.346724: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[2] {
       name="stim2";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=4: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2356112: max=0.962226: max_i=10: };
       acts_m {cmpt=1: avg=0.2356112: max=0.962226: max_i=10: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=1.5009: k1_ithr=1.26723: ithr_r=0.1692315: ithr_diff=0.1556865: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[3] {
       name="stim3";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=4: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2465482: max=0.9906843: max_i=7: };
       acts_m {cmpt=1: avg=0.2465482: max=0.9906843: max_i=7: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=1.541917: k1_ithr=0.3648291: ithr_r=1.441353: ithr_diff=0.7633926: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[4] {
       name="stim4";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=8: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2472262: max=0.9916338: max_i=10: };
       acts_m {cmpt=1: avg=0.2472262: max=0.9916338: max_i=10: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=1.593812: k1_ithr=0.2016963: ithr_r=2.067121: ithr_diff=0.8734503: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[5] {
       name="stim5";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=8: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2400849: max=0.9901931: max_i=0: };
       acts_m {cmpt=1: avg=0.2400849: max=0.9901931: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0.8349507: k1_ithr=0.5864834: ithr_r=0.3532284: ithr_diff=0.2975832: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[6] {
       name="bkgd0";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=12: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2437904: max=0.9838242: max_i=1: };
       acts_m {cmpt=1: avg=0.2437904: max=0.9838242: max_i=1: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=1.481407: k1_ithr=0.654489: ithr_r=0.8168926: ithr_diff=0.5581976: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[7] {
       name="bkgd1";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=12: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2354416: max=0.9864386: max_i=9: };
       acts_m {cmpt=1: avg=0.2354416: max=0.9864386: max_i=9: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=1.325716: k1_ithr=1.121859: ithr_r=0.1669658: ithr_diff=0.1537714: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[8] {
       name="bkgd2";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=16: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2079536: max=0.9850313: max_i=0: };
       acts_m {cmpt=1: avg=0.2079536: max=0.9850313: max_i=0: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0.4955974: k1_ithr=0.427618: ithr_r=0.1475336: ithr_diff=0.1371666: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[9] {
       name="elab0";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=16: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2417566: max=0.9754453: max_i=11: };
       acts_m {cmpt=1: avg=0.2417566: max=0.9754453: max_i=11: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=1.920058: k1_ithr=1.053185: ithr_r=0.6005362: ithr_diff=0.4514826: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[10] {
       name="elab1";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=0: y=20: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2439828: max=0.9801161: max_i=7: };
       acts_m {cmpt=1: avg=0.2439828: max=0.9801161: max_i=7: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=1.521859: k1_ithr=0.589314: ithr_r=0.9487286: ithr_diff=0.612767: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
      LeabraUnit_Group @.gp[11] {
       name="elab2";
       el_typ=LeabraUnit;
       el_def=0;
       pos {x=5: y=20: z=0: };
       unique_geom=0;
       geom {x=4: y=3: n_not_xy=0: n=12: };
       units_lesioned=0;
       output_name=;
       netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       netin_top_k {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
       acts_p {cmpt=1: avg=0.2403633: max=0.9690264: max_i=8: };
       acts_m {cmpt=1: avg=0.2403633: max=0.9690264: max_i=8: };
       phase_dif_ratio=1;
       acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
       acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
       kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=1.062199: k1_ithr=0.6370736: ithr_r=0.5112118: ithr_diff=0.4002316: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
       i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
       un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
       adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
       maxda=0;
       act_max_avg=0;
       misc_state=0;
       misc_state1=0;
       misc_state2=0;
       misc_state3=0;
       misc_float=0;
       misc_float1=0;
       misc_float2=0;
      };
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[0].specs[2]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=16.62509;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2385115: max=0.9916338: max_i=4: };
     acts_m {cmpt=1: avg=0.2385115: max=0.9916338: max_i=4: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=36: pct=0.25: pct_c=0.75: adth_k=18: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=$.projects[0].networks[0].specs[3].children[0]$: };
     hard_clamped=0;
     avg_l_avg=nan;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=;
   auto_build=AUTO_BUILD;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   batch=0;
   epoch=0;
   group=0;
   trial=0;
   tick=0;
   cycle=0;
   time=0;
   group_name=;
   trial_name=;
   output_name=;
   sse_unit_avg=0;
   sse_sqrt=0;
   sse=0;
   sum_sse=0;
   avg_sse=0;
   cnt_err_tol=0;
   cnt_err=0;
   pct_err=0;
   pct_cor=0;
   cur_sum_sse=0;
   avg_sse_n=0;
   cur_cnt_err=0;
   train_time {name="": start={usr=4882: sys=874: tot=128799905954: }: end={usr=194663: sys=30279: tot=310789668: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   epoch_time {name="": start={usr=6191: sys=910: tot=128799907308: }: end={usr=6752: sys=924: tot=128799907891: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   trial_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   settle_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   cycle_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   wt_sync_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   misc_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   threads {
    run_time {name="": s_used=0: n_used=0: };
    sync_time {name="": s_used=0: n_used=0: };
    total_time {name="": s_used=0: n_used=0: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=0;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=1681;
   n_cons=196299;
   max_size {x=31: y=33: z=4: };
   learn_rule=LEABRA_CHL;
   phase_order=PLUS_ONLY;
   no_plus_test=0;
   sequence_init=DO_NOTHING;
   phase=MINUS_PHASE;
   nothing_phase=0;
   phase_no=0;
   phase_max=1;
   ct_cycle=60;
   time_inc=1;
   cycle_max=60;
   mid_minus_cycle=-1;
   min_cycles=15;
   min_cycles_phase2=35;
   ct_time {
    minus=50;
    plus=20;
    inhib=1;
    n_avg_only_epcs=1;
    total_cycles=71;
    inhib_start=70;
   };
   ct_sravg {
    start=30;
    end=1;
    interval=1;
    plus_s_st=19;
    force_con=0;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0.02;
    trough_i=0.02;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   sravg_vals {
    s_sum=0;
    s_nrm=0;
    m_sum=0;
    m_nrm=0;
    do_s=0;
   };
   ct_lrn_trig {
    plus_lrn_cyc=-1;
    davg_dt=0.1;
    davg_s_dt=0.05;
    davg_m_dt=0.03;
    davg_l_dt=0.0005;
    thr_min=0;
    thr_max=0.5;
    loc_max_cyc=8;
    loc_max_dec=0.01;
    lrn_delay=40;
    lrn_refract=100;
    davg_l_init=0;
    davg_max_init=0.001;
    davg_time=10;
    davg_s_time=20;
    davg_m_time=33.33334;
    davg_l_time=2000;
    lrn_delay_inc=0.025;
    lrn_refract_inc=0.01;
   };
   lrn_trig {
    davg=0;
    davg_s=0;
    davg_m=0;
    davg_smd=0;
    davg_l=0;
    davg_max=0.001;
    cyc_fm_inc=0;
    cyc_fm_dec=0;
    loc_max=0;
    lrn_max=0;
    lrn_trig=0;
    lrn=0;
    lrn_min=0;
    lrn_min_cyc=0;
    lrn_min_thr=0;
    lrn_min_sum=0;
    lrn_min_cyc_sum=0;
    lrn_min_thr_sum=0;
    lrn_plus=0;
    lrn_plus_cyc=0;
    lrn_plus_thr=0;
    lrn_plus_sum=0;
    lrn_plus_cyc_sum=0;
    lrn_plus_thr_sum=0;
    lrn_noth=0;
    lrn_noth_cyc=0;
    lrn_noth_thr=0;
    lrn_noth_sum=0;
    lrn_noth_cyc_sum=0;
    lrn_noth_thr_sum=0;
    lrn_stats_n=0;
   };
   minus_cycles=0;
   avg_cycles=0;
   avg_cycles_sum=0;
   avg_cycles_n=0;
   minus_output_name=;
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   send_pct=0;
   send_pct_n=0;
   send_pct_tot=0;
   avg_send_pct=0;
   avg_send_pct_sum=0;
   avg_send_pct_n=0;
   maxda_stopcrit=0.005;
   maxda=0;
   trg_max_act_stopcrit=1;
   trg_max_act=0;
   ext_rew=0;
   ext_rew_avail=0;
   norew_val=0.5;
   avg_ext_rew=0;
   pvlv_pvi=0;
   pvlv_pvr=0;
   pvlv_lve=0;
   pvlv_lvi=0;
   pv_detected=0;
   avg_ext_rew_sum=0;
   avg_ext_rew_n=0;
   off_errs=1;
   on_errs=1;
   norm_err=0;
   avg_norm_err=1;
   avg_norm_err_sum=0;
   avg_norm_err_n=0;
  };
  LeabraNetwork @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="norm_err";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[1] {
     name="ext_rew";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[2] {
     name="maxda";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[3] {
     name="minus_output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[4] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[5] {
     name="ct_cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[6] {
     name="phase_no";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[7] {
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[8] {
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[9] {
     name="output_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[10] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[11] {
     name="group_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[12] {
     name="time";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[13] {
     name="cycle";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[14] {
     name="tick";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[15] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[16] {
     name="group";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[17] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[18] {
     name="batch";
     value 1 0=1;
     val_type_fixed=1;
    };
   };
   name="CA1_EC_SlotNet";
   desc=;
   specs {
    name=;
    el_typ=BaseSpec;
    el_def=0;
    LeabraConSpec @[0] {
     name="ConSpec";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraConSpec @[0] {
       name="EC_CA1_Train";
       desc=;
       unique{ rnd;wt_limits;wt_sig;lrate;lmix;savg_cor;       };
       children {
	name=;
	el_typ=LeabraConSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
       wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.01;
       cur_lrate=0.01;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=0;
       };
       wt_sig {gain=6: off=1.25: };
       lmix {hebb=0.05: err=0.95: err_sb=1: };
       xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
       savg_cor {cor=0.8: thresh=0.001: norm_con_n=1: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.1;
       };
      };
     };
     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     learn_rule=LEABRA_CHL;
     inhib=0;
     wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
     wt_scale_init {init=0: abs=1: rel=1: };
     lrate=0.1;
     cur_lrate=0.01;
     lrs_value=EPOCH;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=0;
      cur_val=0;
     };
     wt_sig {gain=1: off=1: };
     lmix {hebb=1: err=0: err_sb=1: };
     xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
     savg_cor {cor=1: thresh=0.01: norm_con_n=1: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.1;
     };
    };
    LeabraBiasSpec @[1] {
     name="BiasSpec";
     desc=;
     unique{ rnd;wt_limits;lrate;wt_scale_init;     };
     children {
      name=;
      el_typ=LeabraBiasSpec;
      el_def=0;
     };
     rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
     wt_limits {type=NONE: min=-1: max=5: sym=0: };
     learn_rule=LEABRA_CHL;
     inhib=0;
     wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
     wt_scale_init {init=0: abs=1: rel=1: };
     lrate=0;
     cur_lrate=0.01;
     lrs_value=EPOCH;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=0;
      cur_val=0;
     };
     wt_sig {gain=6: off=1.25: };
     lmix {hebb=0.01: err=0.99: err_sb=1: };
     xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
     savg_cor {cor=1: thresh=0.01: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.1;
     };
     dwt_thresh=0.1;
    };
    LeabraUnitSpec @[2] {
     name="UnitSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=$.projects[0].networks[0].specs[1]$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {gelin=0: thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
     spike {rise=0: decay=0.05: g_gain=5: window=3: eq_gain=10: eq_dt=0.02: };
     spike_misc {
      exp_slope=0.02;
      spk_thr=1.2;
      clamp_max_p=0.11;
      clamp_type=REGULAR;
      vm_r=0.3;
      vm_dend=0.3;
      vm_dend_dt=0.16;
      vm_dend_time=6.25;
     };
     opt_thresh {send=0.1: delta=0.005: phase_dif=0: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
     dt {integ=1: vm=0.2: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=5: net_time=1.428571: };
     act_avg {l_gain=3: l_dt=0.005: ml_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=200: ml_time=2.5: m_time=10: s_time=5: ss_time=1: };
     g_bar {e=1: l=0.1: i=1: h=0.1: a=0.1: };
     e_rev {e=1: l=0.15: i=0.15: h=0.7: a=0: };
     hyst {on=0: b_inc_dt=0.01: b_dec_dt=0.05: a_thr=0: d_thr=0: g_dt=0.1: init=1: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
     adapt {
      on=0;
      dt=0.007;
      vm_gain=0.04;
      spike_gain=0.00805;
      interval=10;
      dt_time=142.8571;
     };
     depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=2: };
     syn_delay {
      on=0;
      delay=4;
     };
     da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
     noise_type=NO_NOISE;
     noise {name="": type=GAUSSIAN: mean=0: var=0.002: par=1: };
     noise_adapt {trial_fixed=1: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
    };
    LeabraLayerSpec @[3] {
     name="LayerSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="Slot";
       desc=;
       unique{ kwta;gp_kwta;inhib_group;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	fb_act_thr=0;
	ff_pct=0;
	fb_max_dt=0.1;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
       i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
       adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.1;
       };
      };
      LeabraLayerSpec @[1] {
       name="CA1";
       desc=;
       unique{ kwta;gp_kwta;inhib_group;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_INHIB;
	kwta_pt=0.25;
	min_i=0;
	fb_act_thr=0;
	ff_pct=0;
	fb_max_dt=0.1;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_K: k=3: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
       i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
       adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.1;
       };
      };
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_INHIB;
      kwta_pt=0.25;
      min_i=0;
      fb_act_thr=0;
      ff_pct=0;
      fb_max_dt=0.1;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=36: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    BaseSpec_Group @.gp[0] {
     name="LeabraPrjns";
     el_typ=BaseSpec;
     el_def=0;
     FullPrjnSpec @[0] {
      name="FullPrjnSpec_0";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=FullPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
     };
     OneToOnePrjnSpec @[1] {
      name="OneToOnePrjn_0";
      desc=;
      unique{ self_con;      };
      children {
       name=;
       el_typ=OneToOnePrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      n_conns=-1;
      recv_start=0;
      send_start=0;
     };
     UniformRndPrjnSpec @[2] {
      name="RandomPerfPath";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=UniformRndPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      p_con=0.25;
      sym_self=1;
      same_seed=1;
      rndm_seed {
       name=;
       seed{ 1700665929;1915283049;440962826;1416808693;763354184;-968069011;-1621804692;1918731885;1758057636;-957337054;1384017935;775664529;1167946049;-780603827;-933248300;1424879074;459429279;-654909748;575385277;-1953884764;-1835376494;-662361883;-709478188;389053418;869735786;411194603;-515226671;324412405;300764357;1175959254;202715633;632139060;2074225060;1321646906;1899458921;1349019179;453167286;1786549747;-519853408;725126518;-146934346;-941437550;125088607;1621203878;1369425935;377187251;1631144141;287499435;-741295449;-1883805979;499005525;-293292356;-1285468017;-1990509354;509113306;1910202169;-1945532080;-1283584109;-536363665;1163954135;111222186;1578544719;-295927036;365916418;-1923110902;-270429335;466150164;491997991;-1490713177;1238763358;-218382399;-1388348975;-1425933433;-2080020286;-663677942;1083488472;-1417146647;152479236;-287071262;2041188628;1456470681;-2024720823;-114979095;95591589;-1177609619;-1327246048;-488617792;-893251514;1730697361;1983906089;-805905118;547546976;-508057284;-1950253768;-1812958656;47212137;-1142581043;-2113597172;1635924200;53749072;-256210700;-1079691048;-1919805336;1822055481;-1714922880;906577843;-1024649975;-1827559587;539090919;1635841424;1581415331;2110945625;-1201539032;-1382325501;-951019305;1650573335;-1460236510;96376853;1210596799;-652408211;-468976674;-2121358422;-864847422;905859744;703478172;1796552457;2064252582;1321850722;-1046809201;375311549;-467473389;-427052333;1535040660;-517225394;476882919;1745477034;-2026768385;-1739047846;428009282;1228246933;-385623568;2009925740;878815375;-576387078;120547021;2136097906;-1522823951;1838262130;1161337843;-160954097;859242066;789199089;1108897965;-861634443;283104552;628719971;484640683;1046055444;-1161548158;-238495457;-1607359316;-1384573113;-48423973;1397396699;-804559706;-1981939010;-1758351150;-739634505;1380431276;-901823766;-970778729;142770703;360732567;1134779968;481032531;764135790;-1326164202;1686900629;2091145750;1269750470;1585565751;991824899;-10659611;716253557;625473761;-205743490;226547979;-615938798;-1414620815;-500820452;1236685305;-2070671465;-741088375;1747165235;-1608059268;-289755527;1415323878;-263873816;1808458365;-1683769421;-1229180259;1169166468;1190179395;-2077645099;-1298603361;-1243451970;1060300794;-49262479;-577060918;1227832350;-542617587;1755386969;702029708;402284305;941529995;1780335022;-366145053;2138631737;632943858;823207509;1905958245;234265937;-172791085;-1616743185;438695777;1376027430;-804741563;-1945900927;-192030829;155327669;761606479;-1116161006;1102496568;505644902;-1555824088;-1776069251;254456583;-1361550928;-1954230744;2027934081;837494896;-444930783;-368469668;-1099539858;-2079753840;348789135;1649581409;-831490089;1498135452;529730282;708872524;100915191;-1982307217;-350685954;-1965093425;83765216;-1833132960;1925719467;616879892;709791719;525493799;-1287770776;-205806120;-2117622930;304891556;-71195715;-1774696192;978641109;1906422293;-1415317775;-1149404691;1212875610;635504375;-1019023484;1548271701;166516279;-1198197817;1335597774;1038474177;-594477764;494117363;1911484664;1963545687;-1054192375;741392398;-1369095005;-871023197;297529663;-1074141701;-814154402;-1008878637;-760387021;328111636;-1877087479;-270295171;-107324451;1075973566;2063836292;387847843;-1687082374;-1398277500;1694600715;-924424928;385524478;-821150362;-1724102902;134434650;305887669;-1249123683;-1026522896;2078927893;-148055781;-1803059280;-1297505165;1896176335;-665382271;1288691846;-1529031296;-403648632;-1310702058;-1920443612;1436372287;974629048;-777516581;158890876;-419293903;-309846016;-1276428938;2111722508;1812799338;-1494570623;1440808186;402858835;577330188;-1977106934;1486373495;148725726;1052156391;1543733365;-1605647593;-86166115;2051651243;1752960104;1047795652;450971052;-1596093899;31455245;-579415172;1401514359;685818603;-513168619;1893287693;-837651172;1976487324;32187731;-1576786398;-1360385020;270308803;63009365;-36398608;-1528247993;1081104034;-1390122311;-1684459470;-276188068;896795112;421652982;1045427581;-766066495;-2035294213;1846452143;83566361;-1067014319;55109327;-219097055;-40011551;-83909470;1113398782;1774407189;-782072993;-1146220344;-533808337;583951834;-253371775;-567490358;-392312370;937055331;-218019950;-1346054471;1924123724;1707856103;-92372411;-1618289370;2115863741;2127690678;2123251646;1618304743;2120321099;7364800;-178459313;364596364;-156229427;1655517400;2137483312;535123433;-170682494;-921317253;1433630959;952636798;954395215;-1659651643;-1885025250;1107526824;-637482678;-1157202837;-184399860;786396811;-161011336;1917006377;1232221035;930612342;66513459;-1624984891;1150814506;-787438945;-1529240267;1003069277;341812828;-1773674504;1494100303;-1076688012;-1214272195;913248907;277591432;-1577293734;-153861013;-1187862852;-479627093;1455850494;-1460761518;-446419640;-36699312;-1877099399;-789171902;-163301023;-1790044313;-233354857;1822178595;2051625514;-552374344;1536371081;1694575723;1763787158;-983977640;432647597;-700572664;735048991;1527926276;-132352317;1577556875;-1543292610;1334489721;478323494;-1495026227;13337467;-1241205672;987059028;386782711;-1917347001;-2039795442;-857880686;608392972;-914700908;1280230764;-1531561253;-1454220680;-784400898;-240018514;-1524825569;-178365360;-672671329;87119981;-607831581;1441314627;1236312302;-749181136;125830149;-1345633056;1564287250;1800812904;1537005911;1317717721;-787346140;-180743856;1349730989;-824484917;-484360232;-1975032232;-2006479500;-506923135;1028405822;-1175442837;1464987235;680755361;1651436157;-358424347;-353905992;1683568834;669565419;-1073199436;1411176241;-1059481617;1067073052;635141901;1542592291;-825076627;-550752406;1236068210;1899552101;1470488187;-438955478;139205942;-1776062888;780055949;-1711204435;-773586664;1061741749;-1759896968;-959594958;1766540390;622730677;-289761412;-1020674513;426874225;-1797230421;964027844;-1143632788;-1570158721;456530795;-1796073902;-1381785684;-675012669;-207730466;209454672;947867568;-642801007;-364296260;814188414;-1989352230;-531242147;1478624316;-748989640;1831824239;-868924785;-210489498;569819652;1917497792;1491037266;-1688000019;1494840442;-641873481;-323098059;951996288;1746984883;-494107282;919796534;807863428;-1335136693;-395930107;955017367;-1990257459;-95486234;-1680466027;-1551677488;1392032280;2053623580;-1097450063;-869260064;418450129;1301946296;47679297;-1791940630;571992270;-2069423731;-914121037;-2018914887;-382451695;1348791141;1501914304;-506262670;91881187;784207070;670032870;1709507087;-1210757160;-707121835;-1498354878;-529395051;1661836676;-934390576;1209099415;-976554105;472206702;-1758892863;199312971;-829693708;-1286278447;-566510946;-88496303;1896343483;-1590232892;1530666625;9079524;1463341657;-1302063330;1671371891;1394425186;-501729928;-2104955151;-729066678;2106126137;-107783291;1539822668;1888418256;       };
       mti=624;
      };
     };
     UniformRndPrjnSpec @[3] {
      name="RandomEC_CA1";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=UniformRndPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      p_con=0.1;
      sym_self=1;
      same_seed=0;
      rndm_seed {
       name=;
       seed{ 1704848366;-501613492;1450168877;1087076191;1589208602;-981025876;-27151599;584992801;-1691148787;-1129717004;1446392088;-413745176;358316739;18795004;-1054765958;163065036;-1355360116;1315532311;-1508100928;-357916003;11187818;1407103463;693781972;-121110341;-732774224;-693448264;-1145122335;-1311749718;-2110785692;-736349861;1055887318;1062684045;344057281;1333456454;-1661664987;-2041031802;1042716472;-290545347;803326876;458215603;-1240325689;-1851998238;346461066;-1955393635;421150951;778582608;1854132670;1970927498;124062983;1309139700;-1840994341;-1780983344;-215297522;346608726;-1768436700;1127080245;655011260;777267045;759827;1702505146;2033053443;-988455417;1926904786;-1058896514;-1254518895;1049645120;463595906;-949636467;-510693302;-1632805358;-1272140650;638012075;377682111;1510169252;1700270179;-416225035;-1984852134;1680582149;455910370;1870568057;-1763366488;123431523;2142565473;1741408819;-1577482226;966072593;1572076811;1840459593;-688443456;-1435880632;-1335961972;471770209;-390741087;-959061689;-1060420558;1627857076;1497613513;1032039241;916170031;790057710;-1139337654;-1946135859;1733393;-2089124068;-1892862658;1928797461;-711316146;-2127751988;-1869777998;612881629;680280223;-431778262;1797599133;1231701245;146543582;1273472265;-856857444;-1193620944;-1545304016;-949322191;904563762;-1209134541;604006095;-1898555610;-1590778448;770810295;266386609;1568418644;1619039753;1564309929;-487331894;868484048;756011412;1769071593;-1472326898;771944515;-1886280201;2079954738;566751913;1130245688;1249099273;-493600331;1336038236;-852317888;-161045761;-392484355;480411592;553022075;-371458533;292427789;-274107721;1328059803;38301786;-1255506405;904798583;-719527026;1057438781;516057518;2030293060;-1764157224;1474918562;-1323248656;1459495196;1975948820;-1271041043;-19749648;1241915269;132387771;-1717052305;1999326378;1825162017;-1159324597;1944795769;-681555451;247753484;-300177301;954276280;999988809;1655997567;1402057833;-1059072580;1307282448;-866493333;1643257279;782396078;-1544735393;1336922987;141042573;-2131264419;-842274504;-1780443131;1864940162;74887535;-170825588;1014745133;-1875832956;424924834;308175023;969067729;-819091396;1506154659;1925474995;1735744260;941987524;333406240;-2106454675;-1304906599;-45927178;-1316093319;28823128;-816217718;190934240;450090292;-1223167399;295850429;-890018456;1027229455;-1653731132;13669624;-1530167629;233616817;-814323534;-1063974989;834222415;-1561861109;1724172654;830005421;1437088292;92257917;2042760502;1931650713;-1510272289;-1724795111;1901572496;-1399412705;-1942824612;536154370;282577079;-796057567;114155609;-1967643379;-1645959460;-527129464;1249922762;-631850485;66956829;1410217831;1359704629;688776060;698096869;1548809299;82724693;1166123653;-306593007;556570904;1143881591;711929998;2059151111;-1236820896;-610327123;1085668522;-122604676;-286176991;-1119679119;1875630695;873972039;-2134949619;1085190902;460573567;-250658520;823245317;179180040;1015768632;-398766807;802614436;-1930747449;1983496397;-494256751;-1568969296;1078233681;-1858116952;-1535842261;394037831;-1508667874;-1350037976;728240559;558801449;-202576820;-786922677;-1813687159;126205689;-809067936;1051649331;470661444;711687418;622860745;1408614005;-938723091;1842074896;1709713888;-2077691919;540325644;-65690390;-668351972;70594155;-2017487768;-605533948;82481142;793736002;768920639;536562961;1641710060;339220665;-1200897226;-1268328258;1941184359;-290981254;-224422918;922002299;-161590330;342784761;-1741371778;141470766;-1424978583;1529024379;-1670158745;-468290529;-37565357;-1285460776;-626614965;450860722;2025437061;-1189671840;174478839;1814174401;-1526378737;-1748949391;-840124496;1989690865;1896941827;-795303650;-1640294714;1541071018;-1471993906;2036261076;-1433161118;-1218789062;-792906637;1254465932;709374718;-558363244;1896099058;-1856452545;282764914;1316269660;1709412628;-822117459;767421195;-1073504323;941405533;-1309846503;-446586096;961512169;164386904;-1018301404;-428133424;1276927661;1552901963;1306549154;268657600;-604496846;22043080;1496806748;1379603494;271111129;-1872120044;-699792602;-656077806;-1505108689;716986684;1756647976;1513839786;179311605;1507393064;-775997267;176716839;190503909;-1177989156;-549694950;627754594;-1409763280;353464129;456240941;395588426;1005639612;-1080247625;-273446923;626084763;-1345992523;-495771454;1161442997;-433460587;-282209088;-112833150;-2101502343;1207720732;756906247;-711557030;-578861643;796846183;1984024893;-376133049;245469808;2116859853;-862670566;-1390460548;-103594410;1766932010;-562066535;-750944411;-1002775838;-763247254;834082067;789019942;66566054;797789223;-376378355;283287857;100913921;-1670067694;-2136585730;353832475;1868694871;-740220257;-711187138;-1758242876;262445266;125218447;-1893308639;-1655870074;767810252;-370114507;1241087240;-359192760;683058515;1473095292;-72968689;-1722179461;-427027843;-1801798793;-342846485;982090827;-233154981;419506813;1654499863;919855733;-1828981007;422935208;-883601902;770041728;2031605580;-407164882;-1433276273;1965710960;660127077;-853489750;979843199;1735279342;2027639071;-322826069;-1743619042;410645731;1650465383;-19594729;112363454;222707153;-1333641647;251790236;-386012566;-2088849844;1482982566;-1086933308;1070601216;332129763;-89313421;549890325;-1167068113;554855592;-1056782288;-1600042744;-419549988;1986268390;246528015;1141286616;-2116487541;-532179204;-2130310261;1078845438;-1080960883;-514328226;162736293;1827821582;1764083425;-1552590761;-1880860543;-1475737432;-1623300340;-232314751;1907265350;595363840;1558817278;-299726182;-973368995;1587390999;-1563172176;-322456515;1609649274;-142737012;1920280177;651828279;111645371;884996304;429161498;-357244339;2124089554;749234252;-1470770166;-2071137993;-1390180103;-164601832;155279289;1293141776;-1681087287;561686828;169954418;2764049;171500237;694956538;340034492;-1817471161;1435082069;566822977;-1887302461;-60206268;772791331;1912968944;-963475401;1814008487;-1736854622;-1299939259;-857891543;1890614713;-118418496;151333144;-1850797918;509030731;-1630234685;22882898;631608968;-174379561;-1567913260;-499888481;855146942;-844373975;-118756154;204265710;608892444;-99870909;-1040814472;1354132416;-706097569;-114186105;794960464;-431727667;-658802556;354930306;600182154;-1322765389;2120032279;-645697295;1458246590;914949024;1885278310;471439850;-1226967654;-987218111;-443987628;-1127579490;788282328;1215444613;-505927582;-829761132;1918544355;-1612907909;965252367;839964734;-703561526;-1695718750;1540328310;1321580362;-1977256465;-1034002982;1281567223;575551081;752397001;476050602;-193952912;-1025414722;615505649;1548284022;951554133;1794928876;1619158245;-844376999;-538643480;-1421213410;109997684;-998659539;-1353399152;-2120109563;2135031343;-514725741;-692726978;-2039284096;       };
       mti=624;
      };
     };
     TesselPrjnSpec @[4] {
      name="TesselEC_CA1";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=TesselPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      recv_off {x=0: y=0: };
      recv_n {x=-1: y=-1: };
      recv_skip {x=1: y=1: };
      recv_group {x=4: y=8: };
      wrap=1;
      send_scale {x=1: y=0.5: };
      send_off {x=0: y=0: };
      send_offs {
       name=;
       el_typ=TessEl;
       el_def=0;
       TessEl @[0] {
	send_off {x=0: y=0: };
	wt_val=1;
       };
       TessEl @[1] {
	send_off {x=1: y=0: };
	wt_val=1;
       };
       TessEl @[2] {
	send_off {x=2: y=0: };
	wt_val=1;
       };
       TessEl @[3] {
	send_off {x=3: y=0: };
	wt_val=1;
       };
       TessEl @[4] {
	send_off {x=4: y=0: };
	wt_val=1;
       };
       TessEl @[5] {
	send_off {x=5: y=0: };
	wt_val=1;
       };
       TessEl @[6] {
	send_off {x=6: y=0: };
	wt_val=1;
       };
       TessEl @[7] {
	send_off {x=7: y=0: };
	wt_val=1;
       };
       TessEl @[8] {
	send_off {x=0: y=1: };
	wt_val=1;
       };
       TessEl @[9] {
	send_off {x=1: y=1: };
	wt_val=1;
       };
       TessEl @[10] {
	send_off {x=2: y=1: };
	wt_val=1;
       };
       TessEl @[11] {
	send_off {x=3: y=1: };
	wt_val=1;
       };
       TessEl @[12] {
	send_off {x=4: y=1: };
	wt_val=1;
       };
       TessEl @[13] {
	send_off {x=5: y=1: };
	wt_val=1;
       };
       TessEl @[14] {
	send_off {x=6: y=1: };
	wt_val=1;
       };
       TessEl @[15] {
	send_off {x=7: y=1: };
	wt_val=1;
       };
      };
      last_make_cmd=;
      last_weights_cmd=;
     };
     SymmetricPrjnSpec @[5] {
      name="SymmetricPrjn";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=SymmetricPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
     };
     GpOneToOnePrjnSpec @[6] {
      name="GpOneToOne";
      desc=;
      unique{ self_con;      };
      children {
       name=;
       el_typ=GpOneToOnePrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      n_conns=-1;
      recv_start=0;
      send_start=0;
     };
     PolarRndPrjnSpec @[7] {
      name="RandomMossy";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=PolarRndPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      p_con=0.04;
      rnd_dist {name="": type=GAUSSIAN: mean=0: var=0.25: par=1: };
      rnd_angle {name="": type=UNIFORM: mean=0.5: var=0.5: par=1: };
      dist_type=XY_DIST_CENTER_NORM;
      wrap=1;
      max_retries=1000;
      same_seed=0;
      rndm_seed {
       name=;
       seed{ 1727484609;1042048449;-403739097;-698107849;-329809784;974985692;89518034;1056767969;703028429;1586254314;-962587455;1905394325;1946695792;1686748578;1414073437;2129861723;-292791918;-666570938;-568241333;531587963;-120843621;10399245;1746575415;2075663205;1174885004;1240204986;-1932150047;-779405654;-154402359;-805843249;1644413594;1692252742;-2145682141;-1732901082;194975062;-1786220271;517785507;-1922695564;463768244;-1324282581;-1545330091;1673730940;1109048699;172559181;-252138867;-1220327373;-192629629;1819522735;489435350;-966014305;1379429310;673495438;2024551226;234342780;-268838366;1177925692;947213641;837662470;1927637912;-1740155752;-2002728194;-789253719;-644001200;1348789758;-1797442341;444398302;-643708968;1271205034;-718110021;1474955997;187303186;-1614241183;-1648096169;1531271890;-1615019895;-263235038;-1452197807;-15424500;2136588601;794309479;-1122015501;-401500570;-1322294485;1172443264;1821150265;-2147136915;871679265;-856199332;1741801427;1215379507;-853807596;353386094;500400066;1243494887;137555484;-800526997;-1851108760;-1758249421;1926677175;1474836529;-1107305644;699174739;-1190332635;678584778;268152602;-1061748821;-727988814;1377286208;-1967293679;-2061256212;588953940;-1476062573;-1360597851;-2108572332;-1645430432;1732810269;-2101594752;-1687048513;-1383590393;10247536;-1178481240;1479286411;1938155244;-1998327556;-1126694222;1836662765;1669301402;-2088549210;855759156;-43809275;1831278304;-2016317368;-188815434;1799636974;-1476900655;632465094;-1843019098;1619758909;22716214;711898841;-1988672215;406801796;1074870690;-703006498;-552373055;1970725659;623281108;1334474551;-2048463134;1913790197;2086849242;-511296514;804982889;146057990;1408741368;-1984713000;1013753502;844778227;-1067410051;282628437;1619711017;258415721;1421960975;-1445583063;-761235557;1584891805;-1040253646;-1754259972;-1187331106;-1308360075;-1507350371;2000395878;-1155817905;1773644302;-102686823;-453975439;-2057938518;614746105;1663280879;703085209;-165019631;823765455;329827937;1818701308;-96695671;567051051;-2112961615;343081306;-1634815170;584831849;2025626155;-2146480815;-676336257;216272557;-2070978557;318269992;870926988;1841518081;823586502;-1287771419;-1664250645;65030582;1525250968;-1099848408;811574366;1799628771;980004600;52215975;1442996659;-115945973;2088342010;217246682;-2029733930;1107884921;1550217006;607323490;330338946;480206883;-95901271;-48436499;715394754;-571628185;1912653138;-852736610;-956072751;1676321211;-533440188;-580962074;1984364605;-87608175;-1816665984;-1438702031;-2050990585;1700316642;-1423864199;1121585778;-591221941;1433345109;1632313874;-1973052050;-649467764;-142194596;-1823578771;-1405129538;794460960;885120149;1939522751;-125088275;623648222;-1082812529;408567963;275476770;1776080230;1009078688;1858589982;-1916949190;-904900584;134942376;1573695818;162535066;-1530440250;-1209615527;-1949786387;-1346528174;-727352168;1094065456;676314719;-588254330;1486897541;887455265;233925907;-1289472882;-1925470132;666707415;-1547633179;1213582390;1034158535;387527576;582333454;-1016231779;480605550;1998664575;1427750864;-981039216;-1515837157;-230975238;-1322279845;887312700;214706636;-2088850787;1755408605;1456479215;-896572406;794446258;468538976;-461605625;-1563078724;-1140382433;1098459803;-825214483;78199314;-1789555641;-1531689625;-167416056;-1512131705;-1550712406;-1760194438;-1189463925;1733861441;-1787200907;-2001206999;-1788511698;647938196;-440586339;-680437616;404987450;1632663582;-773784456;4092101;-1268847624;-510532382;1077065478;1831204357;-893504297;-1457763096;-1346792553;-1991968753;1431294824;1954585269;-193765811;-1424100336;-823333275;-69687926;-1613848230;709214470;-788832595;-140936714;-2088485894;-351575510;-836457344;-262198269;-132620971;-1058416060;772021850;676603098;-354339493;-976345838;-1952335344;1373637750;-1085170864;-24171848;460779558;360388190;-1659231625;1156789899;300572629;-107754131;-1774064693;-844130125;-1949471017;-63981455;732350563;-1195439239;1424055282;516117323;-1783627516;-836329780;-1411223526;788206312;1250205433;1479373130;-660875510;-1999722239;1964001956;-1914519153;451269400;-2142494224;1641146355;1552877044;-1806665692;-451559814;1171384378;515191749;-1667966152;-425555614;-1488183866;1028760534;-1531106575;-347931037;539999589;150194015;-2055700222;-1399593336;-1031811077;1921042018;1202602394;-1206331725;2005429858;-191133283;693426917;1340205801;-1221601511;632967737;-468585712;1068438291;1523364628;539747807;-1938880110;-690170008;-61455920;-2012814119;19824386;-1436668058;440481809;-147637933;1108438575;-803661882;1241632602;975930249;-1588709456;495467742;-513486021;1213746878;-2009839102;-1103416408;-576234053;876049218;1163709621;-1877665616;-412614169;843564194;-151435367;-991909006;1148853830;642970293;-2121293796;53230474;-988391129;1468100842;99373422;1876033566;-1799117580;-1355694904;506304365;1845564605;-609629207;-746344688;-1188413634;-1272573844;1288788775;-563458624;132319922;2784254;1494211323;340209768;1272300239;-1942480114;636492165;1141194819;1061400021;-896691243;13818683;220205845;-1183791592;-432532462;-1890318970;1505088230;-353708554;-1864791939;-547892496;1714374325;2087271131;-101129254;-1743779978;-1233385826;1555831143;-107504358;1938972090;1627721637;-1713770093;473557269;1546138666;1895078361;-876786661;-468721828;-1469712032;744413072;-407429705;705695212;557632517;1447963875;1963632917;-247698736;1908806188;1578779311;1758293653;-1085942188;-90466337;447457214;548396521;1619214305;-1877535403;2095578185;-1283386785;-1588918871;340705648;-1297661142;-1257903933;1579884321;-1802802787;769639609;1184800764;-601979439;1852190683;-2065527548;235133793;-2087487415;-1029989732;1534859713;905833159;-1891425909;690851350;-895691080;-1578644270;1186930716;1315058302;1866261801;-1648307497;230305049;-733663762;39450003;-856780782;-1582370359;-1443362260;2073076796;1637905192;-737320379;180960695;-680703411;1795428577;1539476092;-716666258;-1129450465;1896863376;520766037;1759423146;1474026137;1809881115;-508039578;-1662509826;972705170;-1975402815;911974423;-1888257476;-458462560;730615674;-382097586;-312330098;1071564495;787626202;-1410131406;-415430879;1842545820;-1643914972;1589904434;-352717484;-498443127;-761110871;1298027850;-85341232;-1290381447;-453093182;1327452001;-1535855843;1337934969;1365392791;-1512991634;856775901;915860083;975637666;-2020036562;-1766256735;-1311348587;2008093914;-217878609;1423056165;-461781634;1898303900;-664552899;-38425917;-62054386;753900656;2085661312;1285115958;-1444210939;1849939734;1686121831;-2069397101;-1318864501;962692708;-1323201588;-1867552609;209407307;-1441815566;846667788;-1720052967;-887095547;-1002187331;-1135082410;-145314939;799433792;-1777610845;506271209;-303933358;-1849216165;293660036;-649448580;1817070212;-966289949;1328743371;-559047906;1011595742;225060100;-875839229;       };
       mti=624;
      };
     };
     UniformRndPrjnSpec @[8] {
      name="RandomSchaffer";
      desc=;
      unique{       };
      children {
       name=;
       el_typ=UniformRndPrjnSpec;
       el_def=0;
      };
      self_con=0;
      init_wts=0;
      add_rnd_wts=0;
      p_con=0.75;
      sym_self=1;
      same_seed=0;
      rndm_seed {
       name=;
       seed{ 1731730900;1844298250;-1913491111;1020095466;-1758343850;1523840553;-546077234;533298920;-1212073584;302569635;-1981697191;2055501298;-150563861;-434666859;910347068;96553659;-1520595241;321672986;-1529788588;1092102913;-896796908;1175767848;-1593042877;411523772;-400988092;-121298148;-1351912875;-1980388498;647851448;467386805;1079003527;-508577795;1136428374;-165860748;310145045;-811174548;193838063;1611074672;-1417190981;-674984156;-1355196021;290038838;-2140622984;-208960179;1300518386;1155134476;-168608177;-111001557;-1724860424;42164179;-287196815;896150573;365069045;-1635399714;1774228994;660064870;297627766;1009157319;-307109443;1294908977;-360138452;-1756088632;2098313200;-2029745324;-894042322;1436008962;-1916262799;-1649428830;-1116820124;-1119879293;1384306475;753556953;1100949477;1465893181;1339316470;-987477826;-345450531;-1963656989;-1510106605;-1762139644;-303340882;-2073590894;-80807902;-247951784;-1208230597;2018560210;891102869;2016998944;-1860713379;1762676948;1082450275;314072581;-1154431659;221932208;-1510717490;979402715;-1887722297;1683517210;1477855497;219682955;1601245755;569588551;580936297;2060453076;-998578831;-1486583709;2118956975;1347589649;-1118583620;260590947;-203062403;-849522907;657821806;2104416727;204044256;-995939373;-645752444;-614411848;-41102787;1287921901;-1250735724;-1812509017;2083214483;358121493;621331909;-760253386;-1914947993;-373259432;985433703;824124964;1202671798;-2091006026;1774919304;305749394;179506464;-427143641;1264457916;-2138576870;-377787902;2071092208;384384929;-2038807534;421096158;357169189;1627239465;-694584231;747649556;-897081737;-1065772968;-1862348932;1711557452;387508984;2136697968;-818855378;-434884261;231182419;842882139;-1826675836;905296508;874704779;1959191927;-1853968849;-244593309;235956099;1819472467;-2059043585;-348605065;212249451;57337055;-473914460;-534384499;949348017;-2039497343;1226170460;-381793697;870486779;-1578544969;1311814938;1105192793;1133272683;298711686;-1560310381;478966763;-1126203538;726798932;-209965091;2091823440;-1291366736;-908243210;-1740356506;-1438351310;-1762638929;-155367167;2077089931;1630105908;-144570452;429043663;-1180818320;-201104448;336508854;-1743199850;-308988883;1779184880;2109529312;-1545695599;-1423971380;-211073260;402611170;-82234630;-33071602;949489907;-1347044430;-168542908;1595419864;980996979;116979766;-1903635418;1920923405;-274668394;-1059001180;1676918207;937855699;1040494877;242050640;-921031056;592764736;1991595298;-133213518;2316729;2030397410;1055881333;-1557912560;1225645570;-1805831400;-959179732;1371676278;757380319;2053092328;-1234653989;1102795660;-210146159;-1711277941;1438474239;-200815063;-812723834;672913262;88595804;1750372931;1131480834;-1922211800;-1379701876;-74813951;747272646;-1976106469;-1836960293;-2128650084;141012310;-771462673;-1377757410;-2131748081;-1768971739;662886760;1859153678;-1592534798;1518143416;-561705466;2099394051;-9149995;102768762;-144434385;2067613034;1933551430;261291795;-855322992;527903761;-1861190456;-1345366330;1637359721;-1389071842;1434845731;-604960126;2050961150;-401800523;1586460905;1151786148;107764534;-871767188;-693755158;-661030899;-970072921;-207105578;-1990998228;-572050358;-2127449358;-1242691114;-554150453;-1772494576;711356227;-624311911;-1922380563;1633141367;2011881403;-1753559152;-1048115255;200748514;-1723789989;809363023;-925555362;-1902017563;-996103592;-1693783523;2104620658;-1140930665;-714703870;-640518497;-1614395193;1066345461;90852838;803918588;-1485694293;652736237;958677442;-1764965172;1572725897;988803820;-568384415;-1552953872;166773697;-1962506899;-788263660;-1321502115;764223430;-451379094;1312938938;78628117;694419352;-177983416;1684812264;784622399;-682565586;1478199317;-1489279687;1815643293;1636290275;679056002;-521379677;1633140858;-2063743774;681217468;-352876407;528529872;636067951;856732715;657398104;2072844570;1423399946;-511298373;-583973379;-1260942180;865929661;1733688825;1537141825;-1478396246;51100083;300290059;1118255300;1925043239;-1334375827;1888847419;-1821835181;-2016445849;-1843505076;895260218;763514967;-1748417847;246611598;1958374782;1688152980;-298717117;1158023867;976602846;-692697837;-464596786;1920014176;1002972101;-948073670;-1097306113;-1845652140;-1420758414;-910321739;-67681708;1064221914;1807166858;1769036896;-1227858737;-1485221012;-1333409294;57285949;-1423036513;-906047616;-14025921;1369914429;-1411718850;1753741887;37939722;1374400903;-693649036;-185006966;-714400603;1445012759;59140424;-1823010045;-1416820223;-1290432564;135855076;-1545312621;-571010603;-1881173745;-617664317;267713891;418837683;927422276;263508858;937016009;1968915445;-267688723;-133942896;1999911850;-1053356253;-1682892467;949175513;-1881060276;1406851702;1635967396;1256674507;-483750043;1515334386;1275854484;1040985983;-525158958;1854248493;-1018835691;1222947176;1258959144;-1284286487;301692020;-927791230;-1641217884;-1985734338;534975085;-1771201597;-1344291352;156117270;-412287629;-810488074;-2057149072;641337794;1080864083;-388020956;-1272370898;-881210328;779981252;921200674;978929977;-638032307;-1579017065;-2087451237;-745269200;-406464269;-2135488379;-344482279;881019929;-1674221387;1193099532;-105537285;-1097516109;1537820593;-151618995;-1764491100;42408285;963299473;1953348630;-2120972811;2030766934;-1379005897;2033411534;1869345681;601827767;-329292261;971907425;544675375;-115086986;1095612949;-490004527;-1528237624;-1915584351;-480707265;-1908078947;1411364269;-1334854961;-22582827;1015695715;-1450577659;1083824314;-1563715905;153657226;-282210964;1376482758;-1392641921;-1315377074;-1945928710;511681239;2120306643;-1227234853;1992441247;619568985;-2050047711;2078470100;-1112236529;1328697896;-1208918731;2107455420;-200924005;-1339438589;-811713167;1584284167;-1728101268;1062657909;-217135047;-1080947981;-1257223129;-651109972;-1668445409;-1927976570;-1316600022;-1205437217;-435385783;2029661003;48476236;-549372905;309291520;-877734883;1615839220;1222892232;2038031469;-146215747;933828376;884602523;1955872843;1324022103;-75667692;-632947398;-1968215387;-170298100;-438749163;-1101993767;612766611;-1234934228;-477302700;2040161154;-1782620193;1507400034;384958785;82659800;319470700;-117037871;585034512;992890759;1116053883;-1535573669;988097367;-1006851442;-1345339171;-448302792;-1385873019;1471486850;-1966999569;1336911810;1265208625;1501783603;-2048518658;-546403663;833879168;-710729529;725668764;1528167125;-21795858;1896246220;1976844077;1556052649;1254575766;64082658;-405723270;-2081204722;-1302241010;883865615;-1512593601;624927334;953002644;-1820753221;-722168235;1296914503;-710194184;-266645662;1877490849;-1754165891;-151073671;-582354815;-2017812566;-1448482903;1454369753;-343497061;-1452338084;-2125768325;-739569629;1480490759;1137464774;1710643436;2051206379;1066841277;1784247805;1599302361;1274986918;280348754;       };
       mti=624;
      };
     };
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    max_size {x=7: y=1: z=2: };
    LeabraLayer @[0] {
     name="EC_in";
     desc=;
     flags=;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     disp_scale=1;
     un_geom {x=4: y=3: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=4: y=3: n_not_xy=0: n=12: };
     scaled_act_geom {x=1: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[1].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=3: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
      LeabraUnit @[0] {
       name=;
       ext_flag=EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=RecvCons;
	el_def=0;
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=.projects[0].networks[1].layers[1].projections[0]$$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {0; };
	wt = {0; };
       };
       n_recv_cons=0;
       pos {x=0: y=0: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2397482;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.0159218;
       avg_l=0.3510085;
       l_thr=1.053025;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[1] {
       name=;
       ext_flag=EXT;
       targ=0;
       ext=1;
       act=0.95;
       net=1;
       recv {
	name=;
	el_typ=RecvCons;
	el_def=0;
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {1; };
	wt = {0; };
       };
       n_recv_cons=0;
       pos {x=1: y=0: z=0: };
       act_eq=0.95;
       act_nd=0.95;
       act_avg=0.2362607;
       act_m=0.95;
       act_p=0.95;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.02958318;
       avg_l=0.2451154;
       l_thr=0.7353462;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[2] {
       name=;
       ext_flag=EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=RecvCons;
	el_def=0;
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {2; };
	wt = {0; };
       };
       n_recv_cons=0;
       pos {x=2: y=0: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2351156;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0.95;
       avg_ml=0.8761281;
       avg_l=0.2104365;
       l_thr=2.628384;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[3] {
       name=;
       ext_flag=EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=RecvCons;
	el_def=0;
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {3; };
	wt = {0; };
       };
       n_recv_cons=0;
       pos {x=3: y=0: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2388753;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.02836684;
       avg_l=0.1434397;
       l_thr=0.4303192;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[4] {
       name=;
       ext_flag=EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=RecvCons;
	el_def=0;
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {4; };
	wt = {0; };
       };
       n_recv_cons=0;
       pos {x=0: y=1: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2347975;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.01593285;
       avg_l=0.3430168;
       l_thr=1.02905;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[5] {
       name=;
       ext_flag=EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=RecvCons;
	el_def=0;
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {5; };
	wt = {0; };
       };
       n_recv_cons=0;
       pos {x=1: y=1: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2352487;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=1.096701e-08;
       avg_l=0.1485561;
       l_thr=0.4456683;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[6] {
       name=;
       ext_flag=EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=RecvCons;
	el_def=0;
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {6; };
	wt = {0; };
       };
       n_recv_cons=0;
       pos {x=2: y=1: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2396953;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0.95;
       avg_ml=0.9340438;
       avg_l=0.3450059;
       l_thr=2.802131;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[7] {
       name=;
       ext_flag=EXT;
       targ=0;
       ext=1;
       act=0.95;
       net=1;
       recv {
	name=;
	el_typ=RecvCons;
	el_def=0;
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {7; };
	wt = {0; };
       };
       n_recv_cons=0;
       pos {x=3: y=1: z=0: };
       act_eq=0.95;
       act_nd=0.95;
       act_avg=0.2402586;
       act_m=0.95;
       act_p=0.95;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=2.329568e-05;
       avg_l=0.1134213;
       l_thr=0.3402638;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[8] {
       name=;
       ext_flag=EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=RecvCons;
	el_def=0;
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {8; };
	wt = {0; };
       };
       n_recv_cons=0;
       pos {x=0: y=2: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2402673;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.02836701;
       avg_l=0.2905619;
       l_thr=0.8716857;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[9] {
       name=;
       ext_flag=EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=RecvCons;
	el_def=0;
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {9; };
	wt = {0; };
       };
       n_recv_cons=0;
       pos {x=1: y=2: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2344159;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.04509286;
       avg_l=0.3289066;
       l_thr=0.9867197;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[10] {
       name=;
       ext_flag=EXT;
       targ=0;
       ext=1;
       act=0.95;
       net=1;
       recv {
	name=;
	el_typ=RecvCons;
	el_def=0;
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {10; };
	wt = {0; };
       };
       n_recv_cons=0;
       pos {x=2: y=2: z=0: };
       act_eq=0.95;
       act_nd=0.95;
       act_avg=0.2374171;
       act_m=0.95;
       act_p=0.95;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0.95;
       avg_ml=0.8761512;
       avg_l=0.1884335;
       l_thr=2.628454;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[11] {
       name=;
       ext_flag=EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=RecvCons;
	el_def=0;
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {11; };
	wt = {0; };
       };
       n_recv_cons=0;
       pos {x=3: y=2: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2378997;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.0003889267;
       avg_l=0.1420981;
       l_thr=0.4262943;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[1].specs[2]$$: };
     ext_flag=EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0.2375: max=0.95: max_i=1: };
     acts_p {cmpt=1: avg=0.2375: max=0.95: max_i=1: };
     acts_m {cmpt=1: avg=0.2375: max=0.95: max_i=1: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0.25: gp_g_i=0: g_i_orig=0.25: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.25: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0.95;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[1].specs[3].children[0]$$: };
     hard_clamped=1;
     avg_l_avg=-1.701412e+38;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
    };
    LeabraLayer @[1] {
     name="CA1";
     desc=;
     flags=;
     layer_type=HIDDEN;
     pos {x=1: y=0: z=1: };
     disp_scale=1;
     un_geom {x=8: y=4: n_not_xy=0: n=32: };
     unit_groups=0;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     act_geom {x=8: y=4: n_not_xy=0: n=32: };
     scaled_act_geom {x=1: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_EC_in";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[0]$$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[1].specs.gp[0][0]$$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[1].specs[0].children[0]$$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_EC_out";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[2]$$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[1].specs.gp[0][0]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[1].specs[0].children[0]$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[2].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=8: y=4: n_not_xy=0: n=32: };
      units_lesioned=0;
      output_name=;
      LeabraUnit @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.3832603;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.01839862; 0.0317464; 0.9995561; 0.03443814; 0.01981904; 0.06487825; 0.0259103; 0.9991708; 0.1152547; 0.1121588; 0.1740469; 0.7256852; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=.projects[0].networks[1].layers[1].projections[1]$$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.02931534; 0.02600412; 0.9982916; 0.03524183; 0.01248861; 0.04236078; 0.03572106; 0.9965638; 0.1268521; 0.08797748; 0.1930595; 0.5402684; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=.projects[0].networks[1].layers[2].projections[0]$$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {0; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=0: y=0: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.07390165;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=1.400439e-08;
       avg_l=0.02959637;
       l_thr=0.08878912;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0.8849828;
       net=0.6639589;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.01476352; 0.2335965; 0.3813315; 0.541438; 0.01996848; 0.009521089; 0.824124; 0.8058721; 0.01290935; 0.0143276; 0.9997552; 0.01107166; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.01114434; 0.3101205; 0.1496552; 0.3640674; 0.01054971; 0.005942196; 0.6627647; 0.8644819; 0.007612467; 0.008989363; 0.9875672; 0.004602344; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {1; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=1: y=0: z=0: };
       act_eq=0.8849828;
       act_nd=0.8849828;
       act_avg=0.09212555;
       act_m=0.8730095;
       act_p=0.8849828;
       act_dif=0.01197326;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0.6519008;
       avg_ml=0.6012186;
       avg_l=0.08667561;
       l_thr=1.803656;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[2] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.4149881;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.622244; 0.348666; 0.5216129; 0.2784523; 0.4446225; 0.4779286; 0.5387939; 0.2928428; 0.5961017; 0.6284814; 0.6252787; 0.2806975; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.3317821; 0.5691399; 0.396504; 0.6548778; 0.3386507; 0.3160128; 0.5384596; 0.5033125; 0.2477252; 0.2522319; 0.2817375; 0.5167809; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {2; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=2: y=0: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.002046678;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=6.279655e-05;
       avg_l=5.727968e-05;
       l_thr=0.0001883896;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[3] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.03650274;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.3289492; 0.01760252; 0.9462029; 0.04126745; 0.02026412; 1; 0.01027678; 0.01182446; 0.9603017; 0.005826709; 0.05385436; 0.1508583; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.2694103; 0.03026104; 0.9011164; 0.01689105; 0.01137991; 0.9990212; 0.004957344; 0.009280436; 0.93332; 0.008454331; 0.1077208; 0.1022425; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {3; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=3: y=0: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.1069266;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=3.773522e-08;
       avg_l=0.05217559;
       l_thr=0.1565268;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[4] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.1953135;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.1614084; 0.5413976; 0.1759566; 0.1263263; 0.01994407; 0.9996952; 0.04552292; 0.03207964; 0.02439428; 0.9987007; 0.07239549; 0.01352035; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.2114978; 0.5403714; 0.4493561; 0.04570298; 0.007911459; 0.9992882; 0.03308647; 0.01468043; 0.0451755; 0.9840043; 0.03263455; 0.01615719; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {4; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=4: y=0: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.06184578;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.00532964;
       avg_l=0.103834;
       l_thr=0.3115021;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[5] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0.02211443;
       net=0.5369511;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.2807941; 0.1626975; 0.01132837; 0.688183; 0.003747866; 0.004947833; 0.008854393; 1; 0.8588023; 0.004062321; 0.6612013; 0.1278792; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.2211498; 0.1340211; 0.01283472; 0.6955631; 0.003850312; 0.006514343; 0.003618707; 0.9999033; 0.7837996; 0.003981437; 0.4347533; 0.1229122; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {5; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=5: y=0: z=0: };
       act_eq=0.02211443;
       act_nd=0.02211443;
       act_avg=0.0838506;
       act_m=0.00699421;
       act_p=0.02211443;
       act_dif=0.01512022;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=9.893705e-06;
       avg_l=0.02098881;
       l_thr=0.06296644;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[6] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.01297232;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.006001321; 0.004090439; 1; 0.009402736; 0.9964599; 0.04129601; 0.06733829; 0.005154921; 0.8412427; 0.1274623; 0.02404136; 0.03330732; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.006562303; 0.0090743; 0.9997422; 0.03736956; 0.9851878; 0.0363714; 0.07097384; 0.003582055; 0.7865802; 0.1463313; 0.03598736; 0.04932463; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {6; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=6: y=0: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.08702458;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=4.062516e-08;
       avg_l=0.1181572;
       l_thr=0.3544715;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[7] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0.5859022;
       net=0.5988572;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.02506332; 0.9518982; 0.01165142; 0.02247877; 0.9992161; 0.0119386; 0.008363133; 0.003899495; 0.0214012; 0.01069833; 0.9908338; 0.01122271; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.01503902; 0.9036178; 0.01497154; 0.01113478; 0.9477071; 0.03501902; 0.0049184; 0.009718452; 0.0124608; 0.04424691; 0.9234894; 0.01580504; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {7; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=7: y=0: z=0: };
       act_eq=0.5859022;
       act_nd=0.5859022;
       act_avg=0.1181723;
       act_m=0.5866135;
       act_p=0.5859022;
       act_dif=-0.0007113218;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=2.205248e-05;
       avg_l=0.09822743;
       l_thr=0.2946823;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[8] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.008874267;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.006040371; 0.005013861; 0.005621599; 0.9990694; 0.9995812; 0.005127183; 0.006415243; 0.006025703; 0.9994909; 0.01037436; 0.006114006; 0.009456207; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.01393922; 0.02228166; 0.007543562; 0.9952189; 0.9705604; 0.01802549; 0.0455242; 0.01249467; 0.9949368; 0.01150574; 0.004118105; 0.008656816; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {8; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=0: y=1: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.1365215;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.02127884;
       avg_l=0.1443982;
       l_thr=0.4331946;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[9] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.2912903;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.348015; 0.3061442; 0.2331371; 0.5930053; 0.7551393; 0.5402365; 0.3826711; 0.2473166; 0.3631109; 0.1991124; 0.2616206; 0.3666294; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.6461342; 0.3859943; 0.3686567; 0.8635246; 0.3213648; 0.3217951; 0.2319245; 0.2617866; 0.7017555; 0.2416734; 0.3768661; 0.3400931; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {9; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=1: y=1: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.01617434;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=3.719458e-05;
       avg_l=0.0539408;
       l_thr=0.1618224;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[10] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.4699793;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.2815631; 0.594876; 0.3878851; 0.4330069; 0.2120316; 0.2567562; 0.2557032; 0.3823956; 0.467693; 0.4399533; 0.2343448; 0.4614202; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.6187539; 0.4351121; 0.4662465; 0.3523728; 0.5490519; 0.2772549; 0.6329941; 0.7143397; 0.6181821; 0.3945108; 0.6072221; 0.2972337; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {10; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=2: y=1: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.0007517706;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=2.018515e-06;
       avg_l=1.388915e-05;
       l_thr=4.166744e-05;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[11] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.02242197;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.9266474; 0.02572936; 0.002095136; 0.7515604; 0.8540452; 0.05356262; 0.09386639; 0.03867453; 0.002496788; 1; 0.001445801; 0.001223811; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.8620904; 0.02504621; 0.001562618; 0.5819428; 0.8971018; 0.197844; 0.296179; 0.04858343; 0.002065329; 1; 0.00213312; 0.001454339; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {11; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=3: y=1: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.1239432;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.01588353;
       avg_l=0.1988142;
       l_thr=0.5964425;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[12] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.3843318;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.579036; 0.001962602; 0.9824895; 0.002067409; 0.0146232; 0.5227565; 0.2446406; 0.09249889; 0.001466871; 0.03426277; 1; 0.001228038; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.5492708; 0.003349474; 0.6784051; 0.003829657; 0.01495746; 0.618394; 0.2172106; 0.3314123; 0.002257772; 0.04286464; 0.9981356; 0.002545763; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {12; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=4: y=1: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.08326663;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0.7736551;
       avg_ml=0.7135006;
       avg_l=0.07368904;
       l_thr=2.140502;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[13] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.04249903;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.884553; 0.1043414; 0.1128692; 0.02231596; 0.7878011; 0.4983528; 0.1708274; 0.01204081; 0.02348007; 0.04096628; 0.03171248; 0.9902181; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.735081; 0.0910074; 0.07601959; 0.02588153; 0.7453095; 0.4037036; 0.05755896; 0.01453329; 0.01308375; 0.01826066; 0.01477959; 0.9368541; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {13; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=5: y=1: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.06801359;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.0007896715;
       avg_l=0.08383863;
       l_thr=0.2515159;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[14] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.3491761;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.00593101; 0.9998997; 0.02335157; 0.003968348; 0.03454205; 0.04328135; 0.8095661; 0.1166764; 0.02746827; 0.9789082; 0.01159582; 0.05561766; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.0123288; 0.9949331; 0.0181594; 0.01086743; 0.05770455; 0.05122275; 0.5678298; 0.07550629; 0.02458723; 0.9425772; 0.006711112; 0.03866684; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {14; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=6: y=1: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.08493594;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.03019494;
       avg_l=0.142396;
       l_thr=0.4271879;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[15] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.3884557;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.5970674; 0.6609457; 0.002667848; 0.2716638; 0.006195426; 0.007185318; 1; 0.004135374; 0.8572925; 0.058591; 0.7782898; 0.01456311; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.3857687; 0.606611; 0.001764159; 0.2327721; 0.002071133; 0.003580411; 0.9998386; 0.003736648; 0.6369387; 0.01845253; 0.3996856; 0.009030918; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {15; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=7: y=1: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.09791637;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=3.045223e-06;
       avg_ml=0.03936243;
       avg_l=0.1738751;
       l_thr=0.5216254;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[16] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0.8583554;
       net=0.647554;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.01203588; 0.9998419; 0.01145282; 0.0159386; 0.03560771; 0.06300895; 0.02019302; 0.9950197; 0.165806; 0.356726; 0.0702685; 0.5186709; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.01976209; 0.9942493; 0.0153467; 0.01950376; 0.03233772; 0.0868388; 0.01271633; 0.9859166; 0.09651266; 0.3632942; 0.04634688; 0.39447; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {16; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=0: y=2: z=0: };
       act_eq=0.8583554;
       act_nd=0.8583554;
       act_avg=0.06114721;
       act_m=0.832974;
       act_p=0.8583554;
       act_dif=0.02538145;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=2.002207e-06;
       avg_l=0.00109544;
       l_thr=0.00328632;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[17] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.2226639;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.9473837; 0.005054888; 0.4446591; 0.004505777; 0.008579209; 0.009249086; 0.7554091; 0.7345287; 0.9984246; 0.2560754; 0.002946876; 0.003482804; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.821654; 0.004594602; 0.4939247; 0.004245753; 0.006460193; 0.00923368; 0.734115; 0.6575466; 0.9889467; 0.1635641; 0.00162642; 0.001845254; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {17; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=1: y=2: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.1103087;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.006212032;
       avg_l=0.1317904;
       l_thr=0.3953711;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[18] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.308042;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.02697825; 0.9510666; 0.02205453; 0.04636084; 0.8958057; 0.06977811; 0.07561027; 0.02095956; 0.007642756; 0.002615524; 0.04984703; 0.9994481; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.01553715; 0.8738226; 0.01254451; 0.07365645; 0.9038174; 0.06982726; 0.05361156; 0.03219505; 0.01045778; 0.009197358; 0.01763778; 0.9861382; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {18; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=2: y=2: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.1018252;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.0002819666;
       avg_l=0.06862219;
       l_thr=0.2058666;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[19] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.2997705;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.01309349; 0.01140583; 0.1238923; 0.9861329; 0.0653678; 0.02470596; 0.09481197; 0.9496434; 0.004583224; 0.01032087; 0.002462823; 1; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.01984961; 0.01971482; 0.1565916; 0.9189503; 0.04416412; 0.02108065; 0.06764499; 0.9079172; 0.003718497; 0.006910083; 0.002143536; 0.9993358; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {19; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=3: y=2: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.1229501;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=1.275172e-07;
       avg_l=0.05051805;
       l_thr=0.1515541;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[20] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.02340834;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.1316146; 0.06210849; 0.835245; 0.08376406; 0.006203298; 0.01136217; 0.9999815; 0.004759689; 0.05062006; 0.04203619; 0.009612198; 0.9980543; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.09580609; 0.05095464; 0.8922963; 0.07032005; 0.005863159; 0.009821069; 0.9995466; 0.008160198; 0.0604738; 0.01956061; 0.01224695; 0.9763428; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {20; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=4: y=2: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.09747983;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0.191201;
       avg_ml=0.1763333;
       avg_l=0.03495173;
       l_thr=0.5289998;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[21] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.06906173;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.005219426; 0.005438208; 0.006507423; 1; 0.03473563; 0.8695921; 0.06086711; 0.1259816; 0.05847307; 0.9150811; 0.01994664; 0.05545516; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.003953184; 0.004926011; 0.003687755; 0.9982553; 0.01291867; 0.8682529; 0.1505717; 0.2662613; 0.05828663; 0.8199599; 0.01362567; 0.03713627; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {21; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=5: y=2: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.09606884;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=1.259668e-09;
       avg_l=0.04330914;
       l_thr=0.1299274;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[22] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.3253397;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.7125818; 0.03057411; 0.3387982; 0.0310509; 0.2026289; 0.002283881; 0.004098912; 0.9981605; 0.01525122; 0.9982485; 0.004804327; 0.05902745; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.5539623; 0.0248373; 0.3474444; 0.01956902; 0.5981419; 0.003946057; 0.003283963; 0.9871886; 0.01227082; 0.9814074; 0.009212389; 0.05960488; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {22; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=6: y=2: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.08230364;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.01466681;
       avg_l=0.07756265;
       l_thr=0.2326879;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[23] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.3680744;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {1; 0.002215339; 0.003099153; 0.003178017; 0.4447435; 0.07292507; 0.1411647; 0.1474876; 0.00991141; 0.002766115; 0.8136484; 0.906834; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {1; 0.003024956; 0.0007902322; 0.003136593; 0.5462368; 0.104041; 0.1467481; 0.6686757; 0.01030958; 0.003434568; 0.6896284; 0.6758546; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {23; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=7: y=2: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.110573;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.0004030535;
       avg_l=0.1591564;
       l_thr=0.4774691;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[24] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.0270224;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.01515875; 0.03283417; 0.9843066; 0.0383819; 0.02105774; 0.0214216; 0.9941911; 0.03918631; 0.005646965; 0.9996359; 0.009203787; 0.01188922; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.02953262; 0.03323463; 0.930913; 0.0400928; 0.02709971; 0.01219252; 0.990942; 0.04259149; 0.004516399; 0.9897387; 0.01361739; 0.02925362; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {24; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=0: y=3: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.1227979;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0.5156928;
       avg_ml=0.504526;
       avg_l=0.14758;
       l_thr=1.513578;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[25] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.04849116;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.01748546; 0.06062476; 0.8814405; 0.2536306; 0.02741851; 0.9943591; 0.04189448; 0.08219223; 0.02307054; 0.01010955; 0.0184667; 0.9989476; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.01759817; 0.05761381; 0.9149399; 0.1926563; 0.009719353; 0.9718892; 0.03540407; 0.04655496; 0.01312357; 0.007822013; 0.04080748; 0.9842083; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {25; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=1: y=3: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.1006378;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=1.32213e-10;
       avg_l=0.0378692;
       l_thr=0.1136076;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[26] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.3220252;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.006374921; 0.007061465; 0.01353673; 1; 0.3314079; 0.07908487; 0.6528431; 0.03914879; 0.06777302; 0.01230113; 0.9847359; 0.1048495; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.008508882; 0.006459759; 0.00769011; 0.9989283; 0.1584442; 0.07592723; 0.7129751; 0.04452943; 0.08384164; 0.02161324; 0.9519081; 0.04056597; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {26; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=2: y=3: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.0746389;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0.0002413213;
       avg_ml=0.00773164;
       avg_l=0.017969;
       l_thr=0.05390699;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[27] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.3649327;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.259758; 0.4283325; 0.6072392; 0.2581501; 0.4669406; 0.5225947; 0.2217192; 0.3710339; 0.3859661; 0.2564296; 0.257435; 0.7287359; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.3211646; 0.5482857; 0.5648378; 0.2429569; 0.3111218; 0.4129844; 0.2429652; 0.2042361; 0.3918789; 0.5690846; 0.495515; 0.6990376; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {27; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=3: y=3: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.004263462;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=8.033155e-13;
       avg_l=0.0001223983;
       l_thr=0.000367195;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[28] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.03401101;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.9998925; 0.01494351; 0.01451407; 0.01225497; 0.7378881; 0.3928138; 0.07681504; 0.0502001; 0.7769778; 0.4521811; 0.05479452; 0.01144588; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.9988836; 0.009585833; 0.0145859; 0.008019358; 0.7627134; 0.7054245; 0.02239891; 0.007837263; 0.6178647; 0.3194416; 0.07744518; 0.01736198; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {28; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=4: y=3: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.08884527;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.01516195;
       avg_l=0.1534881;
       l_thr=0.4604642;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[29] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.3377618;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.04238047; 0.9982798; 0.0221224; 0.03409884; 0.1193903; 0.7541898; 0.2083616; 0.05298956; 0.9978176; 0.01336177; 0.02518011; 0.02230872; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.04235427; 0.9875614; 0.01458223; 0.02041277; 0.04719933; 0.8569002; 0.1333587; 0.03065763; 0.9870455; 0.02137171; 0.03856409; 0.03382925; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {29; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=5: y=3: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.08559997;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=2.736191e-09;
       avg_l=0.07101605;
       l_thr=0.2130482;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[30] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0.1725117;
       net=0.5641915;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.02166293; 0.897496; 0.01245455; 0.2280011; 0.1300545; 0.9972026; 0.009886965; 0.006675661; 0.1116162; 0.02726309; 0.925036; 0.01449742; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.02596747; 0.829182; 0.009003774; 0.1291302; 0.01900534; 0.995404; 0.01754202; 0.01903914; 0.1289949; 0.03305649; 0.8866339; 0.0223236; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {30; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=6: y=3: z=0: };
       act_eq=0.1725117;
       act_nd=0.1725117;
       act_avg=0.09414745;
       act_m=0.1723223;
       act_p=0.1725117;
       act_dif=0.000189364;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=9.323355e-10;
       avg_l=0.05154716;
       l_thr=0.1546415;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[31] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=;
       targ=0;
       ext=0;
       act=0;
       net=0.3918521;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.6882203; 0.5730848; 0.3766243; 0.3081524; 0.5215101; 0.5119206; 0.4982266; 0.386264; 0.2461367; 0.3563962; 0.438325; 0.4863603; };
	};
	LeabraRecvCons @[1] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=0;
	};
	{ con_alloc = 12;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; };
	 wt = {0.5521936; 0.2400739; 0.3380277; 0.3957599; 0.4689389; 0.2257776; 0.5929716; 0.5618643; 0.3660675; 0.6263124; 0.2752435; 0.5017022; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {31; };
	wt = {0; };
       };
       n_recv_cons=24;
       pos {x=7: y=3: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.006164579;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.0005012595;
       avg_l=0.003360322;
       l_thr=0.01008097;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[1].specs[2]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.2860636: max=0.6639589: max_i=1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=2.045477: max=4.879692: max_i=1: };
     acts {cmpt=1: avg=0.07887082: max=0.8849828: max_i=1: };
     acts_p {cmpt=1: avg=0.07887082: max=0.8849828: max_i=1: };
     acts_m {cmpt=1: avg=0.07724729: max=0.8730095: max_i=1: };
     phase_dif_ratio=0.9794154;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.09375: pct_c=0.90625: adth_k=1: k_ithr=4.391429: k1_ithr=4.131436: ithr_r=0.06102957: ithr_diff=0.05920456: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=4.196434: g_i=4.196434: gp_g_i=0: g_i_orig=4.196434: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.08156224: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=4.172325e-07;
     act_max_avg=0.8849828;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[1].specs[3].children[1]$$: };
     hard_clamped=0;
     avg_l_avg=-1.701412e+38;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=-1;
     da_updt=0;
    };
    LeabraLayer @[2] {
     name="EC_out";
     desc=;
     flags=;
     layer_type=TARGET;
     pos {x=6: y=0: z=0: };
     disp_scale=1;
     un_geom {x=4: y=3: n_not_xy=0: n=12: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=4: y=3: n_not_xy=0: n=12: };
     scaled_act_geom {x=1: y=1: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_CA1";
       from_type=CUSTOM;
       from=.projects[0].networks[1].layers[1]$$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[1].specs.gp[0][0]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[1].specs[0].children[0]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[1].layers[1].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=4: y=3: n_not_xy=0: n=12: };
      units_lesioned=0;
      output_name=;
      LeabraUnit @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=TARG|EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 32;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; };
	 wt = {0; 5.118472e-05; 0; 0.01191515; 0.001820738; 0.01062611; 6.885786e-05; 0.0006853432; 0.001407072; 2.019425e-05; 1.314378e-29; 0.8421113; 0.221041; 0.09248593; 0; 0.04064403; 0; 0.8245703; 0.0001404081; 0.0004950234; 0.00195952; 0; 0.1489037; 1; 0.001008225; 0.0001282381; 0; 0; 0.99507; 9.909124e-05; 0.00016372; 4.738846e-05; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=1;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {0; };
	wt = {0; };
       };
       n_recv_cons=32;
       pos {x=0: y=0: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2397482;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.0159218;
       avg_l=0.3511479;
       l_thr=1.053444;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=TARG|EXT;
       targ=1;
       ext=1;
       act=0.95;
       net=1;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 32;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; };
	 wt = {0; 0.0135069; 0; 0.0004548222; 0.01031351; 0.004439441; 0.0001005969; 0.9572799; 0.002077751; 0; 0; 0.001436504; 2.974291e-05; 0.00035067; 0.9794667; 0.1295032; 0.8740551; 7.963803e-05; 0.7628075; 0.0005421424; 0.0009667801; 0; 0.00061623; 0; 0.001670913; 0.0006133082; 0; 0; 0; 0.8769897; 0.3801973; 0; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=1;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {1; };
	wt = {0; };
       };
       n_recv_cons=32;
       pos {x=1: y=0: z=0: };
       act_eq=0.95;
       act_nd=0.95;
       act_avg=0.2362607;
       act_m=0.9798414;
       act_p=0.95;
       act_dif=-0.02984142;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.02958318;
       avg_l=0.2452021;
       l_thr=0.7356063;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[2] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=TARG|EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 32;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; };
	 wt = {0.8943645; 0.007700505; 0; 0.6478714; 0.003862147; 0.0001265616; 1; 0.000798155; 0.00105835; 0; 0; 0; 0.6166548; 0.0002838453; 0.0001505904; 0; 0; 0.1330257; 0.0001077013; 0.00837276; 0.3436549; 0; 0.02460912; 0; 0.9360055; 0.4154243; 0; 5.219319e-05; 0; 0; 0; 0; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=1;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {2; };
	wt = {0; };
       };
       n_recv_cons=32;
       pos {x=2: y=0: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2351156;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0.95;
       avg_ml=0.8761281;
       avg_l=0.2106555;
       l_thr=2.628384;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[3] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=TARG|EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 32;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; };
	 wt = {8.819121e-05; 0.02082561; 1.990905e-34; 0.0002344988; 0.0003942731; 0.1730126; 0.002302105; 0.0005913753; 0.9998875; 0.002048273; 1.743808e-32; 0.4760737; 3.931163e-05; 0; 0; 0.0185026; 8.348453e-25; 0.0001213682; 0.0009652696; 0.8997336; 0.001346661; 0.999104; 0.0005359731; 0; 0.002024852; 0.003744607; 0.9918748; 0; 0; 1.921698e-05; 0.001813388; 2.901258e-32; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=1;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {3; };
	wt = {0; };
       };
       n_recv_cons=32;
       pos {x=3: y=0: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2388753;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.02836684;
       avg_l=0.1431485;
       l_thr=0.4294456;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[4] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=TARG|EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 32;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; };
	 wt = {0; 8.701414e-15; 0; 0.0001172327; 0; 0; 0.9776723; 0.9895837; 0.9989305; 0.000102335; 0; 0.7490661; 0.00105308; 0.03411712; 0.0006650382; 0; 6.642866e-05; 0.0002845608; 0.6540115; 0.001923338; 0; 0.0003879168; 0.05410519; 0.1188402; 0.0006292619; 0; 0.003782335; 0; 0.2264013; 0.0004292046; 0.000333687; 4.815349e-34; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=1;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {4; };
	wt = {0; };
       };
       n_recv_cons=32;
       pos {x=0: y=1: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2347975;
       act_m=0.0003377121;
       act_p=0;
       act_dif=-0.0003377121;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.01593285;
       avg_l=0.3513846;
       l_thr=1.054154;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[5] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=TARG|EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 32;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; };
	 wt = {5.805787e-05; 0; 0; 0.9985812; 0.9484474; 0; 0.0009994033; 0.001981688; 0.001821016; 0; 0; 0.04089043; 0.1943196; 0.004506978; 0.0006366792; 0; 0.0002298544; 0.000230577; 0.0009043645; 0.0008046093; 2.992831e-05; 0.554971; 0; 0.009439578; 0.0003144384; 0.8392931; 0.0009889263; 1.02811e-05; 0.04771956; 0.1393241; 0.9560804; 0; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=1;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {5; };
	wt = {0; };
       };
       n_recv_cons=32;
       pos {x=1: y=1: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2352487;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=1.096701e-08;
       avg_l=0.1464822;
       l_thr=0.4394466;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[6] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=TARG|EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 32;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; };
	 wt = {3.002102e-05; 0.1358407; 0; 0; 3.519646e-05; 0; 0.002125427; 0.0001809127; 0.005870077; 0; 2.09428e-07; 0.05961689; 0.03230528; 0.0002907786; 0.139149; 0.9998837; 0; 0.4660089; 0.0008641842; 0.004014104; 0.9977403; 0.004775904; 0; 0.0153936; 0.992792; 0.0003093163; 0.08279015; 2.024149e-32; 0.0002165336; 0.001172256; 0; 3.537966e-05; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=1;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {6; };
	wt = {0; };
       };
       n_recv_cons=32;
       pos {x=2: y=1: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2396953;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0.95;
       avg_ml=0.9340438;
       avg_l=0.3368995;
       l_thr=2.802131;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[7] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=TARG|EXT;
       targ=1;
       ext=1;
       act=0.95;
       net=1;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 32;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; };
	 wt = {0.8921315; 0.2709877; 0; 0; 0; 0.9995995; 2.295436e-05; 0.0003351284; 0.00134137; 0; 3.277148e-05; 0.006535549; 0.04750182; 0; 0.001124984; 0; 0.6868286; 0.4052364; 0.0003859966; 0.8302993; 0; 0.008423077; 0.9605702; 0.1609378; 0.001349207; 0.0004125753; 0.0005189186; 0; 2.027601e-05; 0.0002413579; 1.45147e-22; 0; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=1;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {7; };
	wt = {0; };
       };
       n_recv_cons=32;
       pos {x=3: y=1: z=0: };
       act_eq=0.95;
       act_nd=0.95;
       act_avg=0.2402586;
       act_m=0.9191878;
       act_p=0.95;
       act_dif=0.0308122;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=2.329568e-05;
       avg_l=0.1128946;
       l_thr=0.3386838;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[8] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=TARG|EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 32;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; };
	 wt = {0.0008049733; 0; 0; 0.7383857; 5.1532e-05; 0.2840883; 0.4914555; 0.0004905758; 0.9999305; 0.0002811776; 2.005272e-05; 0; 0; 0; 0.0001732708; 0.1806712; 0.0007520259; 0.9962649; 0; 2.334882e-05; 0.0006596322; 0.001513759; 0.0001202477; 0.0001659258; 9.988546e-06; 5.880062e-05; 0.0007972182; 0; 0.1446182; 0.8433397; 0.001414643; 0; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=1;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {8; };
	wt = {0; };
       };
       n_recv_cons=32;
       pos {x=0: y=2: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2402673;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.02836701;
       avg_l=0.2906809;
       l_thr=0.8720428;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[9] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=TARG|EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 32;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; };
	 wt = {0.0005721637; 0; 2.173369e-31; 6.42534e-05; 0.7275256; 0; 0.007177153; 0.002047022; 0.001401536; 0; 2.308911e-33; 1; 0.001063576; 0; 0.7931957; 0.000293123; 0.00383092; 0.0189777; 0; 8.26047e-05; 0.0002983632; 0.5749966; 0.9743357; 0; 0.9971333; 0; 5.248154e-05; 0; 0.01083398; 0; 0.0001665626; 3.137529e-05; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=1;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {9; };
	wt = {0; };
       };
       n_recv_cons=32;
       pos {x=1: y=2: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2344159;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.04509286;
       avg_l=0.3289861;
       l_thr=0.9869583;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[10] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=TARG|EXT;
       targ=1;
       ext=1;
       act=0.95;
       net=1;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 32;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; };
	 wt = {0.001250727; 0.9836587; 0; 0.002390452; 7.321477e-05; 0.03100297; 0.00159897; 0.9789594; 0.0005264297; 0; 0; 0; 1; 0; 0; 0.0846516; 0.0004114269; 0; 0.0003851894; 0; 4.543335e-05; 0.0003448288; 3.525617e-05; 0.4419263; 0.0002200753; 0.000175359; 0.6091339; 0; 0.0005760048; 0.000172098; 0.5126399; 0; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=1;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {10; };
	wt = {0; };
       };
       n_recv_cons=32;
       pos {x=2: y=2: z=0: };
       act_eq=0.95;
       act_nd=0.95;
       act_avg=0.2374171;
       act_m=0.9828542;
       act_p=0.95;
       act_dif=-0.0328542;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0.95;
       avg_ml=0.8761512;
       avg_l=0.1885157;
       l_thr=2.628454;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
      LeabraUnit @[11] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItem;
	el_def=0;
       };
       name=;
       ext_flag=TARG|EXT;
       targ=0;
       ext=0;
       act=0;
       net=0;
       recv {
	name=;
	el_typ=LeabraRecvCons;
	el_def=0;
	LeabraRecvCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[2].projections[0]$;
	 other_idx=0;
	};
	{ con_alloc = 32;
	 units = {0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; };
	 wt = {0.01594981; 0; 0; 0.003034866; 0; 0.002713853; 0.001847976; 0.0006852076; 0.0009528114; 0; 5.024801e-35; 0; 0; 0.5896392; 0.0004631446; 4.411335e-05; 0.006457726; 0; 0.9768099; 0.9998764; 0.8893746; 0.001062772; 0.001048584; 0.4910369; 0.0006581618; 0.9509541; 0.0004994932; 0.0001022359; 2.000899e-05; 4.933756e-05; 6.485393e-05; 0; };
	};
       };
       send {
	name=;
	el_typ=LeabraSendCons;
	el_def=0;
	LeabraSendCons @[0] {
	 con_type=LeabraCon;
	 prjn=$.projects[0].networks[1].layers[1].projections[1]$;
	 other_idx=1;
	};
       };
       bias {
	con_type=LeabraCon;
	prjn=NULL;
	other_idx=-1;
       };
       { con_alloc = 1;
	units = {11; };
	wt = {0; };
       };
       n_recv_cons=32;
       pos {x=3: y=2: z=0: };
       act_eq=0;
       act_nd=0;
       act_avg=0.2378997;
       act_m=0;
       act_p=0;
       act_dif=0;
       act_m2=0;
       act_p2=0;
       act_dif2=0;
       avg_ss=0.15;
       avg_s=0.15;
       avg_m=0;
       avg_ml=0.0003889267;
       avg_l=0.1423306;
       l_thr=0.4269918;
       davg=0;
       vcb {hyst=0: acc=0: hyst_on=0: acc_on=0: g_h=0: g_a=0: };
       dav=0;
       maint_h=0;
       spk_amp=2;
      };
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[1].specs[2]$: };
     ext_flag=TARG|EXT;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0.126807: max=0.5049021: max_i=10: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0.851053: max=3.686766: max_i=10: };
     acts {cmpt=1: avg=0.2375: max=0.95: max_i=1: };
     acts_p {cmpt=1: avg=0.2375: max=0.95: max_i=1: };
     acts_m {cmpt=1: avg=0.2401851: max=0.9828542: max_i=10: };
     phase_dif_ratio=1.011306;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=3: pct=0.25: pct_c=0.75: adth_k=1: k_ithr=1.8789: k1_ithr=1.360337: ithr_r=0.3229535: ithr_diff=0.2759925: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=1.489978: g_i=0.25: gp_g_i=0: g_i_orig=0.25: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.2413519: i_kwta_pt=0.25: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0.9795688;
     spec {type=LeabraLayerSpec: spec=$.projects[0].networks[1].specs[3].children[0]$: };
     hard_clamped=1;
     avg_l_avg=-1.701412e+38;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=SAVE_UNITS;
   auto_build=NO_BUILD;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   batch=0;
   epoch=150;
   group=0;
   trial=63;
   tick=0;
   cycle=15;
   time=314478;
   group_name=;
   trial_name="Feat_1_3_2";
   output_name=;
   sse_unit_avg=0;
   sse_sqrt=0;
   sse=0;
   sum_sse=0;
   avg_sse=0;
   cnt_err_tol=0;
   cnt_err=0;
   pct_err=0;
   pct_cor=1;
   cur_sum_sse=0;
   avg_sse_n=0;
   cur_cnt_err=0;
   train_time {name="": start={usr=3660: sys=1026: tot=128393906436: }: end={usr=6643: sys=1403: tot=128393911002: }: used={usr=2983: sys=377: tot=4566: }: s_used=45.66: n_used=1: };
   epoch_time {name="": start={usr=6585: sys=1398: tot=128393910887: }: end={usr=6618: sys=1402: tot=128393910925: }: used={usr=33: sys=4: tot=38: }: s_used=0.38: n_used=1: };
   trial_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   settle_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   cycle_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   wt_sync_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   misc_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   threads {
    run_time {name="": s_used=0: n_used=0: };
    sync_time {name="": s_used=0: n_used=0: };
    total_time {name="": s_used=0: n_used=0: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=nan;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=56;
   n_cons=1152;
   max_size {x=7: y=1: z=2: };
   learn_rule=LEABRA_CHL;
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase=PLUS_PHASE;
   nothing_phase=0;
   phase_no=2;
   phase_max=2;
   ct_cycle=30;
   time_inc=1;
   cycle_max=60;
   mid_minus_cycle=-1;
   min_cycles=15;
   min_cycles_phase2=35;
   ct_time {
    minus=50;
    plus=20;
    inhib=1;
    n_avg_only_epcs=1;
    total_cycles=71;
    inhib_start=70;
   };
   ct_sravg {
    start=30;
    end=1;
    interval=1;
    plus_s_st=19;
    force_con=0;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0.02;
    trough_i=0.02;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   sravg_vals {
    s_sum=0;
    s_nrm=1;
    m_sum=0;
    m_nrm=1;
    do_s=0;
   };
   ct_lrn_trig {
    plus_lrn_cyc=-1;
    davg_dt=0.1;
    davg_s_dt=0.05;
    davg_m_dt=0.03;
    davg_l_dt=0.0005;
    thr_min=0;
    thr_max=0.5;
    loc_max_cyc=8;
    loc_max_dec=0.01;
    lrn_delay=40;
    lrn_refract=100;
    davg_l_init=0;
    davg_max_init=0.001;
    davg_time=10;
    davg_s_time=20;
    davg_m_time=33.33334;
    davg_l_time=2000;
    lrn_delay_inc=0.025;
    lrn_refract_inc=0.01;
   };
   lrn_trig {
    davg=0;
    davg_s=0;
    davg_m=0;
    davg_smd=0;
    davg_l=0;
    davg_max=0.001;
    cyc_fm_inc=0;
    cyc_fm_dec=0;
    loc_max=0;
    lrn_max=0;
    lrn_trig=0;
    lrn=0;
    lrn_min=0;
    lrn_min_cyc=0;
    lrn_min_thr=0;
    lrn_min_sum=0;
    lrn_min_cyc_sum=0;
    lrn_min_thr_sum=0;
    lrn_plus=0;
    lrn_plus_cyc=0;
    lrn_plus_thr=0;
    lrn_plus_sum=0;
    lrn_plus_cyc_sum=0;
    lrn_plus_thr_sum=0;
    lrn_noth=0;
    lrn_noth_cyc=0;
    lrn_noth_thr=0;
    lrn_noth_sum=0;
    lrn_noth_cyc_sum=0;
    lrn_noth_thr_sum=0;
    lrn_stats_n=0;
   };
   minus_cycles=15;
   avg_cycles=16.54688;
   avg_cycles_sum=0;
   avg_cycles_n=0;
   minus_output_name=;
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   send_pct=0;
   send_pct_n=0;
   send_pct_tot=56;
   avg_send_pct=0.03513051;
   avg_send_pct_sum=0;
   avg_send_pct_n=0;
   maxda_stopcrit=0.005;
   maxda=4.172325e-07;
   trg_max_act_stopcrit=1;
   trg_max_act=0;
   ext_rew=0;
   ext_rew_avail=0;
   norew_val=0.5;
   avg_ext_rew=0;
   pvlv_pvi=0;
   pvlv_pvr=0;
   pvlv_lve=0;
   pvlv_lvi=0;
   pv_detected=0;
   avg_ext_rew_sum=0;
   avg_ext_rew_n=0;
   off_errs=1;
   on_errs=1;
   norm_err=0;
   avg_norm_err=0;
   avg_norm_err_sum=0;
   avg_norm_err_n=0;
  };
 };
};
