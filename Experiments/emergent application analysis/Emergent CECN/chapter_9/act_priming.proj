// ta_Dump File v3.0 -- code v5.1.0.0
LeabraProject .projects[0] { 
  taBase_Group @.templates = [0] {
  };

  Doc_Group @.docs = [2] {
    taDoc @[0] { };
    taDoc @[1] { };
  };

  Wizard_Group @.wizards = [1] {
    LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };

      LayerWizElList @.layer_cfg = [3] {
	LayerWizEl @[0] { };
	LayerWizEl @[1] { };
	LayerWizEl @[2] { };
      };
    };
  };

  SelectEdit_Group @.edits = [1] {
    SelectEdit @[0] { 
      EditMbrItem_Group @.mbrs = [3] {
	EditMbrItem @[0] { };
	EditMbrItem @[1] { };
	EditMbrItem @[2] { };
	EditMbrItem_Group @.gp[0] = [5] { 
	  EditMbrItem @[0] { };
	  EditMbrItem @[1] { };
	  EditMbrItem @[2] { };
	  EditMbrItem @[3] { };
	  EditMbrItem @[4] { };
	};
      };

      EditMthItem_Group @.mths = [8] {
	EditMthItem @[0] { };
	EditMthItem @[1] { };
	EditMthItem @[2] { };
	EditMthItem @[3] { };
	EditMthItem @[4] { };
	EditMthItem @[5] { };
	EditMthItem @[6] { };
	EditMthItem @[7] { };
      };
    };
  };

  DataTable_Group @.data = [0] {
    DataTable_Group @.gp[0] = [4] { 
      DataTable @[0] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	};
      };
      DataTable @[2] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	};
      };
      DataTable @[3] { 
	DataTableCols @.data = [3] {
	  String_Data @[0] { };
	  float_Data @[1] { };
	  float_Data @[2] { };
	};
      };
    };
    DataTable_Group @.gp[1] = [5] { 
      DataTable @[0] { 
	DataTableCols @.data = [14] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[3] { };
	  String_Data @[4] { };
	  int_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  float_Data @[10] { };
	  String_Data @[11] { };
	  float_Data @[12] { };
	  float_Data @[13] { };
	};
      };
      DataTable @[1] { 
	DataTableCols @.data = [11] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[2] { };
	  float_Data @[3] { };
	  float_Data @[4] { };
	  float_Data @[5] { };
	  float_Data @[6] { };
	  float_Data @[7] { };
	  float_Data @[8] { };
	  float_Data @[9] { };
	  float_Data @[10] { };
	};
      };
      DataTable @[2] { 
	DataTableCols @.data = [9] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  String_Data @[3] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[4] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[7] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[8] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
      DataTable @[3] { 
	DataTableCols @.data = [9] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  int_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  String_Data @[3] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[4] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  String_Data @[5] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[6] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[7] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[8] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
      DataTable @[4] { 
	DataTableCols @.data = [5] {
	  int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  int_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
	      UserDataItem @[1] { };
      };
};
	  float_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[3] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	  float_Data @[4] { 
      UserDataItem_List @*(.user_data_) {
	      UserDataItem @[0] { };
      };
};
	};
      };
    };
    DataTable_Group @.gp[2] { 
    };
  };

  taBase_Group @.data_proc = [4] {
    taDataProc @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataAnal @[1] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taDataGen @[2] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
    taImageProc @[3] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
   };
};
  };

  Program_Group @.programs = [2] {
    Program @[0] { 
      ProgObjList @.objs = [2] {
	float_Matrix @[0] { };
	DataTable @[1] { 
	  DataTableCols @.data = [9] {
	    int_Data @[0] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[1] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    int_Data @[2] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
		UserDataItem @[1] { };
       };
};
	    String_Data @[3] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    float_Data @[4] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    String_Data @[5] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    float_Data @[6] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    float_Data @[7] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	    float_Data @[8] { 
       UserDataItem_List @*(.user_data_) {
		UserDataItem @[0] { };
       };
};
	  };
	};
      };

      ProgType_List @.types = [0] {
      };

      ProgVar_List @.args = [4] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
      };

      ProgVar_List @.vars = [16] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
	ProgVar @[6] { };
	ProgVar @[7] { };
	ProgVar @[8] { };
	ProgVar @[9] { };
	ProgVar @[10] { };
	ProgVar @[11] { };
	ProgVar @[12] { };
	ProgVar @[13] { };
	ProgVar @[14] { };
	ProgVar @[15] { };
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [14] {
	MethodCall @[0] { 
	  ProgArg_List @.meth_args = [1] {
	    ProgArg @[0] { };
	  };
	};
	AddNewDataRow @[1] { };
	MethodCall @[2] { 
	  ProgArg_List @.meth_args = [3] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	  };
	};
	DataAnalCall @[3] { 
	  ProgArg_List @.meth_args = [9] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	    ProgArg @[2] { };
	    ProgArg @[3] { };
	    ProgArg @[4] { };
	    ProgArg @[5] { };
	    ProgArg @[6] { };
	    ProgArg @[7] { };
	    ProgArg @[8] { };
	  };
	};
	MathCall @[4] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
	DataVarProg @[5] { };
	AssignExpr @[6] { };
	DataVarProg @[7] { };
	IfElse @[8] { 
	  ProgEl_List @.true_code = [1] {
	    AssignExpr @[0] { };
	  };

	  ProgEl_List @.false_code = [1] {
	    AssignExpr @[0] { };
	  };
	};
	Comment @[9] { };
	Comment @[10] { };
	AssignExpr @[11] { };
	AssignExpr @[12] { };
	IfElse @[13] { 
	  ProgEl_List @.true_code = [1] {
	    AssignExpr @[0] { };
	  };

	  ProgEl_List @.false_code = [1] {
	    AssignExpr @[0] { };
	  };
	};
      };
    };
    Program @[1] { 
      ProgObjList @.objs = [0] {
      };

      ProgType_List @.types = [0] {
      };

      ProgVar_List @.args = [1] {
	ProgVar @[0] { };
      };

      ProgVar_List @.vars = [0] {
      };

      Function_List @.functions = [0] {
      };

      ProgEl_List @.load_code = [0] {
      };

      ProgEl_List @.init_code = [0] {
      };

      ProgEl_List @.prog_code = [1] {
	MethodCall @[0] { 
	  ProgArg_List @.meth_args = [2] {
	    ProgArg @[0] { };
	    ProgArg @[1] { };
	  };
	};
      };
    };
    Program_Group @.gp[0] = [10] { 
      Program @[0] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [2] {
	  NetCounterInit @[0] { };
	  WhileLoop @[1] { 
	    ProgEl_List @.loop_code = [2] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [3] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		  ProgArg @[2] { };
		};
	      };
	      NetCounterIncr @[1] { };
	    };
	  };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [1] {
	  RndSeed @[0] { };
	};

	ProgType_List @.types = [1] {
	  DynEnumType @[0] { 
	    DynEnumItem_List @.enums = [2] {
	      DynEnumItem @[0] { };
	      DynEnumItem @[1] { };
	    };
	  };
	};

	ProgVar_List @.args = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	ProgVar_List @.vars = [7] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [5] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  AssignExpr @[2] { };
	  IfElse @[3] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  IfGuiPrompt @[4] { 
	    ProgEl_List @.yes_code = [2] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	      PrintExpr @[1] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [7] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[2] { };
	  If @[3] { 
	    ProgEl_List @.true_code = [2] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	      PrintExpr @[1] { };
	    };
	  };
	  AssignExpr @[4] { };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfBreak @[2] { };
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @[2] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [11] {
	  OtherProgramVar @[0] { };
	  MemberAssign @[1] { };
	  NetCounterInit @[2] { };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetDataLoop @[6] { 
	    ProgEl_List @.loop_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  IfElse @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  MethodCall @[8] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[9] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[10] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};
      };
      Program @[3] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [7] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  WhileLoop @[2] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  If @[4] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  ProgramCall @[5] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[6] { };
	};
      };
      Program @[4] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[4] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  If @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  If @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  NetUpdateView @[9] { };
	};
      };
      Program @[5] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetUpdateView @[1] { };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [3] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @[7] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [14] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	      NetMonItem @[11] { };
	      NetMonItem @[12] { };
	      NetMonItem @[13] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [7] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [7] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  OtherProgramVar @[3] { };
	  DataVarProg @[4] { };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[8] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [11] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	      NetMonItem @[9] { };
	      NetMonItem @[10] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [4] {
	  AssignExpr @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [6] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @[9] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [6] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [6] {
	  IfReturn @[0] { };
	  MiscCall @[1] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MiscCall @[2] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  AssignExpr @[3] { };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
    };
    Program_Group @.gp[1] = [7] { 
      Program @[0] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [5] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  NetCounterInit @[0] { };
	  AssignExpr @[1] { };
	};

	ProgEl_List @.prog_code = [11] {
	  NetCounterInit @[0] { };
	  MemberAssign @[1] { };
	  AssignExpr @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[4] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetDataLoop @[5] { 
	    ProgEl_List @.loop_code = [1] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	    };
	  };
	  IfElse @[6] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };

	    ProgEl_List @.false_code = [0] {
	    };
	  };
	  MethodCall @[7] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[8] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[9] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MemberAssign @[10] { };
	};
      };
      Program @[1] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [9] {
	  DataVarProg @[0] { };
	  IfElse @[1] { 
	    ProgEl_List @.true_code = [1] {
	      MemberAssign @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      MemberAssign @[0] { };
	    };
	  };
	  NetCounterInit @[2] { };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  WhileLoop @[4] { 
	    ProgEl_List @.loop_code = [3] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [2] {
		  ProgArg @[0] { };
		  ProgArg @[1] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      MethodCall @[2] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  If @[6] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  ProgramCall @[7] { 
	    ProgArg_List @.prog_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  NetUpdateView @[8] { };
	};
      };
      Program @[2] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [3] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [1] {
	  NetCounterInit @[0] { };
	};

	ProgEl_List @.prog_code = [10] {
	  NetCounterInit @[0] { };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[3] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  IfElse @[4] { 
	    ProgEl_List @.true_code = [1] {
	      AssignExpr @[0] { };
	    };

	    ProgEl_List @.false_code = [1] {
	      AssignExpr @[0] { };
	    };
	  };
	  WhileLoop @[5] { 
	    ProgEl_List @.loop_code = [4] {
	      ProgramCall @[0] { 
		ProgArg_List @.prog_args = [1] {
		  ProgArg @[0] { };
		};
	      };
	      NetCounterIncr @[1] { };
	      IfContinue @[2] { };
	      IfBreak @[3] { };
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  If @[7] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  If @[8] { 
	    ProgEl_List @.true_code = [1] {
	      MethodCall @[0] { 
		ProgArg_List @.meth_args = [0] {
		};
	      };
	    };
	  };
	  NetUpdateView @[9] { };
	};
      };
      Program @[3] { 
	ProgObjList @.objs = [0] {
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [0] {
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  NetUpdateView @[1] { };
	};
      };
      Program @[4] { 
	ProgObjList @.objs = [1] {
	  LayerWriter @[0] { 
	    LayerDataEl_List @.layer_data = [3] {
	      LayerWriterEl @[0] { };
	      LayerWriterEl @[1] { };
	      LayerWriterEl @[2] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [2] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	};

	ProgVar_List @.vars = [1] {
	  ProgVar @[0] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [2] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	};
      };
      Program @[5] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [9] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	      NetMonItem @[5] { };
	      NetMonItem @[6] { };
	      NetMonItem @[7] { };
	      NetMonItem @[8] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [7] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	  ProgVar @[4] { };
	  ProgVar @[5] { };
	  ProgVar @[6] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [7] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  ProgramCall @[2] { 
	    ProgArg_List @.prog_args = [4] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	      ProgArg @[2] { };
	      ProgArg @[3] { };
	    };
	  };
	  OtherProgramVar @[3] { };
	  DataVarProg @[4] { };
	  MethodCall @[5] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[6] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
      Program @[6] { 
	ProgObjList @.objs = [1] {
	  NetMonitor @[0] { 
	    NetMonItem_List @.items = [5] {
	      NetMonItem @[0] { };
	      NetMonItem @[1] { };
	      NetMonItem @[2] { };
	      NetMonItem @[3] { };
	      NetMonItem @[4] { };
	    };
	  };
	};

	ProgType_List @.types = [0] {
	};

	ProgVar_List @.args = [1] {
	  ProgVar @[0] { };
	};

	ProgVar_List @.vars = [4] {
	  ProgVar @[0] { };
	  ProgVar @[1] { };
	  ProgVar @[2] { };
	  ProgVar @[3] { };
	};

	Function_List @.functions = [0] {
	};

	ProgEl_List @.load_code = [0] {
	};

	ProgEl_List @.init_code = [3] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [1] {
	      ProgArg @[0] { };
	    };
	  };
	};

	ProgEl_List @.prog_code = [4] {
	  MethodCall @[0] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[1] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  MethodCall @[2] { 
	    ProgArg_List @.meth_args = [0] {
	    };
	  };
	  DataProcCall @[3] { 
	    ProgArg_List @.meth_args = [2] {
	      ProgArg @[0] { };
	      ProgArg @[1] { };
	    };
	  };
	};
      };
    };
  };

  DataViewer_List @.viewers = [1] {
    MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
   };

      ToolBar_List @.toolbars = [1] {
	ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @[0] { };
     };
};
      };

      FrameViewer_List @.frames = [3] {
	tabBrowseViewer @[0] { };
	PanelViewer @[1] { };
	T3DataViewer @[2] { 
	  T3DataViewFrame_List @.frames = [3] {
	    T3DataViewFrame @[0] { 
	      T3DataView_List @.children = [3] {
		NetView @[0] { 
		  ScaleRange_List @.scale_ranges = [1] {
		    ScaleRange @[0] { };
		  };
		};
		GridTableView @[1] { 
		  T3DataView_List @.children = [9] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		    GridColView @[3] { };
		    GridColView @[4] { };
		    GridColView @[5] { };
		    GridColView @[6] { };
		    GridColView @[7] { };
		    GridColView @[8] { };
		  };
		};
		GridTableView @[2] { 
		  T3DataView_List @.children = [5] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		    GridColView @[3] { };
		    GridColView @[4] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[1] { 
	      T3DataView_List @.children = [1] {
		GridTableView @[0] { 
		  T3DataView_List @.children = [3] {
		    GridColView @[0] { };
		    GridColView @[1] { };
		    GridColView @[2] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	    T3DataViewFrame @[2] { 
	      T3DataView_List @.children = [1] {
		GraphTableView @[0] { 
		  T3DataView_List @.children = [11] {
		    GraphColView @[0] { };
		    GraphColView @[1] { };
		    GraphColView @[2] { };
		    GraphColView @[3] { };
		    GraphColView @[4] { };
		    GraphColView @[5] { };
		    GraphColView @[6] { };
		    GraphColView @[7] { };
		    GraphColView @[8] { };
		    GraphColView @[9] { };
		    GraphColView @[10] { };
		  };
		};
	      };

	      T3SavedView_List @.saved_views = [6] {
		T3SavedView @[0] { };
		T3SavedView @[1] { };
		T3SavedView @[2] { };
		T3SavedView @[3] { };
		T3SavedView @[4] { };
		T3SavedView @[5] { };
	      };
	    };
	  };
	};
      };

      DockViewer_List @.docks = [1] {
	ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) {
	    UserDataItem @[0] { };
	    UserDataItem @[1] { };
	    UserDataItem @[2] { };
	    UserDataItem @[3] { };
	    UserDataItem @[4] { };
	    UserDataItem @[5] { };
     };
};
      };
    };
  };

  Network_Group @.networks = [1] {
    LeabraNetwork @[0] { 
   UserDataItem_List @*(.user_data_) {
	UserDataItem @[0] { };
	UserDataItem @[1] { };
	UserDataItem @[2] { };
	UserDataItem @[3] { };
	UserDataItem @[4] { };
	UserDataItem @[5] { };
	UserDataItem @[6] { };
	UserDataItem @[7] { };
	UserDataItem @[8] { };
	UserDataItem @[9] { };
	UserDataItem @[10] { };
	UserDataItem @[11] { };
	UserDataItem @[12] { };
	UserDataItem @[13] { };
	UserDataItem @[14] { };
	UserDataItem @[15] { };
	UserDataItem @[16] { };
	UserDataItem @[17] { };
	UserDataItem @[18] { };
   };

      BaseSpec_Group @.specs = [4] {
	LeabraUnitSpec @[0] { 
	  BaseSpec_Group @.children = [0] {
	  };

	  Schedule @.noise_sched = [0] {
	  };
	};
	LeabraConSpec @[1] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraBiasSpec @[0] { 
	      BaseSpec_Group @.children = [0] {
	      };

	      Schedule @.lrate_sched = [0] {
	      };
	    };
	  };

	  Schedule @.lrate_sched = [0] {
	  };
	};
	LeabraLayerSpec @[2] { 
	  BaseSpec_Group @.children = [1] {
	    LeabraLayerSpec @[0] { 
	      BaseSpec_Group @.children = [0] {
	      };
	    };
	  };
	};
	FullPrjnSpec @[3] { 
	  BaseSpec_Group @.children = [0] {
	  };
	};
      };

      Layer_Group @.layers = [3] {
	LeabraLayer @[0] { 
	  Projection_Group @.projections = [0] {
	  };

	  Unit_Group @.units = [25] {
	  };
	};
	LeabraLayer @[1] { 
	  Projection_Group @.projections = [2] {
	    LeabraPrjn @[0] { };
	    LeabraPrjn @[1] { };
	  };

	  Unit_Group @.units = [25] {
	  };
	};
	LeabraLayer @[2] { 
	  Projection_Group @.projections = [1] {
	    LeabraPrjn @[0] { };
	  };

	  Unit_Group @.units = [25] {
	  };
	};
      };

      NetViewObj_Group @.view_objs = [0] {
      };
    };
  };
};
LeabraProject .projects[0] {
 name="Project_0";
 desc="


";
 tags=;
 version {
  major=0;
  minor=0;
  step=0;
 };
 wiki_url {
  sync=0;
  wiki=;
  url=;
 };
 templates {
  name=;
  el_typ=taBase;
  el_def=0;
 };
 docs {
  name=;
  el_typ=taDoc;
  el_def=0;
  taDoc @[0] {
   name="ProjectDocs";
   desc=;
   auto_open=1;
   web_doc=0;
   wiki=;
   url="local";
   full_url="local";
   text_size=1;
   text="<html>
<head></head>
<body>
= Exploration of Activation-Based Priming =

* GENERAL USAGE NOTE: To start, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open this documentation in a separate window that you can more easily come back to.  Alternatively, you can just always return to this document by clicking on the <code>ProjectDocs</code> tab at the top of the middle panel.

This short project is essentially just the same simulation as the weight priming one we did earlier in the chapter (<code>wt_priming.proj</code>), so we will assume you are already familiar with the network and environment.  We begin by loading a pre-trained network, although you are welcome to train one from scratch by doing Train: Init and Run.

* Press the <code>Load Weights</code> button at the bottom of the master [[.PanelTab.ControlPanel]], which loads in the weights file called act_priming_trained.wts.gz

Let's test this network (using a somewhat different setup than last time) to obtain a baseline measure of performance, where we do not expect any activation-based priming (because we clear out the activations after each trial, due to the decay.event parameter being set to 1 initially).

This test has the <code>'a'</code> and <code>'b'</code> responses to a given input being presented one after another, which allows us to determine the immediate impact of seeing the <code>'a'</code> case on the response to <code>'b'</code>.  When the <code>'a'</code> case is presented, we clamp the output response pattern to the <code>'a'</code> value.  When the <code>'b'</code> case is then presented, only the input pattern is presented, so the <code>'b'</code> output response just serves as a comparison pattern for the actual output produced by the network given the input.  

* Press <code>Test: Init, Step TstTrl</code> in the master [[.PanelTab.ControlPanel]] to present the first (<code>'0_a'</code>) event to the network.   You should see both the input and output pattern clamped

* Now press <code>Step TstTrl</code> several more times while keeping your eye on the <code>Output</code> layer to watch the responses. You can see the closest event stats in the bottom of the two grid log views shown above the network -- as you can see, each <code>Step</code> presents one event in the following order: <code>0_a,0_b,1_a,1_b,2_a,2_b</code>, etc.

* Press the <code>Test: Run</code> button to finish out the full test epoch of 26 events, at which point you'll get a new row of data in the top grid view, showing the summary for the epoch.

As with the wt_priming model, the key summary value is <code>sum_name_err</code>, which reflects the number of times the network produced the 'a' output for the 'b' inputs (because the 'a' trials have their output patterns clamped, they always have a name_err of 0, so this measure is only for the 'b' trials which have the output unclamped).  The number you see here reflects the baseline value, against which we will compare the activation-based priming value.

As noted above, the <code>decay.event</code> parameter in the master [[.PanelTab.ControlPanel]] controls the extent to which the activations are decayed (reset) after each event is processed.  Let's observe the effects of keeping the activations completely intact from one trial to the next.

* Change the <code>decay.event</code> parameter to 0 instead of 1.   Then do Test: Step Trl for a few trials, and observe how the residual activations influence the processing of the output patterns in the network.  Do a Test: Run to finish out the epoch of testing.

You should notice an increased tendency for the network to respond with <code>'a'</code> in the <code>'b'</code> trials (also see figure 9.15 in text).

<hr>

'''Question 9.8''' '''(a)''' ''Report the number of times the network responded <code>'a'</code> instead of <code>'b'</code> for the <code>'b'</code> test trials, relative to the baseline that you observed above with decay.event = 1.'' '''(b)''' ''Explain why <code>decay.event</code> has this effect on performance.''

<hr>

In summary, this simulation replicates our earlier weight-based priming results using residual activations instead of weight changes, and illustrates a simple form of activation-based memory that our model of the cortex naturally exhibits.

* When you are done with this simulation, you can either close this project in preparation for loading the next project, or you can quit completely from the simulator.

</body>
</html>
";
   html_text="<html><head></head><body>
<h1> Exploration of Activation-Based Priming </h1>
<p>
</p><ul><li> GENERAL USAGE NOTE: To start, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open this documentation in a separate window that you can more easily come back to.  Alternatively, you can just always return to this document by clicking on the <code>ProjectDocs</code> tab at the top of the middle panel.
</li></ul>
This short project is essentially just the same simulation as the weight priming one we did earlier in the chapter (<code>wt_priming.proj</code>), so we will assume you are already familiar with the network and environment.  We begin by loading a pre-trained network, although you are welcome to train one from scratch by doing Train: Init and Run.
<p>
</p><ul><li> Press the <code>Load Weights</code> button at the bottom of the master <a href=\"ta:.PanelTab.ControlPanel\">ControlPanel</a>, which loads in the weights file called act_priming_trained.wts.gz
</li></ul>
Let's test this network (using a somewhat different setup than last time) to obtain a baseline measure of performance, where we do not expect any activation-based priming (because we clear out the activations after each trial, due to the decay.event parameter being set to 1 initially).
<p>
This test has the <code>'a'</code> and <code>'b'</code> responses to a given input being presented one after another, which allows us to determine the immediate impact of seeing the <code>'a'</code> case on the response to <code>'b'</code>.  When the <code>'a'</code> case is presented, we clamp the output response pattern to the <code>'a'</code> value.  When the <code>'b'</code> case is then presented, only the input pattern is presented, so the <code>'b'</code> output response just serves as a comparison pattern for the actual output produced by the network given the input.  
</p><p>
</p><ul><li> Press <code>Test: Init, Step TstTrl</code> in the master <a href=\"ta:.PanelTab.ControlPanel\">ControlPanel</a> to present the first (<code>'0_a'</code>) event to the network.   You should see both the input and output pattern clamped
</li></ul>
<ul><li> Now press <code>Step TstTrl</code> several more times while keeping your eye on the <code>Output</code> layer to watch the responses. You can see the closest event stats in the bottom of the two grid log views shown above the network -- as you can see, each <code>Step</code> presents one event in the following order: <code>0_a,0_b,1_a,1_b,2_a,2_b</code>, etc.
</li></ul>
<ul><li> Press the <code>Test: Run</code> button to finish out the full test epoch of 26 events, at which point you'll get a new row of data in the top grid view, showing the summary for the epoch.
</li></ul>
As with the wt_priming model, the key summary value is <code>sum_name_err</code>, which reflects the number of times the network produced the 'a' output for the 'b' inputs (because the 'a' trials have their output patterns clamped, they always have a name_err of 0, so this measure is only for the 'b' trials which have the output unclamped).  The number you see here reflects the baseline value, against which we will compare the activation-based priming value.
<p>
As noted above, the <code>decay.event</code> parameter in the master <a href=\"ta:.PanelTab.ControlPanel\">ControlPanel</a> controls the extent to which the activations are decayed (reset) after each event is processed.  Let's observe the effects of keeping the activations completely intact from one trial to the next.
</p><p>
</p><ul><li> Change the <code>decay.event</code> parameter to 0 instead of 1.   Then do Test: Step Trl for a few trials, and observe how the residual activations influence the processing of the output patterns in the network.  Do a Test: Run to finish out the epoch of testing.
</li></ul>
You should notice an increased tendency for the network to respond with <code>'a'</code> in the <code>'b'</code> trials (also see figure 9.15 in text).
<p>
</p><hr>
<p>
 <b>Question 9.8</b>   <b>(a)</b>   <i>Report the number of times the network responded <code>'a'</code> instead of <code>'b'</code> for the <code>'b'</code> test trials, relative to the baseline that you observed above with decay.event = 1.</i>   <b>(b)</b>   <i>Explain why <code>decay.event</code> has this effect on performance.</i> 
</p><p>
</p><hr>
<p>
In summary, this simulation replicates our earlier weight-based priming results using residual activations instead of weight changes, and illustrates a simple form of activation-based memory that our model of the cortex naturally exhibits.
</p><p>
</p><ul><li> When you are done with this simulation, you can either close this project in preparation for loading the next project, or you can quit completely from the simulator.
</li></ul>


</body></html>";
  };
  taDoc @[1] {
   name="WikiDoc";
   desc=;
   auto_open=0;
   web_doc=1;
   wiki="CCN";
   url="CECN1_Act_Priming";
   full_url="http://grey.colorado.edu/CompCogNeuro/index.php/CECN1_Act_Priming";
   text_size=1;
   text="<html>
<head></head>
<body>
== Enter Title Here ==
</body>
</html>
";
   html_text="<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\" dir=\"ltr\"><head>
		<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">
		<meta http-equiv=\"Content-Style-Type\" content=\"text/css\">
		<meta name=\"generator\" content=\"MediaWiki 1.16alpha-wmf\">
		<meta name=\"keywords\" content=\"CECN1 Act Priming,CECN1 Projects,.PanelTab.ControlPanel\">
		<link rel=\"shortcut icon\" href=\"/emergent/favicon.ico\">
		<link rel=\"search\" type=\"application/opensearchdescription+xml\" href=\"/CompCogNeuro/opensearch_desc.php\" title=\"Computational Cognitive Neuroscience Wiki (en)\">
		<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Computational Cognitive Neuroscience Wiki RSS Feed\" href=\"/CompCogNeuro/index.php?title=Special:RecentChanges&amp;feed=rss\">
		<link rel=\"alternate\" type=\"application/atom+xml\" title=\"Computational Cognitive Neuroscience Wiki Atom Feed\" href=\"/CompCogNeuro/index.php?title=Special:RecentChanges&amp;feed=atom\">
		<title>CECN1 Act Priming - Computational Cognitive Neuroscience Wiki</title>
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/common/shared.css?233z\" type=\"text/css\" media=\"screen\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/common/commonPrint.css?233z\" type=\"text/css\" media=\"print\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/main.css?233z\" type=\"text/css\" media=\"screen\">
		<!--[if lt IE 5.5000]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE50Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<!--[if IE 5.5000]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE55Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<!--[if IE 6]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE60Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<!--[if IE 7]><link rel=\"stylesheet\" href=\"/CompCogNeuro/skins/monobook/IE70Fixes.css?233z\" type=\"text/css\" media=\"screen\" /><![endif]-->
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000\" type=\"text/css\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000\" type=\"text/css\" media=\"print\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=MediaWiki:monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000\" type=\"text/css\">
		<link rel=\"stylesheet\" href=\"/CompCogNeuro/index.php?title=-&amp;action=raw&amp;maxage=18000&amp;gen=css\" type=\"text/css\">
		<!--[if lt IE 7]><script type=\"text/javascript\" src=\"/CompCogNeuro/skins/common/IEFixes.js?233z\"></script>
		<meta http-equiv=\"imagetoolbar\" content=\"no\" /><![endif]-->

		<script type=\"text/javascript\">/*<![CDATA[*/
		var skin = \"monobook\";
		var stylepath = \"/CompCogNeuro/skins\";
		var wgArticlePath = \"/CompCogNeuro/index.php/$1\";
		var wgScriptPath = \"/CompCogNeuro\";
		var wgScript = \"/CompCogNeuro/index.php\";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = \"http://grey.colorado.edu\";
		var wgCanonicalNamespace = \"\";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = \"CECN1_Act_Priming\";
		var wgTitle = \"CECN1 Act Priming\";
		var wgAction = \"view\";
		var wgArticleId = \"116\";
		var wgIsArticle = true;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = \"en\";
		var wgContentLanguage = \"en\";
		var wgBreakFrames = false;
		var wgCurRevisionId = 396;
		var wgVersion = \"1.16alpha-wmf\";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = [\"\", \"\"];
		var wgDigitTransformTable = [\"\", \"\"];
		var wgMainPageTitle = \"Main Page\";
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		var wgFCKEditorDir = \"extensions/FCKeditor/fckeditor/\";
		var wgFCKEditorExtDir = \"extensions/FCKeditor\";
		var wgFCKEditorToolbarSet = \"Wiki\";
		var wgFCKEditorHeight = \"0\";
		/*]]>*/</script>

		<script type=\"text/javascript\" src=\"/CompCogNeuro/skins/common/wikibits.js?233z\"><!-- wikibits js --></script><style type=\"text/css\">@import \"/CompCogNeuro/skins/monobook/KHTMLFixes.css\";</style>
		<!-- Head Scripts -->
		<script type=\"text/javascript\" src=\"/CompCogNeuro/skins/common/ajax.js?233z\"></script>
		<script type=\"text/javascript\" src=\"/CompCogNeuro/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook\"><!-- site js --></script>
	<style type=\"text/css\">@import \"/CompCogNeuro/extensions/Collection/collection/Gadget-navpop.css?2\";</style></head><body class=\"mediawiki ltr ns-0 ns-subject page-CECN1_Act_Priming skin-monobook\">
	<div id=\"globalWrapper\">
		<div id=\"column-content\">
	<div id=\"content\">
		<a name=\"top\" id=\"top\"></a>
				<h1 id=\"firstHeading\" class=\"firstHeading\">CECN1 Act Priming</h1>
		<div id=\"bodyContent\">
			<h3 id=\"siteSub\">From Computational Cognitive Neuroscience Wiki</h3>
			<div id=\"contentSub\"></div>
									<div id=\"jump-to-nav\">Jump to: <a href=\"#column-one\">navigation</a>, <a href=\"#searchInput\">search</a></div>			<!-- start content -->
			<a name=\"Activation_Based_.28Short_Term.29_Priming\" id=\"Activation_Based_.28Short_Term.29_Priming\"></a><h1> <span class=\"mw-headline\"> Activation Based (Short Term) Priming </span></h1>
<ul><li> The project file: <a href=\"/mediawiki/sites/CompCogNeuro/images/c/ca/act_priming.proj\" class=\"internal\" title=\"act priming.proj\">act_priming.proj</a>
</li><li> Additional file for pretrained weights (recommended):
<ul><li> <a href=\"/mediawiki/sites/CompCogNeuro/images/6/6a/act_priming_trained.wts.gz\" class=\"internal\" title=\"act priming trained.wts.gz\">act_priming_trained.wts.gz</a>
</li></ul>
</li></ul>
<p>Back to <a href=\"/CompCogNeuro/index.php/CECN1_Projects\" title=\"CECN1 Projects\">CECN1 Projects</a>
</p>
<a name=\"Project_Documentation\" id=\"Project_Documentation\"></a><h1> <span class=\"mw-headline\"> Project Documentation </span></h1>
<p>(note: this is a literal copy from the simulation documentation -- it contains links that will not work within the wiki)
</p><p><br>
</p>
<ul><li> GENERAL USAGE NOTE: To start, it is usually a good idea to do <code>Object/Edit Dialog</code> in the menu just above this text, which will open this documentation in a separate window that you can more easily come back to.  Alternatively, you can just always return to this document by clicking on the <code>ProjectDocs</code> tab at the top of the middle panel.
</li></ul>
<p>This short project is essentially just the same simulation as the weight priming one we did earlier in the chapter (<code>wt_priming.proj</code>), so we will assume you are already familiar with the network and environment.  We begin by loading a pre-trained network, although you are welcome to train one from scratch by doing Train: Init and Run.
</p>
<ul><li> Press the <code>Load Weights</code> button at the bottom of the master <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\">.PanelTab.ControlPanel</a>, which loads in the weights file called act_priming_trained.wts.gz
</li></ul>
<p>Let's test this network (using a somewhat different setup than last time) to obtain a baseline measure of performance, where we do not expect any activation-based priming (because we clear out the activations after each trial, due to the decay.event parameter being set to 1 initially).
</p><p>This test has the <code>'a'</code> and <code>'b'</code> responses to a given input being presented one after another, which allows us to determine the immediate impact of seeing the <code>'a'</code> case on the response to <code>'b'</code>.  When the <code>'a'</code> case is presented, we clamp the output response pattern to the <code>'a'</code> value.  When the <code>'b'</code> case is then presented, only the input pattern is presented, so the <code>'b'</code> output response just serves as a comparison pattern for the actual output produced by the network given the input.  
</p>
<ul><li> Press <code>Test: Init, Step</code> in the master <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\">.PanelTab.ControlPanel</a> to present the first (<code>'0_a'</code>) event to the network.   You should see both the input and output pattern clamped
</li></ul>
<ul><li> Now press <code>Step</code> several more times while keeping your eye on the <code>Output</code> layer to watch the responses. You can see the closest event stats in the bottom of the two grid log views shown above the network -- as you can see, each <code>Step</code> presents one event in the following order: <code>0_a,0_b,1_a,1_b,2_a,2_b</code>, etc.
</li></ul>
<ul><li> Press the <code>Test: Run</code> button to finish out the full test epoch of 26 events, at which point you'll get a new row of data in the top grid view, showing the summary for the epoch.
</li></ul>
<p>As with the wt_priming model, the key summary value is <code>sum_name_err</code>, which reflects the number of times the network produced the 'a' output for the 'b' inputs (because the 'a' trials have their output patterns clamped, they always have a name_err of 0, so this measure is only for the 'b' trials which have the output unclamped).  The number you see here reflects the baseline value, against which we will compare the activation-based priming value.
</p><p>As noted above, the <code>decay.event</code> parameter in the master <a href=\"/CompCogNeuro/index.php?title=.PanelTab.ControlPanel&amp;action=edit&amp;redlink=1\" class=\"new\" title=\".PanelTab.ControlPanel (page does not exist)\">.PanelTab.ControlPanel</a> controls the extent to which the activations are decayed (reset) after each event is processed.  Let's observe the effects of keeping the activations completely intact from one trial to the next.
</p>
<ul><li> Change the <code>decay.event</code> parameter to 0 instead of 1.   Then do Test: Step for a few trials, and observe how the residual activations influence the processing of the output patterns in the network.  Do a Test: Run to finish out the epoch of testing.
</li></ul>
<p>You should notice an increased tendency for the network to respond with <code>'a'</code> in the <code>'b'</code> trials (also see figure 9.15 in text).
</p>
<hr>
<p><b>Question 9.8</b> <b>(a)</b> <i>Report the number of times the network responded <code>'a'</code> instead of <code>'b'</code> for the <code>'b'</code> test trials, relative to the baseline that you observed above with decay.event = 1.</i> <b>(b)</b> <i>Explain why <code>decay.event</code> has this effect on performance.</i>
</p>
<hr>
<p>In summary, this simulation replicates our earlier weight-based priming results using residual activations instead of weight changes, and illustrates a simple form of activation-based memory that our model of the cortex naturally exhibits.
</p>
<ul><li> When you are done with this simulation, you can either close this project in preparation for loading the next project, or you can quit completely from the simulator.
</li></ul>

<!-- 
NewPP limit report
Preprocessor node count: 3/1000000
Post-expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key compcogneuro:pcache:idhash:116-0!1!0!!en!2!edit=0 and timestamp 20090904065143 -->
<div class=\"printfooter\">
Retrieved from \"<a href=\"http://grey.colorado.edu/CompCogNeuro/index.php/CECN1_Act_Priming\">http://grey.colorado.edu/CompCogNeuro/index.php/CECN1_Act_Priming</a>\"</div>
						<!-- end content -->
						<div class=\"visualClear\"></div>
		</div>
	</div>
		</div>
		<div id=\"column-one\">
	<div id=\"p-cactions\" class=\"portlet\">
		<h5>Views</h5>
		<div class=\"pBody\">
			<ul lang=\"en\" xml:lang=\"en\">
	
				 <li id=\"ca-nstab-main\" class=\"selected\"><a href=\"/CompCogNeuro/index.php/CECN1_Act_Priming\" title=\"View the content page [ctrl-alt-c]\" accesskey=\"c\">Page</a></li>
				 <li id=\"ca-talk\" class=\"new\"><a href=\"/CompCogNeuro/index.php?title=Talk:CECN1_Act_Priming&amp;action=edit&amp;redlink=1\" title=\"Discussion about the content page [ctrl-alt-t]\" accesskey=\"t\">Discussion</a></li>
				 <li id=\"ca-viewsource\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Act_Priming&amp;action=edit\" title=\"This page is protected.
You can view its source [ctrl-alt-e]\" accesskey=\"e\">View source</a></li>
				 <li id=\"ca-history\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Act_Priming&amp;action=history\" title=\"Past revisions of this page [ctrl-alt-h]\" accesskey=\"h\">History</a></li>			</ul>
		</div>
	</div>
	<div class=\"portlet\" id=\"p-personal\">
		<h5>Personal tools</h5>
		<div class=\"pBody\">
			<ul lang=\"en\" xml:lang=\"en\">
				<li id=\"pt-login\"><a href=\"/CompCogNeuro/index.php?title=Special:UserLogin&amp;returnto=CECN1_Act_Priming\" title=\"You are encouraged to log in; however, it is not mandatory [ctrl-alt-o]\" accesskey=\"o\">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class=\"portlet\" id=\"p-logo\">
		<a style=\"background-image: url(/mediawiki/sites//CompCogNeuro/logo.png);\" href=\"/CompCogNeuro/index.php/Main_Page\" title=\"Visit the main page [ctrl-alt-z]\" accesskey=\"z\"></a>
	</div>
	<script type=\"text/javascript\"> if (window.isMSIE55) fixalpha(); </script>
	<div class=\"generated-sidebar portlet\" id=\"p-navigation\">
		<h5 lang=\"en\" xml:lang=\"en\">Navigation</h5>
		<div class=\"pBody\">
			<ul>
				<li id=\"n-mainpage-description\"><a href=\"/CompCogNeuro/index.php/Main_Page\">Main Page</a></li>
				<li id=\"n-portal\"><a href=\"/CompCogNeuro/index.php/Project:Community_Portal\" title=\"About the project, what you can do, where to find things\">Community portal</a></li>
				<li id=\"n-currentevents\"><a href=\"/CompCogNeuro/index.php/Project:Current_events\" title=\"Find background information on current events\">Current events</a></li>
				<li id=\"n-recentchanges\"><a href=\"/CompCogNeuro/index.php/Special:RecentChanges\" title=\"The list of recent changes in the wiki [ctrl-alt-r]\" accesskey=\"r\">Recent changes</a></li>
				<li id=\"n-randompage\"><a href=\"/CompCogNeuro/index.php/Special:Random\" title=\"Load a random page [ctrl-alt-x]\" accesskey=\"x\">Random page</a></li>
				<li id=\"n-help\"><a href=\"/CompCogNeuro/index.php/Help:Contents\" title=\"The place to find out\">Help</a></li>
			</ul>
		</div>
	</div>
	<div id=\"p-search\" class=\"portlet\">
		<h5 lang=\"en\" xml:lang=\"en\"><label for=\"searchInput\">Search</label></h5>
		<div id=\"searchBody\" class=\"pBody\">
			<form action=\"/CompCogNeuro/index.php\" id=\"searchform\"><div>
				<input type=\"hidden\" name=\"title\" value=\"Special:Search\">
				<input id=\"searchInput\" name=\"search\" type=\"text\" title=\"Search Computational Cognitive Neuroscience Wiki [ctrl-alt-f]\" accesskey=\"f\" value=\"\">
				<input type=\"submit\" name=\"go\" class=\"searchButton\" id=\"searchGoButton\" value=\"Go\" title=\"Go to a page with this exact name if exists\">&nbsp;
				<input type=\"submit\" name=\"fulltext\" class=\"searchButton\" id=\"mw-searchButton\" value=\"Search\" title=\"Search the pages for this text\">
			</div></form>
		</div>
	</div>
	<div class=\"portlet\" id=\"p-tb\">
		<h5 lang=\"en\" xml:lang=\"en\">Toolbox</h5>
		<div class=\"pBody\">
			<ul>
				<li id=\"t-whatlinkshere\"><a href=\"/CompCogNeuro/index.php/Special:WhatLinksHere/CECN1_Act_Priming\" title=\"List of all wiki pages that link here [ctrl-alt-j]\" accesskey=\"j\">What links here</a></li>
				<li id=\"t-recentchangeslinked\"><a href=\"/CompCogNeuro/index.php/Special:RecentChangesLinked/CECN1_Act_Priming\" title=\"Recent changes in pages linked from this page [ctrl-alt-k]\" accesskey=\"k\">Related changes</a></li>
<li id=\"t-upload\"><a href=\"/CompCogNeuro/index.php/Special:Upload\" title=\"Upload files [ctrl-alt-u]\" accesskey=\"u\">Upload file</a></li>
<li id=\"t-specialpages\"><a href=\"/CompCogNeuro/index.php/Special:SpecialPages\" title=\"List of all special pages [ctrl-alt-q]\" accesskey=\"q\">Special pages</a></li>
				<li id=\"t-print\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Act_Priming&amp;printable=yes\" rel=\"alternate\" title=\"Printable version of this page [ctrl-alt-p]\" accesskey=\"p\">Printable version</a></li>				<li id=\"t-permalink\"><a href=\"/CompCogNeuro/index.php?title=CECN1_Act_Priming&amp;oldid=396\" title=\"Permanent link to this revision of the page\">Permanent link</a></li><li id=\"t-download-as-pdf\"><a href=\"/CompCogNeuro/index.php?title=Special:Book/render_article/&amp;arttitle=CECN1+Act+Priming&amp;oldid=396&amp;writer=rl\" rel=\"nofollow\">PDF version</a></li>			</ul>
		</div>
	</div>
	<div class=\"generated-sidebar portlet\" id=\"p-coll-create_a_book\">
		<h5 lang=\"en\" xml:lang=\"en\">Create a book</h5>
		<div class=\"pBody\">
<ul id=\"collectionPortletList\"><li id=\"coll-add_page\"><a href=\"/CompCogNeuro/index.php?title=Special:Book/add_article/&amp;arttitle=CECN1+Act+Priming&amp;oldid=0\" title=\"Add the current wiki page to your book\" onclick=\"collectionCall('AddArticle', ['removepage', wgNamespaceNumber, wgTitle, 0]); return false;\" rel=\"nofollow\">Add page to book</a></li><li id=\"coll-help_collections\"><a href=\"/CompCogNeuro/index.php/Help:Books\" title=\"Show help about the book tool\">Books help</a></li></ul><script type=\"text/javascript\">/*<![CDATA[*/
		var wgCollectionAddRemoveSate = \"addpage\";
		/*]]>*/</script>
<script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/portlet.js?2\"></script><script type=\"text/javascript\">/*<![CDATA[*/
		var wgCollectionNavPopupJSURL = \"/CompCogNeuro/extensions/Collection/collection/Gadget-popups.js?2\";
		var wgCollectionNavPopupCSSURL = \"/CompCogNeuro/extensions/Collection/collection/Gadget-navpop.css?2\";
		var wgCollectionAddPageText = \"Add linked wiki page to your book\";
		var wgCollectionAddCategoryText = \"Add wiki pages in linked category to your book\";
		var wgCollectionRemovePageText = \"Remove linked wiki page from your book\";
		var wgCollectionPopupHelpText = \"To deactivate this feature click \\\"Clear book\\\" in the \\\"Create a book\\\" box\";
		var wgCollectionArticleNamespaces = [0, 1, 2, 3, 4, 5, 8, 9, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111];
		/*]]>*/</script>
<script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/json2.js?2\"></script><script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/popupcheck.js?2\"></script><script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/popup.js\"></script><script type=\"text/javascript\" src=\"/CompCogNeuro/extensions/Collection/collection/Gadget-popups.js?2\"></script>		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class=\"visualClear\"></div>
			<div id=\"footer\">
				<div id=\"f-poweredbyico\"><a href=\"http://www.mediawiki.org/\"><img src=\"/CompCogNeuro/skins/common/images/poweredby_mediawiki_88x31.png\" alt=\"Powered by MediaWiki\"></a></div>
			<ul id=\"f-list\">
					<li id=\"lastmod\"> This page was last modified on 7 January 2009, at 09:06.</li>
					<li id=\"viewcount\">This page has been accessed 685 times.</li>
					<li id=\"privacy\"><a href=\"/CompCogNeuro/index.php/Project:Privacy_policy\" title=\"Project:Privacy policy\">Privacy policy</a></li>
					<li id=\"about\"><a href=\"/CompCogNeuro/index.php/Project:About\" title=\"Project:About\">About Computational Cognitive Neuroscience Wiki</a></li>
					<li id=\"disclaimer\"><a href=\"/CompCogNeuro/index.php/Project:General_disclaimer\" title=\"Project:General disclaimer\">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type=\"text/javascript\">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served in 0.165 secs. -->
</body></html>";
  };
 };
 wizards {
  name=;
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="LeabraWizard_1";
   auto_open=0;
   n_layers=3;
   layer_cfg {
    name=;
    el_typ=LayerWizEl;
    el_def=0;
    LayerWizEl @[0] {
     name="Input";
     n_units=25;
     io_type=INPUT;
    };
    LayerWizEl @[1] {
     name="Hidden";
     n_units=25;
     io_type=HIDDEN;
    };
    LayerWizEl @[2] {
     name="Output";
     n_units=25;
     io_type=OUTPUT;
    };
   };
   connectivity=BIDIRECTIONAL;
   default_net_type=LeabraNetwork;
  };
 };
 edits {
  name=;
  el_typ=SelectEdit;
  el_def=0;
  SelectEdit @[0] {
   name="ControlPanel";
   auto_edit=1;
   desc="control panel for the Weight Priming Project";
   mbrs {
    name=;
    el_typ=EditMbrItem;
    el_def=0;
    EditMbrItem @[0] {
     label="decay";
     desc=" decay of activity state vars between events, -/+ phase, and 2nd set of phases (if appl)<br>  event: [Default: 1]  proportion decay of state vars between events<br>  phase:  [1 for Leabra_CHL, 0 for CtLeabra_X/CAL] proportion decay of state vars between minus and plus phases <br>  phase2: [Default: 0]  proportion decay of state vars between 2nd set of phases (if appl, 0 std)<br>  clamp phase2: [Default: false]  if true, hard-clamp second plus phase activations to prev plus phase (only special layers will then update -- optimizes speed)";
     cust_desc=0;
     base=.projects[0].networks[0].specs[2]$$;
     mbr=LeabraLayerSpec::decay;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[1] {
     label="Train cycle updt_net_view";
     desc=" boolean value";
     cust_desc=0;
     base=.projects[0].programs.gp[0][5].vars[0]$$;
     mbr=ProgVar::bool_val;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem @[2] {
     label="Test cycle updt_net_view";
     desc=" boolean value";
     cust_desc=0;
     base=.projects[0].programs.gp[1][3].vars[0]$$;
     mbr=ProgVar::bool_val;
     is_numeric=0;
     param_search {
      search=0;
      min_val=0;
      max_val=1;
      next_val=0;
      incr=0.1000000014901161;
     };
    };
    EditMbrItem_Group @.gp[0] {
     name="Net Data";
     el_typ=EditMbrItem;
     el_def=0;
     EditMbrItem @[0] {
      label="ActPrimeNetwork trial";
      desc=" trial counter: number of external input patterns that have been presented in the current epoch (updated by program)";
      cust_desc=0;
      base=.projects[0].networks[0]$$;
      mbr=Network::trial;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[1] {
      label="ActPrimeNetwork trial name";
      desc=" name associated with the current trial (e.g., name of input pattern, typically set by a LayerWriter)";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=Network::trial_name;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[2] {
      label="ActPrimeNetwork minus cycles";
      desc=" cycles to settle in the minus phase -- this is the typical settling time statistic to record";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=LeabraNetwork::minus_cycles;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[3] {
      label="ActPrimeNetwork sse";
      desc=" sum squared error over the network, for the current external input pattern";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=Network::sse;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
     EditMbrItem @[4] {
      label="ActPrimeNetwork epoch";
      desc=" epoch counter: number of times a complete set of training patterns has been presented (updated by program)";
      cust_desc=0;
      base=$.projects[0].networks[0]$;
      mbr=Network::epoch;
      is_numeric=0;
      param_search {
       search=0;
       min_val=0;
       max_val=1;
       next_val=0;
       incr=0.1000000014901161;
      };
     };
    };
   };
   mths {
    name=;
    el_typ=EditMthItem;
    el_def=0;
    group_type=GT_BUTTONS;
    EditMthItem @[0] {
     label="Train: Init";
     desc=" set the program state back to the beginning";
     cust_desc=0;
     base=.projects[0].programs.gp[0][1]$$;
     mth=Program::Init;
    };
    EditMthItem @[1] {
     label="Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects[0].programs.gp[0][1]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[2] {
     label="Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects[0].programs.gp[0][1]$;
     mth=Program::Step_Gui;
    };
    EditMthItem @[3] {
     label="Stop";
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.projects[0].programs.gp[0][1]$;
     mth=Program::Stop;
    };
    EditMthItem @[4] {
     label="LoadWeights";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=.projects[0].programs[1]$$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[5] {
     label="Test: Init";
     desc=" set the program state back to the beginning";
     cust_desc=0;
     base=.projects[0].programs.gp[1][0]$$;
     mth=Program::Init;
    };
    EditMthItem @[6] {
     label="Run";
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.projects[0].programs.gp[1][0]$;
     mth=Program::Run_Gui;
    };
    EditMthItem @[7] {
     label="Step";
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.projects[0].programs.gp[1][0]$;
     mth=Program::Step_Gui;
    };
   };
  };
 };
 data {
  name=;
  el_typ=DataTable;
  el_def=0;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="TwoOut_TrainAll";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [26] "0_a";"1_a";"2_a";"3_a";"4_a";"5_a";"6_a";"7_a";"8_a";"9_a";
"10_a";"11_a";"12_a";"0_b";"1_b";"2_b";"3_b";"4_b";"5_b";"6_b";
"7_b";"8_b";"9_b";"10_b";"11_b";"12_b";      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [5 5 26] 0;1;0;0;0;0;0;0;0;1;
0;0;1;1;1;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;1;1;0;0;1;
1;0;1;0;0;0;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
1;1;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;1;0;1;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;0;0;0;1;
0;1;0;0;0;1;0;0;0;0;
0;1;0;0;0;0;0;1;0;0;
0;0;0;1;1;0;0;1;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;1;
0;0;0;0;0;0;0;1;1;1;
0;0;0;0;1;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;0;1;1;1;0;1;0;0;0;
0;0;0;1;0;1;0;0;0;0;
0;0;1;0;0;1;1;0;1;0;
0;0;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;1;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;0;1;0;0;1;0;0;1;0;
1;0;0;1;0;0;0;0;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;1;1;1;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
1;1;0;0;1;1;0;1;0;0;
0;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;1;0;0;0;0;
0;0;0;1;0;1;1;0;0;0;
1;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;1;1;0;1;
1;0;0;0;0;0;1;1;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;1;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;1;1;
0;0;1;0;0;0;1;0;0;1;
1;0;0;0;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;1;
1;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;1;0;1;1;1;
0;1;0;0;0;0;0;0;1;0;
1;0;0;0;0;0;0;1;0;0;
1;1;0;1;0;0;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;1;0;0;0;0;0;1;1;0;
0;0;0;1;0;0;0;1;0;0;
1;0;0;1;0;1;0;0;1;0;
0;0;0;0;0;0;1;0;0;0;
      };
     };
     float_Data @[2] {
      name="Output";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [5 5 26] 1;1;0;1;0;0;1;0;0;0;
1;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;1;0;0;
1;1;0;0;1;1;0;1;0;0;
0;0;0;0;0;0;1;0;0;1;
1;0;0;0;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;1;
0;1;0;0;0;0;1;0;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;0;0;1;1;1;
0;1;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;1;0;0;0;1;
0;0;1;1;1;0;1;0;0;0;
0;0;0;0;1;0;0;1;1;1;
0;1;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;1;1;0;1;0;0;
0;0;0;0;0;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;1;
1;0;1;0;0;0;0;0;0;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;0;1;1;1;0;1;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;0;0;0;1;
0;1;0;0;0;0;0;0;1;0;
1;0;0;0;0;0;0;1;0;0;
1;1;0;1;0;0;0;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;0;0;1;
0;1;1;0;0;0;0;1;0;0;
0;1;0;0;0;0;0;0;1;0;
0;0;0;1;1;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;1;0;
0;0;0;0;0;1;1;1;0;1;
0;0;0;1;1;0;0;0;0;0;
0;1;0;1;1;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
0;0;1;0;1;0;0;0;0;1;
0;0;0;0;0;1;0;0;0;0;
0;1;0;1;0;0;0;0;1;0;
1;1;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;1;0;
0;0;0;0;1;1;0;0;0;0;
0;1;0;0;0;0;0;1;1;0;
0;0;0;1;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;1;0;1;1;0;0;0;0;
0;1;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
1;0;0;1;0;1;0;0;1;0;
0;0;0;0;0;0;1;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="TwoOut_Alternating";
    desc="presents 'a' and 'b' responses alternately; 0_a, 0_b, 1_a, 1_b, etc.";
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [26] "0_a";"0_b";"1_a";"1_b";"2_a";"2_b";"3_a";"3_b";"4_a";"4_b";
"5_a";"5_b";"6_a";"6_b";"7_a";"7_b";"8_a";"8_b";"9_a";"9_b";
"10_a";"10_b";"11_a";"11_b";"12_a";"12_b";      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [5 5 26] 0;1;0;0;0;0;0;0;0;1;
0;0;1;1;1;0;1;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;1;1;1;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
1;1;0;0;1;1;0;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;1;1;0;0;1;
1;0;1;0;0;0;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
1;1;0;0;0;0;0;0;1;1;
0;0;0;0;0;1;0;0;0;0;
0;0;0;1;0;1;1;0;0;0;
1;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;1;1;0;1;
1;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;1;0;1;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;0;0;0;1;
0;1;0;0;0;0;1;1;0;0;
0;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;1;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;1;1;
0;0;1;0;0;1;0;0;0;0;
0;1;0;0;0;0;0;1;0;0;
0;0;0;1;1;0;0;1;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;0;0;0;1;0;0;1;
0;0;0;0;1;0;1;0;0;1;
1;0;0;0;0;0;0;0;0;0;
0;1;0;0;1;0;0;0;0;1;
1;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;1;1;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;1;
0;0;0;0;0;0;0;1;1;1;
0;0;0;0;1;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;1;0;1;1;1;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;0;1;1;1;0;1;0;0;0;
0;0;0;1;0;1;0;0;0;0;
0;0;1;0;0;1;1;0;1;0;
0;0;0;0;0;0;0;0;1;0;
1;0;0;0;0;0;0;1;0;0;
1;1;0;1;0;0;0;0;0;0;
0;0;0;0;1;1;0;0;0;0;
0;1;0;0;0;0;0;1;1;0;
0;0;0;1;0;0;0;0;0;1;
1;0;0;0;0;0;1;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;0;1;0;0;1;0;0;1;0;
1;0;0;1;0;0;0;0;0;0;
0;1;0;0;0;0;0;1;0;0;
1;0;0;1;0;1;0;0;1;0;
0;0;0;0;0;0;1;0;0;0;
      };
     };
     float_Data @[2] {
      name="Output";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [5 5 26] 1;1;0;1;0;0;1;0;0;0;
1;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;0;0;0;0;0;0;1;0;0;
1;1;0;1;0;0;0;0;0;0;
0;0;0;0;0;1;1;1;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;1;0;0;1;0;0;0;0;
0;1;0;0;0;0;0;1;0;0;
0;0;0;1;1;0;0;1;0;0;
0;0;0;0;0;0;0;1;0;0;
1;1;0;0;1;1;0;1;0;0;
0;0;0;0;0;0;0;0;0;1;
0;1;1;0;0;0;0;1;0;0;
0;1;0;0;0;0;0;0;1;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;0;0;0;1;0;0;1;
0;0;0;0;1;0;0;0;1;1;
0;0;0;0;0;1;0;0;0;0;
0;0;0;1;0;1;1;0;0;0;
0;1;0;0;0;0;1;0;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;0;0;0;0;0;1;0;1;0;
0;0;0;0;0;1;1;1;0;1;
0;0;1;1;1;0;1;0;0;0;
0;0;0;0;0;0;0;1;0;0;
0;0;0;0;1;0;0;0;1;1;
0;0;0;0;0;0;1;0;1;1;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;1;0;0;0;1;
0;0;1;1;1;0;0;0;0;0;
0;0;1;1;1;0;0;0;0;1;
0;0;0;0;0;1;1;0;0;0;
0;1;0;0;0;0;0;0;0;1;
0;0;1;1;1;0;1;0;0;0;
0;0;0;0;0;0;0;1;0;1;
0;0;0;0;1;0;0;0;0;0;
1;0;0;0;0;0;1;0;1;0;
1;0;0;0;0;0;0;1;1;0;
0;0;0;0;0;0;0;1;1;0;
0;0;0;0;1;0;0;0;1;0;
1;1;0;0;0;0;0;0;1;0;
0;0;0;0;0;1;0;0;1;0;
1;0;1;0;0;0;0;0;0;0;
0;0;0;0;1;0;1;0;0;0;
0;1;0;0;1;0;0;0;0;1;
1;0;0;0;0;0;1;0;0;0;
0;0;1;1;0;0;0;0;1;0;
1;0;1;0;0;0;0;0;0;1;
1;1;1;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;1;0;1;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;1;0;1;1;1;
0;1;0;0;0;0;1;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;1;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;0;0;0;1;
0;1;0;0;0;0;0;1;0;0;
1;0;0;1;0;1;0;0;1;0;
0;0;0;0;0;0;1;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[2] {
    name="EventSample";
    desc="displays 1st three 'a' and 1st 3 'b' events for illustration";
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [6] "0_a";"1_a";"2_a";"0_b";"1_b";"2_b";      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [5 5 6] 0;1;0;0;0;0;0;0;0;1;
0;0;1;1;1;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;1;1;0;0;1;
1;0;1;0;0;0;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
1;1;0;0;0;0;1;0;0;0;
0;0;0;0;1;0;0;1;1;1;
0;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;1;0;0;
1;1;0;0;1;1;0;1;0;0;
0;0;0;0;0;0;0;0;1;1;
0;0;0;0;0;1;0;0;0;0;
0;0;0;1;0;1;1;0;0;0;
      };
     };
     float_Data @[2] {
      name="Output";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [5 5 6] 1;1;0;1;0;0;1;0;0;0;
1;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;1;1;1;0;0;0;0;0;0;
1;0;0;0;0;0;0;1;0;0;
0;0;0;0;0;0;0;1;0;0;
1;1;0;0;1;1;0;1;0;0;
0;0;0;0;0;0;0;0;1;0;
1;0;0;0;0;0;0;1;0;0;
1;1;0;1;0;0;0;0;0;0;
1;0;0;0;0;0;1;0;0;0;
0;0;1;0;0;0;0;0;1;1;
0;0;1;0;0;0;0;0;0;1;
0;1;1;0;0;0;0;1;0;0;
0;1;0;0;0;0;0;0;1;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[3] {
    name="RndPats";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [26] "Event_0";"Event_1";"Event_2";"Event_3";"Event_4";"Event_5";"Event_6";"Event_7";"Event_8";"Event_9";
"Event_10";"Event_11";"Event_12";"Event_13";"Event_14";"Event_15";"Event_16";"Event_17";"Event_18";"Event_19";
"Event_20";"Event_21";"Event_22";"Event_23";"Event_24";"Event_25";      };
     };
     float_Data @[1] {
      name="LeabraLayer_0";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [5 5 26] 0;1;0;0;0;0;0;0;0;1;
0;0;1;1;1;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;1;0;0;1;1;0;0;1;
1;0;1;0;0;0;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
1;0;0;0;0;0;0;0;1;0;
1;1;0;0;0;1;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;1;1;0;1;1;0;0;0;0;
0;1;1;0;0;0;1;0;0;0;
0;1;0;0;0;0;0;0;0;1;
0;1;0;0;0;1;0;0;0;0;
0;1;0;0;0;0;0;1;0;0;
0;0;0;1;1;0;0;1;0;0;
0;1;0;0;1;1;0;0;0;0;
0;0;0;0;0;0;1;0;0;1;
0;0;0;0;1;1;0;0;0;0;
0;0;1;1;0;0;0;0;0;0;
0;0;1;1;0;0;0;0;0;1;
0;0;0;0;0;0;0;1;1;1;
0;0;0;0;1;0;0;0;0;0;
1;1;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;1;0;
1;0;1;1;1;0;1;0;0;0;
0;0;0;1;0;1;0;0;0;0;
0;0;1;0;0;1;1;0;1;0;
0;0;0;0;0;0;0;0;0;1;
1;0;0;0;0;0;1;0;0;0;
0;0;1;1;0;0;0;0;1;0;
0;0;1;0;0;1;0;0;1;0;
1;0;0;1;0;0;0;0;0;0;
0;1;0;0;0;0;0;1;1;1;
0;1;0;0;0;0;0;0;0;0;
0;0;1;0;0;0;0;0;0;1;
0;0;0;1;0;1;1;0;0;0;
0;0;0;1;0;0;0;0;0;0;
1;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
1;0;0;0;1;0;0;1;1;1;
0;0;0;0;0;1;1;1;1;0;
0;0;0;0;0;1;0;0;0;0;
0;0;1;0;0;0;0;1;0;1;
0;0;0;0;1;0;0;0;0;0;
1;0;0;0;0;0;1;0;1;0;
0;0;0;0;1;0;1;1;0;0;
0;0;1;0;0;0;1;0;0;0;
0;0;0;1;0;1;0;1;0;0;
0;0;0;0;1;1;1;1;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;0;0;0;0;0;
0;1;0;1;1;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;1;0;1;0;
0;0;0;0;0;1;1;1;0;1;
0;1;0;0;0;0;1;0;1;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;1;1;0;1;0;0;
0;0;0;0;0;0;0;0;0;1;
0;1;0;0;0;0;1;0;0;1;
1;1;0;1;0;0;1;0;0;0;
1;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;1;1;0;0;
0;0;1;0;0;0;0;1;0;0;
0;0;1;0;0;0;0;1;0;0;
      };
     };
     float_Data @[2] {
      name="LeabraLayer_2";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [5 5 26] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   DataTable @[0] {
    name="TrialOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[3] {
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[4] {
      name="group_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="phase_no";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      name="minus_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[8] {
      name="ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[9] {
      name="Output_act_m";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [5 5 0]       };
     };
     float_Data @[10] {
      name="min_dist";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[11] {
      name="closest_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[12] {
      name="name_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[13] {
      name="both_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[1] {
    name="EpochOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[2] {
      name="avg_sse";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[3] {
      name="cnt_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[4] {
      name="avg_ext_rew";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[5] {
      name="avg_cycles";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      name="epoch_time_tot";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      name="epoch_time_usr";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[8] {
      name="sum_min_dist";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[9] {
      name="sum_name_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[10] {
      name="sum_both_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[2] {
    name="TrialTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[3] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[4] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="min_dist";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     String_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="closest_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[6] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="name_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[7] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="both_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[8] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="Output_act_m";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [5 5 0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[3] {
    name="AllTrialTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [234] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;      };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [234] 50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;50;50;50;50;50;50;
50;50;50;50;      };
     };
     int_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="trial";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [234] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;0;1;2;3;
4;5;6;7;8;9;10;11;12;13;
14;15;16;17;18;19;20;21;22;23;
24;25;0;1;2;3;4;5;6;7;
8;9;10;11;12;13;14;15;16;17;
18;19;20;21;22;23;24;25;0;1;
2;3;4;5;6;7;8;9;10;11;
12;13;14;15;16;17;18;19;20;21;
22;23;24;25;0;1;2;3;4;5;
6;7;8;9;10;11;12;13;14;15;
16;17;18;19;20;21;22;23;24;25;
0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;0;1;2;3;
4;5;6;7;8;9;10;11;12;13;
14;15;16;17;18;19;20;21;22;23;
24;25;0;1;2;3;4;5;6;7;
8;9;10;11;12;13;14;15;16;17;
18;19;20;21;22;23;24;25;0;1;
2;3;4;5;6;7;8;9;10;11;
12;13;14;15;16;17;18;19;20;21;
22;23;24;25;      };
     };
     String_Data @[3] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="trial_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [234] "0_a";"0_b";"1_a";"1_b";"2_a";"2_b";"3_a";"3_b";"4_a";"4_b";
"5_a";"5_b";"6_a";"6_b";"7_a";"7_b";"8_a";"8_b";"9_a";"9_b";
"10_a";"10_b";"11_a";"11_b";"12_a";"12_b";"0_a";"0_b";"1_a";"1_b";
"2_a";"2_b";"3_a";"3_b";"4_a";"4_b";"5_a";"5_b";"6_a";"6_b";
"7_a";"7_b";"8_a";"8_b";"9_a";"9_b";"10_a";"10_b";"11_a";"11_b";
"12_a";"12_b";"0_a";"0_b";"1_a";"1_b";"2_a";"2_b";"3_a";"3_b";
"4_a";"4_b";"5_a";"5_b";"6_a";"6_b";"7_a";"7_b";"8_a";"8_b";
"9_a";"9_b";"10_a";"10_b";"11_a";"11_b";"12_a";"12_b";"0_a";"0_b";
"1_a";"1_b";"2_a";"2_b";"3_a";"3_b";"4_a";"4_b";"5_a";"5_b";
"6_a";"6_b";"7_a";"7_b";"8_a";"8_b";"9_a";"9_b";"10_a";"10_b";
"11_a";"11_b";"12_a";"12_b";"0_a";"0_b";"1_a";"1_b";"2_a";"2_b";
"3_a";"3_b";"4_a";"4_b";"5_a";"5_b";"6_a";"6_b";"7_a";"7_b";
"8_a";"8_b";"9_a";"9_b";"10_a";"10_b";"11_a";"11_b";"12_a";"12_b";
"0_a";"0_b";"1_a";"1_b";"2_a";"2_b";"3_a";"3_b";"4_a";"4_b";
"5_a";"5_b";"6_a";"6_b";"7_a";"7_b";"8_a";"8_b";"9_a";"9_b";
"10_a";"10_b";"11_a";"11_b";"12_a";"12_b";"0_a";"0_b";"1_a";"1_b";
"2_a";"2_b";"3_a";"3_b";"4_a";"4_b";"5_a";"5_b";"6_a";"6_b";
"7_a";"7_b";"8_a";"8_b";"9_a";"9_b";"10_a";"10_b";"11_a";"11_b";
"12_a";"12_b";"0_a";"0_b";"1_a";"1_b";"2_a";"2_b";"3_a";"3_b";
"4_a";"4_b";"5_a";"5_b";"6_a";"6_b";"7_a";"7_b";"8_a";"8_b";
"9_a";"9_b";"10_a";"10_b";"11_a";"11_b";"12_a";"12_b";"0_a";"0_b";
"1_a";"1_b";"2_a";"2_b";"3_a";"3_b";"4_a";"4_b";"5_a";"5_b";
"6_a";"6_b";"7_a";"7_b";"8_a";"8_b";"9_a";"9_b";"10_a";"10_b";
"11_a";"11_b";"12_a";"12_b";      };
     };
     float_Data @[4] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="min_dist";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [234] 0;0;0;0;0;0;0;1.6938633;0;0.78890103;
0;0;0;0.3332479;0;0;0;1.6122456;0;2.8980503;
0;0;0;0.47477943;0;0.48796025;0;0;0;0;
0;0;0;0;0;0;0;0.50414926;0;0;
0;0;0;1.7778493;0;0;0;0;0;0.53173482;
0;1.0545831;0;0;0;0;0;0;0;0;
0;0;0;0.30101416;0;0;0;0;0;0;
0;0;0;0.34087363;0;0.45907766;0;0.52736884;0;0;
0;0;0;0;0;1.6657625;0;1.2616113;0;0.31389347;
0;0;0;0.68440706;0;1.7673154;0;3.1041956;0;0;
0;0;0;0.60028076;0;0.29423502;0;0;0;0;
0;2.5558352;0;0;0;0.56743157;0;0;0;0.39953074;
0;1.5970042;0;3.8679492;0;0;0;0.26307184;0;0;
0;0;0;0;0;0;0;2.9391379;0;1.9126835;
0;0.39532906;0;0;0;0.81233513;0;1.8109376;0;3.0041642;
0;1.091676;0;0.63069665;0;0.59579933;0;0;0;0;
0;0;0;0;0;0;0;0.30306163;0;1.9703362;
0;0;0;2.5007677;0;0;0;0.64097226;0;0.7702077;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.28654197;0;0;0;0;0;1.9289147;
0;0;0;0;0;1.2140129;0;0.64398807;0;0;
0;0;0;0;0;2.6756196;0;0;0;0.56207836;
0;0.33642784;0;0.71532601;0;4.7472448;0;3.4075963;0;0.59524453;
0;0.70288396;0;0;      };
     };
     String_Data @[5] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="closest_name";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [234] "0_a";"0_a";"1_a";"1_b";"2_a";"2_a";"3_a";"3_a";"4_a";"4_b";
"5_a";"5_b";"6_a";"6_a";"7_a";"7_a";"8_a";"8_a";"9_a";"9_a";
"10_a";"10_b";"11_a";"11_a";"12_a";"12_a";"0_a";"0_a";"1_a";"1_b";
"2_a";"2_a";"3_a";"3_b";"4_a";"4_b";"5_a";"5_b";"6_a";"6_b";
"7_a";"7_b";"8_a";"8_a";"9_a";"9_b";"10_a";"10_b";"11_a";"11_a";
"12_a";"12_a";"0_a";"0_a";"1_a";"1_b";"2_a";"2_a";"3_a";"3_b";
"4_a";"4_b";"5_a";"5_b";"6_a";"6_b";"7_a";"7_b";"8_a";"1_b";
"9_a";"9_b";"10_a";"10_b";"11_a";"11_a";"12_a";"12_a";"0_a";"0_a";
"1_a";"1_b";"2_a";"2_a";"3_a";"3_a";"4_a";"4_b";"5_a";"5_b";
"6_a";"6_a";"7_a";"7_a";"8_a";"8_a";"9_a";"9_a";"10_a";"10_b";
"11_a";"11_a";"12_a";"12_a";"0_a";"0_a";"1_a";"1_b";"2_a";"2_a";
"3_a";"3_a";"4_a";"4_b";"5_a";"5_b";"6_a";"6_a";"7_a";"7_a";
"8_a";"8_a";"9_a";"12_a";"10_a";"10_b";"11_a";"11_a";"12_a";"12_b";
"0_a";"0_a";"1_a";"1_b";"2_a";"2_a";"3_a";"3_a";"4_a";"4_b";
"5_a";"5_b";"6_a";"6_a";"7_a";"7_a";"8_a";"8_a";"9_a";"12_a";
"10_a";"10_a";"11_a";"11_a";"12_a";"12_a";"0_a";"0_a";"1_a";"1_b";
"2_a";"2_a";"3_a";"3_b";"4_a";"4_b";"5_a";"5_b";"6_a";"6_b";
"7_a";"7_b";"8_a";"8_a";"9_a";"9_b";"10_a";"10_b";"11_a";"11_a";
"12_a";"12_b";"0_a";"0_a";"1_a";"1_b";"2_a";"2_a";"3_a";"3_b";
"4_a";"4_b";"5_a";"5_b";"6_a";"6_b";"7_a";"7_b";"8_a";"8_a";
"9_a";"9_b";"10_a";"10_b";"11_a";"11_a";"12_a";"12_a";"0_a";"0_a";
"1_a";"1_b";"2_a";"2_a";"3_a";"3_a";"4_a";"4_b";"5_a";"5_b";
"6_a";"6_a";"7_a";"7_a";"8_a";"8_a";"9_a";"9_a";"10_a";"10_b";
"11_a";"11_a";"12_a";"12_b";      };
     };
     float_Data @[6] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="name_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [234] 0;1;0;0;0;1;0;1;0;0;
0;0;0;1;0;1;0;1;0;1;
0;0;0;1;0;1;0;1;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;1;
0;1;0;1;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;0;1;0;1;
0;0;0;1;0;1;0;0;0;0;
0;1;0;1;0;1;0;1;0;0;
0;1;0;1;0;1;0;0;0;1;
0;1;0;0;0;0;0;1;0;1;
0;1;0;1;0;0;0;1;0;0;
0;1;0;0;0;1;0;1;0;0;
0;0;0;1;0;1;0;1;0;1;
0;1;0;1;0;1;0;1;0;0;
0;1;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;1;
0;0;0;1;0;0;0;1;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;1;0;1;0;1;
0;0;0;1;0;1;0;0;0;0;
0;1;0;1;0;1;0;1;0;0;
0;1;0;0;      };
     };
     float_Data @[7] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="both_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [234] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;1;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;      };
     };
     float_Data @[8] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="Output_act_m";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=1;
      cell_geom{ 5;5;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [2] ;;      };
      ar {
       name=;
	    [5 5 234] 0.94999999;0.94999999;0;0.94999999;0;0;0.94999999;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0;0.94670713;0.88560522;0;0.95602435;0;
8.4089039e-18;0.91199636;0;0;3.1459642e-08;0.83092004;0;0.078995787;0;7.058539e-18;
0.94989246;0.20960988;1.9253887e-11;2.103841e-05;0.076379724;1.3037059e-07;0;0.20618691;3.1283563e-11;0.0080268122;
0;0;0;0;0;0.94999999;0.94999999;0.94999999;0.94999999;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0.94999999;0;0;0.91531521;0.00084222929;0;0.006860957;0;
0.00037033117;0.94936162;4.3896529e-07;1.2822768e-05;2.9173294e-17;3.1492186e-07;5.6822423e-14;0.68630987;3.1257256e-05;0;
0.081192277;2.5985201e-09;0.0027505744;0.82546151;0.9119609;0.00049325358;3.2647533e-18;0.93894565;6.7388478e-06;0.0028270348;
0;0;0;0;0;0;0;0.94999999;0;0;
0.94999999;0.94999999;0;0;0.94999999;0.94999999;0;0.94999999;0;0;
0;0;0;0;0;0.00014646133;4.0034308e-07;5.4231197e-08;0.012546709;0.015617577;
0;7.5317603e-06;0.95943415;0;1.6610691e-06;0.85779321;0.85042459;0.064890072;1.6000315e-05;0.92988443;
0.84617883;0.0057848133;0.9085775;3.7349696e-07;9.0566236e-06;1.1647499e-09;2.5245883e-13;3.1362781e-08;0.00025815208;0;
0;0.94999999;0;0;0.94999999;0.94999999;0;0;0;0;
0;0;0;0;0;0;0.94999999;0;0;0.94999999;
0;0;0;0;0.94999999;5.819702e-05;0.86287421;0;0.87172955;0.94731951;
0.79366684;0.018827217;5.7518593e-17;0.0026550703;0;7.9595782e-05;4.6308278e-06;1.0035319e-09;7.0720954e-09;4.4454094e-07;
0.00043239328;0.8600018;0.0015557581;0.81813145;0.55351126;0.011063181;0.023752773;1.669869e-08;0.0063052508;0.48559564;
0;0.94999999;0;0;0;0;0.94999999;0;0.94999999;0.94999999;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0.94999999;9.2519504e-06;0.0073357373;5.3460188e-13;0.1192791;6.4532317e-16;
9.7217637e-08;0.71318513;8.1374739e-05;0.52940345;7.7861121e-05;2.7429271e-08;0.86237597;0;0.85929066;5.3341402e-09;
3.9939207e-10;0;1.0633772e-10;1.6906732e-09;0.002617775;0.90520787;0.8655085;0.89285046;0.022275608;0.95202774;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0.94999999;5.742452e-18;2.3461682e-05;0.091065265;0.93781692;0.94834459;
0;0.029459771;9.6483913e-05;0;4.7748563e-07;1.9113246e-12;0.87519693;4.5403065e-12;0.81924891;0.86299282;
0;3.7971103e-07;0.4617376;3.9339554e-14;0.81720072;0.00094026577;0.0015675977;2.7020534e-16;0.0015931756;0.11599879;
0;0;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;4.244305e-12;0.0085809417;0;0.00061950565;0.014509166;
4.4777548e-10;1.0713588e-09;6.6939807e-05;2.1582856e-08;0.0016303903;0.87185448;1.0242955e-09;3.0550876e-08;1.5273945e-05;0.0054856064;
0.93093735;2.2248738e-05;6.9639342e-12;0.12593335;0.92357999;0.046343703;0.015276102;0.91363537;0.84993827;0.42272371;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;9.6438284e-15;0.91980255;0.051290579;1.1473857e-10;1.1928368e-07;
0.0078927912;0.00011514385;6.7210458e-06;0.27507028;0.95366305;3.7591896e-12;0;0.89249235;0.82361263;0.81303161;
0.028668948;0.90030164;5.8478445e-16;0;1.2074015e-05;1.235642e-08;0.0047027692;1.4489008e-14;0.0037439254;3.5471341e-14;
0.94999999;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0.94999999;0.85789919;0.00043957389;0;2.1842398e-08;0;
0.00060730288;0.83369142;0.89778823;0.76872861;0;0;6.8361143e-09;0.0063109579;0.0034261378;0;
5.3662444e-07;4.4562976e-09;0.93239838;0.92523605;0.19477879;0.57634819;0.00040454167;0.76487052;0.0020771655;0.83757794;
0.94999999;0;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0.94999999;0;0.94999999;0;0;0;
0;0.94999999;0;0;0.94999999;0.87812477;0.81995261;0.94581032;2.5603593e-05;0.8942343;
0.0025697693;0.00051293732;9.969564e-16;3.9363323e-07;0;0.00054255495;0.86412889;0;3.7539175e-07;0.72770828;
0;0.81036741;0.48196802;4.072836e-15;0.82422954;2.6609509e-08;0.8518002;0;3.161901e-09;0.86043066;
0.94999999;0;0.94999999;0;0;0;0;0;0;0.94999999;
0.94999999;0.94999999;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0;0.96315652;1.1467979e-05;7.8673929e-06;9.2386273e-08;0;
0;0;2.0661708e-05;1.1604685e-16;0.96711522;0.054646622;0.13461682;0.081406564;3.0130848e-06;0.011742285;
0;0.80665052;0.83400023;1.5036411e-10;0.50845051;0.85763747;0;0;5.222624e-12;3.1691811e-12;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0;0.94999999;0;0.94999999;0.94999999;0.94999999;
0;0.94999999;0;0;0;0;0.0097837923;2.5803499e-06;8.5615676e-15;0.0017713559;
9.2195606e-08;0;0.051139936;1.0605226e-10;0;0.00011109026;0.68904239;2.1040141e-06;0.87925583;5.5504261e-05;
0.81953567;0;0.95816237;0.92454261;0.90958411;0;0.87072372;0.1619623;0.044581562;1.6456975e-06;
0;0.94999999;0.94999999;0;0;0;0.94999999;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0.94999999;0;0;0;1.8874357e-15;0.87333912;0.95059675;0;0.00045181951;
0.15493254;0.71755552;0;0.25297365;0;0.070019059;0.68091279;6.7817399e-13;0.69854152;1.4860736e-11;
6.2851211e-16;8.2964743e-15;0.00011282785;1.4813439e-09;0.80800897;5.4461782e-07;0.95718992;5.4216725e-06;0.00010114469;1.587555e-07;
0.94999999;0.94999999;0;0.94999999;0;0;0.94999999;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0;0.94629532;0.89671069;0;0.9587819;0;
4.9450093e-15;0.91134793;0;0;6.4817118e-07;0.80913955;0;0.083548486;0;1.2629722e-18;
0.94909859;0.13343151;2.7244458e-11;2.0892785e-05;0.18192071;2.2040608e-08;0;0.19029211;1.0328258e-12;0.010962613;
0;0;0;0;0;0.94999999;0.94999999;0.94999999;0.94999999;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0.94999999;0;0;0.9129262;0.012789657;0;0.0056016082;0;
0.00069005176;0.94866049;3.4633517e-06;7.7601308e-06;4.692841e-16;5.5232618e-08;5.834271e-17;0.77128291;8.2064435e-05;0;
0.075371347;1.0875054e-07;0.0013090365;0.79629052;0.89780796;0.0010651699;0;0.94331169;2.3172143e-07;0.0025927105;
0;0;0;0;0;0;0;0.94999999;0;0;
0.94999999;0.94999999;0;0;0.94999999;0.94999999;0;0.94999999;0;0;
0;0;0;0;0;4.8504822e-05;1.9835626e-08;5.748596e-07;0.012493961;0.097008526;
0;8.3598991e-08;0.95903653;0;4.5936639e-07;0.86315447;0.83003336;0.023826601;2.098102e-06;0.9331857;
0.80692869;0.029662691;0.89717299;2.8958427e-06;7.5979668e-05;1.3068475e-08;4.1299955e-13;1.0463046e-07;0.00011314945;0;
0;0.94999999;0;0;0.94999999;0.94999999;0;0;0;0;
0;0;0;0;0;0;0.94999999;0;0;0.94999999;
0;0;0;0;0.94999999;0;7.1690584e-07;1.271397e-14;0.9075731;0.94832748;
0.00154615;2.1026003e-06;1.3249482e-08;1.3068159e-11;0;0.90278661;0.14359115;0;0.0030890533;1.6414563e-06;
0.0073984517;0.0014982838;2.0668449e-06;0.84757519;0.38794732;0.90959615;0.89908195;2.7123028e-09;0.015435545;0.0026048783;
0;0.94999999;0;0;0;0;0.94999999;0;0.94999999;0.94999999;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0.94999999;0.00021648349;0.023041198;2.2795733e-10;0.042455383;3.3626155e-12;
1.0358427e-07;0.3686977;1.2646335e-05;0.24028818;5.2473379e-06;2.4194236e-07;0.84529847;0;0.82818067;6.907343e-08;
1.8851313e-08;0;1.6038243e-08;1.187062e-08;0.15095317;0.89527547;0.8904357;0.88318491;0.0055752527;0.94793284;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0.94999999;6.6338082e-18;1.2141652e-06;0.11883169;0.93991345;0.95008236;
0;0.027078327;8.3581937e-05;0;2.7530132e-07;2.4025554e-12;0.8591606;4.8787836e-12;0.84028673;0.8442809;
0;9.6662205e-08;0.71003467;5.8158866e-15;0.82964468;0.0002126771;0.00045523504;9.8889111e-18;0.0034538957;0.24939649;
0;0;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;0.00040148792;9.3781064e-18;0;0;1.2509223e-10;
6.806916e-14;0;0.93500447;0.93689704;0.95581591;0;0;0;2.1041169e-06;0.91093796;
3.1812297e-10;0.0036049786;0.00024165219;0;8.6090542e-05;0.93524659;0.86333817;7.8998486e-10;2.9042244e-08;0.01103182;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;0;0.066998944;0.90928257;1.0837857e-10;0.93010765;
0.061077878;1.615101e-10;8.7947668e-14;4.1725584e-06;0.93100041;6.8980225e-05;3.0711106e-10;3.0561514e-06;0.037627947;0.0062701744;
0.79245198;0.00034902242;2.2228825e-18;1.8688384e-18;1.0414799e-07;3.5051517e-07;0.9210645;1.0264893e-17;0.92437351;3.0188123e-11;
0.94999999;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0.94999999;0.85023469;0.00058997993;0;8.7908077e-08;0;
3.2034681e-05;0.83736843;0.88484031;0.72130865;8.319326e-18;0;2.7207974e-09;0.0028559016;0.049907237;0;
2.75493e-05;1.7991565e-09;0.93528301;0.92452466;0.23069271;0.76303935;0.0041329558;0.70316029;0.0016121163;0.74944961;
0.94999999;0;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0.94999999;0;0.94999999;0;0;0;
0;0.94999999;0;0;0.94999999;3.7226096e-07;0.00068337109;0.038741197;2.5210097e-06;0.92060083;
0.90491247;2.9470411e-07;9.5039671e-11;0.0063899597;1.194643e-11;3.4202249e-11;0.82302713;1.2434687e-06;0.001689477;8.8244125e-16;
7.2207838e-18;0.00051285757;0.93842423;0.89883757;0.14099541;2.8757768e-10;0.14834225;0;0.83618677;0.00023589941;
0.94999999;0;0.94999999;0;0;0;0;0;0;0.94999999;
0.94999999;0.94999999;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0;0.96335262;0.00016805646;1.783141e-06;3.6504179e-07;0;
0;0;5.2375492e-07;1.191895e-16;0.96645904;0.088465437;0.081727006;0.066895805;2.2097122e-06;0.043317664;
0;0.87364888;0.79000753;2.4524759e-12;0.57121944;0.87093008;0;0;2.6761151e-11;1.2152807e-10;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0;0.94999999;0;0.94999999;0.94999999;0.94999999;
0;0.94999999;0;0;0;0;0.010867571;9.0148006e-08;6.1369938e-15;0.0084832571;
2.9031773e-08;0;0.091559149;3.1978073e-11;0;2.4423491e-05;0.7292015;1.3306724e-05;0.85156345;2.7606271e-05;
0.8358019;0;0.95868081;0.92942148;0.91086179;0;0.84487724;0.21992058;0.10676621;1.4250223e-05;
0;0.94999999;0.94999999;0;0;0;0.94999999;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0.94999999;0;0;0;1.0188521e-15;0.88889861;0.95208514;0;0.00016930446;
0.34658593;0.36880529;0;0.09405493;0;0.17684536;0.5357011;3.1834965e-13;0.81004709;2.2885007e-09;
1.1081143e-17;1.4639093e-13;0.00063905446;1.2659537e-07;0.80123776;2.1209029e-05;0.95871985;5.9380232e-06;0.00023452422;8.9868645e-06;
0.94999999;0.94999999;0;0.94999999;0;0;0.94999999;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0;0.94787031;0.89606035;2.0920204e-18;0.95567185;0;
7.3073135e-17;0.90642738;0;0;7.8417531e-07;0.81550688;0;0.17306608;0;0;
0.95056313;0.21721496;6.0477675e-13;8.0158334e-06;0.16020262;2.4499521e-08;0;0.25328305;8.020376e-12;0.017842021;
0;0;0;0;0;0.94999999;0.94999999;0.94999999;0.94999999;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0.94999999;0;0;0.92641324;0.0032310104;0;0.023662679;0;
0.0021531824;0.94642252;1.6712995e-06;3.2784978e-06;2.5233235e-14;2.5413947e-09;5.5721042e-15;0.72878283;4.9952314e-06;0;
0.087167606;6.2038001e-09;0.0030548;0.84215951;0.90445864;0.0030515995;0;0.93682414;1.2864472e-06;0.0088255731;
0;0;0;0;0;0;0;0.94999999;0;0;
0.94999999;0.94999999;0;0;0.94999999;0.94999999;0;0.94999999;0;0;
0;0;0;0;0;7.7249761e-06;5.2493636e-08;9.0541841e-09;0.023082908;0.0071981256;
0;1.936213e-06;0.95940119;8.884517e-18;5.2090252e-07;0.83388323;0.80705523;0.070571311;2.6291884e-05;0.91551262;
0.77811694;0.014621149;0.90889043;2.1030373e-06;2.2854642e-06;1.9762214e-09;6.3846259e-13;1.4134642e-07;1.2848637e-05;0;
0;0.94999999;0;0;0.94999999;0.94999999;0;0;0;0;
0;0;0;0;0;0;0.94999999;0;0;0.94999999;
0;0;0;0;0.94999999;0;2.0662537e-06;1.3684034e-14;0.91159904;0.9428131;
0.028310239;2.1268656e-06;2.8388902e-08;9.0069591e-11;0;0.88124818;0.30172527;0;0.023554649;9.0545925e-08;
0.026078951;0.01236708;2.5401183e-08;0.77287763;0.43077388;0.89721161;0.90489715;4.9520878e-08;0.034668006;0.01484223;
0;0.94999999;0;0;0;0;0.94999999;0;0.94999999;0.94999999;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0.94999999;1.0713704e-05;0.020796146;3.3056102e-09;0.03398959;2.8047634e-11;
3.3367186e-08;0.42619133;8.2021261e-06;0.16254915;1.0921238e-05;2.3045116e-06;0.88374823;0;0.85818261;2.1489363e-08;
5.8846625e-09;0;1.9354215e-10;7.5582295e-07;0.17864075;0.88756931;0.87189633;0.88252455;0.0033879236;0.94919401;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0.94999999;7.4538676e-18;2.383538e-06;0.010687222;0.94508892;0.948448;
0;0.012144316;0.00018831239;0;1.5488445e-07;2.9318784e-11;0.89050901;4.7876128e-14;0.83605599;0.83936244;
0;1.5088965e-06;0.54864758;1.1083732e-15;0.81417358;0.0013185285;0.00020555632;2.0983873e-15;0.00058969785;0.10987864;
0;0;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;1.2766379e-05;2.7078201e-17;0;0;2.5272575e-12;
2.6605788e-14;0;0.93374908;0.93749827;0.95559216;3.8445688e-18;0;0;2.8003484e-07;0.92146599;
7.1773256e-12;0.00876009;6.8195848e-05;0;0.00061366789;0.93188852;0.88123363;4.443257e-12;4.4625239e-07;0.0023109512;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;0;0.014218155;0.90354073;1.0572877e-12;0.93443799;
0.041617259;4.3932982e-11;3.440354e-13;3.7373063e-06;0.9321776;0.00028092024;3.0056232e-11;2.2970057e-06;0.014015217;0.00027360476;
0.82547843;0.00061252736;5.0275383e-14;0;2.3488619e-07;9.9152487e-08;0.91365385;0;0.91927046;2.3815734e-11;
0.94999999;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0.94999999;0.91067392;0.079462424;0;0.0069985688;1.8031789e-18;
2.4079054e-05;0.94462252;5.6059099e-07;1.7677743e-05;3.6630467e-16;6.4316941e-10;1.05573e-16;0.50700337;6.7341985e-05;0;
0.074278861;7.6491233e-08;0.051609993;0.89673126;0.9130609;0.036198977;6.8962923e-13;0.9354822;2.2292736e-06;0.039251186;
0.94999999;0;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0.94999999;0;0.94999999;0;0;0;
0;0.94999999;0;0;0.94999999;9.4490215e-06;0.0020684199;0.040479183;5.8108043e-07;0.91545475;
0.8905403;6.7635966e-08;2.0657274e-13;0.0037452246;2.1104739e-11;1.7501622e-11;0.84258473;1.3525666e-07;0.041167326;3.3861396e-14;
5.8597557e-18;0.00043265696;0.93989205;0.89169478;0.10622516;7.9950692e-11;0.28588068;0;0.86242366;0.00018020763;
0.94999999;0;0.94999999;0;0;0;0;0;0;0.94999999;
0.94999999;0.94999999;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0;0.96290046;2.2636774e-05;2.6341299e-05;1.1863269e-06;0;
0;0;7.5633184e-06;7.7185606e-17;0.96658355;0.1048635;0.13214922;0.03839964;2.9828311e-07;0.014322809;
0;0.84704447;0.81735039;4.4610049e-12;0.4161562;0.86651015;0;0;2.3705157e-12;2.4840588e-10;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0;0.94999999;0;0.94999999;0.94999999;0.94999999;
0;0.94999999;0;0;0;0;0.0040927492;8.1581227e-08;3.9763548e-12;0.0033117803;
4.4746122e-07;0;0.13052815;3.8315115e-12;0;2.3921806e-05;0.6775527;4.7233145e-05;0.82626516;6.3354232e-06;
0.82734746;0;0.96014881;0.92632014;0.898597;0;0.85619438;0.35818973;0.083593048;1.9325813e-05;
0;0.94999999;0.94999999;0;0;0;0.94999999;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0.94999999;0;0;0;4.6050627e-17;0.88449645;0.95345509;0;0.0008806613;
0.31934369;0.61314297;0;0.137234;0;0.04028995;0.63515949;3.2884559e-13;0.72620165;1.2101052e-10;
4.7553134e-17;2.1832583e-14;0.00033560555;1.0229904e-09;0.81393677;2.3660955e-06;0.95787203;2.2677494e-08;0.0001553749;6.2044251e-06;
0.94999999;0.94999999;0;0.94999999;0;0;0.94999999;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0;0.94715858;0.89535451;0;0.95437616;0;
9.888846e-16;0.91255474;0;0;3.1112965e-08;0.85155654;0;0.10649706;0;7.4865219e-16;
0.94892043;0.19136935;1.8248441e-12;1.5303858e-06;0.15360698;2.5653691e-07;0;0.11663002;1.7115588e-11;0.00084657682;
0;0;0;0;0;0.94999999;0.94999999;0.94999999;0.94999999;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0.94999999;0;0;0.91654313;0.0030717524;0;0.016516054;5.2005697e-18;
0.00020406354;0.94830406;4.5983707e-06;2.0542495e-06;9.8839236e-17;3.400385e-08;9.6493002e-15;0.60063601;2.2648401e-05;0;
0.080924414;1.6720048e-10;0.00075784407;0.81966269;0.90328276;0.0040192623;0;0.94104642;4.5855131e-06;0.0023115214;
0;0;0;0;0;0;0;0.94999999;0;0;
0.94999999;0.94999999;0;0;0.94999999;0.94999999;0;0.94999999;0;0;
0;0;0;0;0;2.0735537e-05;1.1349293e-08;5.7966105e-07;0.0016056385;0.0023815811;
0;2.5094114e-06;0.95935088;4.1925199e-17;2.2140307e-06;0.87163395;0.81988657;0.087205753;2.1910113e-05;0.9222225;
0.71994203;0.016548797;0.90120107;3.2367586e-07;4.1511463e-05;8.8397617e-10;2.0934589e-12;3.7484165e-07;6.4260079e-05;0;
0;0.94999999;0;0;0.94999999;0.94999999;0;0;0;0;
0;0;0;0;0;0;0.94999999;0;0;0.94999999;
0;0;0;0;0.94999999;5.8780381e-07;0.81954825;0;0.89535612;0.94822633;
0.75566953;0.050675243;3.0600967e-13;0.0051523494;0;2.0875927e-05;4.3392987e-08;2.6615494e-08;3.027899e-08;2.6967132e-07;
6.0466758e-05;0.82542503;0.0025130182;0.7409488;0.72269255;0.0012692423;0.0037251667;9.5378327e-10;0.033137374;0.43866691;
0;0.94999999;0;0;0;0;0.94999999;0;0.94999999;0.94999999;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0.94999999;0.00016242608;0.014312956;0;0.38431954;2.7885515e-15;
4.0658508e-09;0.84115434;0.0034860261;0.74435925;0.0019636001;2.4115007e-11;0.81821126;0;0.83312422;1.9361188e-12;
1.1898336e-12;0;4.8786193e-09;3.1801922e-11;0.00059100403;0.91214937;0.74118876;0.89223087;0.17649879;0.95568442;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0.94999999;0;2.462029e-06;0.025304809;0.93663538;0.95389074;
0;0.0074780947;5.4973527e-05;0;3.1022228e-07;5.4377683e-12;0.89002913;4.3226856e-13;0.84193414;0.85900211;
0;5.1705547e-06;0.56026196;9.480646e-16;0.85655069;0.00054308231;0.0090504996;5.7329162e-17;0.0024892213;0.20639034;
0;0;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;4.6663381e-12;0.014389735;0;3.5463751e-07;0.00095658342;
1.0235455e-09;1.8644503e-08;2.2291755e-05;5.0050824e-07;0.023539634;0.88596922;2.0383711e-10;5.5255009e-07;2.0209143e-05;0.0005841729;
0.92357916;0.00064506382;3.5344466e-12;0.036927722;0.91947252;0.13697138;0.0020924387;0.91425341;0.86211854;0.70802742;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;0;0.91394126;0.00017820123;1.827914e-09;0.006857302;
1.3594774e-05;1.438414e-06;0.0020210166;0.0036273177;0.95137531;2.4749072e-10;0;0.81864458;0.77459687;0.86196166;
0.82728899;0.89561546;3.839145e-13;1.0125804e-17;0.00094254094;5.9880803e-09;0.018816372;6.6282586e-13;0.16335216;5.858989e-13;
0.94999999;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0.94999999;0.83372164;7.0569818e-05;0;3.27968e-07;0;
0.0014549391;0.84251022;0.88904154;0.75279742;0;0;2.824605e-09;0.0015132683;0.0121156;0;
4.3167074e-05;1.937825e-08;0.93812561;0.92615724;0.2949197;0.75126284;0.005689844;0.70220804;0.00020643232;0.80942583;
0.94999999;0;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0.94999999;0;0.94999999;0;0;0;
0;0.94999999;0;0;0.94999999;0.90069997;0.87897426;0.93257606;1.4244991e-05;0.76726264;
0.00021534349;0.0002415058;7.5394857e-10;0.00086196704;4.4663465e-14;0.0001567741;0.70943737;0;1.003892e-09;0.58373773;
0;0.75818509;0.88182282;4.0556564e-12;0.67970222;5.2063296e-09;0.77323443;0;1.9994568e-08;0.84288162;
0.94999999;0;0.94999999;0;0;0;0;0;0;0.94999999;
0.94999999;0.94999999;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0;0.96206814;0.00013173738;2.5566096e-05;3.9100223e-06;0;
0;0;9.0825239e-07;9.2213301e-16;0.96639127;0.052141119;0.33790764;0.077105708;9.5855671e-07;0.029963631;
0;0.84010571;0.79357278;4.9174042e-12;0.57714784;0.86877185;0;0;1.0807177e-10;7.4034123e-10;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0;0.94999999;0;0.94999999;0.94999999;0.94999999;
0;0.94999999;0;0;0;0;0.0052573858;1.6533629e-07;1.5738048e-13;0.00027407691;
3.7842392e-06;0;0.046552733;4.8754734e-10;0;0.00013143019;0.46895364;1.3460824e-06;0.85843098;0.000131243;
0.80586869;0;0.95685077;0.91877335;0.89647031;0;0.87318069;0.25083011;0.059393086;1.5373261e-06;
0;0.94999999;0.94999999;0;0;0;0.94999999;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0.94999999;0;0;0;4.9497429e-13;0.88682383;0.95157063;0;0.0010806326;
0.033312514;0.59896284;0;0.078762963;0;0.044026949;0.63121253;1.9929525e-12;0.77477789;1.7380858e-10;
1.0122738e-16;1.9176478e-13;7.726872e-05;8.1712886e-07;0.80246484;9.1997379e-07;0.96116912;1.6052381e-06;0.00031615479;1.9563142e-06;
0.94999999;0.94999999;0;0.94999999;0;0;0.94999999;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0;0.94845927;0.88029444;0;0.95512962;0;
0;0.91221416;0;0;0;0.83011264;0;0.16660826;0;0;
0.95014131;0.088446833;0;0.00039114355;0.54243433;0;0;0.422548;0;0.0010265901;
0;0;0;0;0;0.94999999;0.94999999;0.94999999;0.94999999;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0.94999999;0;0;0.91766411;0.025733635;0;0.039383609;0;
0.00030593021;0.94847494;0;0;0;0;0;0.77125043;0.00011886669;0;
0.14144027;0;0.0012331577;0.81922823;0.90862221;0.0011563469;0;0.94500536;0;0.017456222;
0;0;0;0;0;0;0;0.94999999;0;0;
0.94999999;0.94999999;0;0;0.94999999;0.94999999;0;0.94999999;0;0;
0;0;0;0;0;5.8203255e-05;0;0;0.037153408;0.069979265;
0;0;0.96354526;0;0;0.88154477;0.75618005;0.036961824;0;0.92665786;
0.68216205;0.027820818;0.91091472;0;1.3321259e-06;0;0;0;1.6429774e-05;0;
0;0.94999999;0;0;0.94999999;0.94999999;0;0;0;0;
0;0;0;0;0;0;0.94999999;0;0;0.94999999;
0;0;0;0;0.94999999;0;0.6154083;0;0.92914319;0.95092386;
0.65113354;0.34832087;0;2.0409461e-05;0;0.035141293;1.5930931e-05;0;0;7.8505953e-05;
0.00021215106;0.75000334;0.0011886882;0.84872293;0.55851841;0.067764729;0.0079704337;0;0.03916049;0.013999239;
0;0.94999999;0;0;0;0;0.94999999;0;0.94999999;0.94999999;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0.94999999;5.1383853e-05;0.0028044058;0;0.0039299177;0;
0;0.16463956;4.3060604e-06;0.20743993;0;1.7330189e-05;0.8338871;0;0.84602147;0;
0;0;0;0;0.057889707;0.89048809;0.8853339;0.89592069;0.0004792746;0.9475922;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0.94999999;0;1.5624082e-05;0.0068715406;0.93697435;0.95041633;
0;0.016791984;0.00054102397;0;4.0952591e-06;0;0.89127922;0;0.86466199;0.85854578;
0;1.2532332e-05;0.75328052;0;0.87493074;7.9828707e-05;1.0574962e-05;0;0.0017523519;0.39709091;
0;0;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;0;0.13649082;0;0;0.00024909066;
0;0;1.8158851e-05;0;3.3682605e-05;0.88153595;0;0;0.0014436953;0.00058199401;
0.92987019;0.00020192435;0;0.0030919518;0.90821356;0.07630042;0.22778633;0.91432434;0.83087105;0.81200057;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;0;0.93624717;0.01231698;0;0;
0.056017146;2.0910556e-06;0;0.63208443;0.95944852;0;0;0.84243768;0.73508674;0.74203444;
0.0030066543;0.9163934;0;0;2.8953518e-06;3.5370922e-06;0.013304515;0;8.5379987e-05;0;
0.94999999;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0.94999999;0.82845932;1.0230395e-05;0;0.0033752201;0;
0.0013009268;0.86839324;0.90140349;0.55098152;0;0;0;0.0048274612;0.012173759;0;
0.00021886422;0;0.93410128;0.92605191;0.063428298;0.69911373;8.9564865e-06;0.59509444;0.011407064;0.57240963;
0.94999999;0;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0.94999999;0;0.94999999;0;0;0;
0;0.94999999;0;0;0.94999999;0.00030309835;0.030852679;0.90296876;0;0.91943455;
0.0097774342;0.0020270019;0;0.0015423424;0;0;0.90640968;0;0.028079003;0.00085587054;
0;2.337418e-06;0.62030685;0.0010212144;0.90677154;0;0.91435444;0;0.0077443961;0.83821952;
0.94999999;0;0.94999999;0;0;0;0;0;0;0.94999999;
0.94999999;0.94999999;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0;0.96170396;1.635831e-05;0;0;0;
0;0;4.0564213e-05;0;0.96646994;0.014825048;0.13072008;0.026735306;0;0.11982957;
0;0.82389945;0.84601605;0;0.52335769;0.8699922;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0;0.94999999;0;0.94999999;0.94999999;0.94999999;
0;0.94999999;0;0;0;0;0.001118905;0;0;0.0059174402;
2.4591207e-06;0;0.086916611;0;0;0.00027698636;0.5129053;0.00025375525;0.80141568;5.7883582e-05;
0.75076729;0;0.95610738;0.93067324;0.90485185;0;0.8568145;0.086090326;0.02931634;0;
0;0.94999999;0.94999999;0;0;0;0.94999999;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0.94999999;0;0;0;0;0.045141131;0.94505882;0;0;
0.86601603;0.0066166478;0;0.76065135;0.00076529442;0.72960436;0.42575043;3.4216926e-06;0.89570218;1.3651681e-05;
0;8.5214524e-06;1.7718586e-06;0;0.0026411936;0.0022577357;0.94017953;0;0.0015318373;0;
0.94999999;0.94999999;0;0.94999999;0;0;0.94999999;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0;0.9457857;0.8632437;0;0.95797843;0;
0;0.91665691;0;0;0;0.74400896;0;0.18424176;0;0;
0.95011598;0.041333314;0;0.00062026712;0.1647003;0;0;0.13173284;0;0.0062109353;
0;0;0;0;0;0.94999999;0.94999999;0.94999999;0.94999999;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0.94999999;0;0;0.91022193;0.029595383;0;0.021524645;0;
7.5879449e-05;0.95059758;0;2.5847141e-06;0;0;0;0.59949738;0.00017194162;0;
0.12865713;0;0.016464351;0.82427049;0.9192251;0.0014732836;0;0.93885452;0;0.012775963;
0;0;0;0;0;0;0;0.94999999;0;0;
0.94999999;0.94999999;0;0;0.94999999;0.94999999;0;0.94999999;0;0;
0;0;0;0;0;1.6524904e-06;0;0;0.075054713;0.11304969;
0;4.7395674e-06;0.96068239;0;3.3897884e-06;0.87718719;0.71139336;0.0096157081;0;0.93455762;
0.84977007;0.015374625;0.89822328;0;1.3196756e-06;0;0;0;1.2785866e-05;0;
0;0.94999999;0;0;0.94999999;0.94999999;0;0;0;0;
0;0;0;0;0;0;0.94999999;0;0;0.94999999;
0;0;0;0;0.94999999;0;0.76681155;0;0.93495488;0.95362264;
0.40835208;0.14707753;0;3.6515601e-05;0;0.00073514099;9.6569511e-07;0;0;0.00011453105;
9.1999675e-05;0.81666565;0.00049627194;0.85703564;0.53672332;0.062168568;0.00050425873;0;0.0042831767;0.0098282583;
0;0.94999999;0;0;0;0;0.94999999;0;0.94999999;0.94999999;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0.94999999;0.00029735494;0.015609524;0;0.59117717;0;
0;0.82683188;0.00098782976;0.68697959;0.0038239851;0;0.82707393;0;0.83807302;0;
0;0;0;0;0.014378199;0.90471053;0.36156356;0.88690746;0.11842628;0.95471519;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0.94999999;0;0;0.044876739;0.9313879;0.95161992;
0;0.018836416;0.001523549;0;0;0;0.88114905;0;0.82419002;0.85724813;
0;0;0.62875199;0;0.8438853;0.00014127584;0.023080857;0;0.0020614122;0.11519103;
0;0;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;4.3344626e-06;0.064367078;0;0;0;
0;0;7.2678398e-05;0;0.01483538;0.87711281;0;0;5.6105694e-07;0.0041284454;
0.92921728;0.00050346192;0;0.002656783;0.92024958;0.25634927;0.010418689;0.88907361;0.77438754;0.77830112;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;0;0.88372791;0.00058261928;0;0.029900704;
0;0;0.050739951;0.012051683;0.95141953;0;0;0.83527625;0.81019115;0.83797634;
0.90129638;0.83767009;0;0;0.016287498;0;0.016178634;0;0.33259183;0;
0.94999999;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0.94999999;0.81500793;0.0019908487;0;0;0;
0.00051944784;0.81980997;0.89772236;0.69000858;0;0;0;0.051371403;0.013122364;0;
0;0;0.93430293;0.92531574;0.25028911;0.7427637;0.0025564032;0.766258;0.00027544782;0.76062518;
0.94999999;0;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0.94999999;0;0.94999999;0;0;0;
0;0.94999999;0;0;0.94999999;0.83041263;0.87661248;0.93379009;0;0.024743013;
0.039683565;0.031011043;0;0.00052701787;0;0.0036253454;0.83309472;0;0;0.00013078787;
0;0.0034354543;0.92891788;0.0015833196;0.66887856;0;0.90506977;0;1.0989922e-06;0.71606642;
0.94999999;0;0.94999999;0;0;0;0;0;0;0.94999999;
0.94999999;0.94999999;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0;0.95610958;0.00015618332;0.83239228;0.0056803096;0;
0;0;0;0;0.95615685;0.79868245;0.82667655;0.72714585;0.001517101;4.9387192e-05;
0;0.12633058;0.58770198;0;0.86387634;0.070572577;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0;0.94999999;0;0.94999999;0.94999999;0.94999999;
0;0.94999999;0;0;0;0;0.015400099;0.0001110798;0;8.743396e-05;
0;0;0.086793832;0;0;0.00082789059;0.79416412;7.5013741e-05;0.80696642;2.2393489e-05;
0.71444249;0;0.95722932;0.92214501;0.92725867;0;0.85448247;0.24018177;0.069826052;1.2224348e-05;
0;0.94999999;0.94999999;0;0;0;0.94999999;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0.94999999;0;0;0;0;0.87142503;0.95300198;0;0.00063324341;
0.12108371;0.77424419;0;0.04904021;0;0.08816243;0.63235408;0;0.77188039;0;
0;0;2.1462731e-05;0;0.64799738;0;0.95932359;0;0.00023864181;3.9573711e-06;
0.94999999;0.94999999;0;0.94999999;0;0;0.94999999;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0;0.94792944;0.87134516;0;0.95743042;0;
0;0.90657347;0;0;0;0.8447144;0;0.067819305;0;0;
0.95097095;0.067719169;0;0.00026039971;0.10640093;0;0;0.073203176;0;0.086868055;
0;0;0;0;0;0.94999999;0.94999999;0.94999999;0.94999999;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0.94999999;0;0;0.92056376;0.0028246529;0;0.028457943;0;
0.00027891103;0.9471488;0;0;0;0;0;0.67197216;9.2618022e-05;0;
0.042473078;0;0.0012944788;0.83813667;0.90798014;0.00044566614;0;0.94375288;0;0.01001822;
0;0;0;0;0;0;0;0.94999999;0;0;
0.94999999;0.94999999;0;0;0.94999999;0.94999999;0;0.94999999;0;0;
0;0;0;0;0;0.00016380483;2.3083476e-05;1.1656875e-05;0.005771494;0.0010909541;
0;0;0.95632285;0;0;0.8608703;0.89746696;0.026173051;0.00032860963;0.92393744;
0.77950448;0.00070752332;0.89835143;7.3771334e-05;0.0004619892;0;0;9.8027331e-06;4.7995627e-06;0;
0;0.94999999;0;0;0.94999999;0.94999999;0;0;0;0;
0;0;0;0;0;0;0.94999999;0;0;0.94999999;
0;0;0;0;0.94999999;0;0;0;0.91587263;0.94949472;
0.0438779;0;0;0;0;0.88791108;0.070733801;0;0.0019363179;0;
0.034467906;0.014334584;6.934456e-06;0.88560688;0.12731558;0.90142852;0.87947857;0;0.022434974;5.2040479e-05;
0;0.94999999;0;0;0;0;0.94999999;0;0.94999999;0.94999999;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0.94999999;6.5452055e-05;0.050661106;0;0.10133441;0;
0;0.29689744;0;0.0073920349;0;0.00060970586;0.86497736;0;0.89044058;0;
0;0;0;0;0.21112525;0.88786268;0.90301752;0.81174022;0.00022219804;0.94394624;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0.94999999;0;0;0.16063783;0.93776733;0.94658685;
0;0.004630472;4.555146e-06;0;0;0;0.89007127;0;0.83299911;0.83962178;
0;0;0.55051035;0;0.84670365;0.00015884844;0.0078519322;0;0.00076906173;0.15244681;
0;0;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;0.8380686;0;0;0;0;
0;0;0.90108812;0.86520082;0.95334512;0;0;0;0;0.55863845;
0;0.31079841;0.022871681;0;0.80425996;0.9223358;0.21187368;0.01466164;0.00057845726;0.0045483932;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;0;0.041366197;0.88929266;0;0.93454343;
0.014833458;0;0;0.00011411883;0.93421131;0;0;0;0.018490219;0.020561136;
0.90466225;4.7044075e-05;0;0;7.7870556e-07;2.9367882e-05;0.924896;0;0.91561377;0;
0.94999999;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0.94999999;0.89277363;4.8531774e-06;0;0;0;
0.0067913216;0.85863918;0.86696559;0.45417061;0;0;0;0.0044428455;0.071769714;0;
0.00045774755;0;0.93142331;0.91149312;0.29796749;0.85424834;0.00073002605;0.85780901;1.5907052e-06;0.58186299;
0.94999999;0;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0.94999999;0;0.94999999;0;0;0;
0;0.94999999;0;0;0.94999999;0;0.034716524;0.3902081;0;0.92388308;
0.90474415;0;0;0.00017715443;0;0;0.84603137;0;0.0035337429;0;
0;7.8079145e-05;0.93995488;0.89388251;0.11004821;0;0.38173407;0;0.86308169;1.8618843e-05;
0.94999999;0;0.94999999;0;0;0;0;0;0;0.94999999;
0.94999999;0.94999999;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0;0.96426767;0;0.00014256766;0.0001236457;0;
0;0;0;0;0.96583003;0.16700754;0.2796571;0.026627902;0.00013409293;0.0045705163;
0;0.6215657;0.73645604;0;0.19939259;0.86325634;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0;0.94999999;0;0.94999999;0.94999999;0.94999999;
0;0.94999999;0;0;0;0;0.0014120929;1.9797208e-07;0;1.6698623e-05;
0;0;0.1143413;0;0;4.7550525e-06;0.8776148;0;0.88629061;0.00017977643;
0.88777632;0;0.95374417;0.93121839;0.90879256;0;0.8197087;0.22200352;0.026465025;3.340613e-05;
0;0.94999999;0.94999999;0;0;0;0.94999999;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0.94999999;0;0;0;0;0.1026274;0.94564819;0;0;
0.76502639;0.00014383791;0;0.55105859;0.00082583306;0.55842328;0.043205515;0;0.85392904;0.00014158741;
0;0;0;0;0.07999748;0.026263148;0.95343447;0;0.0015234186;0;
0.94999999;0.94999999;0;0.94999999;0;0;0.94999999;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0;0.95378816;0.90044266;0;0.9559294;0;
0;0.90065408;0;0;0;0.82354414;0;0.012936968;0;0;
0.95265877;0.12497239;0;0;0.0014763121;0;0;0.11252598;0;0.0093140043;
0;0;0;0;0;0.94999999;0.94999999;0.94999999;0.94999999;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0.94999999;0;0;0.91636622;0.0070126131;0;0.072453648;0;
1.9963933e-05;0.94723779;0;0;0;0;0;0.66175079;8.1414983e-05;0;
0.10955918;0;0.002909855;0.87251008;0.92025566;0.0042744558;0;0.9415043;0;0.0048768362;
0;0;0;0;0;0;0;0.94999999;0;0;
0.94999999;0.94999999;0;0;0.94999999;0.94999999;0;0.94999999;0;0;
0;0;0;0;0;0;1.4093962e-06;0;0.0019570086;0.0033528502;
0;0;0.95593405;0;0;0.84021318;0.86412549;0.010346717;0.018876249;0.92966992;
0.77868724;0.00050176401;0.89249247;2.7452435e-05;0.0046819635;0;0;0;3.3319718e-06;0;
0;0.94999999;0;0;0.94999999;0.94999999;0;0;0;0;
0;0;0;0;0;0;0.94999999;0;0;0.94999999;
0;0;0;0;0.94999999;0;0;0;0.90827703;0.94481736;
0.021669589;0;0;0;0;0.88416797;0.10196911;0;0.00053667807;0;
0.011711772;0.0022473745;0.0010398339;0.84796089;0.24347094;0.90455794;0.88437909;0;0.015799485;0.098258704;
0;0.94999999;0;0;0;0;0.94999999;0;0.94999999;0.94999999;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0.94999999;2.4605215e-06;0.015437106;0;0.014723038;0;
0;0.2209371;0;0.24754065;0;0.00019847311;0.80499965;0;0.77400458;0;
0;0;0;0;0.17380691;0.89865279;0.88979375;0.85432678;0.0025299143;0.94544274;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0.94999999;0;0.00037934416;0.53529614;0.93053561;0.94937265;
0;0.047280408;0.00010325698;0;0;0;0.86269891;0;0.81457645;0.84697145;
0;0;0.48538241;0;0.83834481;0.00010251161;0.0016147627;0;0.00025903896;0.13051684;
0;0;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;0;0;0;0;0;
0;0;0.93145531;0.92988765;0.95617557;0;0;0;0;0.91721869;
0;0.00038317512;1.1051117e-05;0;0.0045428146;0.94204247;0.81234443;0;0;0.0045701317;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;0;0.015538394;0.90750462;0;0.92358935;
0.030413482;0;0;3.7594875e-06;0.93254864;0.0005581929;0;0;0.017212842;0.010930299;
0.86193025;5.880286e-05;0;0;0;4.1434268e-06;0.89313316;0;0.91811913;0;
0.94999999;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0.94999999;0.8430779;0.00026399165;0;0;0;
0.0029342845;0.81957161;0.87883836;0.63096637;0;0;0;0.0090166274;0.0034475899;0;
0.0032026926;0;0.94089574;0.92094362;0.19365366;0.79896629;0.0006044957;0.78668284;0.0059644431;0.74827939;
0.94999999;0;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0.94999999;0;0.94999999;0;0;0;
0;0.94999999;0;0;0.94999999;1.2661085e-05;0.00029219384;0.0095723327;0;0.9065035;
0.90442431;0;0;0.0056640864;0;0;0.82806754;0;0.023098584;0;
0;0.0012014683;0.92709571;0.91774476;0.11786719;0;0.3192175;0;0.80544007;0.00033010525;
0.94999999;0;0.94999999;0;0;0;0;0;0;0.94999999;
0.94999999;0.94999999;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0;0.96519148;0.00057186797;0.00012241141;5.7942332e-05;0;
0;0;0;0;0.96704626;0.33247215;0.32231992;0.029503621;0;0.0035386859;
0;0.8676095;0.72857243;0;0.62630963;0.88724029;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0;0.94999999;0;0.94999999;0.94999999;0.94999999;
0;0.94999999;0;0;0;0;0.084054038;0;0;0.23201451;
0;0;0.58081639;0;0;0;0.47409466;0.25260183;0.80169302;0;
0.85456604;0;0.96789825;0.93043488;0.9067443;0;0.22630663;0.1555526;0.52731752;0;
0;0.94999999;0.94999999;0;0;0;0.94999999;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0.94999999;0;0;0;0;0.86583745;0.95077485;0;9.7785312e-05;
0.43826425;0.55206895;0;0.11986841;0;0.12104139;0.73303485;0;0.80248868;0;
0;0;0.00066793698;0;0.88104671;0;0.96042126;3.5188057e-06;0.00033298615;1.0910738e-05;
0.94999999;0.94999999;0;0.94999999;0;0;0.94999999;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0;
0;0;0;0;0;0.95319384;0.89429867;0;0.9559446;0;
0;0.92104578;0;0;0;0.8072722;0;0.069523141;0;0;
0.94947982;0.040261999;0;0;0.45684415;0;0;0.045464907;0;0.0565699;
0;0;0;0;0;0.94999999;0.94999999;0.94999999;0.94999999;0;
0;0;0;0;0;0.94999999;0;0;0;0;
0;0;0.94999999;0;0;0.91289073;0.015208815;0;0.0099008307;0;
0.00037841857;0.94883984;0;0.00026595924;0;0;0;0.73854393;2.1559721e-05;0;
0.059362225;0;0.0030411915;0.87343258;0.89916217;5.5428147e-05;0;0.93751264;0;0.00088360417;
0;0;0;0;0;0;0;0.94999999;0;0;
0.94999999;0.94999999;0;0;0.94999999;0.94999999;0;0.94999999;0;0;
0;0;0;0;0;0;0;0;0.024050415;0.042509314;
0;0;0.96318865;0;0;0.8558448;0.67306846;0.030459784;0.0002337717;0.93665981;
0.75768685;0.030838922;0.81759888;0;0;0;0;0;5.3323489e-05;0;
0;0.94999999;0;0;0.94999999;0.94999999;0;0;0;0;
0;0;0;0;0;0;0.94999999;0;0;0.94999999;
0;0;0;0;0.94999999;0;0.78067541;0;0.91449594;0.95211422;
0.73434412;0.24675797;0;0.011426769;0;0.00011597387;0;0;0;0;
4.0868554e-06;0.71582246;0.0015856816;0.85389006;0.45444041;0.0024281722;0.00019506259;0;0.0037483168;0.098582648;
0;0.94999999;0;0;0;0;0.94999999;0;0.94999999;0.94999999;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0.94999999;3.185057e-06;0.017655179;0;0.065381967;0;
0;0.23239675;1.6742786e-06;0.14566799;0;0;0.85100365;0;0.84899914;0;
0;0;0;0;0.14895868;0.90169299;0.90137905;0.86512399;0.0054794094;0.94095945;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;0;0;0.94999999;0;0;
0;0;0;0;0.94999999;0;0.0001344021;0.52629358;0.93547273;0.95115191;
0;0.019902322;0.00057195994;0;0;0;0.85767537;0;0.86440027;0.83500773;
0;0;0.53394145;0;0.84178805;0.00042562245;0.0021430976;0;5.9086244e-05;0.2170462;
0;0;0;0;0;0;0;0;0;0;
0.94999999;0;0;0;0;0.94999999;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;0;0.01360754;0;0.00018675563;0.0027288673;
0;0;0.00018192867;0;0.0015581797;0.87535769;0;2.3323601e-06;0;0.010593871;
0.9253965;4.4273285e-05;0;0.038135812;0.9283725;0.073501587;0.040330447;0.9212622;0.84880972;0.419976;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0;0.94999999;0.94999999;0.94999999;0;0.94999999;0;0;0;
0;0;0;0;0;0;0.88497096;0.000232686;0;0.0003955017;
0.0037206239;0;3.9958118e-06;0.027374517;0.95694333;0;0;0.77248311;0.90298408;0.79271239;
0.84576946;0.89030606;0;0;0.00071814435;2.3392856e-06;0.00012153182;0;0.057925757;0;
0.94999999;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0;0;0;0.94999999;0.94999999;0;
0;0;0;0;0.94999999;0.058003865;0;0;0.84013921;0;
2.528298e-05;0.90098381;0.91481709;0.01060144;0;0;9.0923277e-06;0.00031228043;0.19194508;0;
7.7745644e-05;0;0.92356473;0.89585775;0.08109048;0.87355524;1.6435446e-05;0.037713055;0.0034226216;0.22522631;
0.94999999;0;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0.94999999;0;0.94999999;0;0;0;
0;0.94999999;0;0;0.94999999;0.84250718;0.83390719;0.95049006;5.5852364e-05;0.89507091;
0.0020994665;0.00017460916;0;0;0;0.028403509;0.8959347;0;0.00012629406;0.42948323;
0;0.63275057;0.028745744;0;0.88479096;2.9635718e-05;0.86355036;0;0;0.89763916;
0.94999999;0;0.94999999;0;0;0;0;0;0;0.94999999;
0.94999999;0.94999999;0.94999999;0;0;0;0;0;0;0;
0;0;0;0;0;0.96316618;0.00039502973;3.5185722e-06;0;0;
0;0;0.0011683011;0;0.96398407;0.028492771;0.1071806;0.18917245;0;0.22510317;
0;0.85643095;0.83109117;0;0.22847907;0.87990624;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0.94999999;0;0.94999999;0;0.94999999;0.94999999;0.94999999;
0;0.94999999;0;0;0;0;0.014098724;2.1995889e-05;0;6.0966267e-05;
0;0;0.038998768;0;0;6.3139181e-05;0.83838177;0;0.87569255;1.9552721e-05;
0.88372546;0;0.95491242;0.9295218;0.89732659;0;0.89198452;0.055794839;0.17475285;5.9305303e-06;
0;0.94999999;0.94999999;0;0;0;0.94999999;0;0;0;
0;0.94999999;0;0;0;0;0;0;0;0.94999999;
0;0.94999999;0;0;0;0;0.060772657;0.93777573;0;0;
0.8744185;0.00067952886;0;0.61048597;0.029902579;0.68653411;0.31688353;0;0.90920794;0.00012916051;
0;1.4011279e-05;1.4591384e-07;0;0.0035727159;0.0023331472;0.93853438;0;0.0014509838;0;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
   DataTable @[4] {
    name="EpochTestOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="batch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     int_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="NARROW";
	value 1 0=1;
	val_type_fixed=0;
       };
       UserDataItem @[1] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="epoch";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="sum_min_dist";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[3] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="sum_name_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
     float_Data @[4] {
      UserDataItem_List @*(.user_data_) {
       name=;
       el_typ=UserDataItemBase;
       el_def=0;
       UserDataItem @[0] {
	name="view_panel_wd";
	value 6 0=0.1545595079660416;
	val_type_fixed=0;
       };
      };
      name="sum_both_err";
      col_flags=SAVE_ROWS|SAVE_DATA;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name=;
	    [0]       };
      ar {
       name=;
	    [0]       };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    keygen 4 0=0;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
  };
 };
 data_proc {
  name=;
  el_typ=taDataProc;
  el_def=0;
  taDataProc @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_base";
  };
  taDataAnal @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_anal";
  };
  taDataGen @[2] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="data_gen";
  };
  taImageProc @[3] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="NO_CLIP";
     value 1 0=1;
     val_type_fixed=0;
    };
   };
   name="image_proc";
  };
 };
 programs {
  name=;
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  Program @[0] {
   name="FindClosestEvent_Priming";
   short_nm="FnClsP";
   tags="Statistic, Error ";
   desc="find closest event from list of input data compared to recorded output data from network -- replaces ClosestEventStat from PDP++";
   flags=NO_STOP_STEP;
   objs {
    name=;
    el_typ=float_Matrix;
    el_def=0;
    float_Matrix @[0] {
     name="OutputTargetDistMatrix";
	[26 1] 8.6050196;7.0569;8.1906195;8.3059387;8.6418457;8.3147774;8.7141981;8.1918507;8.8228664;6.4350023;
6.2525439;6.4809208;5.7755942;8.4309235;10.187068;10.191273;6.8387222;5.9500408;7.8281574;6.8781891;
6.3734784;6.5953732;7.8946996;10.124827;8.1982841;0;    };
    DataTable @[1] {
     name="CurTrialData";
     desc=;
     data {
      name="data";
      el_typ=int_Data;
      el_def=0;
      int_Data @[0] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	 val_type_fixed=0;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1545595079660416;
	 val_type_fixed=0;
	};
       };
       name="batch";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [1] 0;       };
      };
      int_Data @[1] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	 val_type_fixed=0;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1545595079660416;
	 val_type_fixed=0;
	};
       };
       name="epoch";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [1] 50;       };
      };
      int_Data @[2] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="NARROW";
	 value 1 0=1;
	 val_type_fixed=0;
	};
	UserDataItem @[1] {
	 name="view_panel_wd";
	 value 6 0=0.1545595079660416;
	 val_type_fixed=0;
	};
       };
       name="trial";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [1] 25;       };
      };
      String_Data @[3] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.1545595079660416;
	 val_type_fixed=0;
	};
       };
       name="trial_name";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [1] "12_b";       };
      };
      float_Data @[4] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.1545595079660416;
	 val_type_fixed=0;
	};
       };
       name="min_dist";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [1] 0;       };
      };
      String_Data @[5] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.1545595079660416;
	 val_type_fixed=0;
	};
       };
       name="closest_name";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [1] ;       };
      };
      float_Data @[6] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.1545595079660416;
	 val_type_fixed=0;
	};
       };
       name="name_err";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [1] 0;       };
      };
      float_Data @[7] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.1545595079660416;
	 val_type_fixed=0;
	};
       };
       name="both_err";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [0]        };
       ar {
	name=;
	      [1] 0;       };
      };
      float_Data @[8] {
       UserDataItem_List @*(.user_data_) {
	name=;
	el_typ=UserDataItemBase;
	el_def=0;
	UserDataItem @[0] {
	 name="view_panel_wd";
	 value 6 0=0.1545595079660416;
	 val_type_fixed=0;
	};
       };
       name="Output_act_m";
       col_flags=SAVE_ROWS|SAVE_DATA;
       is_matrix=1;
       cell_geom{ 5;5;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name=;
	      [2] ;;       };
       ar {
	name=;
	      [5 5 1] 0;0.060772657;0.93777573;0;0;0.8744185;0.00067952886;0;0.61048597;0.029902579;
0.68653411;0.31688353;0;0.90920794;0.00012916051;0;1.4011279e-05;1.4591384e-07;0;0.0035727159;
0.0023331472;0.93853438;0;0.0014509838;0;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     keygen 4 0=0;
    };
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="trial_output_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[1][0]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="the data table containing the monitored activation values to use in the comparison";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="output_col_name";
     var_type=T_String;
     string_val="Output_act_m";
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="name of the column in the trial_output_data that contains the activations to compare";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="target_input_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].data.gp[0][0]$$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="target input data with full list of events to compare output data pattern to";
     init_from=NULL;
    };
    ProgVar @[3] {
     name="target_col_name";
     var_type=T_String;
     string_val="Output";
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="name of the column in the target_input_data that contains the activations to compare";
     init_from=NULL;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="OutputTargetDistMatrix";
     var_type=T_Object;
     object_type=float_Matrix;
     object_val=.projects[0].programs[0].objs[0]$$;
     objs_ptr=1;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="computed distances between output and targets";
     init_from=NULL;
    };
    ProgVar @[1] {
     name="CurTrialData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.projects[0].programs[0].objs[1]$$;
     objs_ptr=1;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="pointer for holding the data from the current trial";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="dist_metric";
     var_type=T_HardEnum;
     int_val=0;
     hard_enum_type=taMath::DistMetric;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="parameter: distance metric to use in computing distances";
     init_from=NULL;
    };
    ProgVar @[3] {
     name="dist_norm";
     var_type=T_Bool;
     bool_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="parameter: whether to normalize distance value";
     init_from=NULL;
    };
    ProgVar @[4] {
     name="dist_tol";
     var_type=T_Real;
     real_val=0.5;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="parameter: tolerance to use for computing distances -- values < this count as zero";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="min_dist";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="result: minimum distance between current output pattern and any of the target patterns";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="min_idx";
     var_type=T_Int;
     int_val=25;
     objs_ptr=0;
     flags=CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="row index of what produced the min val";
     init_from=NULL;
    };
    ProgVar @[7] {
     name="Name";
     var_type=T_String;
     string_val="12_b";
     objs_ptr=0;
     flags=CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="name of the minimum input/output pair that produced the minimum value";
     init_from=NULL;
    };
    ProgVar @[8] {
     name="closest_name";
     var_type=T_String;
     string_val="12_b";
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="result: name of input pattern with closest distance";
     init_from=NULL;
    };
    ProgVar @[9] {
     name="trial_name";
     var_type=T_String;
     string_val="12_b";
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="the current trial name";
     init_from=NULL;
    };
    ProgVar @[10] {
     name="name_err";
     var_type=T_Real;
     real_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="error value for whether the full trial names match: 0 = they match, 1 = they don't match";
     init_from=NULL;
    };
    ProgVar @[11] {
     name="row_zero";
     var_type=T_Int;
     int_val=0;
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="always 0";
     init_from=NULL;
    };
    ProgVar @[12] {
     name="last_row";
     var_type=T_Int;
     int_val=-1;
     objs_ptr=0;
     flags=EDIT_VAL;
     reference=0;
     desc="always -1";
     init_from=NULL;
    };
    ProgVar @[13] {
     name="base_closest_name";
     var_type=T_String;
     string_val="12";
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="closest name before the _";
     init_from=NULL;
    };
    ProgVar @[14] {
     name="base_trial_name";
     var_type=T_String;
     string_val="12";
     objs_ptr=0;
     flags=NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="trial_name before the _";
     init_from=NULL;
    };
    ProgVar @[15] {
     name="both_err";
     var_type=T_Int;
     int_val=0;
     objs_ptr=0;
     flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="error value for whether the base trial names match (i.e., the same input pattern): 0 = they match, 1 = they don't match";
     init_from=NULL;
    };
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc="ensure cur trial has same structure as source";
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[0].vars[1]$$;
     method=DataTable::Copy_NoData;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_DataTable_ref;
       type="const DataTable&";
       name="cp";
       required=1;
       def_val=;
       expr {
	expr="trial_output_data";
       };
      };
     };
    };
    AddNewDataRow @[1] {
     desc=;
     flags=;
     data_var=$.projects[0].programs[0].vars[1]$;
    };
    MethodCall @[2] {
     desc="grab last row of source data";
     flags=;
     result_var=NULL;
     obj=$.projects[0].programs[0].vars[1]$;
     method=DataTable::CopyFromRow;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=int;
       type="int";
       name="dest_row";
       required=1;
       def_val=;
       expr {
	expr="0";
       };
      };
      ProgArg @[1] {
       arg_type=const_DataTable_ref;
       type="const DataTable&";
       name="cp";
       required=1;
       def_val=;
       expr {
	expr="trial_output_data";
       };
      };
      ProgArg @[2] {
       arg_type=int;
       type="int";
       name="src_row";
       required=1;
       def_val=;
       expr {
	expr="trial_output_data.rows-1";
       };
      };
     };
    };
    DataAnalCall @[3] {
     desc="compute the appropriate distances";
     flags=;
     result_var=NULL;
     object_type=taDataAnal;
     method=taDataAnal::CrossDistMatrix;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=float_Matrix_ptr;
       type="float_Matrix*";
       name="dist_mat";
       required=1;
       def_val=;
       expr {
	expr="OutputTargetDistMatrix";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src_data_a";
       required=1;
       def_val=;
       expr {
	expr="CurTrialData";
       };
      };
      ProgArg @[2] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="data_col_nm_a";
       required=1;
       def_val=;
       expr {
	expr="output_col_name";
       };
      };
      ProgArg @[3] {
       arg_type=DataTable_ptr;
       type="DataTable*";
       name="src_data_b";
       required=1;
       def_val=;
       expr {
	expr="target_input_data";
       };
      };
      ProgArg @[4] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="data_col_nm_b";
       required=1;
       def_val=;
       expr {
	expr="target_col_name";
       };
      };
      ProgArg @[5] {
       arg_type=taMath::DistMetric;
       type="taMath::DistMetric";
       name="metric";
       required=1;
       def_val=;
       expr {
	expr="dist_metric";
       };
      };
      ProgArg @[6] {
       arg_type=bool;
       type="bool";
       name="norm";
       required=0;
       def_val="false";
       expr {
	expr="dist_norm";
       };
      };
      ProgArg @[7] {
       arg_type=float;
       type="float";
       name="tol";
       required=0;
       def_val="0.0f";
       expr {
	expr="dist_tol";
       };
      };
      ProgArg @[8] {
       arg_type=bool;
       type="bool";
       name="incl_scalars";
       required=0;
       def_val="false";
       expr {
	expr=;
       };
      };
     };
    };
    MathCall @[4] {
     desc="find min dist val and index";
     flags=;
     result_var=.projects[0].programs[0].vars[5]$$;
     object_type=taMath_float;
     method=taMath_float::vec_min;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_float_Matrix_ptr;
       type="const float_Matrix*";
       name="vec";
       required=1;
       def_val=;
       expr {
	expr="OutputTargetDistMatrix";
       };
      };
      ProgArg @[1] {
       arg_type=int_ref;
       type="int&";
       name="idx";
       required=1;
       def_val=;
       expr {
	expr="min_idx";
       };
      };
     };
    };
    DataVarProg @[5] {
     desc="get name of the minimum input/output pair";
     flags=;
     data_var=.projects[0].programs[0].args[2]$$;
     set_data=0;
     row_spec=ROW_NUM;
     row_var=.projects[0].programs[0].vars[6]$$;
     quiet=0;
     var_1=.projects[0].programs[0].vars[7]$$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    AssignExpr @[6] {
     desc="actually gets the input part of the name";
     flags=;
     result_var=.projects[0].programs[0].vars[8]$$;
     expr {
      expr="Name";
     };
    };
    DataVarProg @[7] {
     desc="gets the trial name of the current trial";
     flags=;
     data_var=$.projects[0].programs[0].vars[1]$;
     set_data=0;
     row_spec=ROW_NUM;
     row_var=.projects[0].programs[0].vars[11]$$;
     quiet=0;
     var_1=.projects[0].programs[0].vars[9]$$;
     var_2=NULL;
     var_3=NULL;
     var_4=NULL;
    };
    IfElse @[8] {
     desc="computes err based on whether it was the same or not";
     flags=;
     cond {
      expr="trial_name == closest_name";
     };
     true_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=;
       result_var=.projects[0].programs[0].vars[10]$$;
       expr {
	expr="0.0";
       };
      };
     };
     false_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=;
       result_var=$.projects[0].programs[0].vars[10]$;
       expr {
	expr="1.0";
       };
      };
     };
    };
    Comment @[9] {
     desc="above is all standard FindClosestEvent code";
     flags=;
    };
    Comment @[10] {
     desc="compare base names to see if they match";
     flags=;
    };
    AssignExpr @[11] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[13]$$;
     expr {
      expr="closest_name.before(\"_\")";
     };
    };
    AssignExpr @[12] {
     desc=;
     flags=;
     result_var=.projects[0].programs[0].vars[14]$$;
     expr {
      expr="trial_name.before(\"_\")";
     };
    };
    IfElse @[13] {
     desc="computes err based on whether it was the same or not";
     flags=;
     cond {
      expr="base_trial_name == base_closest_name";
     };
     true_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=;
       result_var=.projects[0].programs[0].vars[15]$$;
       expr {
	expr="0.0";
       };
      };
     };
     false_code {
      name=;
      el_typ=ProgEl;
      el_def=0;
      AssignExpr @[0] {
       desc=;
       flags=;
       result_var=$.projects[0].programs[0].vars[15]$;
       expr {
	expr="1.0";
       };
      };
     };
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program @[1] {
   name="LoadWeights";
   short_nm="LWghts";
   tags=;
   desc=;
   flags=NO_STOP_STEP;
   objs {
    name=;
    el_typ=taNBase;
    el_def=0;
   };
   types {
    name=;
    el_typ=ProgType;
    el_def=0;
   };
   args {
    name=;
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=$.projects[0].networks[0]$;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
     reference=0;
     desc="network to operate on -- updates batch counter on network and passes it to train program";
     init_from=NULL;
    };
   };
   vars {
    name=;
    el_typ=ProgVar;
    el_def=0;
   };
   functions {
    name=;
    el_typ=Function;
    el_def=0;
   };
   load_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   init_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
   };
   prog_code {
    name=;
    el_typ=ProgEl;
    el_def=0;
    MethodCall @[0] {
     desc=;
     flags=;
     result_var=NULL;
     obj=.projects[0].programs[1].args[0]$$;
     method=Network::LoadWeights;
     meth_args {
      name=;
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="const taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       expr {
	expr="\"act_priming_trained.wts.gz\"";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="quiet";
       required=0;
       def_val="false";
       expr {
	expr=;
       };
      };
     };
    };
   };
   step_prog=NULL;
   step_n=1;
  };
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   Program @[0] {
    name="LeabraBatch";
    short_nm="Batch";
    tags="Leabra, Std";
    desc="Iterate over training runs (a batch of training runs) -- just a simple loop that calls training program";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- updates batch counter on network and passes it to train program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="datatable with training patterns -- not used by this program, but passed to train program";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="batch";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="batch counter";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="max_batch";
      var_type=T_Int;
      int_val=10;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="maximum number of batch runs to perform";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=.projects[0].programs.gp[0][0].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[0][0].vars[0]$$;
      counter=Network::batch;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
     NetCounterInit @[0] {
      desc="initializes local batch counter and batch field on network";
      flags=;
      network_var=$.projects[0].programs.gp[0][0].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][0].vars[0]$;
      counter=Network::batch;
      update_after=0;
     };
     WhileLoop @[1] {
      desc="the main loop over training runs";
      flags=;
      loop_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       ProgramCall @[0] {
	desc="run the training program -- sets the network and input_data args";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	 ProgArg @[2] {
	  arg_type=bool;
	  type="bool";
	  name="no_prompts";
	  required=1;
	  def_val=;
	  expr {
	   expr="true";
	  };
	 };
	};
	target=$.projects[0].programs.gp[0][1]$;
	targ_ld_init="*LeabraTrain*";
       };
       NetCounterIncr @[1] {
	desc="increment the local batch counter and copy to network";
	flags=;
	network_var=$.projects[0].programs.gp[0][0].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[0][0].vars[0]$;
	counter=Network::batch;
	update_after=0;
       };
      };
      test {
       expr="batch < max_batch";
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[1] {
    name="LeabraTrain";
    short_nm="Train";
    tags="Leabra, Std";
    desc="A complete training run of a Leabra network: iterating over epochs until the network has learned the task";
    flags=;
    objs {
     name=;
     el_typ=RndSeed;
     el_def=0;
     RndSeed @[0] {
      name="rnd_seed";
      seed{ 366657856;-109478335;-1118952948;1450110345;1436122796;1561628486;-1732606455;1637860702;2118235523;-929223085;1207702938;1229027634;-988406741;1004700629;1337851927;1822150333;843000892;658280381;-1912874333;-1295750504;-2034206506;-396025927;603328120;-484840081;-2026014796;1313513703;1104580824;1327122104;1078323225;1030842773;-1370331929;1019435896;-1521594760;-1120255933;35988167;-1615579226;693942232;383721565;-1931179561;-2067767760;-39064606;1966504174;-2017550987;314167070;620217602;1765592055;1776098876;-1458138304;-1450939590;1294419273;-1182147174;706921771;-1016541909;-1438951171;-284978223;-649939951;-299061934;-912803282;-826701573;944226835;-307184453;616623317;346975559;1916607554;-804191825;-867257059;1439466264;1837570592;640677961;1389037074;2128515269;-828112485;1991702848;-27582482;-108761653;-1334355917;-1835072351;-693301348;-788774647;1905918785;1413515408;-1367180666;-1230570906;1956400583;1337173362;-1617964620;1861362468;-329667856;1820425527;1334987943;-800648232;614992066;2018068198;271292544;-514872610;1860808336;-1030457195;-852108913;-897662818;962659156;358237320;-83766771;-1484562964;1570401613;-1619080348;1604965799;-2132729624;-237685059;714884962;-1115055081;-1939549769;1878235608;1231016973;396170541;-242651085;697496419;1995374979;-1230492993;-161283577;-281022453;-1947862112;2127821155;-1547381212;-699608199;-372131426;-883015570;1805959295;242573365;-2109844887;564053944;1385055258;-179285462;1338465201;-343384843;960910228;-192598549;-546028272;1230728200;-1641975529;1011407572;832948784;384595325;-2003484705;-1122338880;-472509926;2111014254;1357188189;-1535173409;-224155451;1968016563;-1195260720;-1870329487;-55556617;-525914659;43181872;872277643;1431918707;-5052521;1687130626;-1008912690;-1540008831;-421956784;-1647907999;-416818766;638557305;-1305182878;1399707526;-1956755478;1208321840;-1109487618;1136700182;942919614;-1127242590;-1654287411;-740943783;-923417039;1399190634;1240707560;-1061559649;-2048924609;-1675316795;235840312;2007457230;-1427846558;-449759080;-1275901728;-2027244572;560533625;-409779847;1836654559;-1981193900;1065643437;-374613247;-32540021;1046880362;-527858539;374314482;-1774015681;1620849879;1874943797;497640524;680869573;-1260637821;-136015440;-1626650773;143220282;-315279440;447923566;36815670;-1651250401;-33994685;-1799110125;-292705655;-806476985;548359850;-1796668439;-1301000305;1330698362;1578908769;1678979771;-1664184770;-1690289527;-579306315;205560493;-1627481055;83318192;-364904622;-770108200;1175154251;-57795049;-189361462;269777716;-1670418324;-702268849;-2020496154;1547385567;1508968578;-113543268;-2133636695;225809510;1385702190;-886896260;-1151289587;76038366;579495562;-1220522137;2124374223;-850300867;-807110802;-1996000262;-657950254;1358948720;-151284847;-1271374953;-1605247033;1265678008;542120189;132399570;-1459266852;-1328568167;-479889109;888616397;636350439;1335051818;1154790143;145132863;-66752027;2103707337;-1886407180;1305309467;-1286960560;11302249;280921213;-344183966;1994065751;-1766790143;-634406589;-1346939051;-2005662359;916023118;1576042718;1592995860;-952093085;-166800133;1989852916;804353222;-617936580;1420189178;-473208793;-1023976619;315756560;132704115;-1696277373;164825354;1197403160;-176453628;-1581683989;1086119958;1930541373;1120088535;1904750746;1694179668;20817079;796453986;1071887834;35547699;-2009451951;1210664690;65407507;-273996364;1639305577;1940145983;-1532867922;1756463893;1387949086;1883390070;-1243341009;-1377148162;290843306;-199192495;1213387674;153645160;871629386;1552188021;-347894520;2003732892;1166823735;-2008288875;-1184816933;-1881860122;-1609076162;621162231;1733539775;-1081201341;1377215731;466785993;-1740238947;324616716;1155759118;-1551041986;539809536;-1849699243;-1414375767;-1335183922;-1107826988;892377543;652815325;-1853713268;1105632098;1826114156;-1239108769;-1543337456;1868700794;508563688;620418282;1565342645;-1235754136;-381258697;-630739478;-1269280940;-593079210;991151090;1447481828;1233608132;536440101;-1328292346;-410862334;-457106476;251071555;-1227050272;2096858780;-728685980;-310594793;-1013687207;225090296;885382479;380147875;447247560;1013783650;1508550181;-948383312;-1698133988;-1027095724;-876961326;-638471691;-95298161;-1330620994;-1147703121;516360901;279817790;1920396796;204688216;1928778560;-1523178706;-1386058266;1172332671;1889239362;1918622716;115552607;-1163439350;-726987848;-1495288488;2076555284;-1994924324;-1665024726;-1832777123;448000017;-1863462580;335041374;-1255656529;1648294363;1132740253;-286117592;1577740948;1933101927;1913378525;78348908;-1050000835;605114904;-563331813;2030957596;586143254;1154170452;2027820592;-791282691;-197567777;1480889974;-657060450;-1257806435;1017524328;273728182;-1022740099;641670758;-1158310417;1167785267;1812179053;-1115209648;-2113518577;-12660777;1875670107;-1402727622;-1202942255;-1704442375;-2039222078;-1395344004;1607021171;-276960584;778612870;-1318101858;-238876851;-604200568;200024218;-305051514;-352072898;183358935;606498458;-762311030;1549536982;-802952291;1888847137;-1826904212;-763040205;-180770114;55214944;1146369712;827674278;1279844176;1601795528;-1351415007;-615636572;-1251563591;-77577826;-1218319927;-934551056;1400910265;-2009655437;-1990280591;-2125718468;-1412017068;353062349;-156014399;220604523;-627296487;1389668645;1281818904;-672607806;-278787061;-1638463217;-947287799;1256156379;224173548;-1216242681;583285989;38114630;-1086301044;1439597557;-356276940;186359716;-1211055706;-1200018521;1840023309;1521137073;1483006054;1924442522;-146284769;-276495355;1389088344;-331019240;-478856285;-1685510115;-261198535;1754997729;-964163232;644264208;-1296732846;1447293587;-1617111138;-1652060527;-1681068795;-1847376694;1878076656;566933022;1933699552;273789136;-1115024356;-519045149;-631319186;-1180923120;1722647082;273309704;989080890;-1558191115;-598400633;388095785;-1494679997;-373024068;2078787187;1891782419;980932148;-27961185;1079735208;-895937334;939771499;-1348891306;-1048397756;1260500260;1044399803;-934085398;-1468695791;-1229210716;-1190731612;-629573211;-1886333274;897479901;897147483;587432722;-553297338;1850641510;-655260207;413478921;1008715453;-451964990;223937111;-1430291066;-162256056;225262028;1687813042;2119703254;1862313995;-176838613;1199620610;-1347082134;1072732996;-337598447;2047996760;-138500772;1582307259;811722915;-1667955311;-1312038846;1647426436;-1751373122;-559973774;847825372;2030199316;-1895763566;1200971802;857366514;-27369786;-1890200826;-270178590;632750612;1339852852;-1671881670;-993387414;-539989824;-157371837;432051605;739951391;584291474;-1611021838;1407383049;-1469228158;2040306651;86452574;-953638285;50727054;-1881710491;425798147;1827025040;-1496988521;-565359060;178258415;-1280136016;1422354080;-486627092;1231654835;2053764515;263167316;-389609329;-1511174744;1289068671;782090788;1344200355;      };
      mti=624;
     };
    };
    types {
     name=;
     el_typ=DynEnumType;
     el_def=0;
     DynEnumType @[0] {
      name="RndInitType";
      desc=;
      enums {
       name=;
       el_typ=DynEnumItem;
       el_def=0;
       DynEnumItem @[0] {
	name="OLD_SEED";
	value=0;
	desc="use stored random seed value (recreates same sequence every time)";
       };
       DynEnumItem @[1] {
	name="NEW_SEED";
	value=1;
	desc="generate new random seed (new sequence of random numbers)";
       };
      };
      bits=0;
     };
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to train";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="datatable with training patterns";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="no_prompts";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="If train is called by other programs (e.g., Batch), they should set this to true -- otherwise it is reset to false in Init";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="max_epoch";
      var_type=T_Int;
      int_val=50;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="maximum number of epochs to run";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch";
      var_type=T_Int;
      int_val=50;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current epoch -- local copy, which is used to update network's epoch counter";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="rnd_init";
      var_type=T_DynEnum;
      dyn_enum_val {
       enum_type=.projects[0].programs.gp[0][1].types[0]$$;
       value=0;
      };
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="how to initialize the random numbers when the Init button is pressed";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="err_stopcrit";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="stopping criterion -- when error measure (count of trials with a non-zero error by defult)
goes <= this value, stop training (set to -1 to disable stopping criterion, and always train to max_epoch epochs)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="rnd_seed";
      var_type=T_Object;
      object_type=RndSeed;
      object_val=.projects[0].programs.gp[0][1].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="random seed that is used at start of training -- if OldSeed is called";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="train_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].train_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="records time used to train network (object lives on network -- this is a pointer to it)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc=;
      flags=;
      result_var=.projects[0].programs.gp[0][1].args[2]$$;
      expr {
       expr="false";
      };
     };
     MethodCall @[1] {
      desc="check network to make sure it is ready to be run";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][1].args[0]$$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     AssignExpr @[2] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[6]$$;
      expr {
       expr="network.train_time";
      };
     };
     IfElse @[3] {
      desc="initialize random seed (either old or new)";
      flags=;
      cond {
       expr="rnd_init == OLD_SEED";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="restore previous random seed (all runs produce same results)";
	flags=;
	result_var=NULL;
	obj=.projects[0].programs.gp[0][1].vars[5]$$;
	method=RndSeed::OldSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="new random numbers each time";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][1].vars[5]$;
	method=RndSeed::NewSeed;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     IfGuiPrompt @[4] {
      desc="don't initialize weights without checking";
      flags=;
      prompt="Do you want to Initialize Network Weights";
      yes_label="Yes";
      no_label="No";
      yes_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][1].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get our pointer to the network training time object";
      flags=;
      result_var=$.projects[0].programs.gp[0][1].vars[6]$;
      expr {
       expr="network.train_time";
      };
     };
     MethodCall @[1] {
      desc="start timer to keep track of how long it takes to run entire training run";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][1].vars[6]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MemberAssign @[2] {
      desc="set network's training mode to our local value";
      flags=;
      obj=$.projects[0].programs.gp[0][1].args[0]$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     If @[3] {
      desc=;
      flags=;
      cond {
       expr="no_prompts";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="initialize network weights: could also load pre-set weights or something else here";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][1].args[0]$;
	method=Network::Init_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
       PrintExpr @[1] {
	desc=;
	flags=;
	expr {
	 expr="network.name << \" Weights Initialized\"";
	};
       };
      };
     };
     AssignExpr @[4] {
      desc="grab the official network epoch counter: will be initialized if needed by now";
      flags=;
      result_var=.projects[0].programs.gp[0][1].vars[1]$$;
      expr {
       expr="network.epoch";
      };
     };
     WhileLoop @[5] {
      desc="main loop over epochs of training";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the epoch program (one epoch), passes our network and input_data";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[0][2]$$;
	targ_ld_init="*LeabraEpoch*";
       };
       NetCounterIncr @[1] {
	desc="increment the epoch counter (locally and on network)";
	flags=;
	network_var=$.projects[0].programs.gp[0][1].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[0][1].vars[1]$;
	counter=Network::epoch;
	update_after=1;
       };
       IfBreak @[2] {
	desc="stop if errors go below stopping criterion (note: could use sse or avg_sse here instead)";
	flags=;
	cond {
	 expr="network.cnt_err <= err_stopcrit";
	};
       };
      };
      test {
       expr="epoch < max_epoch";
      };
     };
     MethodCall @[6] {
      desc="stop the timer -- time elapsed is now recorded in this object, and can be displayed or recorded to a data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][1].vars[6]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[2] {
    name="LeabraEpoch";
    short_nm="Epoch";
    tags="Leabra, Std";
    desc="iterates over all of the items in a data table and calls LeabraTrial process on them";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=2;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=.projects[0].networks[0].epoch_time$$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=26;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="train_mode";
      var_type=T_HardEnum;
      int_val=1;
      hard_enum_type=Network::TrainMode;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="TRAIN = update weights (learn), TEST = just record network's responses but don't learn";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[0][2].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[0][2].vars[1]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[0][2].vars[3]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     OtherProgramVar @[0] {
      desc=;
      flags=NEW_EL;
      other_prog=$.projects[0].programs.gp[0][1]$;
      set_other=0;
      var_1=.projects[0].programs.gp[0][2].vars[5]$$;
      var_2=NULL;
      var_3=NULL;
      var_4=NULL;
     };
     MemberAssign @[1] {
      desc="set network's training mode to our local value";
      flags=NEW_EL;
      obj=$.projects[0].programs.gp[0][2].args[0]$;
      path="train_mode";
      expr {
       expr="train_mode";
      };
      update_after=0;
     };
     NetCounterInit @[2] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$.projects[0].programs.gp[0][2].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][2].vars[1]$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[3] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$.projects[0].programs.gp[0][2].vars[3]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[4] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].vars[3]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][2].vars[2]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[6] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[0][3]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.projects[0].programs.gp[0][2].args[1]$$;
      index_var=.projects[0].programs.gp[0][2].vars[4]$$;
      order_var=.projects[0].programs.gp[0][2].vars[0]$$;
      order=RANDOM;
      item_idx_list{ 0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     IfElse @[7] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][2].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].args[0]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[9] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][2].vars[3]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[10] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs.gp[0][8]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[3] {
    name="LeabraTrial";
    short_nm="Trial";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[0][3].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[0][3].vars[0]$$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$.projects[0].programs.gp[0][3].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][3].vars[0]$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
     MethodCall @[1] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[2] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[0][4]$$;
	targ_ld_init="*LeabraSettle*";
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[0][3].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[0][3].vars[0]$;
	counter=LeabraNetwork::phase_no;
	update_after=0;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][3].args[0]$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[3] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][3].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[4] {
      desc="test if it is time to update the weight values from delta weights (dWt) computed over trials";
      flags=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][3].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     ProgramCall @[5] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs.gp[0][7]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[6] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$.projects[0].programs.gp[0][3].args[0]$;
      update_var=.projects[0].programs.gp[0][3].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[4] {
    name="LeabraSettle";
    short_nm="Settle";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[0][4].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[0][4].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$.projects[0].programs.gp[0][4].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[0][4].vars[0]$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][4].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects[0].programs.gp[0][6]$$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[0][4].vars[1]$$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$.projects[0].programs.gp[0][4].vars[1]$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[5] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.projects[0].programs.gp[0][5]$$;
	targ_ld_init="*LeabraCycle*";
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[0][4].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[0][4].vars[0]$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[6] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][4].args[0]$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[7] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.phase == LeabraNetwork::MINUS_PHASE";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][4].args[0]$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[8] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[0][4].args[0]$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[0][4].args[0]$;
      update_var=.projects[0].programs.gp[0][4].vars[2]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[5] {
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][5].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[0][5].args[0]$;
      update_var=$.projects[0].programs.gp[0][5].vars[0]$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[6] {
    name="ApplyInputs";
    short_nm="AplyIn";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$.projects[0].data.gp[0][0]$;
      network=$.projects[0].networks[0]$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[0][6].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][6].vars[0]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][6].vars[0]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][6].vars[0]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][6].vars[0]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[7] {
    name="LeabraTrialMonitor";
    short_nm="TrlMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="group_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="group_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="phase_no";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="phase_no";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="minus_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="minus_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="Output_act_m";
	computed=0;
	object_type=LeabraLayer;
	object=.projects[0].networks[0].layers[2]$$;
	variable="act_m";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="min_dist";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="closest_name";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="name_err";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[13] {
	name="both_err";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=$.projects[0].data.gp[1][0]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][7].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="min_dist";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[3] {
      name="closest_name";
      var_type=T_String;
      string_val="12_b";
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[4] {
      name="name_err";
      var_type=T_Real;
      real_val=1;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[5] {
      name="both_err";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[6] {
      name="TwoOut_Train";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc=;
      flags=NEW_EL;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="trial_output_data";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=taString;
	type="String";
	name="output_col_name";
	required=1;
	def_val=;
	expr {
	 expr="\"Output_act_m\"";
	};
       };
       ProgArg @[2] {
	arg_type=DataTable;
	type="DataTable*";
	name="target_input_data";
	required=1;
	def_val=;
	expr {
	 expr="TwoOut_Train";
	};
       };
       ProgArg @[3] {
	arg_type=taString;
	type="String";
	name="target_col_name";
	required=1;
	def_val=;
	expr {
	 expr="\"Output\"";
	};
       };
      };
      target=.projects[0].programs[0]$$;
      targ_ld_init="*FindClosestEvent_Priming*";
     };
     OtherProgramVar @[3] {
      desc=;
      flags=NEW_EL;
      other_prog=$.projects[0].programs[0]$;
      set_other=0;
      var_1=.projects[0].programs.gp[0][7].vars[2]$$;
      var_2=.projects[0].programs.gp[0][7].vars[3]$$;
      var_3=.projects[0].programs.gp[0][7].vars[4]$$;
      var_4=.projects[0].programs.gp[0][7].vars[5]$$;
     };
     DataVarProg @[4] {
      desc=;
      flags=NEW_EL;
      data_var=$.projects[0].programs.gp[0][7].vars[0]$;
      set_data=1;
      row_spec=CUR_ROW;
      row_var=NULL;
      quiet=0;
      var_1=$.projects[0].programs.gp[0][7].vars[2]$;
      var_2=$.projects[0].programs.gp[0][7].vars[3]$;
      var_3=$.projects[0].programs.gp[0][7].vars[5]$;
      var_4=$.projects[0].programs.gp[0][7].vars[4]$;
     };
     MethodCall @[5] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][7].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[6] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][7].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[8] {
    name="LeabraEpochMonitor";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="avg_sse";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_sse";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="cnt_err";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="cnt_err";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="avg_ext_rew";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_ext_rew";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="avg_cycles";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="avg_cycles";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="epoch_time_tot";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="epoch_time_usr";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="sum_min_dist";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$.projects[0].data.gp[1][0]$;
	agg_col {
	 col_name="min_dist";
	};
	agg {name="Aggregate": op=SUM: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="sum_name_err";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$.projects[0].data.gp[1][0]$;
	agg_col {
	 col_name="name_err";
	};
	agg {name="Aggregate": op=SUM: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="sum_both_err";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$.projects[0].data.gp[1][0]$;
	agg_col {
	 col_name="both_err";
	};
	agg {name="Aggregate": op=SUM: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=.projects[0].data.gp[1][1]$$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][1]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[0][8].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects[0].networks[0].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the network's epoch-level timer, to record how long it took to process an epoch";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     AssignExpr @[0] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=.projects[0].programs.gp[0][8].vars[2]$$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[1] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][8].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[3] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][8].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[0][8].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][8].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     AssignExpr @[2] {
      desc="get the epoch timer from current network";
      flags=;
      result_var=$.projects[0].programs.gp[0][8].vars[2]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="set the total time to compute the epoch (epoch_time_tot -- wall clock time) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][8].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetTotSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_tot\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[4] {
      desc="set the user process time (cpu time for this process, epoch_time_usr) to time used data from network timer";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][8].vars[0]$;
      method=DataTable::SetValColName;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_Variant_ref;
	type="const Variant&";
	name="val";
	required=1;
	def_val=;
	expr {
	 expr="epoch_timer.used.GetUsrSecs()";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="col_name";
	required=1;
	def_val="\"\"";
	expr {
	 expr="\"epoch_time_usr\"";
	};
       };
       ProgArg @[2] {
	arg_type=int;
	type="int";
	name="row";
	required=1;
	def_val=;
	expr {
	 expr="-1";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr=;
	};
       };
      };
     };
     MethodCall @[5] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][8].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[9] {
    name="SaveWeights";
    short_nm="SvWts";
    tags="Network, Weights";
    desc="save network's current weight values to file using WriteWeights function, with file name based on project name + batch + epoch values";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="tag";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="user-provided tag (startup script will set this!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="wts_subdir";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|EDIT_VAL;
      reference=0;
      desc="user-provided subdirectory to save weights in";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="fname";
      var_type=T_String;
      string_val=;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="final generated file name -- do not edit!";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_str";
      var_type=T_String;
      string_val="0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="string rep of epoch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="batch_str";
      var_type=T_String;
      string_val="03";
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="string rep of batch with leading zeros";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="final_tag";
      var_type=T_String;
      string_val=".03_0036";
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="batch + epoch";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     IfReturn @[0] {
      desc="do not save if not the first dmem process (only relevant for dmem = distributed memory processing)";
      flags=;
      cond {
       expr="taMisc::dmem_proc > 0";
      };
     };
     MiscCall @[1] {
      desc="get current batch counter for file name, with leading zeros to length 3";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[4]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	expr {
	 expr="network.batch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	expr {
	 expr="2";
	};
       };
      };
     };
     MiscCall @[2] {
      desc="get current epoch counter with leading zeros to length 4";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[3]$$;
      object_type=taMisc;
      method=taMisc::LeadingZeros;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=int;
	type="int";
	name="num";
	required=1;
	def_val=;
	expr {
	 expr="network.epoch";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="len";
	required=1;
	def_val=;
	expr {
	 expr="4";
	};
       };
      };
     };
     AssignExpr @[3] {
      desc="string 'tag' to identify the batch, epoch, and other user id info for the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[5]$$;
      expr {
       expr="tag + \".\" + batch_str + \"_\" + epoch_str";
      };
     };
     MethodCall @[4] {
      desc="get a file name based on the project's current file name, for saving the weights";
      flags=;
      result_var=.projects[0].programs.gp[0][9].vars[2]$$;
      obj=.projects[0].programs.gp[0][9].args[0]$$;
      method=taBase::GetFileNameFmProject;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="ext";
	required=1;
	def_val=;
	expr {
	 expr="\".wts.gz\"";
	};
       };
       ProgArg @[1] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="tag";
	required=0;
	def_val="\"\"";
	expr {
	 expr="final_tag";
	};
       };
       ProgArg @[2] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="subdir";
	required=0;
	def_val="\"\"";
	expr {
	 expr="wts_subdir";
	};
       };
       ProgArg @[3] {
	arg_type=bool;
	type="bool";
	name="dmem_proc_no";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[5] {
      desc="save the weights to that file name";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[0][9].args[0]$;
      method=Network::SaveWeights;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=const_taString_ref;
	type="const taString&";
	name="fname";
	required=0;
	def_val="\"\"";
	expr {
	 expr="fname";
	};
       };
       ProgArg @[1] {
	arg_type=Network::WtSaveFormat;
	type="Network::WtSaveFormat";
	name="fmt";
	required=0;
	def_val="Network::NET_FMT";
	expr {
	 expr="Network::NET_FMT";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
  Program_Group @.gp[1] {
   name="LeabraAll_Test";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All, Test";
   desc="The full set of programs for testing a standard Leabra network (starting with Epoch)";
   Program @[0] {
    name="LeabraEpochTest";
    short_nm="pchTst";
    tags="Leabra, Std, Test";
    desc="sets testing flag, iterates over all of the items in a data table and calls LeabraTestTrial process on them";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[0][1]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="table of patterns to present to the network, one row at a time";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="data_loop_order";
      var_type=T_HardEnum;
      int_val=0;
      hard_enum_type=DataLoop::Order;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="controls the order in which events (rows of the input data datatable) are presented to the network
(SEQUENTIAL, PERMUTED, RANDOM)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current trial (event) within the epoch -- increments automatically";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][2]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="trial-level output data -- we reset it every epoch by default, so it just contains last epoch of data";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="epoch_timer";
      var_type=T_Object;
      object_type=TimeUsed;
      object_val=$.projects[0].networks[0].epoch_time$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="timer to record time required to perform one epoch of processing (object is on network -- this is a pointer to it)";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="data_loop_index";
      var_type=T_Int;
      int_val=26;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="index counter for the looping over items in the input_data datatable (not always the same as trial counter, depending on distributed memory computation)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=.projects[0].programs.gp[1][0].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[1][0].vars[1]$$;
      counter=Network::trial;
      update_after=0;
     };
     AssignExpr @[1] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=.projects[0].programs.gp[1][0].vars[3]$$;
      expr {
       expr="network.epoch_time";
      };
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize trial counter (local variable and in the network)";
      flags=;
      network_var=$.projects[0].programs.gp[1][0].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[1][0].vars[1]$;
      counter=Network::trial;
      update_after=0;
     };
     MemberAssign @[1] {
      desc="set to testing mode";
      flags=NEW_EL;
      obj=$.projects[0].programs.gp[1][0].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TEST";
      };
      update_after=0;
     };
     AssignExpr @[2] {
      desc="get pointer to epoch timer object on network";
      flags=;
      result_var=$.projects[0].programs.gp[1][0].vars[3]$;
      expr {
       expr="network.epoch_time";
      };
     };
     MethodCall @[3] {
      desc="start the epoch timer to record computation time per epoch";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][0].vars[3]$;
      method=TimeUsed::StartTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_used";
	required=0;
	def_val="true";
	expr {
	 expr="true";
	};
       };
      };
     };
     MethodCall @[4] {
      desc="reset trial-level monitor data every epoch, so it reflects only the most recent epoch's worth of data (turn flags OFF to accumulate trial data across entire training run)";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][0].vars[2]$$;
      method=DataTable::ResetData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetDataLoop @[5] {
      desc="iterates over the events/rows of input_data, according to data_loop_order variable";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the trial program, passing network and input_data";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[1][1]$$;
	targ_ld_init="*LeabraTrial*";
       };
      };
      data_var=.projects[0].programs.gp[1][0].args[1]$$;
      index_var=.projects[0].programs.gp[1][0].vars[4]$$;
      order_var=.projects[0].programs.gp[1][0].vars[0]$$;
      order=SEQUENTIAL;
      item_idx_list{ 0;1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;      };
      update_after=0;
      dmem_nprocs=1;
      dmem_this_proc=0;
      grouped=0;
      group_col 9 0="Group";
      group_index_var=NULL;
      group_order_var=NULL;
      group_order=PERMUTED;
      group_idx_list{       };
     };
     IfElse @[6] {
      desc="if full batch mode, update only at end of epoch";
      flags=;
      cond {
       expr="network.wt_update == Network::BATCH";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="final update of weights based on accumulated changes";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][0].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
      };
     };
     MethodCall @[7] {
      desc="network accumulates some core statistics over the epoch -- this finalizes that process and computes summary stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][0].args[0]$;
      method=LeabraNetwork::Compute_EpochStats;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[8] {
      desc="done with the computation in the epoch -- record time it took";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][0].vars[3]$;
      method=TimeUsed::EndTimer;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[9] {
      desc="run program that records data from network and possibly other sources about the epoch";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs.gp[1][6]$$;
      targ_ld_init="*LeabraEpochMonitor*";
     };
     MemberAssign @[10] {
      desc="set back to training mode";
      flags=NEW_EL;
      obj=$.projects[0].programs.gp[1][0].args[0]$;
      path="train_mode";
      expr {
       expr="Network::TRAIN";
      };
      update_after=0;
     };
    };
    step_prog=$.projects[0].programs.gp[1][1]$;
    step_n=1;
   };
   Program @[1] {
    name="LeabraTrialTest";
    short_nm="TrlTst";
    tags="Leabra, Std";
    desc="Leabra processing of a single input/toutput event or external information: typically runs a minus and a plus phase, then learns (unless testing)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to operate on -- typically set by higher-level calling programs";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][1]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="datatable containing training input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="phase_no";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="local phase counting variable (0 is typically minus phase, 1 is typically plus -- depends on network settings)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether to update any network view displays after trial is completed";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="Name";
      var_type=T_String;
      string_val="12_b";
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=.projects[0].programs.gp[1][1].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[1][1].vars[0]$$;
      counter=LeabraNetwork::phase_no;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     DataVarProg @[0] {
      desc=;
      flags=NON_STD;
      data_var=.projects[0].programs.gp[1][1].args[1]$$;
      set_data=0;
      row_spec=CUR_ROW;
      row_var=NULL;
      quiet=1;
      var_1=.projects[0].programs.gp[1][1].vars[2]$$;
      var_2=NULL;
      var_3=NULL;
      var_4=NULL;
     };
     IfElse @[1] {
      desc=;
      flags=NON_STD;
      cond {
       expr="Name.contains(\"_a\")";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MemberAssign @[0] {
	desc="set output to an input layer type to clamp output pattern on it";
	flags=;
	obj=$.projects[0].programs.gp[1][1].args[0]$;
	path="layers.Output.layer_type";
	expr {
	 expr="Layer::INPUT";
	};
	update_after=0;
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MemberAssign @[0] {
	desc="set output to an target layer type let it settle freely";
	flags=;
	obj=$.projects[0].programs.gp[1][1].args[0]$;
	path="layers.Output.layer_type";
	expr {
	 expr="Layer::TARGET";
	};
	update_after=0;
       };
      };
     };
     NetCounterInit @[2] {
      desc="initialize the local phase_no counter, and corresponding network one";
      flags=;
      network_var=$.projects[0].programs.gp[1][1].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[1][1].vars[0]$;
      counter=LeabraNetwork::phase_no;
      update_after=1;
     };
     MethodCall @[3] {
      desc="initializes various counters at start of trial";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][1].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     WhileLoop @[4] {
      desc="loop over phases of settling in the network";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the settle program (which iterates over cyles of network activation updating) for each phase";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=DataTable;
	  type="DataTable*";
	  name="input_data";
	  required=1;
	  def_val=;
	  expr {
	   expr="input_data";
	  };
	 };
	};
	target=.projects[0].programs.gp[1][2]$$;
	targ_ld_init="*LeabraSettle*";
       };
       NetCounterIncr @[1] {
	desc="increment the phase number (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[1][1].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[1][1].vars[0]$;
	counter=LeabraNetwork::phase_no;
	update_after=1;
       };
       MethodCall @[2] {
	desc="increments other phase state information to prepare for the next phase of settling";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][1].args[0]$;
	method=LeabraNetwork::Trial_UpdatePhase;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
      test {
       expr="phase_no < network.phase_max";
      };
     };
     MethodCall @[5] {
      desc="after the trial is over, do final computations: Compute_dWt (learn weights), compute stats";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][1].args[0]$;
      method=LeabraNetwork::Trial_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[6] {
      desc=;
      flags=;
      cond {
       expr="network.Compute_Weights_Test(network.trial+1)";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="update the weight values based on changes computed by trial program";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][1].args[0]$;
	method=Network::Compute_Weights;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     ProgramCall @[7] {
      desc="records data about the trial-level processing to a datatable for graphing/processing";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
      target=.projects[0].programs.gp[1][5]$$;
      targ_ld_init="*LeabraTrialMonitor*";
     };
     NetUpdateView @[8] {
      desc="update the network view(s) (only if update_net_view is true)";
      flags=;
      network_var=$.projects[0].programs.gp[1][1].args[0]$;
      update_var=.projects[0].programs.gp[1][1].vars[1]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[2] {
    name="LeabraSettleTest";
    short_nm="SttTst";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][1]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="cycle";
      var_type=T_Int;
      int_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="min_cycles";
      var_type=T_Int;
      int_val=15;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=.projects[0].programs.gp[1][2].args[0]$$;
      local_ctr_var=.projects[0].programs.gp[1][2].vars[0]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name=;
     el_typ=NetCounterInit;
     el_def=0;
     NetCounterInit @[0] {
      desc="initialize local cycle counter and corresponding counter on network";
      flags=;
      network_var=$.projects[0].programs.gp[1][2].args[0]$;
      local_ctr_var=$.projects[0].programs.gp[1][2].vars[0]$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][2].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc="apply external input activations from the input_data table to the network
this program can be extended to do arbitrary things to generate data and apply it to network layers";
      flags=;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=Network;
	type="LeabraNetwork*";
	name="network";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable;
	type="DataTable*";
	name="input_data";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
      };
      target=.projects[0].programs.gp[1][4]$$;
      targ_ld_init="*ApplyInputs*";
     };
     MethodCall @[3] {
      desc="initializes various counters at start of settling";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Settle_Init;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     IfElse @[4] {
      desc="get appropriate min_cycles value depending on which phase we're in";
      flags=;
      cond {
       expr="network.phase_no <= 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=.projects[0].programs.gp[1][2].vars[1]$$;
	expr {
	 expr="network.min_cycles";
	};
       };
      };
      false_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       AssignExpr @[0] {
	desc="get minimum number of cycles from parameter on network (which is where you should change this value!)";
	flags=;
	result_var=$.projects[0].programs.gp[1][2].vars[1]$;
	expr {
	 expr="network.min_cycles_phase2";
	};
       };
      };
     };
     WhileLoop @[5] {
      desc="the main loop over cycles of updating";
      flags=;
      loop_code {
       name=;
       el_typ=ProgramCall;
       el_def=0;
       ProgramCall @[0] {
	desc="run the cycle program, which computes one cycle of activations";
	flags=;
	prog_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.projects[0].programs.gp[1][3]$$;
	targ_ld_init="*LeabraCycle*";
       };
       NetCounterIncr @[1] {
	desc="increment cycle counter (also on network)";
	flags=;
	network_var=$.projects[0].programs.gp[1][2].args[0]$;
	local_ctr_var=$.projects[0].programs.gp[1][2].vars[0]$;
	counter=Network::cycle;
	update_after=0;
       };
       IfContinue @[2] {
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=;
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[3] {
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=;
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < network.cycle_max";
      };
     };
     MethodCall @[6] {
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][2].args[0]$;
      method=LeabraNetwork::Settle_Final;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     If @[7] {
      desc="only run trial-level statistics in minus phase (otherwise network may have correct answer clamped on!).  IMPORTANT: this assumes that you've got target activation values for output layers already
presented in the minus phase -- if this is not the case (values are computed on the fly), you may want to run this instead at the start of the plus phase, after ApplyInputs";
      flags=;
      cond {
       expr="network.phase == LeabraNetwork::MINUS_PHASE";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="compute trial-level statistics";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][2].args[0]$;
	method=LeabraNetwork::Compute_TrialStats;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     If @[8] {
      desc="this stat must be called in plus phase when reward information is avail";
      flags=;
      cond {
       expr="network.phase_no == 1";
      };
      true_code {
       name=;
       el_typ=ProgEl;
       el_def=0;
       MethodCall @[0] {
	desc="get external reward information";
	flags=;
	result_var=NULL;
	obj=$.projects[0].programs.gp[1][2].args[0]$;
	method=LeabraNetwork::Compute_ExtRew;
	meth_args {
	 name=;
	 el_typ=ProgArg;
	 el_def=0;
	};
       };
      };
     };
     NetUpdateView @[9] {
      desc="update network views, if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[1][2].args[0]$;
      update_var=.projects[0].programs.gp[1][2].vars[2]$$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[3] {
    name="LeabraCycleTest";
    short_nm="CycTst";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    flags=;
    objs {
     name=;
     el_typ=taOBase;
     el_def=0;
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][3].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     NetUpdateView @[1] {
      desc="update network views if update_net_view == true";
      flags=;
      network_var=$.projects[0].programs.gp[1][3].args[0]$;
      update_var=$.projects[0].programs.gp[1][3].vars[0]$;
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[4] {
    name="ApplyInputsTest";
    short_nm="AplyIn";
    tags="Network, InputData, Apply";
    desc="apply the current input data to the network as external input and target values";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=LayerWriter;
     el_def=0;
     LayerWriter @[0] {
      name="LayerWriter_0";
      data=$.projects[0].data.gp[0][1]$;
      network=$.projects[0].networks[0]$;
      layer_data {
       name=;
       el_typ=LayerWriterEl;
       el_def=0;
       LayerWriterEl @[0] {
	chan_name="Input";
	net_target=LAYER;
	layer_name="Input";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=EXT;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[1] {
	chan_name="Output";
	net_target=LAYER;
	layer_name="Output";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=TARG;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
       LayerWriterEl @[2] {
	chan_name="Name";
	net_target=TRIAL_NAME;
	layer_name="Name";
	offset {x=0: y=0: };
	use_layer_type=1;
	na_by_range=0;
	ext_flags=;
	noise {name="": type=NONE: mean=0: var=0.5: par=1: };
       };
      };
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to apply inputs to -- typically set by calling program";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="input_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][1]$;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="input datatable containing input/output patterns";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="LayerWriter_0";
      var_type=T_Object;
      object_type=LayerWriter;
      object_val=.projects[0].programs.gp[1][4].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="this is a pointer to the LayerWriter object in objs -- edit that object to determine how information is presented to the network";
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][4].vars[0]$$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the layer writer -- will emit warnings and errors for missing or misconfigured items";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][4].vars[0]$;
      method=taList_impl::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="sets the datatable and network for the layer writer, so it knows what to write to";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][4].vars[0]$;
      method=LayerWriter::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataBlock_ptr;
	type="DataBlock*";
	name="db";
	required=1;
	def_val=;
	expr {
	 expr="input_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="apply inputs to the network!  layer writer has all the key specs";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][4].vars[0]$;
      method=LayerWriter::ApplyInputData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[5] {
    name="LeabraTrialMonitorTest";
    short_nm="TrlMon";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="trial";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="trial";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="trial_name";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="trial_name";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="min_dist";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="closest_name";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_STRING;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="name_err";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="both_err";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="Output_act_m";
	computed=0;
	object_type=LeabraLayer;
	object=$.projects[0].networks[0].layers[2]$;
	variable="act_m";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="Aggregate": op=NONE: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=$.projects[0].data.gp[1][2]$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][2]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[1][5].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="TwoOut_Train";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[0][0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[3] {
      name="min_dist";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[4] {
      name="closest_name";
      var_type=T_String;
      string_val="12_b";
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[5] {
      name="name_err";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[6] {
      name="both_err";
      var_type=T_Real;
      real_val=0;
      objs_ptr=0;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=ProgEl;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set the network and datatable for the NetMonitor";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][5].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][5].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][5].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][5].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][5].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     ProgramCall @[2] {
      desc=;
      flags=NEW_EL;
      prog_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable;
	type="DataTable*";
	name="trial_output_data";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=taString;
	type="String";
	name="output_col_name";
	required=1;
	def_val=;
	expr {
	 expr="\"Output_act_m\"";
	};
       };
       ProgArg @[2] {
	arg_type=DataTable;
	type="DataTable*";
	name="target_input_data";
	required=1;
	def_val=;
	expr {
	 expr="TwoOut_Train";
	};
       };
       ProgArg @[3] {
	arg_type=taString;
	type="String";
	name="target_col_name";
	required=1;
	def_val=;
	expr {
	 expr="\"Output\"";
	};
       };
      };
      target=$.projects[0].programs[0]$;
      targ_ld_init="*FindClosestEvent_Priming*";
     };
     OtherProgramVar @[3] {
      desc=;
      flags=NEW_EL;
      other_prog=$.projects[0].programs[0]$;
      set_other=0;
      var_1=.projects[0].programs.gp[1][5].vars[3]$$;
      var_2=.projects[0].programs.gp[1][5].vars[4]$$;
      var_3=.projects[0].programs.gp[1][5].vars[5]$$;
      var_4=.projects[0].programs.gp[1][5].vars[6]$$;
     };
     DataVarProg @[4] {
      desc=;
      flags=NEW_EL;
      data_var=$.projects[0].programs.gp[1][5].vars[0]$;
      set_data=1;
      row_spec=CUR_ROW;
      row_var=NULL;
      quiet=1;
      var_1=$.projects[0].programs.gp[1][5].vars[3]$;
      var_2=$.projects[0].programs.gp[1][5].vars[4]$;
      var_3=$.projects[0].programs.gp[1][5].vars[6]$;
      var_4=$.projects[0].programs.gp[1][5].vars[5]$;
     };
     MethodCall @[5] {
      desc="update views and other things after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][5].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[6] {
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][5].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	expr {
	 expr="1";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
   Program @[6] {
    name="LeabraEpochMonitorTest";
    short_nm="EpcMon";
    tags="Leabra, Std, Monitor";
    desc="monitor epoch-level data from the network to a datatable (EpochOutputData typically) for use in graphing and viewing and further analysis";
    flags=NO_STOP_STEP;
    objs {
     name=;
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="epoch_netmon";
      items {
       name=;
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="batch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="batch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="epoch";
	computed=0;
	object_type=LeabraNetwork;
	object=$.projects[0].networks[0]$;
	variable="epoch";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="": op=NONE: rel={name="": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="sum_min_dist";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$.projects[0].data.gp[1][2]$;
	agg_col {
	 col_name="min_dist";
	};
	agg {name="Aggregate": op=SUM: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="sum_name_err";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$.projects[0].data.gp[1][2]$;
	agg_col {
	 col_name="name_err";
	};
	agg {name="Aggregate": op=SUM: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="sum_both_err";
	computed=1;
	object_type=NULL;
	object=NULL;
	variable="act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=1;
	data_src=$.projects[0].data.gp[1][2]$;
	agg_col {
	 col_name="both_err";
	};
	agg {name="Aggregate": op=SUM: rel={name="Relation": rel=LESSTHANOREQUAL: val=0: use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="SimpleMathSpec": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.projects[0].networks[0]$;
      data=.projects[0].data.gp[1][4]$$;
      rmv_orphan_cols=1;
     };
    };
    types {
     name=;
     el_typ=ProgType;
     el_def=0;
    };
    args {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.projects[0].networks[0]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network to get data from";
      init_from=NULL;
     };
    };
    vars {
     name=;
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="epoch_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][4]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="data table to write the epoch data to";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="epoch_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.projects[0].programs.gp[1][6].objs[0]$$;
      objs_ptr=1;
      flags=NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc="network monitor object that contains full specs for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="TrialTestOutputData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.projects[0].data.gp[1][2]$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[3] {
      name="AllTrialTestOutputData";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.projects[0].data.gp[1][3]$$;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name=;
     el_typ=Function;
     el_def=0;
    };
    load_code {
     name=;
     el_typ=AssignExpr;
     el_def=0;
    };
    init_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="set data and network on NetMonitor object";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][6].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	expr {
	 expr="epoch_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	expr {
	 expr="network";
	};
       };
      };
     };
     MethodCall @[1] {
      desc="check configuration and emit errors/warnings for problems";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	expr {
	 expr="false";
	};
       };
      };
     };
     MethodCall @[2] {
      desc="update the monitor items and data schema based on current settings of NetMonitor";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	expr {
	 expr="true";
	};
       };
      };
     };
    };
    prog_code {
     name=;
     el_typ=MethodCall;
     el_def=0;
     MethodCall @[0] {
      desc="add a new blank row to the data";
      flags=;
      result_var=NULL;
      obj=.projects[0].programs.gp[1][6].vars[0]$$;
      method=DataTable::AddBlankRow;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[1] {
      desc="get the new monitor data and stor it into the data table -- this does the main job here";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     MethodCall @[2] {
      desc="update after writing new data to monitor data table";
      flags=;
      result_var=NULL;
      obj=$.projects[0].programs.gp[1][6].vars[0]$;
      method=DataBlock::WriteClose;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
      };
     };
     DataProcCall @[3] {
      desc=;
      flags=;
      result_var=NULL;
      object_type=taDataProc;
      method=taDataProc::AppendRows;
      meth_args {
       name=;
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dest";
	required=1;
	def_val=;
	expr {
	 expr="AllTrialTestOutputData";
	};
       };
       ProgArg @[1] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="src";
	required=1;
	def_val=;
	expr {
	 expr="TrialTestOutputData";
	};
       };
      };
     };
    };
    step_prog=NULL;
    step_n=1;
   };
  };
 };
 viewers {
  name=;
  el_typ=TopLevelViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {
     name="view_win_lft";
     value 6 0=0.001843884470872581;
     val_type_fixed=0;
    };
    UserDataItem @[1] {
     name="view_win_top";
     value 6 0=0.001945525291375816;
     val_type_fixed=0;
    };
    UserDataItem @[2] {
     name="view_win_wd";
     value 6 0=0.9963122606277466;
     val_type_fixed=0;
    };
    UserDataItem @[3] {
     name="view_win_ht";
     value 6 0=0.7996109127998352;
     val_type_fixed=0;
    };
    UserDataItem @[4] {
     name="view_win_iconified";
     value 1 0=0;
     val_type_fixed=0;
    };
    UserDataItem @[5] {
     name="view_splitter_state";
     value 9 0="AAAA/wAAAAAAAAADAAAAzwAAAo4AAALsAQAAAAYBAAAAAQ==";
     val_type_fixed=0;
    };
   };
   name="Browser3";
   m_data=.projects[0]$$;
   visible=1;
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   toolbars {
    name=;
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_win_visible";
       value 1 0=0;
       val_type_fixed=0;
      };
     };
     name="Application";
     m_data=NULL;
     visible=0;
     lft=0;
     top=0.03210117;
     o=Horizontal;
    };
   };
   frames {
    name=;
    el_typ=FrameViewer;
    el_def=0;
    tabBrowseViewer @[0] {
     name="Tree";
     m_data=NULL;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.projects[0]$;
    };
    PanelViewer @[1] {
     name="Panels";
     m_data=NULL;
     visible=1;
    };
    T3DataViewer @[2] {
     name="T3Frames";
     m_data=NULL;
     visible=1;
     frames {
      name=;
      el_typ=T3DataViewFrame;
      el_def=0;
      T3DataViewFrame @[0] {
       name="ActPrimeNetwork";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 NetView @[0] {
	  name=;
	  m_data=$.projects[0].networks[0]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  display=1;
	  lay_mv=0;
	  net_text=0;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  cur_unit_vals{ act;	  };
	  unit_src_path=".layers[2].units[0]";
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_NONE;
	  max_size {x=5: y=6: z=2.333333: };
	  font_sizes {
	   net_name=0.05;
	   net_vals=0.05;
	   layer=0.04;
	   layer_min=0.01;
	   layer_vals=0.03;
	   prjn=0.01;
	   unit=0.02;
	   un_nm_len=3;
	  };
	  view_params {
	   xy_square=0;
	   unit_spacing=0.05;
	   prjn_disp=L_R_B;
	   prjn_name=0;
	   prjn_width=0.002;
	   prjn_trans=0.5;
	   lay_trans=0.5;
	   unit_trans=0.6;
	   laygp_width=1;
	   show_laygp=1;
	  };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.5;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=.colorspecs[0]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name=;
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=0;Hidden=0;Output=0;	  };
	 };
	 GridTableView @[1] {
	  name=;
	  m_data=$.projects[0].data.gp[1][2]$;
FloatTransform @*(.m_transform) {scale={x=0.3937817: y=0.3937817: z=0.3937817: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-0.1032725: y=1.110176: z=-3.260488e-07: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="batch";
	    m_data=.projects[0].data.gp[1][2].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="epoch";
	    m_data=.projects[0].data.gp[1][2].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="trial";
	    m_data=.projects[0].data.gp[1][2].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    name="trial_name";
	    m_data=.projects[0].data.gp[1][2].data[3]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    name="min_dist";
	    m_data=.projects[0].data.gp[1][2].data[4]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[5] {
	    name="closest_name";
	    m_data=.projects[0].data.gp[1][2].data[5]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[6] {
	    name="name_err";
	    m_data=.projects[0].data.gp[1][2].data[6]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[7] {
	    name="both_err";
	    m_data=.projects[0].data.gp[1][2].data[7]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[8] {
	    name="Output_act_m";
	    m_data=.projects[0].data.gp[1][2].data[8]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=5;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=0.3937817: y=0.3937817: z=0.3937817: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-0.1032725: y=1.110176: z=-3.260488e-07: }: };
	  view_rows=5;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=6;
	  col_range {min=2: max=7: };
	  width=3;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.08: max=0.1: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	 };
	 GridTableView @[2] {
	  name=;
	  m_data=$.projects[0].data.gp[1][4]$;
FloatTransform @*(.m_transform) {scale={x=0.239805: y=0.239805: z=0.239805: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-0.100808: y=1.573068: z=-2.655137e-06: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="batch";
	    m_data=.projects[0].data.gp[1][4].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="epoch";
	    m_data=.projects[0].data.gp[1][4].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="sum_min_dist";
	    m_data=.projects[0].data.gp[1][4].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[3] {
	    name="sum_name_err";
	    m_data=.projects[0].data.gp[1][4].data[3]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[4] {
	    name="sum_both_err";
	    m_data=.projects[0].data.gp[1][4].data[4]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=8;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=0.239805: y=0.239805: z=0.239805: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=-0.100808: y=1.573068: z=-2.655137e-06: }: };
	  view_rows=4;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=0: max=4: };
	  width=5;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.15: max=0.3: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=0.5565717: y=0.871173: z=2.211994: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.407303;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[1] {
       name="EventSample";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GridTableView @[0] {
	  name=;
	  m_data=.projects[0].data.gp[0][2]$$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GridColView;
	   el_def=0;
	   GridColView @[0] {
	    name="Name";
	    m_data=.projects[0].data.gp[0][2].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=16;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[1] {
	    name="Input";
	    m_data=.projects[0].data.gp[0][2].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=5;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	   GridColView @[2] {
	    name="Output";
	    m_data=.projects[0].data.gp[0][2].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    text_width=5;
	    scale_on=1;
	    mat_layout=BOT_ZERO;
	    mat_image=0;
	    mat_odd_vert=1;
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=6;
	  view_range {min=0: max=5: };
	  display_on=1;
	  manip_ctrl_on=1;
	  col_n=5;
	  col_range {min=0: max=2: };
	  width=1;
	  grid_on=1;
	  header_on=1;
	  row_num_on=0;
	  two_d_font=0;
	  two_d_font_scale=350;
	  mat_val_text=0;
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=1;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  grid_margin=0.01;
	  grid_line_size=0.005;
	  row_num_width=4;
	  mat_block_spc=0.1;
	  mat_block_height=0;
	  mat_rot=0;
	  mat_trans=0.6;
	  mat_size_range {min=4: max=16: };
	  text_size_range {min=0.02: max=0.05: };
	  click_vals=0;
	  lmb_val=1;
	  mmb_val=0;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=1.5325: y=0.5174999: z=1.443747: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.453747;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3DataViewFrame @[2] {
       name="EpochOutputData";
       m_data=NULL;
       visible=1;
       root_view {
	name=;
	m_data=NULL;
	m_transform=NULL;
	children {
	 name=;
	 el_typ=T3DataView;
	 el_def=0;
	 GraphTableView @[0] {
	  name=;
	  m_data=$.projects[0].data.gp[1][1]$;
FloatTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name=;
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="batch";
	    m_data=.projects[0].data.gp[1][1].data[0]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="epoch";
	    m_data=.projects[0].data.gp[1][1].data[1]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=50: fix_max=0: max=50: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="avg_sse";
	    m_data=.projects[0].data.gp[1][1].data[2]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="cnt_err";
	    m_data=.projects[0].data.gp[1][1].data[3]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="avg_ext_rew";
	    m_data=.projects[0].data.gp[1][1].data[4]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="avg_cycles";
	    m_data=.projects[0].data.gp[1][1].data[5]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="epoch_time_tot";
	    m_data=.projects[0].data.gp[1][1].data[6]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="epoch_time_usr";
	    m_data=.projects[0].data.gp[1][1].data[7]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="sum_min_dist";
	    m_data=.projects[0].data.gp[1][1].data[8]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="sum_name_err";
	    m_data=.projects[0].data.gp[1][1].data[9]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    name="sum_both_err";
	    m_data=.projects[0].data.gp[1][1].data[10]$$;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  view_rows=10000;
	  view_range {min=0: max=-1: };
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=MEDIUM;
	  point_spacing=1;
	  bar_space=0.2;
	  label_spacing=-1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="epoch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=49: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=49: };
	   range {min=0: max=49: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  z_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name="batch";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=-6e-07: max=6e-07: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  plot_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="sum_min_dist";
	   fixed_range {fix_min=1: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  plot_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="sum_both_err";
	   fixed_range {fix_min=1: min=0: fix_max=0: max=0: };
	   color {name="red": r=1: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=6e-19: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=SQUARE;
	   alt_y=0;
	  };
	  plot_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name="cnt_sm_nm";
	   fixed_range {fix_min=0: min=0: fix_max=0: max=26: };
	   color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	   data_range {min=21: max=26: };
	   range {min=21: max=26: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=DIAMOND;
	   alt_y=0;
	  };
	  plot_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=TRIANGLE;
	   alt_y=0;
	  };
	  plot_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	   color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	   data_range {min=0: max=1: };
	   range {min=0: max=1: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=PLUS;
	   alt_y=0;
	  };
	  plot_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CROSS;
	   alt_y=0;
	  };
	  plot_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=STAR;
	   alt_y=0;
	  };
	  plot_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=MINUS;
	   alt_y=0;
	  };
	  alt_y_1=0;
	  alt_y_2=0;
	  alt_y_3=0;
	  alt_y_4=0;
	  alt_y_5=0;
	  err_1 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_2 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_3 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_4 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_5 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_6 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_7 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_8 {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   line_style=SOLID;
	   point_style=CIRCLE;
	   alt_y=0;
	  };
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED_COLOR;
	  color_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  colorscale {
	   name="ColorScale";
	   chunks=133;
	   min=-1;
	   max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs[0]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name=;
	   m_data=NULL;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   data_range {min=0: max=0: };
	   range {min=0: max=0: };
	   n_ticks=10;
	   axis_length=1;
	   row_num=0;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=0.8: g=0.8: b=0.8: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       stereo_view=STEREO_NONE;
       saved_views {
	name=;
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="View 0";
	 view_saved=1;
	 pos {x=1.4275: y=0.4449999: z=1.624621: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.637121;
	};
	T3SavedView @[1] {
	 name="View 1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="View 2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="View 3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="View 4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="View 5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name=;
    el_typ=DockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItemBase;
      el_def=0;
      UserDataItem @[0] {
       name="view_win_lft";
       value 6 0=0;
       val_type_fixed=0;
      };
      UserDataItem @[1] {
       name="view_win_top";
       value 6 0=-0.02140077762305737;
       val_type_fixed=0;
      };
      UserDataItem @[2] {
       name="view_win_wd";
       value 6 0=0.05961893126368523;
       val_type_fixed=0;
      };
      UserDataItem @[3] {
       name="view_win_ht";
       value 6 0=0.7587548494338989;
       val_type_fixed=0;
      };
      UserDataItem @[4] {
       name="view_win_iconified";
       value 1 0=0;
       val_type_fixed=0;
      };
      UserDataItem @[5] {
       name="view_visible";
       value 1 0=0;
       val_type_fixed=0;
      };
     };
     name="Tools";
     m_data=NULL;
     visible=0;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 last_change_desc=;
 networks {
  name=;
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {
     name="norm_err";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[1] {
     name="ext_rew";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[2] {
     name="maxda";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[3] {
     name="minus_output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[4] {
     name="minus_cycles";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[5] {
     name="ct_cycle";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[6] {
     name="phase_no";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[7] {
     name="phase";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[8] {
     name="sse";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[9] {
     name="output_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[10] {
     name="trial_name";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[11] {
     name="group_name";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[12] {
     name="time";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[13] {
     name="cycle";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[14] {
     name="tick";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[15] {
     name="trial";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[16] {
     name="group";
     value 1 0=0;
     val_type_fixed=1;
    };
    UserDataItem @[17] {
     name="epoch";
     value 1 0=1;
     val_type_fixed=1;
    };
    UserDataItem @[18] {
     name="batch";
     value 1 0=0;
     val_type_fixed=1;
    };
   };
   name="ActPrimeNetwork";
   desc=;
   specs {
    name=;
    el_typ=BaseSpec;
    el_def=0;
    LeabraUnitSpec @[0] {
     name="UnitSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_con_type=LeabraCon;
     bias_spec {type=LeabraBiasSpec: spec=.projects[0].networks[0].specs[1].children[0]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {gelin=0: thr=0.25: gain=600: nvar=0.005: avg_dt=0.005: avg_init=0.15: i_thr=STD: };
     spike {rise=0: decay=0.05: g_gain=5: window=3: eq_gain=10: eq_dt=0.02: };
     spike_misc {
      exp_slope=0.02;
      spk_thr=1.2;
      clamp_max_p=0.11;
      clamp_type=REGULAR;
      vm_r=0.3;
      vm_dend=0.3;
      vm_dend_dt=0.16;
      vm_dend_time=6.25;
     };
     opt_thresh {send=0.1: delta=0.005: phase_dif=0: };
     maxda {val=INET_DA: inet_scale=1: lay_avg_thr=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=1: range=1: scale=1: };
     v_m_init {name="": type=UNIFORM: mean=0.15: var=0: par=1: };
     dt {integ=1: vm=0.2: net=0.7: midpoint=0: d_vm_max=0.025: vm_eq_cyc=0: vm_eq_dt=1: integ_time=1: vm_time=5: net_time=1.428571: };
     act_avg {l_gain=3: l_dt=0.005: ml_dt=0.4: m_dt=0.1: s_dt=0.2: ss_dt=1: use_nd=0: l_time=200: ml_time=2.5: m_time=10: s_time=5: ss_time=1: };
     g_bar {e=1: l=0.1: i=1: h=0.1: a=0.5: };
     e_rev {e=1: l=0.15: i=0.15: h=1: a=0: };
     hyst {on=0: b_inc_dt=0.01: b_dec_dt=0.05: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
     acc {on=0: b_inc_dt=0.01: b_dec_dt=0.01: a_thr=0.5: d_thr=0.1: g_dt=0.1: init=1: trl=0: };
     adapt {
      on=0;
      dt=0.007;
      vm_gain=0.04;
      spike_gain=0.00805;
      interval=10;
      dt_time=142.8571;
     };
     depress {on=0: rec=0.2: asymp_act=0.5: depl=0.2105263: interval=1: max_amp=2: };
     syn_delay {
      on=0;
      delay=4;
     };
     da_mod {on=0: mod=PLUS_CONT: gain=0.1: };
     noise_type=VM_NOISE;
     noise {name="": type=GAUSSIAN: mean=0: var=0.001: par=1: };
     noise_adapt {trial_fixed=1: k_pos_noise=0: mode=FIXED_NOISE: min_pct=0.5: min_pct_c=0.5: };
     noise_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=1;
      cur_val=0;
     };
    };
    LeabraConSpec @[1] {
     name="ConSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="BiasSpec_0";
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       children {
	name=;
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-5: max=5: sym=0: };
       learn_rule=LEABRA_CHL;
       inhib=0;
       wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
       wt_scale_init {init=0: abs=1: rel=1: };
       lrate=0.01;
       cur_lrate=0.01;
       lrs_value=EPOCH;
       lrate_sched {
	name=;
	el_typ=SchedItem;
	el_def=0;
	last_ctr=-1;
	default_val=1;
	interpolate=0;
	cur_val=1;
       };
       wt_sig {gain=6: off=1.25: };
       lmix {hebb=0.05: err=0.95: err_sb=1: };
       xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
       savg_cor {cor=1: thresh=0.01: norm_con_n=0: };
       rel_net_adapt {
	on=0;
	trg_fm_input=0.85;
	trg_fm_output=0.15;
	trg_lateral=0;
	trg_sum=1;
	tol_lg=0.05;
	tol_sm=0.2;
	rel_lrate=0.1;
       };
       dwt_thresh=0.1;
      };
     };
     rnd {name="": type=UNIFORM: mean=0.5: var=0.25: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=1: };
     learn_rule=LEABRA_CHL;
     inhib=0;
     wt_scale {abs=1: rel=1: sem_extra=2: old=0: };
     wt_scale_init {init=0: abs=1: rel=1: };
     lrate=0.01;
     cur_lrate=0.01;
     lrs_value=EPOCH;
     lrate_sched {
      name=;
      el_typ=SchedItem;
      el_def=0;
      last_ctr=-1;
      default_val=1;
      interpolate=0;
      cur_val=1;
     };
     wt_sig {gain=6: off=1.25: };
     lmix {hebb=0.05: err=0.95: err_sb=1: };
     xcal {s_mix=0.9: m_mix=0.1: thr_l_mix=0.01: thr_m_mix=0.99: d_rev=0.1: d_gain=1: d_thr=0.0001: d_rev_ratio=9: };
     savg_cor {cor=1: thresh=0.01: norm_con_n=0: };
     rel_net_adapt {
      on=0;
      trg_fm_input=0.85;
      trg_fm_output=0.15;
      trg_lateral=0;
      trg_sum=1;
      tol_lg=0.05;
      tol_sm=0.2;
      rel_lrate=0.1;
     };
    };
    LeabraLayerSpec @[2] {
     name="LayerSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=LeabraLayerSpec;
      el_def=0;
      LeabraLayerSpec @[0] {
       name="HiddenLayer";
       desc=;
       unique{ kwta;       };
       children {
	name=;
	el_typ=LeabraLayerSpec;
	el_def=0;
       };
       inhib_group=ENTIRE_LAYER;
       inhib {
	type=KWTA_AVG_INHIB;
	kwta_pt=0.5;
	min_i=0;
	fb_act_thr=0;
	ff_pct=0;
	fb_max_dt=0.1;
	comp_thr=0.5;
	comp_gain=2;
	gp_pt=0.2;
       };
       kwta {k_from=USE_K: k=6: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       gp_kwta {k_from=USE_PCT: k=12: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
       tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
       i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
       adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
       clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
       decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
       ct_inhib_mod {
	use_sin=0;
	burst_i=0.02;
	trough_i=0.02;
	use_fin=0;
	inhib_i=0;
       };
       abs_net_adapt {
	on=0;
	trg_net=0.5;
	tol=0.1;
	abs_lrate=0.1;
       };
      };
     };
     inhib_group=ENTIRE_LAYER;
     inhib {
      type=KWTA_AVG_INHIB;
      kwta_pt=0.5;
      min_i=0;
      fb_act_thr=0;
      ff_pct=0;
      fb_max_dt=0.1;
      comp_thr=0.5;
      comp_gain=2;
      gp_pt=0.2;
     };
     kwta {k_from=USE_K: k=6: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     gp_kwta {k_from=USE_PCT: k=12: pct=0.23: pat_q=0.5: diff_act_pct=0: act_pct=0.1: gp_i=0: gp_g=0.5: };
     tie_brk {on=0: k_thr=1: diff_thr=0.2: thr_gain=0.005: loser_gain=1: };
     i_netin_mod {on=0: max_mod=0.02: mod_gain=10: max_top_k=0.4: };
     adapt_i {type=NONE: tol=0.05: p_dt=0: mx_d=0.2: l=0.2: a_dt=0.005: };
     clamp {hard=1: gain=0.5: max_plus=0: plus=0.01: min_clamp=0.5: };
     decay {event=1: phase=1: phase2=0: clamp_phase2=0: };
     ct_inhib_mod {
      use_sin=0;
      burst_i=0.02;
      trough_i=0.02;
      use_fin=0;
      inhib_i=0;
     };
     abs_net_adapt {
      on=0;
      trg_net=0.5;
      tol=0.1;
      abs_lrate=0.1;
     };
    };
    FullPrjnSpec @[3] {
     name="FullPrjnSpec_0";
     desc=;
     unique{      };
     children {
      name=;
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     add_rnd_wts=0;
    };
   };
   layers {
    name=;
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    max_size {x=5: y=6: z=3: };
    LeabraLayer @[0] {
     name="Input";
     desc=;
     flags=;
     layer_type=INPUT;
     pos {x=0: y=0: z=0: };
     disp_scale=1;
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=5: y=5: n_not_xy=0: n=25: };
     scaled_act_geom {x=5: y=5: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[1].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=5: y=5: n_not_xy=0: n=25: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=.projects[0].networks[0].specs[0]$$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.228: max=0.95: max_i=2: };
     acts_m {cmpt=1: avg=0.228: max=0.95: max_i=2: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=6: pct=0.24: pct_c=0.76: adth_k=3: k_ithr=0: k1_ithr=0: ithr_r=0: ithr_diff=0: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.24: i_kwta_pt=0.5: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=$.projects[0].networks[0].specs[2]$: };
     hard_clamped=0;
     avg_l_avg=0;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
    LeabraLayer @[1] {
     name="Hidden";
     desc=;
     flags=;
     layer_type=HIDDEN;
     pos {x=0: y=1: z=1: };
     disp_scale=1;
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=5: y=5: n_not_xy=0: n=25: };
     scaled_act_geom {x=5: y=5: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Input";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[0]$$;
       spec {type=FullPrjnSpec: spec=.projects[0].networks[0].specs[3]$$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=.projects[0].networks[0].specs[1]$$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
      LeabraPrjn @[1] {
       name="Fm_Output";
       from_type=CUSTOM;
       from=$.projects[0].networks[0].layers[2]$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[0].specs[3]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[1]$: };
       recv_idx=1;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[2].projections[0];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=5: y=5: n_not_xy=0: n=25: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[0].specs[0]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.27554: max=0.9484442: max_i=9: };
     acts_m {cmpt=1: avg=0.27554: max=0.9484442: max_i=9: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=6: pct=0.24: pct_c=0.76: adth_k=3: k_ithr=3.580426: k1_ithr=2.194947: ithr_r=0.4893239: ithr_diff=0.3869593: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.24: i_kwta_pt=0.5: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=.projects[0].networks[0].specs[2].children[0]$$: };
     hard_clamped=0;
     avg_l_avg=1.504816e-36;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
    LeabraLayer @[2] {
     name="Output";
     desc=;
     flags=;
     layer_type=TARGET;
     pos {x=0: y=0: z=2: };
     disp_scale=1;
     un_geom {x=5: y=5: n_not_xy=0: n=25: };
     unit_groups=0;
     gp_geom {x=0: y=0: n_not_xy=0: n=0: };
     gp_spc {x=0: y=0: };
     act_geom {x=5: y=5: n_not_xy=0: n=25: };
     scaled_act_geom {x=5: y=5: n_not_xy=0: n=1: };
     projections {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Hidden";
       from_type=CUSTOM;
       from=.projects[0].networks[0].layers[1]$$;
       spec {type=FullPrjnSpec: spec=$.projects[0].networks[0].specs[3]$: };
       con_type=LeabraCon;
       recvcons_type=LeabraRecvCons;
       sendcons_type=LeabraSendCons;
       con_spec {type=LeabraConSpec: spec=$.projects[0].networks[0].specs[1]$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       direction=DIR_UNKNOWN;
       netin_avg=0;
       netin_rel=0;
       avg_netin_avg=0;
       avg_netin_avg_sum=0;
       avg_netin_rel=0;
       avg_netin_rel_sum=0;
       avg_netin_n=0;
       trg_netin_rel=-1;
      };
     };
     send_prjns {
      name=;
      el_typ=LeabraPrjn;
      el_def=0;
	    Projection_Group @. = [0] = LeabraPrjn .projects[0].networks[0].layers[1].projections[1];
     };
     units {
      name=;
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      unique_geom=0;
      geom {x=5: y=5: n_not_xy=0: n=25: };
      units_lesioned=0;
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.projects[0].networks[0].specs[0]$: };
     ext_flag=;
     dmem_dist=DMEM_DIST_DEFAULT;
     dist {
      fm_input=-1;
      fm_output=-1;
     };
     output_name=;
     sse=0;
     icon_value=0;
     netin {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     netin_top_k {cmpt=1: avg=0: max=0: max_i=-1: };
     i_thrs {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts {cmpt=1: avg=0: max=-3.402823e+38: max_i=-1: };
     acts_p {cmpt=1: avg=0.2149078: max=0.9385344: max_i=21: };
     acts_m {cmpt=1: avg=0.2149078: max=0.9385344: max_i=21: };
     phase_dif_ratio=1;
     acts_p2 {cmpt=1: avg=0: max=0: max_i=-1: };
     acts_m2 {cmpt=1: avg=0: max=0: max_i=-1: };
     kwta {k=6: pct=0.24: pct_c=0.76: adth_k=3: k_ithr=4.027245: k1_ithr=2.829095: ithr_r=0.3531257: ithr_diff=0.2975111: tie_brk_gain=0: eff_loser_gain=1: tie_brk=0: };
     i_val {kwta=0: g_i=0: gp_g_i=0: g_i_orig=0: i_netin_mod=0: };
     un_g_i {cmpt=0: avg=0: max=-3.402823e+38: max_i=-1: };
     adapt_i {avg_avg=0.24: i_kwta_pt=0.5: g_bar_i=1: g_bar_l=0.1: };
     maxda=0;
     act_max_avg=0;
     spec {type=LeabraLayerSpec: spec=$.projects[0].networks[0].specs[2]$: };
     hard_clamped=0;
     avg_l_avg=0;
     dav=0;
     avg_netin {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_sum {cmpt=1: avg=0: max=0: max_i=-1: };
     avg_netin_n=0;
     norm_err=0;
     da_updt=0;
    };
   };
   view_objs {
    name=;
    el_typ=NetViewObj;
    el_def=0;
   };
   flags=;
   auto_build=AUTO_BUILD;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   batch=0;
   epoch=0;
   group=0;
   trial=0;
   tick=0;
   cycle=0;
   time=0;
   group_name=;
   trial_name=;
   output_name=;
   sse_unit_avg=0;
   sse_sqrt=0;
   sse=0;
   sum_sse=0;
   avg_sse=0;
   cnt_err_tol=0;
   cnt_err=0;
   pct_err=0;
   pct_cor=0;
   cur_sum_sse=0;
   avg_sse_n=0;
   cur_cnt_err=0;
   train_time {name="": start={usr=7048: sys=1203: tot=280359465: }: end={usr=9612: sys=1430: tot=280362260: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   epoch_time {name="": start={usr=9129: sys=2624: tot=128799802286: }: end={usr=9363: sys=2647: tot=128799802630: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   trial_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   settle_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   cycle_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   wt_sync_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   misc_time {name="": start={usr=0: sys=0: tot=0: }: end={usr=0: sys=0: tot=0: }: used={usr=0: sys=0: tot=0: }: s_used=0: n_used=0: };
   threads {
    run_time {name="": s_used=0: n_used=0: };
    sync_time {name="": s_used=0: n_used=0: };
    total_time {name="": s_used=0: n_used=0: };
    n_wake_in_sync=0;
    run_time_pct=0;
    sync_time_pct=0;
    wake_in_sync_pct=4.885694261525575e-159;
    interleave=1;
    ignore_lay_sync=0;
   };
   dmem_sync_level=DMEM_SYNC_NETWORK;
   dmem_nprocs=1;
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   lay_layout=THREE_D;
   n_units=75;
   n_cons=1875;
   max_size {x=5: y=6: z=3: };
   learn_rule=LEABRA_CHL;
   phase_order=MINUS_PLUS;
   no_plus_test=1;
   sequence_init=DO_NOTHING;
   phase=MINUS_PHASE;
   nothing_phase=0;
   phase_no=0;
   phase_max=1;
   ct_cycle=35;
   time_inc=1;
   cycle_max=40;
   mid_minus_cycle=-1;
   min_cycles=15;
   min_cycles_phase2=35;
   ct_time {
    minus=50;
    plus=20;
    inhib=1;
    n_avg_only_epcs=1;
    total_cycles=71;
    inhib_start=70;
   };
   ct_sravg {
    start=30;
    end=1;
    interval=1;
    plus_s_st=19;
    force_con=0;
   };
   ct_sin_i {
    start=30;
    duration=20;
    n_pi=2;
    burst_i=0.02;
    trough_i=0.02;
   };
   ct_fin_i {
    start=20;
    end=25;
    inhib_i=0;
   };
   sravg_vals {
    s_sum=0;
    s_nrm=0;
    m_sum=0;
    m_nrm=0;
    do_s=0;
   };
   ct_lrn_trig {
    plus_lrn_cyc=-1;
    davg_dt=0.1;
    davg_s_dt=0.05;
    davg_m_dt=0.03;
    davg_l_dt=0.0005;
    thr_min=0;
    thr_max=0.5;
    loc_max_cyc=8;
    loc_max_dec=0.01;
    lrn_delay=40;
    lrn_refract=100;
    davg_l_init=0;
    davg_max_init=0.001;
    davg_time=10;
    davg_s_time=20;
    davg_m_time=33.33334;
    davg_l_time=2000;
    lrn_delay_inc=0.025;
    lrn_refract_inc=0.01;
   };
   lrn_trig {
    davg=0;
    davg_s=0;
    davg_m=0;
    davg_smd=0;
    davg_l=0;
    davg_max=0.001;
    cyc_fm_inc=0;
    cyc_fm_dec=0;
    loc_max=0;
    lrn_max=0;
    lrn_trig=0;
    lrn=0;
    lrn_min=0;
    lrn_min_cyc=0;
    lrn_min_thr=0;
    lrn_min_sum=0;
    lrn_min_cyc_sum=0;
    lrn_min_thr_sum=0;
    lrn_plus=0;
    lrn_plus_cyc=0;
    lrn_plus_thr=0;
    lrn_plus_sum=0;
    lrn_plus_cyc_sum=0;
    lrn_plus_thr_sum=0;
    lrn_noth=0;
    lrn_noth_cyc=0;
    lrn_noth_thr=0;
    lrn_noth_sum=0;
    lrn_noth_cyc_sum=0;
    lrn_noth_thr_sum=0;
    lrn_stats_n=0;
   };
   minus_cycles=0;
   avg_cycles=0;
   avg_cycles_sum=0;
   avg_cycles_n=0;
   minus_output_name=;
   net_misc {
    cyc_syn_dep=0;
    syn_dep_int=20;
   };
   send_pct=0;
   send_pct_n=0;
   send_pct_tot=0;
   avg_send_pct=0;
   avg_send_pct_sum=0;
   avg_send_pct_n=0;
   maxda_stopcrit=0.005;
   maxda=0;
   trg_max_act_stopcrit=1;
   trg_max_act=0;
   ext_rew=0;
   ext_rew_avail=0;
   norew_val=0.5;
   avg_ext_rew=0;
   pvlv_pvi=0;
   pvlv_pvr=0;
   pvlv_lve=0;
   pvlv_lvi=0;
   pv_detected=0;
   avg_ext_rew_sum=0;
   avg_ext_rew_n=0;
   off_errs=1;
   on_errs=1;
   norm_err=0;
   avg_norm_err=1;
   avg_norm_err_sum=0;
   avg_norm_err_n=0;
  };
 };
};
